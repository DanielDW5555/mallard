
mallard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cd0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08009e7c  08009e7c  00019e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ecc  08009ecc  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009ecc  08009ecc  00019ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ed4  08009ed4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ed4  08009ed4  00019ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ed8  08009ed8  00019ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009edc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000898  20000090  08009f6c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000928  08009f6c  00020928  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e60a  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bcb  00000000  00000000  0003e6ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  00042298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001178  00000000  00000000  00043578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bf4b  00000000  00000000  000446f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016464  00000000  00000000  0007063b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103aeb  00000000  00000000  00086a9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018a58a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f9c  00000000  00000000  0018a5e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000090 	.word	0x20000090
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08009e64 	.word	0x08009e64

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000094 	.word	0x20000094
 80001e8:	08009e64 	.word	0x08009e64

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <setTime>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Set RTC Time
void setTime(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b086      	sub	sp, #24
 80004e8:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sTime.Hours = 0x10;
 80004ea:	2310      	movs	r3, #16
 80004ec:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x20;
 80004ee:	2320      	movs	r3, #32
 80004f0:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x30;
 80004f2:	2330      	movs	r3, #48	; 0x30
 80004f4:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80004f6:	2300      	movs	r3, #0
 80004f8:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80004fa:	2300      	movs	r3, #0
 80004fc:	617b      	str	r3, [r7, #20]

	sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 80004fe:	2304      	movs	r3, #4
 8000500:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JULY;
 8000502:	2307      	movs	r3, #7
 8000504:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x9;
 8000506:	2309      	movs	r3, #9
 8000508:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x21;
 800050a:	2321      	movs	r3, #33	; 0x21
 800050c:	70fb      	strb	r3, [r7, #3]
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 800050e:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000512:	2101      	movs	r1, #1
 8000514:	4803      	ldr	r0, [pc, #12]	; (8000524 <setTime+0x40>)
 8000516:	f004 fb8b 	bl	8004c30 <HAL_RTCEx_BKUPWrite>
}
 800051a:	bf00      	nop
 800051c:	3718      	adds	r7, #24
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20000144 	.word	0x20000144

08000528 <setAlarm>:

// Set RTC Alarm
void setAlarm(void)
{
 8000528:	b480      	push	{r7}
 800052a:	b08d      	sub	sp, #52	; 0x34
 800052c:	af00      	add	r7, sp, #0
	RTC_AlarmTypeDef sAlarm;
	sAlarm.AlarmTime.Hours = 0x10;
 800052e:	2310      	movs	r3, #16
 8000530:	713b      	strb	r3, [r7, #4]
	sAlarm.AlarmTime.Minutes = 0x20;
 8000532:	2320      	movs	r3, #32
 8000534:	717b      	strb	r3, [r7, #5]
	sAlarm.AlarmTime.Seconds = 0x32;
 8000536:	2332      	movs	r3, #50	; 0x32
 8000538:	71bb      	strb	r3, [r7, #6]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 800053a:	2300      	movs	r3, #0
 800053c:	60bb      	str	r3, [r7, #8]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800053e:	2300      	movs	r3, #0
 8000540:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000546:	2300      	movs	r3, #0
 8000548:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800054a:	2300      	movs	r3, #0
 800054c:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800054e:	2300      	movs	r3, #0
 8000550:	627b      	str	r3, [r7, #36]	; 0x24
	sAlarm.AlarmDateWeekDay = 0x9;
 8000552:	2309      	movs	r3, #9
 8000554:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	sAlarm.Alarm = RTC_ALARM_A;
 8000558:	f44f 7380 	mov.w	r3, #256	; 0x100
 800055c:	62fb      	str	r3, [r7, #44]	; 0x2c
}
 800055e:	bf00      	nop
 8000560:	3734      	adds	r7, #52	; 0x34
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
	...

0800056c <HAL_RTC_AlarmAEventCallback>:

// Checks to see if RTC alarm has been activated
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	alarm = 1;
 8000574:	4b04      	ldr	r3, [pc, #16]	; (8000588 <HAL_RTC_AlarmAEventCallback+0x1c>)
 8000576:	2201      	movs	r2, #1
 8000578:	701a      	strb	r2, [r3, #0]
}
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	200000ac 	.word	0x200000ac

0800058c <alarmProcess>:

// Function calls when alarm is active
void alarmProcess(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	// Blinky!

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000590:	2180      	movs	r1, #128	; 0x80
 8000592:	4808      	ldr	r0, [pc, #32]	; (80005b4 <alarmProcess+0x28>)
 8000594:	f000 fef0 	bl	8001378 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8000598:	20fa      	movs	r0, #250	; 0xfa
 800059a:	f000 fc0d 	bl	8000db8 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800059e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005a2:	4804      	ldr	r0, [pc, #16]	; (80005b4 <alarmProcess+0x28>)
 80005a4:	f000 fee8 	bl	8001378 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 80005a8:	20fa      	movs	r0, #250	; 0xfa
 80005aa:	f000 fc05 	bl	8000db8 <HAL_Delay>
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	48000400 	.word	0x48000400

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f000 fb87 	bl	8000cce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f824 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 f986 	bl	80008d4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005c8:	f000 f8c4 	bl	8000754 <MX_LPUART1_UART_Init>
  MX_USB_HOST_Init();
 80005cc:	f009 f848 	bl	8009660 <MX_USB_HOST_Init>
  MX_RTC_Init();
 80005d0:	f000 f8ee 	bl	80007b0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  setTime();
 80005d4:	f7ff ff86 	bl	80004e4 <setTime>
  setAlarm();
 80005d8:	f7ff ffa6 	bl	8000528 <setAlarm>

  // Configuyre write access to timer
	 RTC->WPR = 0xCA;
 80005dc:	4b09      	ldr	r3, [pc, #36]	; (8000604 <main+0x4c>)
 80005de:	22ca      	movs	r2, #202	; 0xca
 80005e0:	625a      	str	r2, [r3, #36]	; 0x24
	 RTC->WPR = 0x53;
 80005e2:	4b08      	ldr	r3, [pc, #32]	; (8000604 <main+0x4c>)
 80005e4:	2253      	movs	r2, #83	; 0x53
 80005e6:	625a      	str	r2, [r3, #36]	; 0x24
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005e8:	f009 f860 	bl	80096ac <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */


    if(alarm)
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <main+0x50>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d0f9      	beq.n	80005e8 <main+0x30>
    {
    	alarmProcess();
 80005f4:	f7ff ffca 	bl	800058c <alarmProcess>
    	setTime();
 80005f8:	f7ff ff74 	bl	80004e4 <setTime>
    	alarm = 0;
 80005fc:	4b02      	ldr	r3, [pc, #8]	; (8000608 <main+0x50>)
 80005fe:	2200      	movs	r2, #0
 8000600:	701a      	strb	r2, [r3, #0]
    MX_USB_HOST_Process();
 8000602:	e7f1      	b.n	80005e8 <main+0x30>
 8000604:	40002800 	.word	0x40002800
 8000608:	200000ac 	.word	0x200000ac

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b0ba      	sub	sp, #232	; 0xe8
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000616:	2244      	movs	r2, #68	; 0x44
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f009 fb52 	bl	8009cc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	228c      	movs	r2, #140	; 0x8c
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f009 fb44 	bl	8009cc4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800063c:	f002 fb7a 	bl	8002d34 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000640:	4b42      	ldr	r3, [pc, #264]	; (800074c <SystemClock_Config+0x140>)
 8000642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000646:	4a41      	ldr	r2, [pc, #260]	; (800074c <SystemClock_Config+0x140>)
 8000648:	f023 0318 	bic.w	r3, r3, #24
 800064c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000650:	231c      	movs	r3, #28
 8000652:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000656:	2301      	movs	r3, #1
 8000658:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000662:	2301      	movs	r3, #1
 8000664:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 800066e:	2390      	movs	r3, #144	; 0x90
 8000670:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800067a:	2301      	movs	r3, #1
 800067c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000680:	2305      	movs	r3, #5
 8000682:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 71;
 8000686:	2347      	movs	r3, #71	; 0x47
 8000688:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000692:	2302      	movs	r3, #2
 8000694:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8000698:	2306      	movs	r3, #6
 800069a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 fbda 	bl	8002e5c <HAL_RCC_OscConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006ae:	f000 f9ad 	bl	8000a0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b2:	230f      	movs	r3, #15
 80006b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2303      	movs	r3, #3
 80006ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80006be:	2390      	movs	r3, #144	; 0x90
 80006c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80006d6:	2100      	movs	r1, #0
 80006d8:	4618      	mov	r0, r3
 80006da:	f002 ffe5 	bl	80036a8 <HAL_RCC_ClockConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80006e4:	f000 f992 	bl	8000a0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPUART1
 80006e8:	4b19      	ldr	r3, [pc, #100]	; (8000750 <SystemClock_Config+0x144>)
 80006ea:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80006f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80006f8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006fc:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80006fe:	2301      	movs	r3, #1
 8000700:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8000702:	2305      	movs	r3, #5
 8000704:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
 8000706:	2314      	movs	r3, #20
 8000708:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800070a:	2302      	movs	r3, #2
 800070c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800070e:	2302      	movs	r3, #2
 8000710:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000712:	2302      	movs	r3, #2
 8000714:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000716:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800071a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	4618      	mov	r0, r3
 8000720:	f003 f9c8 	bl	8003ab4 <HAL_RCCEx_PeriphCLKConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x122>
  {
    Error_Handler();
 800072a:	f000 f96f 	bl	8000a0c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800072e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000732:	f002 fb1d 	bl	8002d70 <HAL_PWREx_ControlVoltageScaling>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x134>
  {
    Error_Handler();
 800073c:	f000 f966 	bl	8000a0c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000740:	f003 fcb4 	bl	80040ac <HAL_RCCEx_EnableMSIPLLMode>
}
 8000744:	bf00      	nop
 8000746:	37e8      	adds	r7, #232	; 0xe8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40021000 	.word	0x40021000
 8000750:	00022020 	.word	0x00022020

08000754 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_LPUART1_UART_Init+0x50>)
 800075a:	4a13      	ldr	r2, [pc, #76]	; (80007a8 <MX_LPUART1_UART_Init+0x54>)
 800075c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_LPUART1_UART_Init+0x50>)
 8000760:	4a12      	ldr	r2, [pc, #72]	; (80007ac <MX_LPUART1_UART_Init+0x58>)
 8000762:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_LPUART1_UART_Init+0x50>)
 8000766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800076a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <MX_LPUART1_UART_Init+0x50>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_LPUART1_UART_Init+0x50>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <MX_LPUART1_UART_Init+0x50>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_LPUART1_UART_Init+0x50>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <MX_LPUART1_UART_Init+0x50>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_LPUART1_UART_Init+0x50>)
 800078c:	2200      	movs	r2, #0
 800078e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_LPUART1_UART_Init+0x50>)
 8000792:	f004 fa66 	bl	8004c62 <HAL_UART_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 800079c:	f000 f936 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200000c0 	.word	0x200000c0
 80007a8:	40008000 	.word	0x40008000
 80007ac:	00033324 	.word	0x00033324

080007b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b092      	sub	sp, #72	; 0x48
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80007b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80007c6:	2300      	movs	r3, #0
 80007c8:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	222c      	movs	r2, #44	; 0x2c
 80007ce:	2100      	movs	r1, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f009 fa77 	bl	8009cc4 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007d6:	4b3c      	ldr	r3, [pc, #240]	; (80008c8 <MX_RTC_Init+0x118>)
 80007d8:	4a3c      	ldr	r2, [pc, #240]	; (80008cc <MX_RTC_Init+0x11c>)
 80007da:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007dc:	4b3a      	ldr	r3, [pc, #232]	; (80008c8 <MX_RTC_Init+0x118>)
 80007de:	2200      	movs	r2, #0
 80007e0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007e2:	4b39      	ldr	r3, [pc, #228]	; (80008c8 <MX_RTC_Init+0x118>)
 80007e4:	227f      	movs	r2, #127	; 0x7f
 80007e6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007e8:	4b37      	ldr	r3, [pc, #220]	; (80008c8 <MX_RTC_Init+0x118>)
 80007ea:	22ff      	movs	r2, #255	; 0xff
 80007ec:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007ee:	4b36      	ldr	r3, [pc, #216]	; (80008c8 <MX_RTC_Init+0x118>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80007f4:	4b34      	ldr	r3, [pc, #208]	; (80008c8 <MX_RTC_Init+0x118>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007fa:	4b33      	ldr	r3, [pc, #204]	; (80008c8 <MX_RTC_Init+0x118>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000800:	4b31      	ldr	r3, [pc, #196]	; (80008c8 <MX_RTC_Init+0x118>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000806:	4830      	ldr	r0, [pc, #192]	; (80008c8 <MX_RTC_Init+0x118>)
 8000808:	f003 fe2e 	bl	8004468 <HAL_RTC_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000812:	f000 f8fb 	bl	8000a0c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x10;
 8000816:	2310      	movs	r3, #16
 8000818:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x20;
 800081c:	2320      	movs	r3, #32
 800081e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x30;
 8000822:	2330      	movs	r3, #48	; 0x30
 8000824:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000828:	2300      	movs	r3, #0
 800082a:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800082c:	2300      	movs	r3, #0
 800082e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000830:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000834:	2201      	movs	r2, #1
 8000836:	4619      	mov	r1, r3
 8000838:	4823      	ldr	r0, [pc, #140]	; (80008c8 <MX_RTC_Init+0x118>)
 800083a:	f003 fe90 	bl	800455e <HAL_RTC_SetTime>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8000844:	f000 f8e2 	bl	8000a0c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000848:	2301      	movs	r3, #1
 800084a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_AUGUST;
 800084e:	2308      	movs	r3, #8
 8000850:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x12;
 8000854:	2312      	movs	r3, #18
 8000856:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 800085a:	2300      	movs	r3, #0
 800085c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000860:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000864:	2201      	movs	r2, #1
 8000866:	4619      	mov	r1, r3
 8000868:	4817      	ldr	r0, [pc, #92]	; (80008c8 <MX_RTC_Init+0x118>)
 800086a:	f003 ff15 	bl	8004698 <HAL_RTC_SetDate>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8000874:	f000 f8ca 	bl	8000a0c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x10;
 8000878:	2310      	movs	r3, #16
 800087a:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x20;
 800087c:	2320      	movs	r3, #32
 800087e:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x35;
 8000880:	2335      	movs	r3, #53	; 0x35
 8000882:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000888:	2300      	movs	r3, #0
 800088a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_RTC_Init+0x120>)
 8000892:	61bb      	str	r3, [r7, #24]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x12;
 800089c:	2312      	movs	r3, #18
 800089e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 80008a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	2201      	movs	r2, #1
 80008ac:	4619      	mov	r1, r3
 80008ae:	4806      	ldr	r0, [pc, #24]	; (80008c8 <MX_RTC_Init+0x118>)
 80008b0:	f003 ff7a 	bl	80047a8 <HAL_RTC_SetAlarm_IT>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 80008ba:	f000 f8a7 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	3748      	adds	r7, #72	; 0x48
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000144 	.word	0x20000144
 80008cc:	40002800 	.word	0x40002800
 80008d0:	80808000 	.word	0x80808000

080008d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	; 0x28
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ea:	4b43      	ldr	r3, [pc, #268]	; (80009f8 <MX_GPIO_Init+0x124>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	4a42      	ldr	r2, [pc, #264]	; (80009f8 <MX_GPIO_Init+0x124>)
 80008f0:	f043 0304 	orr.w	r3, r3, #4
 80008f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f6:	4b40      	ldr	r3, [pc, #256]	; (80009f8 <MX_GPIO_Init+0x124>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	f003 0304 	and.w	r3, r3, #4
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000902:	4b3d      	ldr	r3, [pc, #244]	; (80009f8 <MX_GPIO_Init+0x124>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	4a3c      	ldr	r2, [pc, #240]	; (80009f8 <MX_GPIO_Init+0x124>)
 8000908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800090c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090e:	4b3a      	ldr	r3, [pc, #232]	; (80009f8 <MX_GPIO_Init+0x124>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	4b37      	ldr	r3, [pc, #220]	; (80009f8 <MX_GPIO_Init+0x124>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	4a36      	ldr	r2, [pc, #216]	; (80009f8 <MX_GPIO_Init+0x124>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000926:	4b34      	ldr	r3, [pc, #208]	; (80009f8 <MX_GPIO_Init+0x124>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000932:	4b31      	ldr	r3, [pc, #196]	; (80009f8 <MX_GPIO_Init+0x124>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	4a30      	ldr	r2, [pc, #192]	; (80009f8 <MX_GPIO_Init+0x124>)
 8000938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800093c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093e:	4b2e      	ldr	r3, [pc, #184]	; (80009f8 <MX_GPIO_Init+0x124>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800094a:	f002 fa77 	bl	8002e3c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b2a      	ldr	r3, [pc, #168]	; (80009f8 <MX_GPIO_Init+0x124>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	4a29      	ldr	r2, [pc, #164]	; (80009f8 <MX_GPIO_Init+0x124>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095a:	4b27      	ldr	r3, [pc, #156]	; (80009f8 <MX_GPIO_Init+0x124>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800096c:	4823      	ldr	r0, [pc, #140]	; (80009fc <MX_GPIO_Init+0x128>)
 800096e:	f000 fceb 	bl	8001348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
 8000978:	4821      	ldr	r0, [pc, #132]	; (8000a00 <MX_GPIO_Init+0x12c>)
 800097a:	f000 fce5 	bl	8001348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800097e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000984:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <MX_GPIO_Init+0x130>)
 8000986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4619      	mov	r1, r3
 8000992:	481d      	ldr	r0, [pc, #116]	; (8000a08 <MX_GPIO_Init+0x134>)
 8000994:	f000 fb46 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000998:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800099c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4619      	mov	r1, r3
 80009b0:	4812      	ldr	r0, [pc, #72]	; (80009fc <MX_GPIO_Init+0x128>)
 80009b2:	f000 fb37 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin SMPS_PG_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|SMPS_PG_Pin;
 80009b6:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80009ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	480d      	ldr	r0, [pc, #52]	; (8000a00 <MX_GPIO_Init+0x12c>)
 80009cc:	f000 fb2a 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin SMPS_V1_Pin SMPS_EN_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin;
 80009d0:	f44f 5331 	mov.w	r3, #11328	; 0x2c40
 80009d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_GPIO_Init+0x12c>)
 80009ea:	f000 fb1b 	bl	8001024 <HAL_GPIO_Init>

}
 80009ee:	bf00      	nop
 80009f0:	3728      	adds	r7, #40	; 0x28
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40021000 	.word	0x40021000
 80009fc:	48000400 	.word	0x48000400
 8000a00:	48001800 	.word	0x48001800
 8000a04:	10110000 	.word	0x10110000
 8000a08:	48000800 	.word	0x48000800

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <Error_Handler+0x8>
	...

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <HAL_MspInit+0x44>)
 8000a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a22:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <HAL_MspInit+0x44>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6613      	str	r3, [r2, #96]	; 0x60
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <HAL_MspInit+0x44>)
 8000a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <HAL_MspInit+0x44>)
 8000a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3a:	4a08      	ldr	r2, [pc, #32]	; (8000a5c <HAL_MspInit+0x44>)
 8000a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a40:	6593      	str	r3, [r2, #88]	; 0x58
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_MspInit+0x44>)
 8000a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	40021000 	.word	0x40021000

08000a60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a18      	ldr	r2, [pc, #96]	; (8000ae0 <HAL_UART_MspInit+0x80>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d12a      	bne.n	8000ad8 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <HAL_UART_MspInit+0x84>)
 8000a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a86:	4a17      	ldr	r2, [pc, #92]	; (8000ae4 <HAL_UART_MspInit+0x84>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <HAL_UART_MspInit+0x84>)
 8000a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a9a:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_UART_MspInit+0x84>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	4a11      	ldr	r2, [pc, #68]	; (8000ae4 <HAL_UART_MspInit+0x84>)
 8000aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <HAL_UART_MspInit+0x84>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8000ab2:	f002 f9c3 	bl	8002e3c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ab6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000ac8:	2308      	movs	r3, #8
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <HAL_UART_MspInit+0x88>)
 8000ad4:	f000 faa6 	bl	8001024 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000ad8:	bf00      	nop
 8000ada:	3728      	adds	r7, #40	; 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40008000 	.word	0x40008000
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	48001800 	.word	0x48001800

08000aec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0b      	ldr	r2, [pc, #44]	; (8000b28 <HAL_RTC_MspInit+0x3c>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d10f      	bne.n	8000b1e <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <HAL_RTC_MspInit+0x40>)
 8000b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b04:	4a09      	ldr	r2, [pc, #36]	; (8000b2c <HAL_RTC_MspInit+0x40>)
 8000b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2100      	movs	r1, #0
 8000b12:	2029      	movs	r0, #41	; 0x29
 8000b14:	f000 fa4f 	bl	8000fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000b18:	2029      	movs	r0, #41	; 0x29
 8000b1a:	f000 fa68 	bl	8000fee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40002800 	.word	0x40002800
 8000b2c:	40021000 	.word	0x40021000

08000b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <NMI_Handler+0x4>

08000b36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <HardFault_Handler+0x4>

08000b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <MemManage_Handler+0x4>

08000b42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <BusFault_Handler+0x4>

08000b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <UsageFault_Handler+0x4>

08000b4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b7c:	f000 f8fc 	bl	8000d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000b88:	4802      	ldr	r0, [pc, #8]	; (8000b94 <RTC_Alarm_IRQHandler+0x10>)
 8000b8a:	f003 ff49 	bl	8004a20 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000144 	.word	0x20000144

08000b98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <OTG_FS_IRQHandler+0x10>)
 8000b9e:	f000 fe6b 	bl	8001878 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000614 	.word	0x20000614

08000bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb4:	4a14      	ldr	r2, [pc, #80]	; (8000c08 <_sbrk+0x5c>)
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <_sbrk+0x60>)
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d102      	bne.n	8000bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <_sbrk+0x64>)
 8000bca:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <_sbrk+0x68>)
 8000bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <_sbrk+0x64>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d207      	bcs.n	8000bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bdc:	f009 f838 	bl	8009c50 <__errno>
 8000be0:	4603      	mov	r3, r0
 8000be2:	220c      	movs	r2, #12
 8000be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bea:	e009      	b.n	8000c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	4a05      	ldr	r2, [pc, #20]	; (8000c10 <_sbrk+0x64>)
 8000bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20050000 	.word	0x20050000
 8000c0c:	00000400 	.word	0x00000400
 8000c10:	200000b0 	.word	0x200000b0
 8000c14:	20000928 	.word	0x20000928

08000c18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <SystemInit+0x5c>)
 8000c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c22:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <SystemInit+0x5c>)
 8000c24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <SystemInit+0x60>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a11      	ldr	r2, [pc, #68]	; (8000c78 <SystemInit+0x60>)
 8000c32:	f043 0301 	orr.w	r3, r3, #1
 8000c36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <SystemInit+0x60>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <SystemInit+0x60>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a0d      	ldr	r2, [pc, #52]	; (8000c78 <SystemInit+0x60>)
 8000c44:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c48:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c4c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <SystemInit+0x60>)
 8000c50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c54:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <SystemInit+0x60>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a07      	ldr	r2, [pc, #28]	; (8000c78 <SystemInit+0x60>)
 8000c5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c60:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <SystemInit+0x60>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000ed00 	.word	0xe000ed00
 8000c78:	40021000 	.word	0x40021000

08000c7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c80:	f7ff ffca 	bl	8000c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c86:	e003      	b.n	8000c90 <LoopCopyDataInit>

08000c88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c88:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c8e:	3104      	adds	r1, #4

08000c90 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c90:	480a      	ldr	r0, [pc, #40]	; (8000cbc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c98:	d3f6      	bcc.n	8000c88 <CopyDataInit>
	ldr	r2, =_sbss
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c9c:	e002      	b.n	8000ca4 <LoopFillZerobss>

08000c9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ca0:	f842 3b04 	str.w	r3, [r2], #4

08000ca4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <LoopForever+0x16>)
	cmp	r2, r3
 8000ca6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ca8:	d3f9      	bcc.n	8000c9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000caa:	f008 ffd7 	bl	8009c5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cae:	f7ff fc83 	bl	80005b8 <main>

08000cb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000cb2:	e7fe      	b.n	8000cb2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cb4:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8000cb8:	08009edc 	.word	0x08009edc
	ldr	r0, =_sdata
 8000cbc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000cc0:	20000090 	.word	0x20000090
	ldr	r2, =_sbss
 8000cc4:	20000090 	.word	0x20000090
	ldr	r3, = _ebss
 8000cc8:	20000928 	.word	0x20000928

08000ccc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ccc:	e7fe      	b.n	8000ccc <ADC1_2_IRQHandler>

08000cce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd8:	2003      	movs	r0, #3
 8000cda:	f000 f961 	bl	8000fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f000 f80e 	bl	8000d00 <HAL_InitTick>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d002      	beq.n	8000cf0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	71fb      	strb	r3, [r7, #7]
 8000cee:	e001      	b.n	8000cf4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cf0:	f7ff fe92 	bl	8000a18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d0c:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <HAL_InitTick+0x6c>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d023      	beq.n	8000d5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d14:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_InitTick+0x70>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <HAL_InitTick+0x6c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f96d 	bl	800100a <HAL_SYSTICK_Config>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d10f      	bne.n	8000d56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2b0f      	cmp	r3, #15
 8000d3a:	d809      	bhi.n	8000d50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	f04f 30ff 	mov.w	r0, #4294967295
 8000d44:	f000 f937 	bl	8000fb6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d48:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <HAL_InitTick+0x74>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	e007      	b.n	8000d60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	73fb      	strb	r3, [r7, #15]
 8000d54:	e004      	b.n	8000d60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	73fb      	strb	r3, [r7, #15]
 8000d5a:	e001      	b.n	8000d60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	20000000 	.word	0x20000000
 8000d74:	20000004 	.word	0x20000004

08000d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x20>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x24>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <HAL_IncTick+0x24>)
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000008 	.word	0x20000008
 8000d9c:	20000168 	.word	0x20000168

08000da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <HAL_GetTick+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000168 	.word	0x20000168

08000db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc0:	f7ff ffee 	bl	8000da0 <HAL_GetTick>
 8000dc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd0:	d005      	beq.n	8000dde <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <HAL_Delay+0x44>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4413      	add	r3, r2
 8000ddc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dde:	bf00      	nop
 8000de0:	f7ff ffde 	bl	8000da0 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d8f7      	bhi.n	8000de0 <HAL_Delay+0x28>
  {
  }
}
 8000df0:	bf00      	nop
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000008 	.word	0x20000008

08000e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e32:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	60d3      	str	r3, [r2, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <__NVIC_GetPriorityGrouping+0x18>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	f003 0307 	and.w	r3, r3, #7
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	db0b      	blt.n	8000e8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	f003 021f 	and.w	r2, r3, #31
 8000e7c:	4907      	ldr	r1, [pc, #28]	; (8000e9c <__NVIC_EnableIRQ+0x38>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	095b      	lsrs	r3, r3, #5
 8000e84:	2001      	movs	r0, #1
 8000e86:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000e100 	.word	0xe000e100

08000ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	db0a      	blt.n	8000eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	490c      	ldr	r1, [pc, #48]	; (8000eec <__NVIC_SetPriority+0x4c>)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	0112      	lsls	r2, r2, #4
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec8:	e00a      	b.n	8000ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	4908      	ldr	r1, [pc, #32]	; (8000ef0 <__NVIC_SetPriority+0x50>)
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	f003 030f 	and.w	r3, r3, #15
 8000ed6:	3b04      	subs	r3, #4
 8000ed8:	0112      	lsls	r2, r2, #4
 8000eda:	b2d2      	uxtb	r2, r2
 8000edc:	440b      	add	r3, r1
 8000ede:	761a      	strb	r2, [r3, #24]
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000e100 	.word	0xe000e100
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b089      	sub	sp, #36	; 0x24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	f1c3 0307 	rsb	r3, r3, #7
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	bf28      	it	cs
 8000f12:	2304      	movcs	r3, #4
 8000f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3304      	adds	r3, #4
 8000f1a:	2b06      	cmp	r3, #6
 8000f1c:	d902      	bls.n	8000f24 <NVIC_EncodePriority+0x30>
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3b03      	subs	r3, #3
 8000f22:	e000      	b.n	8000f26 <NVIC_EncodePriority+0x32>
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	f04f 32ff 	mov.w	r2, #4294967295
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43da      	mvns	r2, r3
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	401a      	ands	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	fa01 f303 	lsl.w	r3, r1, r3
 8000f46:	43d9      	mvns	r1, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	4313      	orrs	r3, r2
         );
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3724      	adds	r7, #36	; 0x24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f6c:	d301      	bcc.n	8000f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e00f      	b.n	8000f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f72:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <SysTick_Config+0x40>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7a:	210f      	movs	r1, #15
 8000f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f80:	f7ff ff8e 	bl	8000ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <SysTick_Config+0x40>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8a:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <SysTick_Config+0x40>)
 8000f8c:	2207      	movs	r2, #7
 8000f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	e000e010 	.word	0xe000e010

08000fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff ff29 	bl	8000e00 <__NVIC_SetPriorityGrouping>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b086      	sub	sp, #24
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	607a      	str	r2, [r7, #4]
 8000fc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc8:	f7ff ff3e 	bl	8000e48 <__NVIC_GetPriorityGrouping>
 8000fcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	68b9      	ldr	r1, [r7, #8]
 8000fd2:	6978      	ldr	r0, [r7, #20]
 8000fd4:	f7ff ff8e 	bl	8000ef4 <NVIC_EncodePriority>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff5d 	bl	8000ea0 <__NVIC_SetPriority>
}
 8000fe6:	bf00      	nop
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff31 	bl	8000e64 <__NVIC_EnableIRQ>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ffa2 	bl	8000f5c <SysTick_Config>
 8001018:	4603      	mov	r3, r0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001024:	b480      	push	{r7}
 8001026:	b087      	sub	sp, #28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001032:	e166      	b.n	8001302 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	2101      	movs	r1, #1
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	fa01 f303 	lsl.w	r3, r1, r3
 8001040:	4013      	ands	r3, r2
 8001042:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	f000 8158 	beq.w	80012fc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d00b      	beq.n	800106c <HAL_GPIO_Init+0x48>
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d007      	beq.n	800106c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001060:	2b11      	cmp	r3, #17
 8001062:	d003      	beq.n	800106c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2b12      	cmp	r3, #18
 800106a:	d130      	bne.n	80010ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	2203      	movs	r2, #3
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	68da      	ldr	r2, [r3, #12]
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	4313      	orrs	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010a2:	2201      	movs	r2, #1
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	091b      	lsrs	r3, r3, #4
 80010b8:	f003 0201 	and.w	r2, r3, #1
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	2203      	movs	r2, #3
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0xea>
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b12      	cmp	r3, #18
 800110c:	d123      	bne.n	8001156 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	08da      	lsrs	r2, r3, #3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3208      	adds	r2, #8
 8001116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	220f      	movs	r2, #15
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	691a      	ldr	r2, [r3, #16]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	f003 0307 	and.w	r3, r3, #7
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	08da      	lsrs	r2, r3, #3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3208      	adds	r2, #8
 8001150:	6939      	ldr	r1, [r7, #16]
 8001152:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	2203      	movs	r2, #3
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	4013      	ands	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 0203 	and.w	r2, r3, #3
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001192:	2b00      	cmp	r3, #0
 8001194:	f000 80b2 	beq.w	80012fc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001198:	4b61      	ldr	r3, [pc, #388]	; (8001320 <HAL_GPIO_Init+0x2fc>)
 800119a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119c:	4a60      	ldr	r2, [pc, #384]	; (8001320 <HAL_GPIO_Init+0x2fc>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	6613      	str	r3, [r2, #96]	; 0x60
 80011a4:	4b5e      	ldr	r3, [pc, #376]	; (8001320 <HAL_GPIO_Init+0x2fc>)
 80011a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011b0:	4a5c      	ldr	r2, [pc, #368]	; (8001324 <HAL_GPIO_Init+0x300>)
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	089b      	lsrs	r3, r3, #2
 80011b6:	3302      	adds	r3, #2
 80011b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	220f      	movs	r2, #15
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011da:	d02b      	beq.n	8001234 <HAL_GPIO_Init+0x210>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a52      	ldr	r2, [pc, #328]	; (8001328 <HAL_GPIO_Init+0x304>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d025      	beq.n	8001230 <HAL_GPIO_Init+0x20c>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a51      	ldr	r2, [pc, #324]	; (800132c <HAL_GPIO_Init+0x308>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d01f      	beq.n	800122c <HAL_GPIO_Init+0x208>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a50      	ldr	r2, [pc, #320]	; (8001330 <HAL_GPIO_Init+0x30c>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d019      	beq.n	8001228 <HAL_GPIO_Init+0x204>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a4f      	ldr	r2, [pc, #316]	; (8001334 <HAL_GPIO_Init+0x310>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d013      	beq.n	8001224 <HAL_GPIO_Init+0x200>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a4e      	ldr	r2, [pc, #312]	; (8001338 <HAL_GPIO_Init+0x314>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d00d      	beq.n	8001220 <HAL_GPIO_Init+0x1fc>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a4d      	ldr	r2, [pc, #308]	; (800133c <HAL_GPIO_Init+0x318>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d007      	beq.n	800121c <HAL_GPIO_Init+0x1f8>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a4c      	ldr	r2, [pc, #304]	; (8001340 <HAL_GPIO_Init+0x31c>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d101      	bne.n	8001218 <HAL_GPIO_Init+0x1f4>
 8001214:	2307      	movs	r3, #7
 8001216:	e00e      	b.n	8001236 <HAL_GPIO_Init+0x212>
 8001218:	2308      	movs	r3, #8
 800121a:	e00c      	b.n	8001236 <HAL_GPIO_Init+0x212>
 800121c:	2306      	movs	r3, #6
 800121e:	e00a      	b.n	8001236 <HAL_GPIO_Init+0x212>
 8001220:	2305      	movs	r3, #5
 8001222:	e008      	b.n	8001236 <HAL_GPIO_Init+0x212>
 8001224:	2304      	movs	r3, #4
 8001226:	e006      	b.n	8001236 <HAL_GPIO_Init+0x212>
 8001228:	2303      	movs	r3, #3
 800122a:	e004      	b.n	8001236 <HAL_GPIO_Init+0x212>
 800122c:	2302      	movs	r3, #2
 800122e:	e002      	b.n	8001236 <HAL_GPIO_Init+0x212>
 8001230:	2301      	movs	r3, #1
 8001232:	e000      	b.n	8001236 <HAL_GPIO_Init+0x212>
 8001234:	2300      	movs	r3, #0
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	f002 0203 	and.w	r2, r2, #3
 800123c:	0092      	lsls	r2, r2, #2
 800123e:	4093      	lsls	r3, r2
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001246:	4937      	ldr	r1, [pc, #220]	; (8001324 <HAL_GPIO_Init+0x300>)
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	089b      	lsrs	r3, r3, #2
 800124c:	3302      	adds	r3, #2
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001254:	4b3b      	ldr	r3, [pc, #236]	; (8001344 <HAL_GPIO_Init+0x320>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	43db      	mvns	r3, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001278:	4a32      	ldr	r2, [pc, #200]	; (8001344 <HAL_GPIO_Init+0x320>)
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800127e:	4b31      	ldr	r3, [pc, #196]	; (8001344 <HAL_GPIO_Init+0x320>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	43db      	mvns	r3, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4313      	orrs	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012a2:	4a28      	ldr	r2, [pc, #160]	; (8001344 <HAL_GPIO_Init+0x320>)
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012a8:	4b26      	ldr	r3, [pc, #152]	; (8001344 <HAL_GPIO_Init+0x320>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012cc:	4a1d      	ldr	r2, [pc, #116]	; (8001344 <HAL_GPIO_Init+0x320>)
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012d2:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <HAL_GPIO_Init+0x320>)
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	43db      	mvns	r3, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012f6:	4a13      	ldr	r2, [pc, #76]	; (8001344 <HAL_GPIO_Init+0x320>)
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	3301      	adds	r3, #1
 8001300:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	fa22 f303 	lsr.w	r3, r2, r3
 800130c:	2b00      	cmp	r3, #0
 800130e:	f47f ae91 	bne.w	8001034 <HAL_GPIO_Init+0x10>
  }
}
 8001312:	bf00      	nop
 8001314:	bf00      	nop
 8001316:	371c      	adds	r7, #28
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	40021000 	.word	0x40021000
 8001324:	40010000 	.word	0x40010000
 8001328:	48000400 	.word	0x48000400
 800132c:	48000800 	.word	0x48000800
 8001330:	48000c00 	.word	0x48000c00
 8001334:	48001000 	.word	0x48001000
 8001338:	48001400 	.word	0x48001400
 800133c:	48001800 	.word	0x48001800
 8001340:	48001c00 	.word	0x48001c00
 8001344:	40010400 	.word	0x40010400

08001348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	807b      	strh	r3, [r7, #2]
 8001354:	4613      	mov	r3, r2
 8001356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001358:	787b      	ldrb	r3, [r7, #1]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800135e:	887a      	ldrh	r2, [r7, #2]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001364:	e002      	b.n	800136c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001366:	887a      	ldrh	r2, [r7, #2]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800138a:	887a      	ldrh	r2, [r7, #2]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4013      	ands	r3, r2
 8001390:	041a      	lsls	r2, r3, #16
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	43d9      	mvns	r1, r3
 8001396:	887b      	ldrh	r3, [r7, #2]
 8001398:	400b      	ands	r3, r1
 800139a:	431a      	orrs	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	619a      	str	r2, [r3, #24]
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80013ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ae:	b08f      	sub	sp, #60	; 0x3c
 80013b0:	af0a      	add	r7, sp, #40	; 0x28
 80013b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e054      	b.n	8001468 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d106      	bne.n	80013de <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f008 f99f 	bl	800971c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2203      	movs	r2, #3
 80013e2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d102      	bne.n	80013f8 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f004 f8ad 	bl	800555c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	687e      	ldr	r6, [r7, #4]
 800140a:	466d      	mov	r5, sp
 800140c:	f106 0410 	add.w	r4, r6, #16
 8001410:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001412:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001414:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001416:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001418:	e894 0003 	ldmia.w	r4, {r0, r1}
 800141c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001420:	1d33      	adds	r3, r6, #4
 8001422:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001424:	6838      	ldr	r0, [r7, #0]
 8001426:	f004 f85c 	bl	80054e2 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2101      	movs	r1, #1
 8001430:	4618      	mov	r0, r3
 8001432:	f004 f8a4 	bl	800557e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	687e      	ldr	r6, [r7, #4]
 800143e:	466d      	mov	r5, sp
 8001440:	f106 0410 	add.w	r4, r6, #16
 8001444:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001446:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001448:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800144a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800144c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001450:	e885 0003 	stmia.w	r5, {r0, r1}
 8001454:	1d33      	adds	r3, r6, #4
 8001456:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001458:	6838      	ldr	r0, [r7, #0]
 800145a:	f004 f9b3 	bl	80057c4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2201      	movs	r2, #1
 8001462:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001470 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b089      	sub	sp, #36	; 0x24
 8001474:	af04      	add	r7, sp, #16
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	4608      	mov	r0, r1
 800147a:	4611      	mov	r1, r2
 800147c:	461a      	mov	r2, r3
 800147e:	4603      	mov	r3, r0
 8001480:	70fb      	strb	r3, [r7, #3]
 8001482:	460b      	mov	r3, r1
 8001484:	70bb      	strb	r3, [r7, #2]
 8001486:	4613      	mov	r3, r2
 8001488:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001490:	2b01      	cmp	r3, #1
 8001492:	d101      	bne.n	8001498 <HAL_HCD_HC_Init+0x28>
 8001494:	2302      	movs	r3, #2
 8001496:	e076      	b.n	8001586 <HAL_HCD_HC_Init+0x116>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80014a0:	78fb      	ldrb	r3, [r7, #3]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	212c      	movs	r1, #44	; 0x2c
 80014a6:	fb01 f303 	mul.w	r3, r1, r3
 80014aa:	4413      	add	r3, r2
 80014ac:	333d      	adds	r3, #61	; 0x3d
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80014b2:	78fb      	ldrb	r3, [r7, #3]
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	212c      	movs	r1, #44	; 0x2c
 80014b8:	fb01 f303 	mul.w	r3, r1, r3
 80014bc:	4413      	add	r3, r2
 80014be:	3338      	adds	r3, #56	; 0x38
 80014c0:	787a      	ldrb	r2, [r7, #1]
 80014c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80014c4:	78fb      	ldrb	r3, [r7, #3]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	212c      	movs	r1, #44	; 0x2c
 80014ca:	fb01 f303 	mul.w	r3, r1, r3
 80014ce:	4413      	add	r3, r2
 80014d0:	3340      	adds	r3, #64	; 0x40
 80014d2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80014d4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80014d6:	78fb      	ldrb	r3, [r7, #3]
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	212c      	movs	r1, #44	; 0x2c
 80014dc:	fb01 f303 	mul.w	r3, r1, r3
 80014e0:	4413      	add	r3, r2
 80014e2:	3339      	adds	r3, #57	; 0x39
 80014e4:	78fa      	ldrb	r2, [r7, #3]
 80014e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80014e8:	78fb      	ldrb	r3, [r7, #3]
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	212c      	movs	r1, #44	; 0x2c
 80014ee:	fb01 f303 	mul.w	r3, r1, r3
 80014f2:	4413      	add	r3, r2
 80014f4:	333f      	adds	r3, #63	; 0x3f
 80014f6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80014fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80014fc:	78fb      	ldrb	r3, [r7, #3]
 80014fe:	78ba      	ldrb	r2, [r7, #2]
 8001500:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001504:	b2d0      	uxtb	r0, r2
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	212c      	movs	r1, #44	; 0x2c
 800150a:	fb01 f303 	mul.w	r3, r1, r3
 800150e:	4413      	add	r3, r2
 8001510:	333a      	adds	r3, #58	; 0x3a
 8001512:	4602      	mov	r2, r0
 8001514:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001516:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800151a:	2b00      	cmp	r3, #0
 800151c:	da09      	bge.n	8001532 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	212c      	movs	r1, #44	; 0x2c
 8001524:	fb01 f303 	mul.w	r3, r1, r3
 8001528:	4413      	add	r3, r2
 800152a:	333b      	adds	r3, #59	; 0x3b
 800152c:	2201      	movs	r2, #1
 800152e:	701a      	strb	r2, [r3, #0]
 8001530:	e008      	b.n	8001544 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001532:	78fb      	ldrb	r3, [r7, #3]
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	212c      	movs	r1, #44	; 0x2c
 8001538:	fb01 f303 	mul.w	r3, r1, r3
 800153c:	4413      	add	r3, r2
 800153e:	333b      	adds	r3, #59	; 0x3b
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001544:	78fb      	ldrb	r3, [r7, #3]
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	212c      	movs	r1, #44	; 0x2c
 800154a:	fb01 f303 	mul.w	r3, r1, r3
 800154e:	4413      	add	r3, r2
 8001550:	333c      	adds	r3, #60	; 0x3c
 8001552:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001556:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	787c      	ldrb	r4, [r7, #1]
 800155e:	78ba      	ldrb	r2, [r7, #2]
 8001560:	78f9      	ldrb	r1, [r7, #3]
 8001562:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001564:	9302      	str	r3, [sp, #8]
 8001566:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800156a:	9301      	str	r3, [sp, #4]
 800156c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	4623      	mov	r3, r4
 8001574:	f004 fa6a 	bl	8005a4c <USB_HC_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001584:	7bfb      	ldrb	r3, [r7, #15]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	bd90      	pop	{r4, r7, pc}

0800158e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b084      	sub	sp, #16
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	460b      	mov	r3, r1
 8001598:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800159a:	2300      	movs	r3, #0
 800159c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d101      	bne.n	80015ac <HAL_HCD_HC_Halt+0x1e>
 80015a8:	2302      	movs	r3, #2
 80015aa:	e00f      	b.n	80015cc <HAL_HCD_HC_Halt+0x3e>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	78fa      	ldrb	r2, [r7, #3]
 80015ba:	4611      	mov	r1, r2
 80015bc:	4618      	mov	r0, r3
 80015be:	f004 fc46 	bl	8005e4e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	4608      	mov	r0, r1
 80015de:	4611      	mov	r1, r2
 80015e0:	461a      	mov	r2, r3
 80015e2:	4603      	mov	r3, r0
 80015e4:	70fb      	strb	r3, [r7, #3]
 80015e6:	460b      	mov	r3, r1
 80015e8:	70bb      	strb	r3, [r7, #2]
 80015ea:	4613      	mov	r3, r2
 80015ec:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80015ee:	78fb      	ldrb	r3, [r7, #3]
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	212c      	movs	r1, #44	; 0x2c
 80015f4:	fb01 f303 	mul.w	r3, r1, r3
 80015f8:	4413      	add	r3, r2
 80015fa:	333b      	adds	r3, #59	; 0x3b
 80015fc:	78ba      	ldrb	r2, [r7, #2]
 80015fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001600:	78fb      	ldrb	r3, [r7, #3]
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	212c      	movs	r1, #44	; 0x2c
 8001606:	fb01 f303 	mul.w	r3, r1, r3
 800160a:	4413      	add	r3, r2
 800160c:	333f      	adds	r3, #63	; 0x3f
 800160e:	787a      	ldrb	r2, [r7, #1]
 8001610:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001612:	7c3b      	ldrb	r3, [r7, #16]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d112      	bne.n	800163e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001618:	78fb      	ldrb	r3, [r7, #3]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	212c      	movs	r1, #44	; 0x2c
 800161e:	fb01 f303 	mul.w	r3, r1, r3
 8001622:	4413      	add	r3, r2
 8001624:	3342      	adds	r3, #66	; 0x42
 8001626:	2203      	movs	r2, #3
 8001628:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800162a:	78fb      	ldrb	r3, [r7, #3]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	212c      	movs	r1, #44	; 0x2c
 8001630:	fb01 f303 	mul.w	r3, r1, r3
 8001634:	4413      	add	r3, r2
 8001636:	333d      	adds	r3, #61	; 0x3d
 8001638:	7f3a      	ldrb	r2, [r7, #28]
 800163a:	701a      	strb	r2, [r3, #0]
 800163c:	e008      	b.n	8001650 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800163e:	78fb      	ldrb	r3, [r7, #3]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	212c      	movs	r1, #44	; 0x2c
 8001644:	fb01 f303 	mul.w	r3, r1, r3
 8001648:	4413      	add	r3, r2
 800164a:	3342      	adds	r3, #66	; 0x42
 800164c:	2202      	movs	r2, #2
 800164e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001650:	787b      	ldrb	r3, [r7, #1]
 8001652:	2b03      	cmp	r3, #3
 8001654:	f200 80c6 	bhi.w	80017e4 <HAL_HCD_HC_SubmitRequest+0x210>
 8001658:	a201      	add	r2, pc, #4	; (adr r2, 8001660 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800165a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165e:	bf00      	nop
 8001660:	08001671 	.word	0x08001671
 8001664:	080017d1 	.word	0x080017d1
 8001668:	080016d5 	.word	0x080016d5
 800166c:	08001753 	.word	0x08001753
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001670:	7c3b      	ldrb	r3, [r7, #16]
 8001672:	2b01      	cmp	r3, #1
 8001674:	f040 80b8 	bne.w	80017e8 <HAL_HCD_HC_SubmitRequest+0x214>
 8001678:	78bb      	ldrb	r3, [r7, #2]
 800167a:	2b00      	cmp	r3, #0
 800167c:	f040 80b4 	bne.w	80017e8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001680:	8b3b      	ldrh	r3, [r7, #24]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d108      	bne.n	8001698 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001686:	78fb      	ldrb	r3, [r7, #3]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	212c      	movs	r1, #44	; 0x2c
 800168c:	fb01 f303 	mul.w	r3, r1, r3
 8001690:	4413      	add	r3, r2
 8001692:	3355      	adds	r3, #85	; 0x55
 8001694:	2201      	movs	r2, #1
 8001696:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001698:	78fb      	ldrb	r3, [r7, #3]
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	212c      	movs	r1, #44	; 0x2c
 800169e:	fb01 f303 	mul.w	r3, r1, r3
 80016a2:	4413      	add	r3, r2
 80016a4:	3355      	adds	r3, #85	; 0x55
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d109      	bne.n	80016c0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016ac:	78fb      	ldrb	r3, [r7, #3]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	212c      	movs	r1, #44	; 0x2c
 80016b2:	fb01 f303 	mul.w	r3, r1, r3
 80016b6:	4413      	add	r3, r2
 80016b8:	3342      	adds	r3, #66	; 0x42
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80016be:	e093      	b.n	80017e8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016c0:	78fb      	ldrb	r3, [r7, #3]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	212c      	movs	r1, #44	; 0x2c
 80016c6:	fb01 f303 	mul.w	r3, r1, r3
 80016ca:	4413      	add	r3, r2
 80016cc:	3342      	adds	r3, #66	; 0x42
 80016ce:	2202      	movs	r2, #2
 80016d0:	701a      	strb	r2, [r3, #0]
      break;
 80016d2:	e089      	b.n	80017e8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80016d4:	78bb      	ldrb	r3, [r7, #2]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d11d      	bne.n	8001716 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016da:	78fb      	ldrb	r3, [r7, #3]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	212c      	movs	r1, #44	; 0x2c
 80016e0:	fb01 f303 	mul.w	r3, r1, r3
 80016e4:	4413      	add	r3, r2
 80016e6:	3355      	adds	r3, #85	; 0x55
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d109      	bne.n	8001702 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016ee:	78fb      	ldrb	r3, [r7, #3]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	212c      	movs	r1, #44	; 0x2c
 80016f4:	fb01 f303 	mul.w	r3, r1, r3
 80016f8:	4413      	add	r3, r2
 80016fa:	3342      	adds	r3, #66	; 0x42
 80016fc:	2200      	movs	r2, #0
 80016fe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001700:	e073      	b.n	80017ea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001702:	78fb      	ldrb	r3, [r7, #3]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	212c      	movs	r1, #44	; 0x2c
 8001708:	fb01 f303 	mul.w	r3, r1, r3
 800170c:	4413      	add	r3, r2
 800170e:	3342      	adds	r3, #66	; 0x42
 8001710:	2202      	movs	r2, #2
 8001712:	701a      	strb	r2, [r3, #0]
      break;
 8001714:	e069      	b.n	80017ea <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001716:	78fb      	ldrb	r3, [r7, #3]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	212c      	movs	r1, #44	; 0x2c
 800171c:	fb01 f303 	mul.w	r3, r1, r3
 8001720:	4413      	add	r3, r2
 8001722:	3354      	adds	r3, #84	; 0x54
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d109      	bne.n	800173e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800172a:	78fb      	ldrb	r3, [r7, #3]
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	212c      	movs	r1, #44	; 0x2c
 8001730:	fb01 f303 	mul.w	r3, r1, r3
 8001734:	4413      	add	r3, r2
 8001736:	3342      	adds	r3, #66	; 0x42
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
      break;
 800173c:	e055      	b.n	80017ea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800173e:	78fb      	ldrb	r3, [r7, #3]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	212c      	movs	r1, #44	; 0x2c
 8001744:	fb01 f303 	mul.w	r3, r1, r3
 8001748:	4413      	add	r3, r2
 800174a:	3342      	adds	r3, #66	; 0x42
 800174c:	2202      	movs	r2, #2
 800174e:	701a      	strb	r2, [r3, #0]
      break;
 8001750:	e04b      	b.n	80017ea <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001752:	78bb      	ldrb	r3, [r7, #2]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d11d      	bne.n	8001794 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001758:	78fb      	ldrb	r3, [r7, #3]
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	212c      	movs	r1, #44	; 0x2c
 800175e:	fb01 f303 	mul.w	r3, r1, r3
 8001762:	4413      	add	r3, r2
 8001764:	3355      	adds	r3, #85	; 0x55
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d109      	bne.n	8001780 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800176c:	78fb      	ldrb	r3, [r7, #3]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	212c      	movs	r1, #44	; 0x2c
 8001772:	fb01 f303 	mul.w	r3, r1, r3
 8001776:	4413      	add	r3, r2
 8001778:	3342      	adds	r3, #66	; 0x42
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800177e:	e034      	b.n	80017ea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001780:	78fb      	ldrb	r3, [r7, #3]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	212c      	movs	r1, #44	; 0x2c
 8001786:	fb01 f303 	mul.w	r3, r1, r3
 800178a:	4413      	add	r3, r2
 800178c:	3342      	adds	r3, #66	; 0x42
 800178e:	2202      	movs	r2, #2
 8001790:	701a      	strb	r2, [r3, #0]
      break;
 8001792:	e02a      	b.n	80017ea <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001794:	78fb      	ldrb	r3, [r7, #3]
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	212c      	movs	r1, #44	; 0x2c
 800179a:	fb01 f303 	mul.w	r3, r1, r3
 800179e:	4413      	add	r3, r2
 80017a0:	3354      	adds	r3, #84	; 0x54
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d109      	bne.n	80017bc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017a8:	78fb      	ldrb	r3, [r7, #3]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	212c      	movs	r1, #44	; 0x2c
 80017ae:	fb01 f303 	mul.w	r3, r1, r3
 80017b2:	4413      	add	r3, r2
 80017b4:	3342      	adds	r3, #66	; 0x42
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
      break;
 80017ba:	e016      	b.n	80017ea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017bc:	78fb      	ldrb	r3, [r7, #3]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	212c      	movs	r1, #44	; 0x2c
 80017c2:	fb01 f303 	mul.w	r3, r1, r3
 80017c6:	4413      	add	r3, r2
 80017c8:	3342      	adds	r3, #66	; 0x42
 80017ca:	2202      	movs	r2, #2
 80017cc:	701a      	strb	r2, [r3, #0]
      break;
 80017ce:	e00c      	b.n	80017ea <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017d0:	78fb      	ldrb	r3, [r7, #3]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	212c      	movs	r1, #44	; 0x2c
 80017d6:	fb01 f303 	mul.w	r3, r1, r3
 80017da:	4413      	add	r3, r2
 80017dc:	3342      	adds	r3, #66	; 0x42
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
      break;
 80017e2:	e002      	b.n	80017ea <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80017e4:	bf00      	nop
 80017e6:	e000      	b.n	80017ea <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80017e8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80017ea:	78fb      	ldrb	r3, [r7, #3]
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	212c      	movs	r1, #44	; 0x2c
 80017f0:	fb01 f303 	mul.w	r3, r1, r3
 80017f4:	4413      	add	r3, r2
 80017f6:	3344      	adds	r3, #68	; 0x44
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80017fc:	78fb      	ldrb	r3, [r7, #3]
 80017fe:	8b3a      	ldrh	r2, [r7, #24]
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	202c      	movs	r0, #44	; 0x2c
 8001804:	fb00 f303 	mul.w	r3, r0, r3
 8001808:	440b      	add	r3, r1
 800180a:	334c      	adds	r3, #76	; 0x4c
 800180c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800180e:	78fb      	ldrb	r3, [r7, #3]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	212c      	movs	r1, #44	; 0x2c
 8001814:	fb01 f303 	mul.w	r3, r1, r3
 8001818:	4413      	add	r3, r2
 800181a:	3360      	adds	r3, #96	; 0x60
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001820:	78fb      	ldrb	r3, [r7, #3]
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	212c      	movs	r1, #44	; 0x2c
 8001826:	fb01 f303 	mul.w	r3, r1, r3
 800182a:	4413      	add	r3, r2
 800182c:	3350      	adds	r3, #80	; 0x50
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001832:	78fb      	ldrb	r3, [r7, #3]
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	212c      	movs	r1, #44	; 0x2c
 8001838:	fb01 f303 	mul.w	r3, r1, r3
 800183c:	4413      	add	r3, r2
 800183e:	3339      	adds	r3, #57	; 0x39
 8001840:	78fa      	ldrb	r2, [r7, #3]
 8001842:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001844:	78fb      	ldrb	r3, [r7, #3]
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	212c      	movs	r1, #44	; 0x2c
 800184a:	fb01 f303 	mul.w	r3, r1, r3
 800184e:	4413      	add	r3, r2
 8001850:	3361      	adds	r3, #97	; 0x61
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6818      	ldr	r0, [r3, #0]
 800185a:	78fb      	ldrb	r3, [r7, #3]
 800185c:	222c      	movs	r2, #44	; 0x2c
 800185e:	fb02 f303 	mul.w	r3, r2, r3
 8001862:	3338      	adds	r3, #56	; 0x38
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	4413      	add	r3, r2
 8001868:	4619      	mov	r1, r3
 800186a:	f004 f9e7 	bl	8005c3c <USB_HC_StartXfer>
 800186e:	4603      	mov	r3, r0
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f003 ff55 	bl	800573e <USB_GetMode>
 8001894:	4603      	mov	r3, r0
 8001896:	2b01      	cmp	r3, #1
 8001898:	f040 80ef 	bne.w	8001a7a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f003 ff39 	bl	8005718 <USB_ReadInterrupts>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 80e5 	beq.w	8001a78 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f003 ff30 	bl	8005718 <USB_ReadInterrupts>
 80018b8:	4603      	mov	r3, r0
 80018ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018c2:	d104      	bne.n	80018ce <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80018cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f003 ff20 	bl	8005718 <USB_ReadInterrupts>
 80018d8:	4603      	mov	r3, r0
 80018da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018e2:	d104      	bne.n	80018ee <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f003 ff10 	bl	8005718 <USB_ReadInterrupts>
 80018f8:	4603      	mov	r3, r0
 80018fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001902:	d104      	bne.n	800190e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800190c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f003 ff00 	bl	8005718 <USB_ReadInterrupts>
 8001918:	4603      	mov	r3, r0
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b02      	cmp	r3, #2
 8001920:	d103      	bne.n	800192a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2202      	movs	r2, #2
 8001928:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f003 fef2 	bl	8005718 <USB_ReadInterrupts>
 8001934:	4603      	mov	r3, r0
 8001936:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800193a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800193e:	d115      	bne.n	800196c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001948:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b00      	cmp	r3, #0
 8001958:	d108      	bne.n	800196c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f007 ff60 	bl	8009820 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2101      	movs	r1, #1
 8001966:	4618      	mov	r0, r3
 8001968:	f003 ffaa 	bl	80058c0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f003 fed1 	bl	8005718 <USB_ReadInterrupts>
 8001976:	4603      	mov	r3, r0
 8001978:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800197c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001980:	d102      	bne.n	8001988 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f001 f962 	bl	8002c4c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f003 fec3 	bl	8005718 <USB_ReadInterrupts>
 8001992:	4603      	mov	r3, r0
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	2b08      	cmp	r3, #8
 800199a:	d106      	bne.n	80019aa <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f007 ff23 	bl	80097e8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2208      	movs	r2, #8
 80019a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f003 feb2 	bl	8005718 <USB_ReadInterrupts>
 80019b4:	4603      	mov	r3, r0
 80019b6:	f003 0310 	and.w	r3, r3, #16
 80019ba:	2b10      	cmp	r3, #16
 80019bc:	d101      	bne.n	80019c2 <HAL_HCD_IRQHandler+0x14a>
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <HAL_HCD_IRQHandler+0x14c>
 80019c2:	2300      	movs	r3, #0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d012      	beq.n	80019ee <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	699a      	ldr	r2, [r3, #24]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0210 	bic.w	r2, r2, #16
 80019d6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f001 f865 	bl	8002aa8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	699a      	ldr	r2, [r3, #24]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f042 0210 	orr.w	r2, r2, #16
 80019ec:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f003 fe90 	bl	8005718 <USB_ReadInterrupts>
 80019f8:	4603      	mov	r3, r0
 80019fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a02:	d13a      	bne.n	8001a7a <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f004 fa0f 	bl	8005e2c <USB_HC_ReadInterrupt>
 8001a0e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	e025      	b.n	8001a62 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f003 030f 	and.w	r3, r3, #15
 8001a1c:	68ba      	ldr	r2, [r7, #8]
 8001a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d018      	beq.n	8001a5c <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	015a      	lsls	r2, r3, #5
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	4413      	add	r3, r2
 8001a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a40:	d106      	bne.n	8001a50 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	4619      	mov	r1, r3
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f897 	bl	8001b7c <HCD_HC_IN_IRQHandler>
 8001a4e:	e005      	b.n	8001a5c <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	4619      	mov	r1, r3
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 fc90 	bl	800237c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d3d4      	bcc.n	8001a16 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a74:	615a      	str	r2, [r3, #20]
 8001a76:	e000      	b.n	8001a7a <HAL_HCD_IRQHandler+0x202>
      return;
 8001a78:	bf00      	nop
    }
  }
}
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d101      	bne.n	8001a96 <HAL_HCD_Start+0x16>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e013      	b.n	8001abe <HAL_HCD_Start+0x3e>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f003 fd49 	bl	800553a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2101      	movs	r1, #1
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f003 ff6a 	bl	8005988 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d101      	bne.n	8001adc <HAL_HCD_Stop+0x16>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e00d      	b.n	8001af8 <HAL_HCD_Stop+0x32>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f004 facc 	bl	8006086 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f003 ff11 	bl	8005934 <USB_ResetPort>
 8001b12:	4603      	mov	r3, r0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b28:	78fb      	ldrb	r3, [r7, #3]
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	212c      	movs	r1, #44	; 0x2c
 8001b2e:	fb01 f303 	mul.w	r3, r1, r3
 8001b32:	4413      	add	r3, r2
 8001b34:	3360      	adds	r3, #96	; 0x60
 8001b36:	781b      	ldrb	r3, [r3, #0]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f003 ff69 	bl	8005a28 <USB_GetCurrentFrame>
 8001b56:	4603      	mov	r3, r0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f003 ff44 	bl	80059fa <USB_GetHostSpeed>
 8001b72:	4603      	mov	r3, r0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001b92:	78fb      	ldrb	r3, [r7, #3]
 8001b94:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	015a      	lsls	r2, r3, #5
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d119      	bne.n	8001be0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	015a      	lsls	r2, r3, #5
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb8:	461a      	mov	r2, r3
 8001bba:	2304      	movs	r3, #4
 8001bbc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	015a      	lsls	r2, r3, #5
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	0151      	lsls	r1, r2, #5
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	440a      	add	r2, r1
 8001bd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bd8:	f043 0302 	orr.w	r3, r3, #2
 8001bdc:	60d3      	str	r3, [r2, #12]
 8001bde:	e101      	b.n	8001de4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	015a      	lsls	r2, r3, #5
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	4413      	add	r3, r2
 8001be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bf6:	d12b      	bne.n	8001c50 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	015a      	lsls	r2, r3, #5
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	4413      	add	r3, r2
 8001c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c04:	461a      	mov	r2, r3
 8001c06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	212c      	movs	r1, #44	; 0x2c
 8001c12:	fb01 f303 	mul.w	r3, r1, r3
 8001c16:	4413      	add	r3, r2
 8001c18:	3361      	adds	r3, #97	; 0x61
 8001c1a:	2207      	movs	r2, #7
 8001c1c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	015a      	lsls	r2, r3, #5
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	4413      	add	r3, r2
 8001c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	0151      	lsls	r1, r2, #5
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	440a      	add	r2, r1
 8001c34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c38:	f043 0302 	orr.w	r3, r3, #2
 8001c3c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	4611      	mov	r1, r2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f004 f900 	bl	8005e4e <USB_HC_Halt>
 8001c4e:	e0c9      	b.n	8001de4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	015a      	lsls	r2, r3, #5
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4413      	add	r3, r2
 8001c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 0320 	and.w	r3, r3, #32
 8001c62:	2b20      	cmp	r3, #32
 8001c64:	d109      	bne.n	8001c7a <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	015a      	lsls	r2, r3, #5
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c72:	461a      	mov	r2, r3
 8001c74:	2320      	movs	r3, #32
 8001c76:	6093      	str	r3, [r2, #8]
 8001c78:	e0b4      	b.n	8001de4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	015a      	lsls	r2, r3, #5
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4413      	add	r3, r2
 8001c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d133      	bne.n	8001cf8 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	015a      	lsls	r2, r3, #5
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4413      	add	r3, r2
 8001c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	0151      	lsls	r1, r2, #5
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	440a      	add	r2, r1
 8001ca6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001caa:	f043 0302 	orr.w	r3, r3, #2
 8001cae:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	212c      	movs	r1, #44	; 0x2c
 8001cb6:	fb01 f303 	mul.w	r3, r1, r3
 8001cba:	4413      	add	r3, r2
 8001cbc:	3361      	adds	r3, #97	; 0x61
 8001cbe:	2205      	movs	r2, #5
 8001cc0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	015a      	lsls	r2, r3, #5
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4413      	add	r3, r2
 8001cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cce:	461a      	mov	r2, r3
 8001cd0:	2310      	movs	r3, #16
 8001cd2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	015a      	lsls	r2, r3, #5
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4413      	add	r3, r2
 8001cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	2308      	movs	r3, #8
 8001ce4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	4611      	mov	r1, r2
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f004 f8ac 	bl	8005e4e <USB_HC_Halt>
 8001cf6:	e075      	b.n	8001de4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	015a      	lsls	r2, r3, #5
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	4413      	add	r3, r2
 8001d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d0e:	d134      	bne.n	8001d7a <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	015a      	lsls	r2, r3, #5
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4413      	add	r3, r2
 8001d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	0151      	lsls	r1, r2, #5
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	440a      	add	r2, r1
 8001d26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d2a:	f043 0302 	orr.w	r3, r3, #2
 8001d2e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	212c      	movs	r1, #44	; 0x2c
 8001d36:	fb01 f303 	mul.w	r3, r1, r3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3361      	adds	r3, #97	; 0x61
 8001d3e:	2208      	movs	r2, #8
 8001d40:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	015a      	lsls	r2, r3, #5
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4413      	add	r3, r2
 8001d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d4e:	461a      	mov	r2, r3
 8001d50:	2310      	movs	r3, #16
 8001d52:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	015a      	lsls	r2, r3, #5
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d60:	461a      	mov	r2, r3
 8001d62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d66:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	4611      	mov	r1, r2
 8001d72:	4618      	mov	r0, r3
 8001d74:	f004 f86b 	bl	8005e4e <USB_HC_Halt>
 8001d78:	e034      	b.n	8001de4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	015a      	lsls	r2, r3, #5
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4413      	add	r3, r2
 8001d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8c:	2b80      	cmp	r3, #128	; 0x80
 8001d8e:	d129      	bne.n	8001de4 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	015a      	lsls	r2, r3, #5
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	4413      	add	r3, r2
 8001d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	0151      	lsls	r1, r2, #5
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	440a      	add	r2, r1
 8001da6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001daa:	f043 0302 	orr.w	r3, r3, #2
 8001dae:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	212c      	movs	r1, #44	; 0x2c
 8001db6:	fb01 f303 	mul.w	r3, r1, r3
 8001dba:	4413      	add	r3, r2
 8001dbc:	3361      	adds	r3, #97	; 0x61
 8001dbe:	2206      	movs	r2, #6
 8001dc0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f004 f83e 	bl	8005e4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	015a      	lsls	r2, r3, #5
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4413      	add	r3, r2
 8001dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dde:	461a      	mov	r2, r3
 8001de0:	2380      	movs	r3, #128	; 0x80
 8001de2:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	015a      	lsls	r2, r3, #5
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	4413      	add	r3, r2
 8001dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dfa:	d122      	bne.n	8001e42 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	015a      	lsls	r2, r3, #5
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4413      	add	r3, r2
 8001e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	0151      	lsls	r1, r2, #5
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	440a      	add	r2, r1
 8001e12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e16:	f043 0302 	orr.w	r3, r3, #2
 8001e1a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	4611      	mov	r1, r2
 8001e26:	4618      	mov	r0, r3
 8001e28:	f004 f811 	bl	8005e4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	015a      	lsls	r2, r3, #5
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4413      	add	r3, r2
 8001e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e38:	461a      	mov	r2, r3
 8001e3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e3e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001e40:	e298      	b.n	8002374 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	015a      	lsls	r2, r3, #5
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	4413      	add	r3, r2
 8001e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	f040 80fd 	bne.w	8002054 <HCD_HC_IN_IRQHandler+0x4d8>
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	212c      	movs	r1, #44	; 0x2c
 8001e60:	fb01 f303 	mul.w	r3, r1, r3
 8001e64:	4413      	add	r3, r2
 8001e66:	3361      	adds	r3, #97	; 0x61
 8001e68:	2201      	movs	r2, #1
 8001e6a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	212c      	movs	r1, #44	; 0x2c
 8001e72:	fb01 f303 	mul.w	r3, r1, r3
 8001e76:	4413      	add	r3, r2
 8001e78:	335c      	adds	r3, #92	; 0x5c
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	015a      	lsls	r2, r3, #5
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4413      	add	r3, r2
 8001e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	212c      	movs	r1, #44	; 0x2c
 8001e96:	fb01 f303 	mul.w	r3, r1, r3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	333f      	adds	r3, #63	; 0x3f
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d009      	beq.n	8001eb8 <HCD_HC_IN_IRQHandler+0x33c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	212c      	movs	r1, #44	; 0x2c
 8001eaa:	fb01 f303 	mul.w	r3, r1, r3
 8001eae:	4413      	add	r3, r2
 8001eb0:	333f      	adds	r3, #63	; 0x3f
 8001eb2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d121      	bne.n	8001efc <HCD_HC_IN_IRQHandler+0x380>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	015a      	lsls	r2, r3, #5
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	0151      	lsls	r1, r2, #5
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	440a      	add	r2, r1
 8001ece:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ed2:	f043 0302 	orr.w	r3, r3, #2
 8001ed6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f003 ffb3 	bl	8005e4e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	015a      	lsls	r2, r3, #5
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	4413      	add	r3, r2
 8001ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	2310      	movs	r3, #16
 8001ef8:	6093      	str	r3, [r2, #8]
 8001efa:	e066      	b.n	8001fca <HCD_HC_IN_IRQHandler+0x44e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	212c      	movs	r1, #44	; 0x2c
 8001f02:	fb01 f303 	mul.w	r3, r1, r3
 8001f06:	4413      	add	r3, r2
 8001f08:	333f      	adds	r3, #63	; 0x3f
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d127      	bne.n	8001f60 <HCD_HC_IN_IRQHandler+0x3e4>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	015a      	lsls	r2, r3, #5
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4413      	add	r3, r2
 8001f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	0151      	lsls	r1, r2, #5
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	440a      	add	r2, r1
 8001f26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f2e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	212c      	movs	r1, #44	; 0x2c
 8001f36:	fb01 f303 	mul.w	r3, r1, r3
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3360      	adds	r3, #96	; 0x60
 8001f3e:	2201      	movs	r2, #1
 8001f40:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	b2d9      	uxtb	r1, r3
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	202c      	movs	r0, #44	; 0x2c
 8001f4c:	fb00 f303 	mul.w	r3, r0, r3
 8001f50:	4413      	add	r3, r2
 8001f52:	3360      	adds	r3, #96	; 0x60
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f007 fc6f 	bl	800983c <HAL_HCD_HC_NotifyURBChange_Callback>
 8001f5e:	e034      	b.n	8001fca <HCD_HC_IN_IRQHandler+0x44e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	212c      	movs	r1, #44	; 0x2c
 8001f66:	fb01 f303 	mul.w	r3, r1, r3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	333f      	adds	r3, #63	; 0x3f
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d12a      	bne.n	8001fca <HCD_HC_IN_IRQHandler+0x44e>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	212c      	movs	r1, #44	; 0x2c
 8001f7a:	fb01 f303 	mul.w	r3, r1, r3
 8001f7e:	4413      	add	r3, r2
 8001f80:	3360      	adds	r3, #96	; 0x60
 8001f82:	2201      	movs	r2, #1
 8001f84:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	212c      	movs	r1, #44	; 0x2c
 8001f8c:	fb01 f303 	mul.w	r3, r1, r3
 8001f90:	4413      	add	r3, r2
 8001f92:	3354      	adds	r3, #84	; 0x54
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	f083 0301 	eor.w	r3, r3, #1
 8001f9a:	b2d8      	uxtb	r0, r3
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	212c      	movs	r1, #44	; 0x2c
 8001fa2:	fb01 f303 	mul.w	r3, r1, r3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3354      	adds	r3, #84	; 0x54
 8001faa:	4602      	mov	r2, r0
 8001fac:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	b2d9      	uxtb	r1, r3
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	202c      	movs	r0, #44	; 0x2c
 8001fb8:	fb00 f303 	mul.w	r3, r0, r3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3360      	adds	r3, #96	; 0x60
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f007 fc39 	bl	800983c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d12b      	bne.n	800202a <HCD_HC_IN_IRQHandler+0x4ae>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	212c      	movs	r1, #44	; 0x2c
 8001fd8:	fb01 f303 	mul.w	r3, r1, r3
 8001fdc:	4413      	add	r3, r2
 8001fde:	3348      	adds	r3, #72	; 0x48
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	202c      	movs	r0, #44	; 0x2c
 8001fe8:	fb00 f202 	mul.w	r2, r0, r2
 8001fec:	440a      	add	r2, r1
 8001fee:	3240      	adds	r2, #64	; 0x40
 8001ff0:	8812      	ldrh	r2, [r2, #0]
 8001ff2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 81ba 	beq.w	8002374 <HCD_HC_IN_IRQHandler+0x7f8>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	212c      	movs	r1, #44	; 0x2c
 8002006:	fb01 f303 	mul.w	r3, r1, r3
 800200a:	4413      	add	r3, r2
 800200c:	3354      	adds	r3, #84	; 0x54
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	f083 0301 	eor.w	r3, r3, #1
 8002014:	b2d8      	uxtb	r0, r3
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	212c      	movs	r1, #44	; 0x2c
 800201c:	fb01 f303 	mul.w	r3, r1, r3
 8002020:	4413      	add	r3, r2
 8002022:	3354      	adds	r3, #84	; 0x54
 8002024:	4602      	mov	r2, r0
 8002026:	701a      	strb	r2, [r3, #0]
}
 8002028:	e1a4      	b.n	8002374 <HCD_HC_IN_IRQHandler+0x7f8>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	212c      	movs	r1, #44	; 0x2c
 8002030:	fb01 f303 	mul.w	r3, r1, r3
 8002034:	4413      	add	r3, r2
 8002036:	3354      	adds	r3, #84	; 0x54
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	f083 0301 	eor.w	r3, r3, #1
 800203e:	b2d8      	uxtb	r0, r3
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	212c      	movs	r1, #44	; 0x2c
 8002046:	fb01 f303 	mul.w	r3, r1, r3
 800204a:	4413      	add	r3, r2
 800204c:	3354      	adds	r3, #84	; 0x54
 800204e:	4602      	mov	r2, r0
 8002050:	701a      	strb	r2, [r3, #0]
}
 8002052:	e18f      	b.n	8002374 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	015a      	lsls	r2, r3, #5
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4413      	add	r3, r2
 800205c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b02      	cmp	r3, #2
 8002068:	f040 8106 	bne.w	8002278 <HCD_HC_IN_IRQHandler+0x6fc>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	015a      	lsls	r2, r3, #5
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4413      	add	r3, r2
 8002074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	0151      	lsls	r1, r2, #5
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	440a      	add	r2, r1
 8002082:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002086:	f023 0302 	bic.w	r3, r3, #2
 800208a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	212c      	movs	r1, #44	; 0x2c
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	4413      	add	r3, r2
 8002098:	3361      	adds	r3, #97	; 0x61
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d109      	bne.n	80020b4 <HCD_HC_IN_IRQHandler+0x538>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	212c      	movs	r1, #44	; 0x2c
 80020a6:	fb01 f303 	mul.w	r3, r1, r3
 80020aa:	4413      	add	r3, r2
 80020ac:	3360      	adds	r3, #96	; 0x60
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
 80020b2:	e0c9      	b.n	8002248 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	212c      	movs	r1, #44	; 0x2c
 80020ba:	fb01 f303 	mul.w	r3, r1, r3
 80020be:	4413      	add	r3, r2
 80020c0:	3361      	adds	r3, #97	; 0x61
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b05      	cmp	r3, #5
 80020c6:	d109      	bne.n	80020dc <HCD_HC_IN_IRQHandler+0x560>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	212c      	movs	r1, #44	; 0x2c
 80020ce:	fb01 f303 	mul.w	r3, r1, r3
 80020d2:	4413      	add	r3, r2
 80020d4:	3360      	adds	r3, #96	; 0x60
 80020d6:	2205      	movs	r2, #5
 80020d8:	701a      	strb	r2, [r3, #0]
 80020da:	e0b5      	b.n	8002248 <HCD_HC_IN_IRQHandler+0x6cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	212c      	movs	r1, #44	; 0x2c
 80020e2:	fb01 f303 	mul.w	r3, r1, r3
 80020e6:	4413      	add	r3, r2
 80020e8:	3361      	adds	r3, #97	; 0x61
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b06      	cmp	r3, #6
 80020ee:	d009      	beq.n	8002104 <HCD_HC_IN_IRQHandler+0x588>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	212c      	movs	r1, #44	; 0x2c
 80020f6:	fb01 f303 	mul.w	r3, r1, r3
 80020fa:	4413      	add	r3, r2
 80020fc:	3361      	adds	r3, #97	; 0x61
 80020fe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002100:	2b08      	cmp	r3, #8
 8002102:	d150      	bne.n	80021a6 <HCD_HC_IN_IRQHandler+0x62a>
      hhcd->hc[ch_num].ErrCnt++;
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	212c      	movs	r1, #44	; 0x2c
 800210a:	fb01 f303 	mul.w	r3, r1, r3
 800210e:	4413      	add	r3, r2
 8002110:	335c      	adds	r3, #92	; 0x5c
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	202c      	movs	r0, #44	; 0x2c
 800211c:	fb00 f303 	mul.w	r3, r0, r3
 8002120:	440b      	add	r3, r1
 8002122:	335c      	adds	r3, #92	; 0x5c
 8002124:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	212c      	movs	r1, #44	; 0x2c
 800212c:	fb01 f303 	mul.w	r3, r1, r3
 8002130:	4413      	add	r3, r2
 8002132:	335c      	adds	r3, #92	; 0x5c
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2b02      	cmp	r3, #2
 8002138:	d912      	bls.n	8002160 <HCD_HC_IN_IRQHandler+0x5e4>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	212c      	movs	r1, #44	; 0x2c
 8002140:	fb01 f303 	mul.w	r3, r1, r3
 8002144:	4413      	add	r3, r2
 8002146:	335c      	adds	r3, #92	; 0x5c
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	212c      	movs	r1, #44	; 0x2c
 8002152:	fb01 f303 	mul.w	r3, r1, r3
 8002156:	4413      	add	r3, r2
 8002158:	3360      	adds	r3, #96	; 0x60
 800215a:	2204      	movs	r2, #4
 800215c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800215e:	e073      	b.n	8002248 <HCD_HC_IN_IRQHandler+0x6cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	212c      	movs	r1, #44	; 0x2c
 8002166:	fb01 f303 	mul.w	r3, r1, r3
 800216a:	4413      	add	r3, r2
 800216c:	3360      	adds	r3, #96	; 0x60
 800216e:	2202      	movs	r2, #2
 8002170:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	015a      	lsls	r2, r3, #5
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4413      	add	r3, r2
 800217a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002188:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002190:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	015a      	lsls	r2, r3, #5
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4413      	add	r3, r2
 800219a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219e:	461a      	mov	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021a4:	e050      	b.n	8002248 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	212c      	movs	r1, #44	; 0x2c
 80021ac:	fb01 f303 	mul.w	r3, r1, r3
 80021b0:	4413      	add	r3, r2
 80021b2:	3361      	adds	r3, #97	; 0x61
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d122      	bne.n	8002200 <HCD_HC_IN_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	212c      	movs	r1, #44	; 0x2c
 80021c0:	fb01 f303 	mul.w	r3, r1, r3
 80021c4:	4413      	add	r3, r2
 80021c6:	3360      	adds	r3, #96	; 0x60
 80021c8:	2202      	movs	r2, #2
 80021ca:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	015a      	lsls	r2, r3, #5
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021e2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021ea:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	015a      	lsls	r2, r3, #5
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f8:	461a      	mov	r2, r3
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	e023      	b.n	8002248 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	212c      	movs	r1, #44	; 0x2c
 8002206:	fb01 f303 	mul.w	r3, r1, r3
 800220a:	4413      	add	r3, r2
 800220c:	3361      	adds	r3, #97	; 0x61
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b07      	cmp	r3, #7
 8002212:	d119      	bne.n	8002248 <HCD_HC_IN_IRQHandler+0x6cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	212c      	movs	r1, #44	; 0x2c
 800221a:	fb01 f303 	mul.w	r3, r1, r3
 800221e:	4413      	add	r3, r2
 8002220:	335c      	adds	r3, #92	; 0x5c
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	1c5a      	adds	r2, r3, #1
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	202c      	movs	r0, #44	; 0x2c
 800222c:	fb00 f303 	mul.w	r3, r0, r3
 8002230:	440b      	add	r3, r1
 8002232:	335c      	adds	r3, #92	; 0x5c
 8002234:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	212c      	movs	r1, #44	; 0x2c
 800223c:	fb01 f303 	mul.w	r3, r1, r3
 8002240:	4413      	add	r3, r2
 8002242:	3360      	adds	r3, #96	; 0x60
 8002244:	2204      	movs	r2, #4
 8002246:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	015a      	lsls	r2, r3, #5
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4413      	add	r3, r2
 8002250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002254:	461a      	mov	r2, r3
 8002256:	2302      	movs	r3, #2
 8002258:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	b2d9      	uxtb	r1, r3
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	202c      	movs	r0, #44	; 0x2c
 8002264:	fb00 f303 	mul.w	r3, r0, r3
 8002268:	4413      	add	r3, r2
 800226a:	3360      	adds	r3, #96	; 0x60
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f007 fae3 	bl	800983c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002276:	e07d      	b.n	8002374 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	015a      	lsls	r2, r3, #5
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4413      	add	r3, r2
 8002280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 0310 	and.w	r3, r3, #16
 800228a:	2b10      	cmp	r3, #16
 800228c:	d172      	bne.n	8002374 <HCD_HC_IN_IRQHandler+0x7f8>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	212c      	movs	r1, #44	; 0x2c
 8002294:	fb01 f303 	mul.w	r3, r1, r3
 8002298:	4413      	add	r3, r2
 800229a:	333f      	adds	r3, #63	; 0x3f
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d121      	bne.n	80022e6 <HCD_HC_IN_IRQHandler+0x76a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	212c      	movs	r1, #44	; 0x2c
 80022a8:	fb01 f303 	mul.w	r3, r1, r3
 80022ac:	4413      	add	r3, r2
 80022ae:	335c      	adds	r3, #92	; 0x5c
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	015a      	lsls	r2, r3, #5
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	0151      	lsls	r1, r2, #5
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	440a      	add	r2, r1
 80022ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022ce:	f043 0302 	orr.w	r3, r3, #2
 80022d2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	4611      	mov	r1, r2
 80022de:	4618      	mov	r0, r3
 80022e0:	f003 fdb5 	bl	8005e4e <USB_HC_Halt>
 80022e4:	e03d      	b.n	8002362 <HCD_HC_IN_IRQHandler+0x7e6>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	212c      	movs	r1, #44	; 0x2c
 80022ec:	fb01 f303 	mul.w	r3, r1, r3
 80022f0:	4413      	add	r3, r2
 80022f2:	333f      	adds	r3, #63	; 0x3f
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d009      	beq.n	800230e <HCD_HC_IN_IRQHandler+0x792>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	212c      	movs	r1, #44	; 0x2c
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	4413      	add	r3, r2
 8002306:	333f      	adds	r3, #63	; 0x3f
 8002308:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800230a:	2b02      	cmp	r3, #2
 800230c:	d129      	bne.n	8002362 <HCD_HC_IN_IRQHandler+0x7e6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	212c      	movs	r1, #44	; 0x2c
 8002314:	fb01 f303 	mul.w	r3, r1, r3
 8002318:	4413      	add	r3, r2
 800231a:	335c      	adds	r3, #92	; 0x5c
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	212c      	movs	r1, #44	; 0x2c
 8002326:	fb01 f303 	mul.w	r3, r1, r3
 800232a:	4413      	add	r3, r2
 800232c:	3361      	adds	r3, #97	; 0x61
 800232e:	2203      	movs	r2, #3
 8002330:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	015a      	lsls	r2, r3, #5
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4413      	add	r3, r2
 800233a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	0151      	lsls	r1, r2, #5
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	440a      	add	r2, r1
 8002348:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800234c:	f043 0302 	orr.w	r3, r3, #2
 8002350:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f003 fd76 	bl	8005e4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4413      	add	r3, r2
 800236a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236e:	461a      	mov	r2, r3
 8002370:	2310      	movs	r3, #16
 8002372:	6093      	str	r3, [r2, #8]
}
 8002374:	bf00      	nop
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	460b      	mov	r3, r1
 8002386:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	015a      	lsls	r2, r3, #5
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	4413      	add	r3, r2
 800239e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d119      	bne.n	80023e0 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	015a      	lsls	r2, r3, #5
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	4413      	add	r3, r2
 80023b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b8:	461a      	mov	r2, r3
 80023ba:	2304      	movs	r3, #4
 80023bc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	015a      	lsls	r2, r3, #5
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	4413      	add	r3, r2
 80023c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	0151      	lsls	r1, r2, #5
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	440a      	add	r2, r1
 80023d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023d8:	f043 0302 	orr.w	r3, r3, #2
 80023dc:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80023de:	e35f      	b.n	8002aa0 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	015a      	lsls	r2, r3, #5
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	4413      	add	r3, r2
 80023e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 0320 	and.w	r3, r3, #32
 80023f2:	2b20      	cmp	r3, #32
 80023f4:	d13e      	bne.n	8002474 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	015a      	lsls	r2, r3, #5
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	4413      	add	r3, r2
 80023fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002402:	461a      	mov	r2, r3
 8002404:	2320      	movs	r3, #32
 8002406:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	212c      	movs	r1, #44	; 0x2c
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	4413      	add	r3, r2
 8002414:	333d      	adds	r3, #61	; 0x3d
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b01      	cmp	r3, #1
 800241a:	f040 8341 	bne.w	8002aa0 <HCD_HC_OUT_IRQHandler+0x724>
      hhcd->hc[ch_num].do_ping = 0U;
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	212c      	movs	r1, #44	; 0x2c
 8002424:	fb01 f303 	mul.w	r3, r1, r3
 8002428:	4413      	add	r3, r2
 800242a:	333d      	adds	r3, #61	; 0x3d
 800242c:	2200      	movs	r2, #0
 800242e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	212c      	movs	r1, #44	; 0x2c
 8002436:	fb01 f303 	mul.w	r3, r1, r3
 800243a:	4413      	add	r3, r2
 800243c:	3360      	adds	r3, #96	; 0x60
 800243e:	2202      	movs	r2, #2
 8002440:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	015a      	lsls	r2, r3, #5
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	4413      	add	r3, r2
 800244a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	0151      	lsls	r1, r2, #5
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	440a      	add	r2, r1
 8002458:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800245c:	f043 0302 	orr.w	r3, r3, #2
 8002460:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	4611      	mov	r1, r2
 800246c:	4618      	mov	r0, r3
 800246e:	f003 fcee 	bl	8005e4e <USB_HC_Halt>
}
 8002472:	e315      	b.n	8002aa0 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	015a      	lsls	r2, r3, #5
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	4413      	add	r3, r2
 800247c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800248a:	d122      	bne.n	80024d2 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	015a      	lsls	r2, r3, #5
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	4413      	add	r3, r2
 8002494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	0151      	lsls	r1, r2, #5
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	440a      	add	r2, r1
 80024a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024a6:	f043 0302 	orr.w	r3, r3, #2
 80024aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	4611      	mov	r1, r2
 80024b6:	4618      	mov	r0, r3
 80024b8:	f003 fcc9 	bl	8005e4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	015a      	lsls	r2, r3, #5
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	4413      	add	r3, r2
 80024c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c8:	461a      	mov	r2, r3
 80024ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024ce:	6093      	str	r3, [r2, #8]
}
 80024d0:	e2e6      	b.n	8002aa0 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	015a      	lsls	r2, r3, #5
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	4413      	add	r3, r2
 80024da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d150      	bne.n	800258a <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	212c      	movs	r1, #44	; 0x2c
 80024ee:	fb01 f303 	mul.w	r3, r1, r3
 80024f2:	4413      	add	r3, r2
 80024f4:	335c      	adds	r3, #92	; 0x5c
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	015a      	lsls	r2, r3, #5
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	4413      	add	r3, r2
 8002502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800250c:	2b40      	cmp	r3, #64	; 0x40
 800250e:	d111      	bne.n	8002534 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	212c      	movs	r1, #44	; 0x2c
 8002516:	fb01 f303 	mul.w	r3, r1, r3
 800251a:	4413      	add	r3, r2
 800251c:	333d      	adds	r3, #61	; 0x3d
 800251e:	2201      	movs	r2, #1
 8002520:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	015a      	lsls	r2, r3, #5
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	4413      	add	r3, r2
 800252a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252e:	461a      	mov	r2, r3
 8002530:	2340      	movs	r3, #64	; 0x40
 8002532:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	015a      	lsls	r2, r3, #5
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	4413      	add	r3, r2
 800253c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	0151      	lsls	r1, r2, #5
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	440a      	add	r2, r1
 800254a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800254e:	f043 0302 	orr.w	r3, r3, #2
 8002552:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	4611      	mov	r1, r2
 800255e:	4618      	mov	r0, r3
 8002560:	f003 fc75 	bl	8005e4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	015a      	lsls	r2, r3, #5
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	4413      	add	r3, r2
 800256c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002570:	461a      	mov	r2, r3
 8002572:	2301      	movs	r3, #1
 8002574:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	212c      	movs	r1, #44	; 0x2c
 800257c:	fb01 f303 	mul.w	r3, r1, r3
 8002580:	4413      	add	r3, r2
 8002582:	3361      	adds	r3, #97	; 0x61
 8002584:	2201      	movs	r2, #1
 8002586:	701a      	strb	r2, [r3, #0]
}
 8002588:	e28a      	b.n	8002aa0 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	4413      	add	r3, r2
 8002592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259c:	2b40      	cmp	r3, #64	; 0x40
 800259e:	d13c      	bne.n	800261a <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	212c      	movs	r1, #44	; 0x2c
 80025a6:	fb01 f303 	mul.w	r3, r1, r3
 80025aa:	4413      	add	r3, r2
 80025ac:	3361      	adds	r3, #97	; 0x61
 80025ae:	2204      	movs	r2, #4
 80025b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	212c      	movs	r1, #44	; 0x2c
 80025b8:	fb01 f303 	mul.w	r3, r1, r3
 80025bc:	4413      	add	r3, r2
 80025be:	333d      	adds	r3, #61	; 0x3d
 80025c0:	2201      	movs	r2, #1
 80025c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	212c      	movs	r1, #44	; 0x2c
 80025ca:	fb01 f303 	mul.w	r3, r1, r3
 80025ce:	4413      	add	r3, r2
 80025d0:	335c      	adds	r3, #92	; 0x5c
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	015a      	lsls	r2, r3, #5
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	4413      	add	r3, r2
 80025de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	0151      	lsls	r1, r2, #5
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	440a      	add	r2, r1
 80025ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025f0:	f043 0302 	orr.w	r3, r3, #2
 80025f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	4611      	mov	r1, r2
 8002600:	4618      	mov	r0, r3
 8002602:	f003 fc24 	bl	8005e4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	4413      	add	r3, r2
 800260e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002612:	461a      	mov	r2, r3
 8002614:	2340      	movs	r3, #64	; 0x40
 8002616:	6093      	str	r3, [r2, #8]
}
 8002618:	e242      	b.n	8002aa0 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	015a      	lsls	r2, r3, #5
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	4413      	add	r3, r2
 8002622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b08      	cmp	r3, #8
 800262e:	d12a      	bne.n	8002686 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	015a      	lsls	r2, r3, #5
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	4413      	add	r3, r2
 8002638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263c:	461a      	mov	r2, r3
 800263e:	2308      	movs	r3, #8
 8002640:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	4413      	add	r3, r2
 800264a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	0151      	lsls	r1, r2, #5
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	440a      	add	r2, r1
 8002658:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800265c:	f043 0302 	orr.w	r3, r3, #2
 8002660:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	4611      	mov	r1, r2
 800266c:	4618      	mov	r0, r3
 800266e:	f003 fbee 	bl	8005e4e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	212c      	movs	r1, #44	; 0x2c
 8002678:	fb01 f303 	mul.w	r3, r1, r3
 800267c:	4413      	add	r3, r2
 800267e:	3361      	adds	r3, #97	; 0x61
 8002680:	2205      	movs	r2, #5
 8002682:	701a      	strb	r2, [r3, #0]
}
 8002684:	e20c      	b.n	8002aa0 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	4413      	add	r3, r2
 800268e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 0310 	and.w	r3, r3, #16
 8002698:	2b10      	cmp	r3, #16
 800269a:	d133      	bne.n	8002704 <HCD_HC_OUT_IRQHandler+0x388>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	212c      	movs	r1, #44	; 0x2c
 80026a2:	fb01 f303 	mul.w	r3, r1, r3
 80026a6:	4413      	add	r3, r2
 80026a8:	335c      	adds	r3, #92	; 0x5c
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	212c      	movs	r1, #44	; 0x2c
 80026b4:	fb01 f303 	mul.w	r3, r1, r3
 80026b8:	4413      	add	r3, r2
 80026ba:	3361      	adds	r3, #97	; 0x61
 80026bc:	2203      	movs	r2, #3
 80026be:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	015a      	lsls	r2, r3, #5
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	4413      	add	r3, r2
 80026c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	0151      	lsls	r1, r2, #5
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	440a      	add	r2, r1
 80026d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026da:	f043 0302 	orr.w	r3, r3, #2
 80026de:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	4611      	mov	r1, r2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f003 fbaf 	bl	8005e4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	015a      	lsls	r2, r3, #5
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	4413      	add	r3, r2
 80026f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fc:	461a      	mov	r2, r3
 80026fe:	2310      	movs	r3, #16
 8002700:	6093      	str	r3, [r2, #8]
}
 8002702:	e1cd      	b.n	8002aa0 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	4413      	add	r3, r2
 800270c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002716:	2b80      	cmp	r3, #128	; 0x80
 8002718:	d12a      	bne.n	8002770 <HCD_HC_OUT_IRQHandler+0x3f4>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	212c      	movs	r1, #44	; 0x2c
 8002720:	fb01 f303 	mul.w	r3, r1, r3
 8002724:	4413      	add	r3, r2
 8002726:	3361      	adds	r3, #97	; 0x61
 8002728:	2206      	movs	r2, #6
 800272a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	4413      	add	r3, r2
 8002734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	0151      	lsls	r1, r2, #5
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	440a      	add	r2, r1
 8002742:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002746:	f043 0302 	orr.w	r3, r3, #2
 800274a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	4611      	mov	r1, r2
 8002756:	4618      	mov	r0, r3
 8002758:	f003 fb79 	bl	8005e4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	015a      	lsls	r2, r3, #5
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	4413      	add	r3, r2
 8002764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002768:	461a      	mov	r2, r3
 800276a:	2380      	movs	r3, #128	; 0x80
 800276c:	6093      	str	r3, [r2, #8]
}
 800276e:	e197      	b.n	8002aa0 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	015a      	lsls	r2, r3, #5
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	4413      	add	r3, r2
 8002778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002786:	d134      	bne.n	80027f2 <HCD_HC_OUT_IRQHandler+0x476>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	015a      	lsls	r2, r3, #5
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	4413      	add	r3, r2
 8002790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	0151      	lsls	r1, r2, #5
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	440a      	add	r2, r1
 800279e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027a2:	f043 0302 	orr.w	r3, r3, #2
 80027a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	4611      	mov	r1, r2
 80027b2:	4618      	mov	r0, r3
 80027b4:	f003 fb4b 	bl	8005e4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c4:	461a      	mov	r2, r3
 80027c6:	2310      	movs	r3, #16
 80027c8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	015a      	lsls	r2, r3, #5
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	4413      	add	r3, r2
 80027d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d6:	461a      	mov	r2, r3
 80027d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	212c      	movs	r1, #44	; 0x2c
 80027e4:	fb01 f303 	mul.w	r3, r1, r3
 80027e8:	4413      	add	r3, r2
 80027ea:	3361      	adds	r3, #97	; 0x61
 80027ec:	2208      	movs	r2, #8
 80027ee:	701a      	strb	r2, [r3, #0]
}
 80027f0:	e156      	b.n	8002aa0 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	015a      	lsls	r2, r3, #5
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	4413      	add	r3, r2
 80027fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b02      	cmp	r3, #2
 8002806:	f040 814b 	bne.w	8002aa0 <HCD_HC_OUT_IRQHandler+0x724>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	015a      	lsls	r2, r3, #5
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	4413      	add	r3, r2
 8002812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	0151      	lsls	r1, r2, #5
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	440a      	add	r2, r1
 8002820:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002824:	f023 0302 	bic.w	r3, r3, #2
 8002828:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	212c      	movs	r1, #44	; 0x2c
 8002830:	fb01 f303 	mul.w	r3, r1, r3
 8002834:	4413      	add	r3, r2
 8002836:	3361      	adds	r3, #97	; 0x61
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d179      	bne.n	8002932 <HCD_HC_OUT_IRQHandler+0x5b6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	212c      	movs	r1, #44	; 0x2c
 8002844:	fb01 f303 	mul.w	r3, r1, r3
 8002848:	4413      	add	r3, r2
 800284a:	3360      	adds	r3, #96	; 0x60
 800284c:	2201      	movs	r2, #1
 800284e:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	212c      	movs	r1, #44	; 0x2c
 8002856:	fb01 f303 	mul.w	r3, r1, r3
 800285a:	4413      	add	r3, r2
 800285c:	333f      	adds	r3, #63	; 0x3f
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d00a      	beq.n	800287a <HCD_HC_OUT_IRQHandler+0x4fe>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	212c      	movs	r1, #44	; 0x2c
 800286a:	fb01 f303 	mul.w	r3, r1, r3
 800286e:	4413      	add	r3, r2
 8002870:	333f      	adds	r3, #63	; 0x3f
 8002872:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002874:	2b03      	cmp	r3, #3
 8002876:	f040 80fc 	bne.w	8002a72 <HCD_HC_OUT_IRQHandler+0x6f6>
        if (hhcd->Init.dma_enable == 1U)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d142      	bne.n	8002908 <HCD_HC_OUT_IRQHandler+0x58c>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	212c      	movs	r1, #44	; 0x2c
 8002888:	fb01 f303 	mul.w	r3, r1, r3
 800288c:	4413      	add	r3, r2
 800288e:	334c      	adds	r3, #76	; 0x4c
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 80ed 	beq.w	8002a72 <HCD_HC_OUT_IRQHandler+0x6f6>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	212c      	movs	r1, #44	; 0x2c
 800289e:	fb01 f303 	mul.w	r3, r1, r3
 80028a2:	4413      	add	r3, r2
 80028a4:	334c      	adds	r3, #76	; 0x4c
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	202c      	movs	r0, #44	; 0x2c
 80028ae:	fb00 f202 	mul.w	r2, r0, r2
 80028b2:	440a      	add	r2, r1
 80028b4:	3240      	adds	r2, #64	; 0x40
 80028b6:	8812      	ldrh	r2, [r2, #0]
 80028b8:	4413      	add	r3, r2
 80028ba:	3b01      	subs	r3, #1
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	202c      	movs	r0, #44	; 0x2c
 80028c2:	fb00 f202 	mul.w	r2, r0, r2
 80028c6:	440a      	add	r2, r1
 80028c8:	3240      	adds	r2, #64	; 0x40
 80028ca:	8812      	ldrh	r2, [r2, #0]
 80028cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 80ca 	beq.w	8002a72 <HCD_HC_OUT_IRQHandler+0x6f6>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	212c      	movs	r1, #44	; 0x2c
 80028e4:	fb01 f303 	mul.w	r3, r1, r3
 80028e8:	4413      	add	r3, r2
 80028ea:	3355      	adds	r3, #85	; 0x55
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	f083 0301 	eor.w	r3, r3, #1
 80028f2:	b2d8      	uxtb	r0, r3
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	212c      	movs	r1, #44	; 0x2c
 80028fa:	fb01 f303 	mul.w	r3, r1, r3
 80028fe:	4413      	add	r3, r2
 8002900:	3355      	adds	r3, #85	; 0x55
 8002902:	4602      	mov	r2, r0
 8002904:	701a      	strb	r2, [r3, #0]
 8002906:	e0b4      	b.n	8002a72 <HCD_HC_OUT_IRQHandler+0x6f6>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	212c      	movs	r1, #44	; 0x2c
 800290e:	fb01 f303 	mul.w	r3, r1, r3
 8002912:	4413      	add	r3, r2
 8002914:	3355      	adds	r3, #85	; 0x55
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	f083 0301 	eor.w	r3, r3, #1
 800291c:	b2d8      	uxtb	r0, r3
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	212c      	movs	r1, #44	; 0x2c
 8002924:	fb01 f303 	mul.w	r3, r1, r3
 8002928:	4413      	add	r3, r2
 800292a:	3355      	adds	r3, #85	; 0x55
 800292c:	4602      	mov	r2, r0
 800292e:	701a      	strb	r2, [r3, #0]
 8002930:	e09f      	b.n	8002a72 <HCD_HC_OUT_IRQHandler+0x6f6>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	212c      	movs	r1, #44	; 0x2c
 8002938:	fb01 f303 	mul.w	r3, r1, r3
 800293c:	4413      	add	r3, r2
 800293e:	3361      	adds	r3, #97	; 0x61
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b03      	cmp	r3, #3
 8002944:	d109      	bne.n	800295a <HCD_HC_OUT_IRQHandler+0x5de>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	212c      	movs	r1, #44	; 0x2c
 800294c:	fb01 f303 	mul.w	r3, r1, r3
 8002950:	4413      	add	r3, r2
 8002952:	3360      	adds	r3, #96	; 0x60
 8002954:	2202      	movs	r2, #2
 8002956:	701a      	strb	r2, [r3, #0]
 8002958:	e08b      	b.n	8002a72 <HCD_HC_OUT_IRQHandler+0x6f6>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	212c      	movs	r1, #44	; 0x2c
 8002960:	fb01 f303 	mul.w	r3, r1, r3
 8002964:	4413      	add	r3, r2
 8002966:	3361      	adds	r3, #97	; 0x61
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	2b04      	cmp	r3, #4
 800296c:	d109      	bne.n	8002982 <HCD_HC_OUT_IRQHandler+0x606>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	212c      	movs	r1, #44	; 0x2c
 8002974:	fb01 f303 	mul.w	r3, r1, r3
 8002978:	4413      	add	r3, r2
 800297a:	3360      	adds	r3, #96	; 0x60
 800297c:	2202      	movs	r2, #2
 800297e:	701a      	strb	r2, [r3, #0]
 8002980:	e077      	b.n	8002a72 <HCD_HC_OUT_IRQHandler+0x6f6>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	212c      	movs	r1, #44	; 0x2c
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	4413      	add	r3, r2
 800298e:	3361      	adds	r3, #97	; 0x61
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b05      	cmp	r3, #5
 8002994:	d109      	bne.n	80029aa <HCD_HC_OUT_IRQHandler+0x62e>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	212c      	movs	r1, #44	; 0x2c
 800299c:	fb01 f303 	mul.w	r3, r1, r3
 80029a0:	4413      	add	r3, r2
 80029a2:	3360      	adds	r3, #96	; 0x60
 80029a4:	2205      	movs	r2, #5
 80029a6:	701a      	strb	r2, [r3, #0]
 80029a8:	e063      	b.n	8002a72 <HCD_HC_OUT_IRQHandler+0x6f6>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	212c      	movs	r1, #44	; 0x2c
 80029b0:	fb01 f303 	mul.w	r3, r1, r3
 80029b4:	4413      	add	r3, r2
 80029b6:	3361      	adds	r3, #97	; 0x61
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b06      	cmp	r3, #6
 80029bc:	d009      	beq.n	80029d2 <HCD_HC_OUT_IRQHandler+0x656>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	212c      	movs	r1, #44	; 0x2c
 80029c4:	fb01 f303 	mul.w	r3, r1, r3
 80029c8:	4413      	add	r3, r2
 80029ca:	3361      	adds	r3, #97	; 0x61
 80029cc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d14f      	bne.n	8002a72 <HCD_HC_OUT_IRQHandler+0x6f6>
      hhcd->hc[ch_num].ErrCnt++;
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	212c      	movs	r1, #44	; 0x2c
 80029d8:	fb01 f303 	mul.w	r3, r1, r3
 80029dc:	4413      	add	r3, r2
 80029de:	335c      	adds	r3, #92	; 0x5c
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	202c      	movs	r0, #44	; 0x2c
 80029ea:	fb00 f303 	mul.w	r3, r0, r3
 80029ee:	440b      	add	r3, r1
 80029f0:	335c      	adds	r3, #92	; 0x5c
 80029f2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	212c      	movs	r1, #44	; 0x2c
 80029fa:	fb01 f303 	mul.w	r3, r1, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	335c      	adds	r3, #92	; 0x5c
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d912      	bls.n	8002a2e <HCD_HC_OUT_IRQHandler+0x6b2>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	335c      	adds	r3, #92	; 0x5c
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	212c      	movs	r1, #44	; 0x2c
 8002a20:	fb01 f303 	mul.w	r3, r1, r3
 8002a24:	4413      	add	r3, r2
 8002a26:	3360      	adds	r3, #96	; 0x60
 8002a28:	2204      	movs	r2, #4
 8002a2a:	701a      	strb	r2, [r3, #0]
 8002a2c:	e021      	b.n	8002a72 <HCD_HC_OUT_IRQHandler+0x6f6>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	212c      	movs	r1, #44	; 0x2c
 8002a34:	fb01 f303 	mul.w	r3, r1, r3
 8002a38:	4413      	add	r3, r2
 8002a3a:	3360      	adds	r3, #96	; 0x60
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a56:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a5e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	015a      	lsls	r2, r3, #5
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	4413      	add	r3, r2
 8002a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7e:	461a      	mov	r2, r3
 8002a80:	2302      	movs	r3, #2
 8002a82:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	b2d9      	uxtb	r1, r3
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	202c      	movs	r0, #44	; 0x2c
 8002a8e:	fb00 f303 	mul.w	r3, r0, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	3360      	adds	r3, #96	; 0x60
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f006 fece 	bl	800983c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002aa0:	bf00      	nop
 8002aa2:	3720      	adds	r7, #32
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08a      	sub	sp, #40	; 0x28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	f003 030f 	and.w	r3, r3, #15
 8002ac8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	0c5b      	lsrs	r3, r3, #17
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	091b      	lsrs	r3, r3, #4
 8002ad8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002adc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d004      	beq.n	8002aee <HCD_RXQLVL_IRQHandler+0x46>
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	2b05      	cmp	r3, #5
 8002ae8:	f000 80a9 	beq.w	8002c3e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002aec:	e0aa      	b.n	8002c44 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 80a6 	beq.w	8002c42 <HCD_RXQLVL_IRQHandler+0x19a>
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	212c      	movs	r1, #44	; 0x2c
 8002afc:	fb01 f303 	mul.w	r3, r1, r3
 8002b00:	4413      	add	r3, r2
 8002b02:	3344      	adds	r3, #68	; 0x44
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 809b 	beq.w	8002c42 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	212c      	movs	r1, #44	; 0x2c
 8002b12:	fb01 f303 	mul.w	r3, r1, r3
 8002b16:	4413      	add	r3, r2
 8002b18:	3350      	adds	r3, #80	; 0x50
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	441a      	add	r2, r3
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	202c      	movs	r0, #44	; 0x2c
 8002b26:	fb00 f303 	mul.w	r3, r0, r3
 8002b2a:	440b      	add	r3, r1
 8002b2c:	334c      	adds	r3, #76	; 0x4c
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d87a      	bhi.n	8002c2a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6818      	ldr	r0, [r3, #0]
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	212c      	movs	r1, #44	; 0x2c
 8002b3e:	fb01 f303 	mul.w	r3, r1, r3
 8002b42:	4413      	add	r3, r2
 8002b44:	3344      	adds	r3, #68	; 0x44
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	b292      	uxth	r2, r2
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	f002 fdba 	bl	80056c6 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	212c      	movs	r1, #44	; 0x2c
 8002b58:	fb01 f303 	mul.w	r3, r1, r3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3344      	adds	r3, #68	; 0x44
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	441a      	add	r2, r3
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	202c      	movs	r0, #44	; 0x2c
 8002b6c:	fb00 f303 	mul.w	r3, r0, r3
 8002b70:	440b      	add	r3, r1
 8002b72:	3344      	adds	r3, #68	; 0x44
 8002b74:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	212c      	movs	r1, #44	; 0x2c
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	4413      	add	r3, r2
 8002b82:	3350      	adds	r3, #80	; 0x50
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	441a      	add	r2, r3
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	202c      	movs	r0, #44	; 0x2c
 8002b90:	fb00 f303 	mul.w	r3, r0, r3
 8002b94:	440b      	add	r3, r1
 8002b96:	3350      	adds	r3, #80	; 0x50
 8002b98:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	015a      	lsls	r2, r3, #5
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	0cdb      	lsrs	r3, r3, #19
 8002baa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bae:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	212c      	movs	r1, #44	; 0x2c
 8002bb6:	fb01 f303 	mul.w	r3, r1, r3
 8002bba:	4413      	add	r3, r2
 8002bbc:	3340      	adds	r3, #64	; 0x40
 8002bbe:	881b      	ldrh	r3, [r3, #0]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d13c      	bne.n	8002c42 <HCD_RXQLVL_IRQHandler+0x19a>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d039      	beq.n	8002c42 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	015a      	lsls	r2, r3, #5
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002be4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bec:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	015a      	lsls	r2, r3, #5
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	212c      	movs	r1, #44	; 0x2c
 8002c06:	fb01 f303 	mul.w	r3, r1, r3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3354      	adds	r3, #84	; 0x54
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	f083 0301 	eor.w	r3, r3, #1
 8002c14:	b2d8      	uxtb	r0, r3
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	212c      	movs	r1, #44	; 0x2c
 8002c1c:	fb01 f303 	mul.w	r3, r1, r3
 8002c20:	4413      	add	r3, r2
 8002c22:	3354      	adds	r3, #84	; 0x54
 8002c24:	4602      	mov	r2, r0
 8002c26:	701a      	strb	r2, [r3, #0]
      break;
 8002c28:	e00b      	b.n	8002c42 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	212c      	movs	r1, #44	; 0x2c
 8002c30:	fb01 f303 	mul.w	r3, r1, r3
 8002c34:	4413      	add	r3, r2
 8002c36:	3360      	adds	r3, #96	; 0x60
 8002c38:	2204      	movs	r2, #4
 8002c3a:	701a      	strb	r2, [r3, #0]
      break;
 8002c3c:	e001      	b.n	8002c42 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002c3e:	bf00      	nop
 8002c40:	e000      	b.n	8002c44 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002c42:	bf00      	nop
  }
}
 8002c44:	bf00      	nop
 8002c46:	3728      	adds	r7, #40	; 0x28
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c78:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d10b      	bne.n	8002c9c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d102      	bne.n	8002c94 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f006 fdb8 	bl	8009804 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f043 0302 	orr.w	r3, r3, #2
 8002c9a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d132      	bne.n	8002d0c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	f043 0308 	orr.w	r3, r3, #8
 8002cac:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d126      	bne.n	8002d06 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d113      	bne.n	8002ce8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002cc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cca:	d106      	bne.n	8002cda <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2102      	movs	r1, #2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f002 fdf4 	bl	80058c0 <USB_InitFSLSPClkSel>
 8002cd8:	e011      	b.n	8002cfe <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2101      	movs	r1, #1
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f002 fded 	bl	80058c0 <USB_InitFSLSPClkSel>
 8002ce6:	e00a      	b.n	8002cfe <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d106      	bne.n	8002cfe <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002cfc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f006 fdaa 	bl	8009858 <HAL_HCD_PortEnabled_Callback>
 8002d04:	e002      	b.n	8002d0c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f006 fdb4 	bl	8009874 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f003 0320 	and.w	r3, r3, #32
 8002d12:	2b20      	cmp	r3, #32
 8002d14:	d103      	bne.n	8002d1e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	f043 0320 	orr.w	r3, r3, #32
 8002d1c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d24:	461a      	mov	r2, r3
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	6013      	str	r3, [r2, #0]
}
 8002d2a:	bf00      	nop
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d38:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a04      	ldr	r2, [pc, #16]	; (8002d50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d42:	6013      	str	r3, [r2, #0]
}
 8002d44:	bf00      	nop
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	40007000 	.word	0x40007000

08002d54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d58:	4b04      	ldr	r3, [pc, #16]	; (8002d6c <HAL_PWREx_GetVoltageRange+0x18>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40007000 	.word	0x40007000

08002d70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d7e:	d130      	bne.n	8002de2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d80:	4b23      	ldr	r3, [pc, #140]	; (8002e10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d8c:	d038      	beq.n	8002e00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d8e:	4b20      	ldr	r3, [pc, #128]	; (8002e10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d96:	4a1e      	ldr	r2, [pc, #120]	; (8002e10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d9c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d9e:	4b1d      	ldr	r3, [pc, #116]	; (8002e14 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2232      	movs	r2, #50	; 0x32
 8002da4:	fb02 f303 	mul.w	r3, r2, r3
 8002da8:	4a1b      	ldr	r2, [pc, #108]	; (8002e18 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002daa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dae:	0c9b      	lsrs	r3, r3, #18
 8002db0:	3301      	adds	r3, #1
 8002db2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002db4:	e002      	b.n	8002dbc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	3b01      	subs	r3, #1
 8002dba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dbc:	4b14      	ldr	r3, [pc, #80]	; (8002e10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc8:	d102      	bne.n	8002dd0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1f2      	bne.n	8002db6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dd0:	4b0f      	ldr	r3, [pc, #60]	; (8002e10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ddc:	d110      	bne.n	8002e00 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e00f      	b.n	8002e02 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002de2:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dee:	d007      	beq.n	8002e00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002df0:	4b07      	ldr	r3, [pc, #28]	; (8002e10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002df8:	4a05      	ldr	r2, [pc, #20]	; (8002e10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dfe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	40007000 	.word	0x40007000
 8002e14:	20000000 	.word	0x20000000
 8002e18:	431bde83 	.word	0x431bde83

08002e1c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002e20:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	4a04      	ldr	r2, [pc, #16]	; (8002e38 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002e26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e2a:	6053      	str	r3, [r2, #4]
}
 8002e2c:	bf00      	nop
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40007000 	.word	0x40007000

08002e3c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	4a04      	ldr	r2, [pc, #16]	; (8002e58 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e4a:	6053      	str	r3, [r2, #4]
}
 8002e4c:	bf00      	nop
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40007000 	.word	0x40007000

08002e5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b088      	sub	sp, #32
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d102      	bne.n	8002e70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	f000 bc16 	b.w	800369c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e70:	4ba0      	ldr	r3, [pc, #640]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 030c 	and.w	r3, r3, #12
 8002e78:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e7a:	4b9e      	ldr	r3, [pc, #632]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0310 	and.w	r3, r3, #16
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 80e4 	beq.w	800305a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d007      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x4c>
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	2b0c      	cmp	r3, #12
 8002e9c:	f040 808b 	bne.w	8002fb6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	f040 8087 	bne.w	8002fb6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ea8:	4b92      	ldr	r3, [pc, #584]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x64>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e3ed      	b.n	800369c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a1a      	ldr	r2, [r3, #32]
 8002ec4:	4b8b      	ldr	r3, [pc, #556]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d004      	beq.n	8002eda <HAL_RCC_OscConfig+0x7e>
 8002ed0:	4b88      	ldr	r3, [pc, #544]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ed8:	e005      	b.n	8002ee6 <HAL_RCC_OscConfig+0x8a>
 8002eda:	4b86      	ldr	r3, [pc, #536]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 8002edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ee0:	091b      	lsrs	r3, r3, #4
 8002ee2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d223      	bcs.n	8002f32 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 fd80 	bl	80039f4 <RCC_SetFlashLatencyFromMSIRange>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e3ce      	b.n	800369c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002efe:	4b7d      	ldr	r3, [pc, #500]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a7c      	ldr	r2, [pc, #496]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 8002f04:	f043 0308 	orr.w	r3, r3, #8
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	4b7a      	ldr	r3, [pc, #488]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	4977      	ldr	r1, [pc, #476]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f1c:	4b75      	ldr	r3, [pc, #468]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	021b      	lsls	r3, r3, #8
 8002f2a:	4972      	ldr	r1, [pc, #456]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	604b      	str	r3, [r1, #4]
 8002f30:	e025      	b.n	8002f7e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f32:	4b70      	ldr	r3, [pc, #448]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a6f      	ldr	r2, [pc, #444]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 8002f38:	f043 0308 	orr.w	r3, r3, #8
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	4b6d      	ldr	r3, [pc, #436]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	496a      	ldr	r1, [pc, #424]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f50:	4b68      	ldr	r3, [pc, #416]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	021b      	lsls	r3, r3, #8
 8002f5e:	4965      	ldr	r1, [pc, #404]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d109      	bne.n	8002f7e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 fd40 	bl	80039f4 <RCC_SetFlashLatencyFromMSIRange>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e38e      	b.n	800369c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f7e:	f000 fc75 	bl	800386c <HAL_RCC_GetSysClockFreq>
 8002f82:	4602      	mov	r2, r0
 8002f84:	4b5b      	ldr	r3, [pc, #364]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	495a      	ldr	r1, [pc, #360]	; (80030f8 <HAL_RCC_OscConfig+0x29c>)
 8002f90:	5ccb      	ldrb	r3, [r1, r3]
 8002f92:	f003 031f 	and.w	r3, r3, #31
 8002f96:	fa22 f303 	lsr.w	r3, r2, r3
 8002f9a:	4a58      	ldr	r2, [pc, #352]	; (80030fc <HAL_RCC_OscConfig+0x2a0>)
 8002f9c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f9e:	4b58      	ldr	r3, [pc, #352]	; (8003100 <HAL_RCC_OscConfig+0x2a4>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fd feac 	bl	8000d00 <HAL_InitTick>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d052      	beq.n	8003058 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	e372      	b.n	800369c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d032      	beq.n	8003024 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002fbe:	4b4d      	ldr	r3, [pc, #308]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a4c      	ldr	r2, [pc, #304]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fca:	f7fd fee9 	bl	8000da0 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fd2:	f7fd fee5 	bl	8000da0 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e35b      	b.n	800369c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fe4:	4b43      	ldr	r3, [pc, #268]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ff0:	4b40      	ldr	r3, [pc, #256]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a3f      	ldr	r2, [pc, #252]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 8002ff6:	f043 0308 	orr.w	r3, r3, #8
 8002ffa:	6013      	str	r3, [r2, #0]
 8002ffc:	4b3d      	ldr	r3, [pc, #244]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	493a      	ldr	r1, [pc, #232]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 800300a:	4313      	orrs	r3, r2
 800300c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800300e:	4b39      	ldr	r3, [pc, #228]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	021b      	lsls	r3, r3, #8
 800301c:	4935      	ldr	r1, [pc, #212]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 800301e:	4313      	orrs	r3, r2
 8003020:	604b      	str	r3, [r1, #4]
 8003022:	e01a      	b.n	800305a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003024:	4b33      	ldr	r3, [pc, #204]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a32      	ldr	r2, [pc, #200]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 800302a:	f023 0301 	bic.w	r3, r3, #1
 800302e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003030:	f7fd feb6 	bl	8000da0 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003038:	f7fd feb2 	bl	8000da0 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e328      	b.n	800369c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800304a:	4b2a      	ldr	r3, [pc, #168]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f0      	bne.n	8003038 <HAL_RCC_OscConfig+0x1dc>
 8003056:	e000      	b.n	800305a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003058:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d073      	beq.n	800314e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	2b08      	cmp	r3, #8
 800306a:	d005      	beq.n	8003078 <HAL_RCC_OscConfig+0x21c>
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	2b0c      	cmp	r3, #12
 8003070:	d10e      	bne.n	8003090 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	2b03      	cmp	r3, #3
 8003076:	d10b      	bne.n	8003090 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003078:	4b1e      	ldr	r3, [pc, #120]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d063      	beq.n	800314c <HAL_RCC_OscConfig+0x2f0>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d15f      	bne.n	800314c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e305      	b.n	800369c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003098:	d106      	bne.n	80030a8 <HAL_RCC_OscConfig+0x24c>
 800309a:	4b16      	ldr	r3, [pc, #88]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a15      	ldr	r2, [pc, #84]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 80030a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	e01d      	b.n	80030e4 <HAL_RCC_OscConfig+0x288>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030b0:	d10c      	bne.n	80030cc <HAL_RCC_OscConfig+0x270>
 80030b2:	4b10      	ldr	r3, [pc, #64]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a0f      	ldr	r2, [pc, #60]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 80030b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	4b0d      	ldr	r3, [pc, #52]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a0c      	ldr	r2, [pc, #48]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 80030c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	e00b      	b.n	80030e4 <HAL_RCC_OscConfig+0x288>
 80030cc:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a08      	ldr	r2, [pc, #32]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 80030d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030d6:	6013      	str	r3, [r2, #0]
 80030d8:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a05      	ldr	r2, [pc, #20]	; (80030f4 <HAL_RCC_OscConfig+0x298>)
 80030de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d01b      	beq.n	8003124 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ec:	f7fd fe58 	bl	8000da0 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030f2:	e010      	b.n	8003116 <HAL_RCC_OscConfig+0x2ba>
 80030f4:	40021000 	.word	0x40021000
 80030f8:	08009e84 	.word	0x08009e84
 80030fc:	20000000 	.word	0x20000000
 8003100:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003104:	f7fd fe4c 	bl	8000da0 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b64      	cmp	r3, #100	; 0x64
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e2c2      	b.n	800369c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003116:	4baf      	ldr	r3, [pc, #700]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0f0      	beq.n	8003104 <HAL_RCC_OscConfig+0x2a8>
 8003122:	e014      	b.n	800314e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003124:	f7fd fe3c 	bl	8000da0 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800312c:	f7fd fe38 	bl	8000da0 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b64      	cmp	r3, #100	; 0x64
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e2ae      	b.n	800369c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800313e:	4ba5      	ldr	r3, [pc, #660]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f0      	bne.n	800312c <HAL_RCC_OscConfig+0x2d0>
 800314a:	e000      	b.n	800314e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800314c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d060      	beq.n	800321c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	2b04      	cmp	r3, #4
 800315e:	d005      	beq.n	800316c <HAL_RCC_OscConfig+0x310>
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	2b0c      	cmp	r3, #12
 8003164:	d119      	bne.n	800319a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2b02      	cmp	r3, #2
 800316a:	d116      	bne.n	800319a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800316c:	4b99      	ldr	r3, [pc, #612]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003174:	2b00      	cmp	r3, #0
 8003176:	d005      	beq.n	8003184 <HAL_RCC_OscConfig+0x328>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e28b      	b.n	800369c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003184:	4b93      	ldr	r3, [pc, #588]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	061b      	lsls	r3, r3, #24
 8003192:	4990      	ldr	r1, [pc, #576]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 8003194:	4313      	orrs	r3, r2
 8003196:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003198:	e040      	b.n	800321c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d023      	beq.n	80031ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031a2:	4b8c      	ldr	r3, [pc, #560]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a8b      	ldr	r2, [pc, #556]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 80031a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ae:	f7fd fdf7 	bl	8000da0 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b6:	f7fd fdf3 	bl	8000da0 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e269      	b.n	800369c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031c8:	4b82      	ldr	r3, [pc, #520]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0f0      	beq.n	80031b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d4:	4b7f      	ldr	r3, [pc, #508]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	061b      	lsls	r3, r3, #24
 80031e2:	497c      	ldr	r1, [pc, #496]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	604b      	str	r3, [r1, #4]
 80031e8:	e018      	b.n	800321c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ea:	4b7a      	ldr	r3, [pc, #488]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a79      	ldr	r2, [pc, #484]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 80031f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f6:	f7fd fdd3 	bl	8000da0 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031fe:	f7fd fdcf 	bl	8000da0 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e245      	b.n	800369c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003210:	4b70      	ldr	r3, [pc, #448]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1f0      	bne.n	80031fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0308 	and.w	r3, r3, #8
 8003224:	2b00      	cmp	r3, #0
 8003226:	d03c      	beq.n	80032a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d01c      	beq.n	800326a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003230:	4b68      	ldr	r3, [pc, #416]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 8003232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003236:	4a67      	ldr	r2, [pc, #412]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 8003238:	f043 0301 	orr.w	r3, r3, #1
 800323c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003240:	f7fd fdae 	bl	8000da0 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003248:	f7fd fdaa 	bl	8000da0 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e220      	b.n	800369c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800325a:	4b5e      	ldr	r3, [pc, #376]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 800325c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0ef      	beq.n	8003248 <HAL_RCC_OscConfig+0x3ec>
 8003268:	e01b      	b.n	80032a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800326a:	4b5a      	ldr	r3, [pc, #360]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 800326c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003270:	4a58      	ldr	r2, [pc, #352]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 8003272:	f023 0301 	bic.w	r3, r3, #1
 8003276:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327a:	f7fd fd91 	bl	8000da0 <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003282:	f7fd fd8d 	bl	8000da0 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e203      	b.n	800369c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003294:	4b4f      	ldr	r3, [pc, #316]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 8003296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1ef      	bne.n	8003282 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0304 	and.w	r3, r3, #4
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 80a6 	beq.w	80033fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032b0:	2300      	movs	r3, #0
 80032b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80032b4:	4b47      	ldr	r3, [pc, #284]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 80032b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10d      	bne.n	80032dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c0:	4b44      	ldr	r3, [pc, #272]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 80032c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c4:	4a43      	ldr	r2, [pc, #268]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 80032c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ca:	6593      	str	r3, [r2, #88]	; 0x58
 80032cc:	4b41      	ldr	r3, [pc, #260]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 80032ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d4:	60bb      	str	r3, [r7, #8]
 80032d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032d8:	2301      	movs	r3, #1
 80032da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032dc:	4b3e      	ldr	r3, [pc, #248]	; (80033d8 <HAL_RCC_OscConfig+0x57c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d118      	bne.n	800331a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032e8:	4b3b      	ldr	r3, [pc, #236]	; (80033d8 <HAL_RCC_OscConfig+0x57c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a3a      	ldr	r2, [pc, #232]	; (80033d8 <HAL_RCC_OscConfig+0x57c>)
 80032ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032f4:	f7fd fd54 	bl	8000da0 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032fc:	f7fd fd50 	bl	8000da0 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e1c6      	b.n	800369c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800330e:	4b32      	ldr	r3, [pc, #200]	; (80033d8 <HAL_RCC_OscConfig+0x57c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f0      	beq.n	80032fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d108      	bne.n	8003334 <HAL_RCC_OscConfig+0x4d8>
 8003322:	4b2c      	ldr	r3, [pc, #176]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 8003324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003328:	4a2a      	ldr	r2, [pc, #168]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 800332a:	f043 0301 	orr.w	r3, r3, #1
 800332e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003332:	e024      	b.n	800337e <HAL_RCC_OscConfig+0x522>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	2b05      	cmp	r3, #5
 800333a:	d110      	bne.n	800335e <HAL_RCC_OscConfig+0x502>
 800333c:	4b25      	ldr	r3, [pc, #148]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 800333e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003342:	4a24      	ldr	r2, [pc, #144]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 8003344:	f043 0304 	orr.w	r3, r3, #4
 8003348:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800334c:	4b21      	ldr	r3, [pc, #132]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 800334e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003352:	4a20      	ldr	r2, [pc, #128]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800335c:	e00f      	b.n	800337e <HAL_RCC_OscConfig+0x522>
 800335e:	4b1d      	ldr	r3, [pc, #116]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 8003360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003364:	4a1b      	ldr	r2, [pc, #108]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 8003366:	f023 0301 	bic.w	r3, r3, #1
 800336a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800336e:	4b19      	ldr	r3, [pc, #100]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 8003370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003374:	4a17      	ldr	r2, [pc, #92]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 8003376:	f023 0304 	bic.w	r3, r3, #4
 800337a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d016      	beq.n	80033b4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003386:	f7fd fd0b 	bl	8000da0 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800338c:	e00a      	b.n	80033a4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800338e:	f7fd fd07 	bl	8000da0 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	f241 3288 	movw	r2, #5000	; 0x1388
 800339c:	4293      	cmp	r3, r2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e17b      	b.n	800369c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033a4:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <HAL_RCC_OscConfig+0x578>)
 80033a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0ed      	beq.n	800338e <HAL_RCC_OscConfig+0x532>
 80033b2:	e01a      	b.n	80033ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b4:	f7fd fcf4 	bl	8000da0 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033ba:	e00f      	b.n	80033dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033bc:	f7fd fcf0 	bl	8000da0 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d906      	bls.n	80033dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e164      	b.n	800369c <HAL_RCC_OscConfig+0x840>
 80033d2:	bf00      	nop
 80033d4:	40021000 	.word	0x40021000
 80033d8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033dc:	4ba8      	ldr	r3, [pc, #672]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 80033de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1e8      	bne.n	80033bc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033ea:	7ffb      	ldrb	r3, [r7, #31]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d105      	bne.n	80033fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f0:	4ba3      	ldr	r3, [pc, #652]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 80033f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f4:	4aa2      	ldr	r2, [pc, #648]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 80033f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0320 	and.w	r3, r3, #32
 8003404:	2b00      	cmp	r3, #0
 8003406:	d03c      	beq.n	8003482 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	2b00      	cmp	r3, #0
 800340e:	d01c      	beq.n	800344a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003410:	4b9b      	ldr	r3, [pc, #620]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 8003412:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003416:	4a9a      	ldr	r2, [pc, #616]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003420:	f7fd fcbe 	bl	8000da0 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003428:	f7fd fcba 	bl	8000da0 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e130      	b.n	800369c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800343a:	4b91      	ldr	r3, [pc, #580]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 800343c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0ef      	beq.n	8003428 <HAL_RCC_OscConfig+0x5cc>
 8003448:	e01b      	b.n	8003482 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800344a:	4b8d      	ldr	r3, [pc, #564]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 800344c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003450:	4a8b      	ldr	r2, [pc, #556]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 8003452:	f023 0301 	bic.w	r3, r3, #1
 8003456:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800345a:	f7fd fca1 	bl	8000da0 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003462:	f7fd fc9d 	bl	8000da0 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e113      	b.n	800369c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003474:	4b82      	ldr	r3, [pc, #520]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 8003476:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1ef      	bne.n	8003462 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 8107 	beq.w	800369a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003490:	2b02      	cmp	r3, #2
 8003492:	f040 80cb 	bne.w	800362c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003496:	4b7a      	ldr	r3, [pc, #488]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f003 0203 	and.w	r2, r3, #3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d12c      	bne.n	8003504 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b4:	3b01      	subs	r3, #1
 80034b6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d123      	bne.n	8003504 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d11b      	bne.n	8003504 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034d8:	429a      	cmp	r2, r3
 80034da:	d113      	bne.n	8003504 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e6:	085b      	lsrs	r3, r3, #1
 80034e8:	3b01      	subs	r3, #1
 80034ea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d109      	bne.n	8003504 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	085b      	lsrs	r3, r3, #1
 80034fc:	3b01      	subs	r3, #1
 80034fe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003500:	429a      	cmp	r2, r3
 8003502:	d06d      	beq.n	80035e0 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	2b0c      	cmp	r3, #12
 8003508:	d068      	beq.n	80035dc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800350a:	4b5d      	ldr	r3, [pc, #372]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d105      	bne.n	8003522 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003516:	4b5a      	ldr	r3, [pc, #360]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e0ba      	b.n	800369c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003526:	4b56      	ldr	r3, [pc, #344]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a55      	ldr	r2, [pc, #340]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 800352c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003530:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003532:	f7fd fc35 	bl	8000da0 <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800353a:	f7fd fc31 	bl	8000da0 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e0a7      	b.n	800369c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800354c:	4b4c      	ldr	r3, [pc, #304]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1f0      	bne.n	800353a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003558:	4b49      	ldr	r3, [pc, #292]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	4b49      	ldr	r3, [pc, #292]	; (8003684 <HAL_RCC_OscConfig+0x828>)
 800355e:	4013      	ands	r3, r2
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003568:	3a01      	subs	r2, #1
 800356a:	0112      	lsls	r2, r2, #4
 800356c:	4311      	orrs	r1, r2
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003572:	0212      	lsls	r2, r2, #8
 8003574:	4311      	orrs	r1, r2
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800357a:	0852      	lsrs	r2, r2, #1
 800357c:	3a01      	subs	r2, #1
 800357e:	0552      	lsls	r2, r2, #21
 8003580:	4311      	orrs	r1, r2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003586:	0852      	lsrs	r2, r2, #1
 8003588:	3a01      	subs	r2, #1
 800358a:	0652      	lsls	r2, r2, #25
 800358c:	4311      	orrs	r1, r2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003592:	06d2      	lsls	r2, r2, #27
 8003594:	430a      	orrs	r2, r1
 8003596:	493a      	ldr	r1, [pc, #232]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 8003598:	4313      	orrs	r3, r2
 800359a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800359c:	4b38      	ldr	r3, [pc, #224]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a37      	ldr	r2, [pc, #220]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 80035a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035a8:	4b35      	ldr	r3, [pc, #212]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	4a34      	ldr	r2, [pc, #208]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 80035ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035b4:	f7fd fbf4 	bl	8000da0 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035bc:	f7fd fbf0 	bl	8000da0 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e066      	b.n	800369c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ce:	4b2c      	ldr	r3, [pc, #176]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0f0      	beq.n	80035bc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035da:	e05e      	b.n	800369a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e05d      	b.n	800369c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035e0:	4b27      	ldr	r3, [pc, #156]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d156      	bne.n	800369a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80035ec:	4b24      	ldr	r3, [pc, #144]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a23      	ldr	r2, [pc, #140]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 80035f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035f8:	4b21      	ldr	r3, [pc, #132]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	4a20      	ldr	r2, [pc, #128]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 80035fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003602:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003604:	f7fd fbcc 	bl	8000da0 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800360c:	f7fd fbc8 	bl	8000da0 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e03e      	b.n	800369c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800361e:	4b18      	ldr	r3, [pc, #96]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0f0      	beq.n	800360c <HAL_RCC_OscConfig+0x7b0>
 800362a:	e036      	b.n	800369a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	2b0c      	cmp	r3, #12
 8003630:	d031      	beq.n	8003696 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003632:	4b13      	ldr	r3, [pc, #76]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a12      	ldr	r2, [pc, #72]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 8003638:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800363c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800363e:	4b10      	ldr	r3, [pc, #64]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d105      	bne.n	8003656 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800364a:	4b0d      	ldr	r3, [pc, #52]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	4a0c      	ldr	r2, [pc, #48]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 8003650:	f023 0303 	bic.w	r3, r3, #3
 8003654:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003656:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	4a09      	ldr	r2, [pc, #36]	; (8003680 <HAL_RCC_OscConfig+0x824>)
 800365c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003664:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003666:	f7fd fb9b 	bl	8000da0 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800366c:	e00c      	b.n	8003688 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800366e:	f7fd fb97 	bl	8000da0 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d905      	bls.n	8003688 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e00d      	b.n	800369c <HAL_RCC_OscConfig+0x840>
 8003680:	40021000 	.word	0x40021000
 8003684:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003688:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <HAL_RCC_OscConfig+0x848>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1ec      	bne.n	800366e <HAL_RCC_OscConfig+0x812>
 8003694:	e001      	b.n	800369a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e000      	b.n	800369c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3720      	adds	r7, #32
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40021000 	.word	0x40021000

080036a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e0c8      	b.n	800384e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036bc:	4b66      	ldr	r3, [pc, #408]	; (8003858 <HAL_RCC_ClockConfig+0x1b0>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d910      	bls.n	80036ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ca:	4b63      	ldr	r3, [pc, #396]	; (8003858 <HAL_RCC_ClockConfig+0x1b0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f023 0207 	bic.w	r2, r3, #7
 80036d2:	4961      	ldr	r1, [pc, #388]	; (8003858 <HAL_RCC_ClockConfig+0x1b0>)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036da:	4b5f      	ldr	r3, [pc, #380]	; (8003858 <HAL_RCC_ClockConfig+0x1b0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d001      	beq.n	80036ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0b0      	b.n	800384e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d04c      	beq.n	8003792 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b03      	cmp	r3, #3
 80036fe:	d107      	bne.n	8003710 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003700:	4b56      	ldr	r3, [pc, #344]	; (800385c <HAL_RCC_ClockConfig+0x1b4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d121      	bne.n	8003750 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e09e      	b.n	800384e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b02      	cmp	r3, #2
 8003716:	d107      	bne.n	8003728 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003718:	4b50      	ldr	r3, [pc, #320]	; (800385c <HAL_RCC_ClockConfig+0x1b4>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d115      	bne.n	8003750 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e092      	b.n	800384e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d107      	bne.n	8003740 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003730:	4b4a      	ldr	r3, [pc, #296]	; (800385c <HAL_RCC_ClockConfig+0x1b4>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d109      	bne.n	8003750 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e086      	b.n	800384e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003740:	4b46      	ldr	r3, [pc, #280]	; (800385c <HAL_RCC_ClockConfig+0x1b4>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e07e      	b.n	800384e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003750:	4b42      	ldr	r3, [pc, #264]	; (800385c <HAL_RCC_ClockConfig+0x1b4>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f023 0203 	bic.w	r2, r3, #3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	493f      	ldr	r1, [pc, #252]	; (800385c <HAL_RCC_ClockConfig+0x1b4>)
 800375e:	4313      	orrs	r3, r2
 8003760:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003762:	f7fd fb1d 	bl	8000da0 <HAL_GetTick>
 8003766:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003768:	e00a      	b.n	8003780 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800376a:	f7fd fb19 	bl	8000da0 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	f241 3288 	movw	r2, #5000	; 0x1388
 8003778:	4293      	cmp	r3, r2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e066      	b.n	800384e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003780:	4b36      	ldr	r3, [pc, #216]	; (800385c <HAL_RCC_ClockConfig+0x1b4>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 020c 	and.w	r2, r3, #12
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	429a      	cmp	r2, r3
 8003790:	d1eb      	bne.n	800376a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d008      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800379e:	4b2f      	ldr	r3, [pc, #188]	; (800385c <HAL_RCC_ClockConfig+0x1b4>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	492c      	ldr	r1, [pc, #176]	; (800385c <HAL_RCC_ClockConfig+0x1b4>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037b0:	4b29      	ldr	r3, [pc, #164]	; (8003858 <HAL_RCC_ClockConfig+0x1b0>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d210      	bcs.n	80037e0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037be:	4b26      	ldr	r3, [pc, #152]	; (8003858 <HAL_RCC_ClockConfig+0x1b0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f023 0207 	bic.w	r2, r3, #7
 80037c6:	4924      	ldr	r1, [pc, #144]	; (8003858 <HAL_RCC_ClockConfig+0x1b0>)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ce:	4b22      	ldr	r3, [pc, #136]	; (8003858 <HAL_RCC_ClockConfig+0x1b0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d001      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e036      	b.n	800384e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037ec:	4b1b      	ldr	r3, [pc, #108]	; (800385c <HAL_RCC_ClockConfig+0x1b4>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	4918      	ldr	r1, [pc, #96]	; (800385c <HAL_RCC_ClockConfig+0x1b4>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b00      	cmp	r3, #0
 8003808:	d009      	beq.n	800381e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800380a:	4b14      	ldr	r3, [pc, #80]	; (800385c <HAL_RCC_ClockConfig+0x1b4>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	4910      	ldr	r1, [pc, #64]	; (800385c <HAL_RCC_ClockConfig+0x1b4>)
 800381a:	4313      	orrs	r3, r2
 800381c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800381e:	f000 f825 	bl	800386c <HAL_RCC_GetSysClockFreq>
 8003822:	4602      	mov	r2, r0
 8003824:	4b0d      	ldr	r3, [pc, #52]	; (800385c <HAL_RCC_ClockConfig+0x1b4>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	091b      	lsrs	r3, r3, #4
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	490c      	ldr	r1, [pc, #48]	; (8003860 <HAL_RCC_ClockConfig+0x1b8>)
 8003830:	5ccb      	ldrb	r3, [r1, r3]
 8003832:	f003 031f 	and.w	r3, r3, #31
 8003836:	fa22 f303 	lsr.w	r3, r2, r3
 800383a:	4a0a      	ldr	r2, [pc, #40]	; (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 800383c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800383e:	4b0a      	ldr	r3, [pc, #40]	; (8003868 <HAL_RCC_ClockConfig+0x1c0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f7fd fa5c 	bl	8000d00 <HAL_InitTick>
 8003848:	4603      	mov	r3, r0
 800384a:	72fb      	strb	r3, [r7, #11]

  return status;
 800384c:	7afb      	ldrb	r3, [r7, #11]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40022000 	.word	0x40022000
 800385c:	40021000 	.word	0x40021000
 8003860:	08009e84 	.word	0x08009e84
 8003864:	20000000 	.word	0x20000000
 8003868:	20000004 	.word	0x20000004

0800386c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800386c:	b480      	push	{r7}
 800386e:	b089      	sub	sp, #36	; 0x24
 8003870:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003872:	2300      	movs	r3, #0
 8003874:	61fb      	str	r3, [r7, #28]
 8003876:	2300      	movs	r3, #0
 8003878:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800387a:	4b3e      	ldr	r3, [pc, #248]	; (8003974 <HAL_RCC_GetSysClockFreq+0x108>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 030c 	and.w	r3, r3, #12
 8003882:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003884:	4b3b      	ldr	r3, [pc, #236]	; (8003974 <HAL_RCC_GetSysClockFreq+0x108>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f003 0303 	and.w	r3, r3, #3
 800388c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d005      	beq.n	80038a0 <HAL_RCC_GetSysClockFreq+0x34>
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	2b0c      	cmp	r3, #12
 8003898:	d121      	bne.n	80038de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d11e      	bne.n	80038de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038a0:	4b34      	ldr	r3, [pc, #208]	; (8003974 <HAL_RCC_GetSysClockFreq+0x108>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d107      	bne.n	80038bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80038ac:	4b31      	ldr	r3, [pc, #196]	; (8003974 <HAL_RCC_GetSysClockFreq+0x108>)
 80038ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038b2:	0a1b      	lsrs	r3, r3, #8
 80038b4:	f003 030f 	and.w	r3, r3, #15
 80038b8:	61fb      	str	r3, [r7, #28]
 80038ba:	e005      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80038bc:	4b2d      	ldr	r3, [pc, #180]	; (8003974 <HAL_RCC_GetSysClockFreq+0x108>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	091b      	lsrs	r3, r3, #4
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80038c8:	4a2b      	ldr	r2, [pc, #172]	; (8003978 <HAL_RCC_GetSysClockFreq+0x10c>)
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10d      	bne.n	80038f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038dc:	e00a      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d102      	bne.n	80038ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038e4:	4b25      	ldr	r3, [pc, #148]	; (800397c <HAL_RCC_GetSysClockFreq+0x110>)
 80038e6:	61bb      	str	r3, [r7, #24]
 80038e8:	e004      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d101      	bne.n	80038f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038f0:	4b23      	ldr	r3, [pc, #140]	; (8003980 <HAL_RCC_GetSysClockFreq+0x114>)
 80038f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	2b0c      	cmp	r3, #12
 80038f8:	d134      	bne.n	8003964 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038fa:	4b1e      	ldr	r3, [pc, #120]	; (8003974 <HAL_RCC_GetSysClockFreq+0x108>)
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	f003 0303 	and.w	r3, r3, #3
 8003902:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2b02      	cmp	r3, #2
 8003908:	d003      	beq.n	8003912 <HAL_RCC_GetSysClockFreq+0xa6>
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b03      	cmp	r3, #3
 800390e:	d003      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0xac>
 8003910:	e005      	b.n	800391e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003912:	4b1a      	ldr	r3, [pc, #104]	; (800397c <HAL_RCC_GetSysClockFreq+0x110>)
 8003914:	617b      	str	r3, [r7, #20]
      break;
 8003916:	e005      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003918:	4b19      	ldr	r3, [pc, #100]	; (8003980 <HAL_RCC_GetSysClockFreq+0x114>)
 800391a:	617b      	str	r3, [r7, #20]
      break;
 800391c:	e002      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	617b      	str	r3, [r7, #20]
      break;
 8003922:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003924:	4b13      	ldr	r3, [pc, #76]	; (8003974 <HAL_RCC_GetSysClockFreq+0x108>)
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	091b      	lsrs	r3, r3, #4
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	3301      	adds	r3, #1
 8003930:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003932:	4b10      	ldr	r3, [pc, #64]	; (8003974 <HAL_RCC_GetSysClockFreq+0x108>)
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	0a1b      	lsrs	r3, r3, #8
 8003938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	fb02 f203 	mul.w	r2, r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	fbb2 f3f3 	udiv	r3, r2, r3
 8003948:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800394a:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <HAL_RCC_GetSysClockFreq+0x108>)
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	0e5b      	lsrs	r3, r3, #25
 8003950:	f003 0303 	and.w	r3, r3, #3
 8003954:	3301      	adds	r3, #1
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003962:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003964:	69bb      	ldr	r3, [r7, #24]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3724      	adds	r7, #36	; 0x24
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40021000 	.word	0x40021000
 8003978:	08009e9c 	.word	0x08009e9c
 800397c:	00f42400 	.word	0x00f42400
 8003980:	007a1200 	.word	0x007a1200

08003984 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003988:	4b03      	ldr	r3, [pc, #12]	; (8003998 <HAL_RCC_GetHCLKFreq+0x14>)
 800398a:	681b      	ldr	r3, [r3, #0]
}
 800398c:	4618      	mov	r0, r3
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	20000000 	.word	0x20000000

0800399c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80039a0:	f7ff fff0 	bl	8003984 <HAL_RCC_GetHCLKFreq>
 80039a4:	4602      	mov	r2, r0
 80039a6:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	0a1b      	lsrs	r3, r3, #8
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	4904      	ldr	r1, [pc, #16]	; (80039c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039b2:	5ccb      	ldrb	r3, [r1, r3]
 80039b4:	f003 031f 	and.w	r3, r3, #31
 80039b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039bc:	4618      	mov	r0, r3
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40021000 	.word	0x40021000
 80039c4:	08009e94 	.word	0x08009e94

080039c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80039cc:	f7ff ffda 	bl	8003984 <HAL_RCC_GetHCLKFreq>
 80039d0:	4602      	mov	r2, r0
 80039d2:	4b06      	ldr	r3, [pc, #24]	; (80039ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	0adb      	lsrs	r3, r3, #11
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	4904      	ldr	r1, [pc, #16]	; (80039f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039de:	5ccb      	ldrb	r3, [r1, r3]
 80039e0:	f003 031f 	and.w	r3, r3, #31
 80039e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40021000 	.word	0x40021000
 80039f0:	08009e94 	.word	0x08009e94

080039f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039fc:	2300      	movs	r3, #0
 80039fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a00:	4b2a      	ldr	r3, [pc, #168]	; (8003aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a0c:	f7ff f9a2 	bl	8002d54 <HAL_PWREx_GetVoltageRange>
 8003a10:	6178      	str	r0, [r7, #20]
 8003a12:	e014      	b.n	8003a3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a14:	4b25      	ldr	r3, [pc, #148]	; (8003aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a18:	4a24      	ldr	r2, [pc, #144]	; (8003aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a1e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a20:	4b22      	ldr	r3, [pc, #136]	; (8003aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a2c:	f7ff f992 	bl	8002d54 <HAL_PWREx_GetVoltageRange>
 8003a30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a32:	4b1e      	ldr	r3, [pc, #120]	; (8003aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a36:	4a1d      	ldr	r2, [pc, #116]	; (8003aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a3c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a44:	d10b      	bne.n	8003a5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b80      	cmp	r3, #128	; 0x80
 8003a4a:	d919      	bls.n	8003a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2ba0      	cmp	r3, #160	; 0xa0
 8003a50:	d902      	bls.n	8003a58 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a52:	2302      	movs	r3, #2
 8003a54:	613b      	str	r3, [r7, #16]
 8003a56:	e013      	b.n	8003a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a58:	2301      	movs	r3, #1
 8003a5a:	613b      	str	r3, [r7, #16]
 8003a5c:	e010      	b.n	8003a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b80      	cmp	r3, #128	; 0x80
 8003a62:	d902      	bls.n	8003a6a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a64:	2303      	movs	r3, #3
 8003a66:	613b      	str	r3, [r7, #16]
 8003a68:	e00a      	b.n	8003a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b80      	cmp	r3, #128	; 0x80
 8003a6e:	d102      	bne.n	8003a76 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a70:	2302      	movs	r3, #2
 8003a72:	613b      	str	r3, [r7, #16]
 8003a74:	e004      	b.n	8003a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b70      	cmp	r3, #112	; 0x70
 8003a7a:	d101      	bne.n	8003a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a80:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f023 0207 	bic.w	r2, r3, #7
 8003a88:	4909      	ldr	r1, [pc, #36]	; (8003ab0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a90:	4b07      	ldr	r3, [pc, #28]	; (8003ab0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d001      	beq.n	8003aa2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	40022000 	.word	0x40022000

08003ab4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003abc:	2300      	movs	r3, #0
 8003abe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d041      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ad4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ad8:	d02a      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ada:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ade:	d824      	bhi.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ae0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ae4:	d008      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003ae6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003aea:	d81e      	bhi.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00a      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003af0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003af4:	d010      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003af6:	e018      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003af8:	4b86      	ldr	r3, [pc, #536]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	4a85      	ldr	r2, [pc, #532]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b02:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b04:	e015      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3304      	adds	r3, #4
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 fadd 	bl	80040cc <RCCEx_PLLSAI1_Config>
 8003b12:	4603      	mov	r3, r0
 8003b14:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b16:	e00c      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3320      	adds	r3, #32
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 fbc6 	bl	80042b0 <RCCEx_PLLSAI2_Config>
 8003b24:	4603      	mov	r3, r0
 8003b26:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b28:	e003      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	74fb      	strb	r3, [r7, #19]
      break;
 8003b2e:	e000      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003b30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b32:	7cfb      	ldrb	r3, [r7, #19]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10b      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b38:	4b76      	ldr	r3, [pc, #472]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b46:	4973      	ldr	r1, [pc, #460]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b4e:	e001      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b50:	7cfb      	ldrb	r3, [r7, #19]
 8003b52:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d041      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b68:	d02a      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003b6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b6e:	d824      	bhi.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b74:	d008      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b7a:	d81e      	bhi.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00a      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b84:	d010      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b86:	e018      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b88:	4b62      	ldr	r3, [pc, #392]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	4a61      	ldr	r2, [pc, #388]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b92:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b94:	e015      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 fa95 	bl	80040cc <RCCEx_PLLSAI1_Config>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ba6:	e00c      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3320      	adds	r3, #32
 8003bac:	2100      	movs	r1, #0
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 fb7e 	bl	80042b0 <RCCEx_PLLSAI2_Config>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bb8:	e003      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	74fb      	strb	r3, [r7, #19]
      break;
 8003bbe:	e000      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003bc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bc2:	7cfb      	ldrb	r3, [r7, #19]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10b      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bc8:	4b52      	ldr	r3, [pc, #328]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bd6:	494f      	ldr	r1, [pc, #316]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003bde:	e001      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be0:	7cfb      	ldrb	r3, [r7, #19]
 8003be2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 80a0 	beq.w	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bf6:	4b47      	ldr	r3, [pc, #284]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003c06:	2300      	movs	r3, #0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00d      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c0c:	4b41      	ldr	r3, [pc, #260]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c10:	4a40      	ldr	r2, [pc, #256]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c16:	6593      	str	r3, [r2, #88]	; 0x58
 8003c18:	4b3e      	ldr	r3, [pc, #248]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c20:	60bb      	str	r3, [r7, #8]
 8003c22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c24:	2301      	movs	r3, #1
 8003c26:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c28:	4b3b      	ldr	r3, [pc, #236]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a3a      	ldr	r2, [pc, #232]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c34:	f7fd f8b4 	bl	8000da0 <HAL_GetTick>
 8003c38:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c3a:	e009      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c3c:	f7fd f8b0 	bl	8000da0 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d902      	bls.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	74fb      	strb	r3, [r7, #19]
        break;
 8003c4e:	e005      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c50:	4b31      	ldr	r3, [pc, #196]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0ef      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003c5c:	7cfb      	ldrb	r3, [r7, #19]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d15c      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c62:	4b2c      	ldr	r3, [pc, #176]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c6c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d01f      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d019      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c80:	4b24      	ldr	r3, [pc, #144]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c8c:	4b21      	ldr	r3, [pc, #132]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c92:	4a20      	ldr	r2, [pc, #128]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c9c:	4b1d      	ldr	r3, [pc, #116]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca2:	4a1c      	ldr	r2, [pc, #112]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003cac:	4a19      	ldr	r2, [pc, #100]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d016      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cbe:	f7fd f86f 	bl	8000da0 <HAL_GetTick>
 8003cc2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cc4:	e00b      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc6:	f7fd f86b 	bl	8000da0 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d902      	bls.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	74fb      	strb	r3, [r7, #19]
            break;
 8003cdc:	e006      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cde:	4b0d      	ldr	r3, [pc, #52]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0ec      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003cec:	7cfb      	ldrb	r3, [r7, #19]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10c      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cf2:	4b08      	ldr	r3, [pc, #32]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d02:	4904      	ldr	r1, [pc, #16]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d0a:	e009      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d0c:	7cfb      	ldrb	r3, [r7, #19]
 8003d0e:	74bb      	strb	r3, [r7, #18]
 8003d10:	e006      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003d12:	bf00      	nop
 8003d14:	40021000 	.word	0x40021000
 8003d18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d1c:	7cfb      	ldrb	r3, [r7, #19]
 8003d1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d20:	7c7b      	ldrb	r3, [r7, #17]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d105      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d26:	4ba6      	ldr	r3, [pc, #664]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2a:	4aa5      	ldr	r2, [pc, #660]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00a      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d3e:	4ba0      	ldr	r3, [pc, #640]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d44:	f023 0203 	bic.w	r2, r3, #3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4c:	499c      	ldr	r1, [pc, #624]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00a      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d60:	4b97      	ldr	r3, [pc, #604]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d66:	f023 020c 	bic.w	r2, r3, #12
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6e:	4994      	ldr	r1, [pc, #592]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00a      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d82:	4b8f      	ldr	r3, [pc, #572]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	498b      	ldr	r1, [pc, #556]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00a      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003da4:	4b86      	ldr	r3, [pc, #536]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003daa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db2:	4983      	ldr	r1, [pc, #524]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0310 	and.w	r3, r3, #16
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003dc6:	4b7e      	ldr	r3, [pc, #504]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dd4:	497a      	ldr	r1, [pc, #488]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0320 	and.w	r3, r3, #32
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00a      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003de8:	4b75      	ldr	r3, [pc, #468]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df6:	4972      	ldr	r1, [pc, #456]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00a      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e0a:	4b6d      	ldr	r3, [pc, #436]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e18:	4969      	ldr	r1, [pc, #420]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00a      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e2c:	4b64      	ldr	r3, [pc, #400]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e3a:	4961      	ldr	r1, [pc, #388]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e4e:	4b5c      	ldr	r3, [pc, #368]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e54:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e5c:	4958      	ldr	r1, [pc, #352]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00a      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e70:	4b53      	ldr	r3, [pc, #332]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e76:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7e:	4950      	ldr	r1, [pc, #320]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e92:	4b4b      	ldr	r3, [pc, #300]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea0:	4947      	ldr	r1, [pc, #284]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00a      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003eb4:	4b42      	ldr	r3, [pc, #264]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003eb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003eba:	f023 0203 	bic.w	r2, r3, #3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec2:	493f      	ldr	r1, [pc, #252]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d028      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ed6:	4b3a      	ldr	r3, [pc, #232]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003edc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee4:	4936      	ldr	r1, [pc, #216]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ef4:	d106      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ef6:	4b32      	ldr	r3, [pc, #200]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	4a31      	ldr	r2, [pc, #196]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003efc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f00:	60d3      	str	r3, [r2, #12]
 8003f02:	e011      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f0c:	d10c      	bne.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3304      	adds	r3, #4
 8003f12:	2101      	movs	r1, #1
 8003f14:	4618      	mov	r0, r3
 8003f16:	f000 f8d9 	bl	80040cc <RCCEx_PLLSAI1_Config>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f1e:	7cfb      	ldrb	r3, [r7, #19]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8003f24:	7cfb      	ldrb	r3, [r7, #19]
 8003f26:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d028      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f34:	4b22      	ldr	r3, [pc, #136]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f42:	491f      	ldr	r1, [pc, #124]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f52:	d106      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f54:	4b1a      	ldr	r3, [pc, #104]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	4a19      	ldr	r2, [pc, #100]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f5e:	60d3      	str	r3, [r2, #12]
 8003f60:	e011      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f6a:	d10c      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	3304      	adds	r3, #4
 8003f70:	2101      	movs	r1, #1
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 f8aa 	bl	80040cc <RCCEx_PLLSAI1_Config>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f7c:	7cfb      	ldrb	r3, [r7, #19]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8003f82:	7cfb      	ldrb	r3, [r7, #19]
 8003f84:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d02a      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f92:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f98:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fa0:	4907      	ldr	r1, [pc, #28]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fb0:	d108      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fb2:	4b03      	ldr	r3, [pc, #12]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	4a02      	ldr	r2, [pc, #8]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fbc:	60d3      	str	r3, [r2, #12]
 8003fbe:	e013      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003fc0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fcc:	d10c      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 f879 	bl	80040cc <RCCEx_PLLSAI1_Config>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fde:	7cfb      	ldrb	r3, [r7, #19]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003fe4:	7cfb      	ldrb	r3, [r7, #19]
 8003fe6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d02f      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ff4:	4b2c      	ldr	r3, [pc, #176]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004002:	4929      	ldr	r1, [pc, #164]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800400e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004012:	d10d      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3304      	adds	r3, #4
 8004018:	2102      	movs	r1, #2
 800401a:	4618      	mov	r0, r3
 800401c:	f000 f856 	bl	80040cc <RCCEx_PLLSAI1_Config>
 8004020:	4603      	mov	r3, r0
 8004022:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004024:	7cfb      	ldrb	r3, [r7, #19]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d014      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800402a:	7cfb      	ldrb	r3, [r7, #19]
 800402c:	74bb      	strb	r3, [r7, #18]
 800402e:	e011      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004034:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004038:	d10c      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3320      	adds	r3, #32
 800403e:	2102      	movs	r1, #2
 8004040:	4618      	mov	r0, r3
 8004042:	f000 f935 	bl	80042b0 <RCCEx_PLLSAI2_Config>
 8004046:	4603      	mov	r3, r0
 8004048:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800404a:	7cfb      	ldrb	r3, [r7, #19]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004050:	7cfb      	ldrb	r3, [r7, #19]
 8004052:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00b      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004060:	4b11      	ldr	r3, [pc, #68]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004066:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004070:	490d      	ldr	r1, [pc, #52]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004072:	4313      	orrs	r3, r2
 8004074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00b      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004084:	4b08      	ldr	r3, [pc, #32]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004094:	4904      	ldr	r1, [pc, #16]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004096:	4313      	orrs	r3, r2
 8004098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800409c:	7cbb      	ldrb	r3, [r7, #18]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40021000 	.word	0x40021000

080040ac <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80040b0:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a04      	ldr	r2, [pc, #16]	; (80040c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80040b6:	f043 0304 	orr.w	r3, r3, #4
 80040ba:	6013      	str	r3, [r2, #0]
}
 80040bc:	bf00      	nop
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	40021000 	.word	0x40021000

080040cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040da:	4b74      	ldr	r3, [pc, #464]	; (80042ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d018      	beq.n	8004118 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80040e6:	4b71      	ldr	r3, [pc, #452]	; (80042ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	f003 0203 	and.w	r2, r3, #3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d10d      	bne.n	8004112 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
       ||
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d009      	beq.n	8004112 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80040fe:	4b6b      	ldr	r3, [pc, #428]	; (80042ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	091b      	lsrs	r3, r3, #4
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
       ||
 800410e:	429a      	cmp	r2, r3
 8004110:	d047      	beq.n	80041a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	73fb      	strb	r3, [r7, #15]
 8004116:	e044      	b.n	80041a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2b03      	cmp	r3, #3
 800411e:	d018      	beq.n	8004152 <RCCEx_PLLSAI1_Config+0x86>
 8004120:	2b03      	cmp	r3, #3
 8004122:	d825      	bhi.n	8004170 <RCCEx_PLLSAI1_Config+0xa4>
 8004124:	2b01      	cmp	r3, #1
 8004126:	d002      	beq.n	800412e <RCCEx_PLLSAI1_Config+0x62>
 8004128:	2b02      	cmp	r3, #2
 800412a:	d009      	beq.n	8004140 <RCCEx_PLLSAI1_Config+0x74>
 800412c:	e020      	b.n	8004170 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800412e:	4b5f      	ldr	r3, [pc, #380]	; (80042ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d11d      	bne.n	8004176 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800413e:	e01a      	b.n	8004176 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004140:	4b5a      	ldr	r3, [pc, #360]	; (80042ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004148:	2b00      	cmp	r3, #0
 800414a:	d116      	bne.n	800417a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004150:	e013      	b.n	800417a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004152:	4b56      	ldr	r3, [pc, #344]	; (80042ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10f      	bne.n	800417e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800415e:	4b53      	ldr	r3, [pc, #332]	; (80042ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d109      	bne.n	800417e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800416e:	e006      	b.n	800417e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	73fb      	strb	r3, [r7, #15]
      break;
 8004174:	e004      	b.n	8004180 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004176:	bf00      	nop
 8004178:	e002      	b.n	8004180 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800417a:	bf00      	nop
 800417c:	e000      	b.n	8004180 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800417e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004180:	7bfb      	ldrb	r3, [r7, #15]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10d      	bne.n	80041a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004186:	4b49      	ldr	r3, [pc, #292]	; (80042ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6819      	ldr	r1, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	3b01      	subs	r3, #1
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	430b      	orrs	r3, r1
 800419c:	4943      	ldr	r1, [pc, #268]	; (80042ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d17c      	bne.n	80042a2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041a8:	4b40      	ldr	r3, [pc, #256]	; (80042ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a3f      	ldr	r2, [pc, #252]	; (80042ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80041ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041b4:	f7fc fdf4 	bl	8000da0 <HAL_GetTick>
 80041b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041ba:	e009      	b.n	80041d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041bc:	f7fc fdf0 	bl	8000da0 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d902      	bls.n	80041d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	73fb      	strb	r3, [r7, #15]
        break;
 80041ce:	e005      	b.n	80041dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041d0:	4b36      	ldr	r3, [pc, #216]	; (80042ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1ef      	bne.n	80041bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d15f      	bne.n	80042a2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d110      	bne.n	800420a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041e8:	4b30      	ldr	r3, [pc, #192]	; (80042ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80041f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6892      	ldr	r2, [r2, #8]
 80041f8:	0211      	lsls	r1, r2, #8
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	68d2      	ldr	r2, [r2, #12]
 80041fe:	06d2      	lsls	r2, r2, #27
 8004200:	430a      	orrs	r2, r1
 8004202:	492a      	ldr	r1, [pc, #168]	; (80042ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004204:	4313      	orrs	r3, r2
 8004206:	610b      	str	r3, [r1, #16]
 8004208:	e027      	b.n	800425a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d112      	bne.n	8004236 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004210:	4b26      	ldr	r3, [pc, #152]	; (80042ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004218:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6892      	ldr	r2, [r2, #8]
 8004220:	0211      	lsls	r1, r2, #8
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6912      	ldr	r2, [r2, #16]
 8004226:	0852      	lsrs	r2, r2, #1
 8004228:	3a01      	subs	r2, #1
 800422a:	0552      	lsls	r2, r2, #21
 800422c:	430a      	orrs	r2, r1
 800422e:	491f      	ldr	r1, [pc, #124]	; (80042ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004230:	4313      	orrs	r3, r2
 8004232:	610b      	str	r3, [r1, #16]
 8004234:	e011      	b.n	800425a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004236:	4b1d      	ldr	r3, [pc, #116]	; (80042ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800423e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	6892      	ldr	r2, [r2, #8]
 8004246:	0211      	lsls	r1, r2, #8
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	6952      	ldr	r2, [r2, #20]
 800424c:	0852      	lsrs	r2, r2, #1
 800424e:	3a01      	subs	r2, #1
 8004250:	0652      	lsls	r2, r2, #25
 8004252:	430a      	orrs	r2, r1
 8004254:	4915      	ldr	r1, [pc, #84]	; (80042ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004256:	4313      	orrs	r3, r2
 8004258:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800425a:	4b14      	ldr	r3, [pc, #80]	; (80042ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a13      	ldr	r2, [pc, #76]	; (80042ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004260:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004264:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004266:	f7fc fd9b 	bl	8000da0 <HAL_GetTick>
 800426a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800426c:	e009      	b.n	8004282 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800426e:	f7fc fd97 	bl	8000da0 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d902      	bls.n	8004282 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	73fb      	strb	r3, [r7, #15]
          break;
 8004280:	e005      	b.n	800428e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004282:	4b0a      	ldr	r3, [pc, #40]	; (80042ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0ef      	beq.n	800426e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800428e:	7bfb      	ldrb	r3, [r7, #15]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d106      	bne.n	80042a2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004294:	4b05      	ldr	r3, [pc, #20]	; (80042ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004296:	691a      	ldr	r2, [r3, #16]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	4903      	ldr	r1, [pc, #12]	; (80042ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40021000 	.word	0x40021000

080042b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042ba:	2300      	movs	r3, #0
 80042bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042be:	4b69      	ldr	r3, [pc, #420]	; (8004464 <RCCEx_PLLSAI2_Config+0x1b4>)
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f003 0303 	and.w	r3, r3, #3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d018      	beq.n	80042fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80042ca:	4b66      	ldr	r3, [pc, #408]	; (8004464 <RCCEx_PLLSAI2_Config+0x1b4>)
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f003 0203 	and.w	r2, r3, #3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d10d      	bne.n	80042f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
       ||
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d009      	beq.n	80042f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80042e2:	4b60      	ldr	r3, [pc, #384]	; (8004464 <RCCEx_PLLSAI2_Config+0x1b4>)
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	091b      	lsrs	r3, r3, #4
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
       ||
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d047      	beq.n	8004386 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	73fb      	strb	r3, [r7, #15]
 80042fa:	e044      	b.n	8004386 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b03      	cmp	r3, #3
 8004302:	d018      	beq.n	8004336 <RCCEx_PLLSAI2_Config+0x86>
 8004304:	2b03      	cmp	r3, #3
 8004306:	d825      	bhi.n	8004354 <RCCEx_PLLSAI2_Config+0xa4>
 8004308:	2b01      	cmp	r3, #1
 800430a:	d002      	beq.n	8004312 <RCCEx_PLLSAI2_Config+0x62>
 800430c:	2b02      	cmp	r3, #2
 800430e:	d009      	beq.n	8004324 <RCCEx_PLLSAI2_Config+0x74>
 8004310:	e020      	b.n	8004354 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004312:	4b54      	ldr	r3, [pc, #336]	; (8004464 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d11d      	bne.n	800435a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004322:	e01a      	b.n	800435a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004324:	4b4f      	ldr	r3, [pc, #316]	; (8004464 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800432c:	2b00      	cmp	r3, #0
 800432e:	d116      	bne.n	800435e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004334:	e013      	b.n	800435e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004336:	4b4b      	ldr	r3, [pc, #300]	; (8004464 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10f      	bne.n	8004362 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004342:	4b48      	ldr	r3, [pc, #288]	; (8004464 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d109      	bne.n	8004362 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004352:	e006      	b.n	8004362 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	73fb      	strb	r3, [r7, #15]
      break;
 8004358:	e004      	b.n	8004364 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800435a:	bf00      	nop
 800435c:	e002      	b.n	8004364 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800435e:	bf00      	nop
 8004360:	e000      	b.n	8004364 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004362:	bf00      	nop
    }

    if(status == HAL_OK)
 8004364:	7bfb      	ldrb	r3, [r7, #15]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10d      	bne.n	8004386 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800436a:	4b3e      	ldr	r3, [pc, #248]	; (8004464 <RCCEx_PLLSAI2_Config+0x1b4>)
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6819      	ldr	r1, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	3b01      	subs	r3, #1
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	430b      	orrs	r3, r1
 8004380:	4938      	ldr	r1, [pc, #224]	; (8004464 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004382:	4313      	orrs	r3, r2
 8004384:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004386:	7bfb      	ldrb	r3, [r7, #15]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d166      	bne.n	800445a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800438c:	4b35      	ldr	r3, [pc, #212]	; (8004464 <RCCEx_PLLSAI2_Config+0x1b4>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a34      	ldr	r2, [pc, #208]	; (8004464 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004392:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004396:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004398:	f7fc fd02 	bl	8000da0 <HAL_GetTick>
 800439c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800439e:	e009      	b.n	80043b4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043a0:	f7fc fcfe 	bl	8000da0 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d902      	bls.n	80043b4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	73fb      	strb	r3, [r7, #15]
        break;
 80043b2:	e005      	b.n	80043c0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043b4:	4b2b      	ldr	r3, [pc, #172]	; (8004464 <RCCEx_PLLSAI2_Config+0x1b4>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1ef      	bne.n	80043a0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d149      	bne.n	800445a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d110      	bne.n	80043ee <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043cc:	4b25      	ldr	r3, [pc, #148]	; (8004464 <RCCEx_PLLSAI2_Config+0x1b4>)
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80043d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6892      	ldr	r2, [r2, #8]
 80043dc:	0211      	lsls	r1, r2, #8
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	68d2      	ldr	r2, [r2, #12]
 80043e2:	06d2      	lsls	r2, r2, #27
 80043e4:	430a      	orrs	r2, r1
 80043e6:	491f      	ldr	r1, [pc, #124]	; (8004464 <RCCEx_PLLSAI2_Config+0x1b4>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	614b      	str	r3, [r1, #20]
 80043ec:	e011      	b.n	8004412 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043ee:	4b1d      	ldr	r3, [pc, #116]	; (8004464 <RCCEx_PLLSAI2_Config+0x1b4>)
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80043f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6892      	ldr	r2, [r2, #8]
 80043fe:	0211      	lsls	r1, r2, #8
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6912      	ldr	r2, [r2, #16]
 8004404:	0852      	lsrs	r2, r2, #1
 8004406:	3a01      	subs	r2, #1
 8004408:	0652      	lsls	r2, r2, #25
 800440a:	430a      	orrs	r2, r1
 800440c:	4915      	ldr	r1, [pc, #84]	; (8004464 <RCCEx_PLLSAI2_Config+0x1b4>)
 800440e:	4313      	orrs	r3, r2
 8004410:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004412:	4b14      	ldr	r3, [pc, #80]	; (8004464 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a13      	ldr	r2, [pc, #76]	; (8004464 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800441c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800441e:	f7fc fcbf 	bl	8000da0 <HAL_GetTick>
 8004422:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004424:	e009      	b.n	800443a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004426:	f7fc fcbb 	bl	8000da0 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d902      	bls.n	800443a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	73fb      	strb	r3, [r7, #15]
          break;
 8004438:	e005      	b.n	8004446 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800443a:	4b0a      	ldr	r3, [pc, #40]	; (8004464 <RCCEx_PLLSAI2_Config+0x1b4>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0ef      	beq.n	8004426 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8004446:	7bfb      	ldrb	r3, [r7, #15]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d106      	bne.n	800445a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800444c:	4b05      	ldr	r3, [pc, #20]	; (8004464 <RCCEx_PLLSAI2_Config+0x1b4>)
 800444e:	695a      	ldr	r2, [r3, #20]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	4903      	ldr	r1, [pc, #12]	; (8004464 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004456:	4313      	orrs	r3, r2
 8004458:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800445a:	7bfb      	ldrb	r3, [r7, #15]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	40021000 	.word	0x40021000

08004468 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d06c      	beq.n	8004554 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d106      	bne.n	8004494 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7fc fb2c 	bl	8000aec <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	22ca      	movs	r2, #202	; 0xca
 80044a2:	625a      	str	r2, [r3, #36]	; 0x24
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2253      	movs	r2, #83	; 0x53
 80044aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 fb23 	bl	8004af8 <RTC_EnterInitMode>
 80044b2:	4603      	mov	r3, r0
 80044b4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d14b      	bne.n	8004554 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6812      	ldr	r2, [r2, #0]
 80044c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80044ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044ce:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6899      	ldr	r1, [r3, #8]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	68d2      	ldr	r2, [r2, #12]
 80044f6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6919      	ldr	r1, [r3, #16]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	041a      	lsls	r2, r3, #16
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 fb27 	bl	8004b60 <RTC_ExitInitMode>
 8004512:	4603      	mov	r3, r0
 8004514:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004516:	7bfb      	ldrb	r3, [r7, #15]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d11b      	bne.n	8004554 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0203 	bic.w	r2, r2, #3
 800452a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	69da      	ldr	r2, [r3, #28]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	22ff      	movs	r2, #255	; 0xff
 800454a:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004554:	7bfb      	ldrb	r3, [r7, #15]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800455e:	b590      	push	{r4, r7, lr}
 8004560:	b087      	sub	sp, #28
 8004562:	af00      	add	r7, sp, #0
 8004564:	60f8      	str	r0, [r7, #12]
 8004566:	60b9      	str	r1, [r7, #8]
 8004568:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_RTC_SetTime+0x1a>
 8004574:	2302      	movs	r3, #2
 8004576:	e08b      	b.n	8004690 <HAL_RTC_SetTime+0x132>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	22ca      	movs	r2, #202	; 0xca
 800458e:	625a      	str	r2, [r3, #36]	; 0x24
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2253      	movs	r2, #83	; 0x53
 8004596:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 faad 	bl	8004af8 <RTC_EnterInitMode>
 800459e:	4603      	mov	r3, r0
 80045a0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80045a2:	7cfb      	ldrb	r3, [r7, #19]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d163      	bne.n	8004670 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d126      	bne.n	80045fc <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d102      	bne.n	80045c2 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2200      	movs	r2, #0
 80045c0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 fb08 	bl	8004bdc <RTC_ByteToBcd2>
 80045cc:	4603      	mov	r3, r0
 80045ce:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	785b      	ldrb	r3, [r3, #1]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 fb01 	bl	8004bdc <RTC_ByteToBcd2>
 80045da:	4603      	mov	r3, r0
 80045dc:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045de:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	789b      	ldrb	r3, [r3, #2]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 faf9 	bl	8004bdc <RTC_ByteToBcd2>
 80045ea:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80045ec:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	78db      	ldrb	r3, [r3, #3]
 80045f4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045f6:	4313      	orrs	r3, r2
 80045f8:	617b      	str	r3, [r7, #20]
 80045fa:	e018      	b.n	800462e <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004606:	2b00      	cmp	r3, #0
 8004608:	d102      	bne.n	8004610 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	2200      	movs	r2, #0
 800460e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	785b      	ldrb	r3, [r3, #1]
 800461a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800461c:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004622:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	78db      	ldrb	r3, [r3, #3]
 8004628:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800462a:	4313      	orrs	r3, r2
 800462c:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004638:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800463c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800464c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6899      	ldr	r1, [r3, #8]
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	431a      	orrs	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 fa7a 	bl	8004b60 <RTC_ExitInitMode>
 800466c:	4603      	mov	r3, r0
 800466e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	22ff      	movs	r2, #255	; 0xff
 8004676:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004678:	7cfb      	ldrb	r3, [r7, #19]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d103      	bne.n	8004686 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800468e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004690:	4618      	mov	r0, r3
 8004692:	371c      	adds	r7, #28
 8004694:	46bd      	mov	sp, r7
 8004696:	bd90      	pop	{r4, r7, pc}

08004698 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004698:	b590      	push	{r4, r7, lr}
 800469a:	b087      	sub	sp, #28
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d101      	bne.n	80046b2 <HAL_RTC_SetDate+0x1a>
 80046ae:	2302      	movs	r3, #2
 80046b0:	e075      	b.n	800479e <HAL_RTC_SetDate+0x106>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2202      	movs	r2, #2
 80046be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10e      	bne.n	80046e6 <HAL_RTC_SetDate+0x4e>
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	785b      	ldrb	r3, [r3, #1]
 80046cc:	f003 0310 	and.w	r3, r3, #16
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d008      	beq.n	80046e6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	785b      	ldrb	r3, [r3, #1]
 80046d8:	f023 0310 	bic.w	r3, r3, #16
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	330a      	adds	r3, #10
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d11c      	bne.n	8004726 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	78db      	ldrb	r3, [r3, #3]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 fa73 	bl	8004bdc <RTC_ByteToBcd2>
 80046f6:	4603      	mov	r3, r0
 80046f8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	785b      	ldrb	r3, [r3, #1]
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 fa6c 	bl	8004bdc <RTC_ByteToBcd2>
 8004704:	4603      	mov	r3, r0
 8004706:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004708:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	789b      	ldrb	r3, [r3, #2]
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fa64 	bl	8004bdc <RTC_ByteToBcd2>
 8004714:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004716:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004720:	4313      	orrs	r3, r2
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	e00e      	b.n	8004744 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	78db      	ldrb	r3, [r3, #3]
 800472a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	785b      	ldrb	r3, [r3, #1]
 8004730:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004732:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004738:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004740:	4313      	orrs	r3, r2
 8004742:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	22ca      	movs	r2, #202	; 0xca
 800474a:	625a      	str	r2, [r3, #36]	; 0x24
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2253      	movs	r2, #83	; 0x53
 8004752:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f9cf 	bl	8004af8 <RTC_EnterInitMode>
 800475a:	4603      	mov	r3, r0
 800475c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800475e:	7cfb      	ldrb	r3, [r7, #19]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10c      	bne.n	800477e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800476e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004772:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 f9f3 	bl	8004b60 <RTC_ExitInitMode>
 800477a:	4603      	mov	r3, r0
 800477c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	22ff      	movs	r2, #255	; 0xff
 8004784:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004786:	7cfb      	ldrb	r3, [r7, #19]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d103      	bne.n	8004794 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800479c:	7cfb      	ldrb	r3, [r7, #19]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	371c      	adds	r7, #28
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd90      	pop	{r4, r7, pc}
	...

080047a8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80047a8:	b590      	push	{r4, r7, lr}
 80047aa:	b089      	sub	sp, #36	; 0x24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d101      	bne.n	80047c2 <HAL_RTC_SetAlarm_IT+0x1a>
 80047be:	2302      	movs	r3, #2
 80047c0:	e127      	b.n	8004a12 <HAL_RTC_SetAlarm_IT+0x26a>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2202      	movs	r2, #2
 80047ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d137      	bne.n	8004848 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d102      	bne.n	80047ec <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2200      	movs	r2, #0
 80047ea:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 f9f3 	bl	8004bdc <RTC_ByteToBcd2>
 80047f6:	4603      	mov	r3, r0
 80047f8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	785b      	ldrb	r3, [r3, #1]
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 f9ec 	bl	8004bdc <RTC_ByteToBcd2>
 8004804:	4603      	mov	r3, r0
 8004806:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004808:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	789b      	ldrb	r3, [r3, #2]
 800480e:	4618      	mov	r0, r3
 8004810:	f000 f9e4 	bl	8004bdc <RTC_ByteToBcd2>
 8004814:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004816:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	78db      	ldrb	r3, [r3, #3]
 800481e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004820:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800482a:	4618      	mov	r0, r3
 800482c:	f000 f9d6 	bl	8004bdc <RTC_ByteToBcd2>
 8004830:	4603      	mov	r3, r0
 8004832:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004834:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800483c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004842:	4313      	orrs	r3, r2
 8004844:	61fb      	str	r3, [r7, #28]
 8004846:	e023      	b.n	8004890 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004852:	2b00      	cmp	r3, #0
 8004854:	d102      	bne.n	800485c <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2200      	movs	r2, #0
 800485a:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	785b      	ldrb	r3, [r3, #1]
 8004866:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004868:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800486e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	78db      	ldrb	r3, [r3, #3]
 8004874:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004876:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800487e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004880:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004886:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800488c:	4313      	orrs	r3, r2
 800488e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	69db      	ldr	r3, [r3, #28]
 8004898:	4313      	orrs	r3, r2
 800489a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	22ca      	movs	r2, #202	; 0xca
 80048a2:	625a      	str	r2, [r3, #36]	; 0x24
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2253      	movs	r2, #83	; 0x53
 80048aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048b4:	d14a      	bne.n	800494c <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048c4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80048d6:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 80048d8:	f7fc fa62 	bl	8000da0 <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80048de:	e015      	b.n	800490c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80048e0:	f7fc fa5e 	bl	8000da0 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048ee:	d90d      	bls.n	800490c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	22ff      	movs	r2, #255	; 0xff
 80048f6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2203      	movs	r2, #3
 80048fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e082      	b.n	8004a12 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d0e2      	beq.n	80048e0 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	69fa      	ldr	r2, [r7, #28]
 8004920:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004938:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	689a      	ldr	r2, [r3, #8]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004948:	609a      	str	r2, [r3, #8]
 800494a:	e049      	b.n	80049e0 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689a      	ldr	r2, [r3, #8]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800495a:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	b2da      	uxtb	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f462 7220 	orn	r2, r2, #640	; 0x280
 800496c:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 800496e:	f7fc fa17 	bl	8000da0 <HAL_GetTick>
 8004972:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004974:	e015      	b.n	80049a2 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004976:	f7fc fa13 	bl	8000da0 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004984:	d90d      	bls.n	80049a2 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	22ff      	movs	r2, #255	; 0xff
 800498c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2203      	movs	r2, #3
 8004992:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e037      	b.n	8004a12 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0e2      	beq.n	8004976 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	69fa      	ldr	r2, [r7, #28]
 80049b6:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689a      	ldr	r2, [r3, #8]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ce:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689a      	ldr	r2, [r3, #8]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049de:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80049e0:	4b0e      	ldr	r3, [pc, #56]	; (8004a1c <HAL_RTC_SetAlarm_IT+0x274>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a0d      	ldr	r2, [pc, #52]	; (8004a1c <HAL_RTC_SetAlarm_IT+0x274>)
 80049e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049ea:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80049ec:	4b0b      	ldr	r3, [pc, #44]	; (8004a1c <HAL_RTC_SetAlarm_IT+0x274>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	4a0a      	ldr	r2, [pc, #40]	; (8004a1c <HAL_RTC_SetAlarm_IT+0x274>)
 80049f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049f6:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	22ff      	movs	r2, #255	; 0xff
 80049fe:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3724      	adds	r7, #36	; 0x24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd90      	pop	{r4, r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40010400 	.word	0x40010400

08004a20 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004a28:	4b1f      	ldr	r3, [pc, #124]	; (8004aa8 <HAL_RTC_AlarmIRQHandler+0x88>)
 8004a2a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004a2e:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d012      	beq.n	8004a64 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00b      	beq.n	8004a64 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004a5c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7fb fd84 	bl	800056c <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d012      	beq.n	8004a98 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00b      	beq.n	8004a98 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004a90:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f8c2 	bl	8004c1c <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8004aa0:	bf00      	nop
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40010400 	.word	0x40010400

08004aac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ac2:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004ac4:	f7fc f96c 	bl	8000da0 <HAL_GetTick>
 8004ac8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004aca:	e009      	b.n	8004ae0 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004acc:	f7fc f968 	bl	8000da0 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ada:	d901      	bls.n	8004ae0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e007      	b.n	8004af0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f003 0320 	and.w	r3, r3, #32
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0ee      	beq.n	8004acc <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b00:	2300      	movs	r3, #0
 8004b02:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d120      	bne.n	8004b54 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f04f 32ff 	mov.w	r2, #4294967295
 8004b1a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004b1c:	f7fc f940 	bl	8000da0 <HAL_GetTick>
 8004b20:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004b22:	e00d      	b.n	8004b40 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004b24:	f7fc f93c 	bl	8000da0 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b32:	d905      	bls.n	8004b40 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2203      	movs	r2, #3
 8004b3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d102      	bne.n	8004b54 <RTC_EnterInitMode+0x5c>
 8004b4e:	7bfb      	ldrb	r3, [r7, #15]
 8004b50:	2b03      	cmp	r3, #3
 8004b52:	d1e7      	bne.n	8004b24 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
	...

08004b60 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004b6c:	4b1a      	ldr	r3, [pc, #104]	; (8004bd8 <RTC_ExitInitMode+0x78>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	4a19      	ldr	r2, [pc, #100]	; (8004bd8 <RTC_ExitInitMode+0x78>)
 8004b72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b76:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004b78:	4b17      	ldr	r3, [pc, #92]	; (8004bd8 <RTC_ExitInitMode+0x78>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 0320 	and.w	r3, r3, #32
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10c      	bne.n	8004b9e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7ff ff91 	bl	8004aac <HAL_RTC_WaitForSynchro>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d01e      	beq.n	8004bce <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2203      	movs	r2, #3
 8004b94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	73fb      	strb	r3, [r7, #15]
 8004b9c:	e017      	b.n	8004bce <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004b9e:	4b0e      	ldr	r3, [pc, #56]	; (8004bd8 <RTC_ExitInitMode+0x78>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	4a0d      	ldr	r2, [pc, #52]	; (8004bd8 <RTC_ExitInitMode+0x78>)
 8004ba4:	f023 0320 	bic.w	r3, r3, #32
 8004ba8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7ff ff7e 	bl	8004aac <HAL_RTC_WaitForSynchro>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d005      	beq.n	8004bc2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2203      	movs	r2, #3
 8004bba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004bc2:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <RTC_ExitInitMode+0x78>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	4a04      	ldr	r2, [pc, #16]	; (8004bd8 <RTC_ExitInitMode+0x78>)
 8004bc8:	f043 0320 	orr.w	r3, r3, #32
 8004bcc:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40002800 	.word	0x40002800

08004bdc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	4603      	mov	r3, r0
 8004be4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8004bea:	79fb      	ldrb	r3, [r7, #7]
 8004bec:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8004bee:	e005      	b.n	8004bfc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8004bf6:	7afb      	ldrb	r3, [r7, #11]
 8004bf8:	3b0a      	subs	r3, #10
 8004bfa:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004bfc:	7afb      	ldrb	r3, [r7, #11]
 8004bfe:	2b09      	cmp	r3, #9
 8004c00:	d8f6      	bhi.n	8004bf0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	011b      	lsls	r3, r3, #4
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	7afb      	ldrb	r3, [r7, #11]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	b2db      	uxtb	r3, r3
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	3350      	adds	r3, #80	; 0x50
 8004c42:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	009a      	lsls	r2, r3, #2
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	461a      	mov	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6013      	str	r3, [r2, #0]
}
 8004c56:	bf00      	nop
 8004c58:	371c      	adds	r7, #28
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b082      	sub	sp, #8
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e040      	b.n	8004cf6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d106      	bne.n	8004c8a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7fb feeb 	bl	8000a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2224      	movs	r2, #36	; 0x24
 8004c8e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0201 	bic.w	r2, r2, #1
 8004c9e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f82d 	bl	8004d00 <UART_SetConfig>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d101      	bne.n	8004cb0 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e022      	b.n	8004cf6 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d002      	beq.n	8004cbe <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 faab 	bl	8005214 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ccc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cdc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f042 0201 	orr.w	r2, r2, #1
 8004cec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fb32 	bl	8005358 <UART_CheckIdleState>
 8004cf4:	4603      	mov	r3, r0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
	...

08004d00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d00:	b5b0      	push	{r4, r5, r7, lr}
 8004d02:	b088      	sub	sp, #32
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	431a      	orrs	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	4bad      	ldr	r3, [pc, #692]	; (8004fe0 <UART_SetConfig+0x2e0>)
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6812      	ldr	r2, [r2, #0]
 8004d32:	69f9      	ldr	r1, [r7, #28]
 8004d34:	430b      	orrs	r3, r1
 8004d36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4aa2      	ldr	r2, [pc, #648]	; (8004fe4 <UART_SetConfig+0x2e4>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d004      	beq.n	8004d68 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	69fa      	ldr	r2, [r7, #28]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69fa      	ldr	r2, [r7, #28]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a99      	ldr	r2, [pc, #612]	; (8004fe8 <UART_SetConfig+0x2e8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d121      	bne.n	8004dca <UART_SetConfig+0xca>
 8004d86:	4b99      	ldr	r3, [pc, #612]	; (8004fec <UART_SetConfig+0x2ec>)
 8004d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8c:	f003 0303 	and.w	r3, r3, #3
 8004d90:	2b03      	cmp	r3, #3
 8004d92:	d817      	bhi.n	8004dc4 <UART_SetConfig+0xc4>
 8004d94:	a201      	add	r2, pc, #4	; (adr r2, 8004d9c <UART_SetConfig+0x9c>)
 8004d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9a:	bf00      	nop
 8004d9c:	08004dad 	.word	0x08004dad
 8004da0:	08004db9 	.word	0x08004db9
 8004da4:	08004db3 	.word	0x08004db3
 8004da8:	08004dbf 	.word	0x08004dbf
 8004dac:	2301      	movs	r3, #1
 8004dae:	76fb      	strb	r3, [r7, #27]
 8004db0:	e0e7      	b.n	8004f82 <UART_SetConfig+0x282>
 8004db2:	2302      	movs	r3, #2
 8004db4:	76fb      	strb	r3, [r7, #27]
 8004db6:	e0e4      	b.n	8004f82 <UART_SetConfig+0x282>
 8004db8:	2304      	movs	r3, #4
 8004dba:	76fb      	strb	r3, [r7, #27]
 8004dbc:	e0e1      	b.n	8004f82 <UART_SetConfig+0x282>
 8004dbe:	2308      	movs	r3, #8
 8004dc0:	76fb      	strb	r3, [r7, #27]
 8004dc2:	e0de      	b.n	8004f82 <UART_SetConfig+0x282>
 8004dc4:	2310      	movs	r3, #16
 8004dc6:	76fb      	strb	r3, [r7, #27]
 8004dc8:	e0db      	b.n	8004f82 <UART_SetConfig+0x282>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a88      	ldr	r2, [pc, #544]	; (8004ff0 <UART_SetConfig+0x2f0>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d132      	bne.n	8004e3a <UART_SetConfig+0x13a>
 8004dd4:	4b85      	ldr	r3, [pc, #532]	; (8004fec <UART_SetConfig+0x2ec>)
 8004dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dda:	f003 030c 	and.w	r3, r3, #12
 8004dde:	2b0c      	cmp	r3, #12
 8004de0:	d828      	bhi.n	8004e34 <UART_SetConfig+0x134>
 8004de2:	a201      	add	r2, pc, #4	; (adr r2, 8004de8 <UART_SetConfig+0xe8>)
 8004de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de8:	08004e1d 	.word	0x08004e1d
 8004dec:	08004e35 	.word	0x08004e35
 8004df0:	08004e35 	.word	0x08004e35
 8004df4:	08004e35 	.word	0x08004e35
 8004df8:	08004e29 	.word	0x08004e29
 8004dfc:	08004e35 	.word	0x08004e35
 8004e00:	08004e35 	.word	0x08004e35
 8004e04:	08004e35 	.word	0x08004e35
 8004e08:	08004e23 	.word	0x08004e23
 8004e0c:	08004e35 	.word	0x08004e35
 8004e10:	08004e35 	.word	0x08004e35
 8004e14:	08004e35 	.word	0x08004e35
 8004e18:	08004e2f 	.word	0x08004e2f
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	76fb      	strb	r3, [r7, #27]
 8004e20:	e0af      	b.n	8004f82 <UART_SetConfig+0x282>
 8004e22:	2302      	movs	r3, #2
 8004e24:	76fb      	strb	r3, [r7, #27]
 8004e26:	e0ac      	b.n	8004f82 <UART_SetConfig+0x282>
 8004e28:	2304      	movs	r3, #4
 8004e2a:	76fb      	strb	r3, [r7, #27]
 8004e2c:	e0a9      	b.n	8004f82 <UART_SetConfig+0x282>
 8004e2e:	2308      	movs	r3, #8
 8004e30:	76fb      	strb	r3, [r7, #27]
 8004e32:	e0a6      	b.n	8004f82 <UART_SetConfig+0x282>
 8004e34:	2310      	movs	r3, #16
 8004e36:	76fb      	strb	r3, [r7, #27]
 8004e38:	e0a3      	b.n	8004f82 <UART_SetConfig+0x282>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a6d      	ldr	r2, [pc, #436]	; (8004ff4 <UART_SetConfig+0x2f4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d120      	bne.n	8004e86 <UART_SetConfig+0x186>
 8004e44:	4b69      	ldr	r3, [pc, #420]	; (8004fec <UART_SetConfig+0x2ec>)
 8004e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e4e:	2b30      	cmp	r3, #48	; 0x30
 8004e50:	d013      	beq.n	8004e7a <UART_SetConfig+0x17a>
 8004e52:	2b30      	cmp	r3, #48	; 0x30
 8004e54:	d814      	bhi.n	8004e80 <UART_SetConfig+0x180>
 8004e56:	2b20      	cmp	r3, #32
 8004e58:	d009      	beq.n	8004e6e <UART_SetConfig+0x16e>
 8004e5a:	2b20      	cmp	r3, #32
 8004e5c:	d810      	bhi.n	8004e80 <UART_SetConfig+0x180>
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <UART_SetConfig+0x168>
 8004e62:	2b10      	cmp	r3, #16
 8004e64:	d006      	beq.n	8004e74 <UART_SetConfig+0x174>
 8004e66:	e00b      	b.n	8004e80 <UART_SetConfig+0x180>
 8004e68:	2300      	movs	r3, #0
 8004e6a:	76fb      	strb	r3, [r7, #27]
 8004e6c:	e089      	b.n	8004f82 <UART_SetConfig+0x282>
 8004e6e:	2302      	movs	r3, #2
 8004e70:	76fb      	strb	r3, [r7, #27]
 8004e72:	e086      	b.n	8004f82 <UART_SetConfig+0x282>
 8004e74:	2304      	movs	r3, #4
 8004e76:	76fb      	strb	r3, [r7, #27]
 8004e78:	e083      	b.n	8004f82 <UART_SetConfig+0x282>
 8004e7a:	2308      	movs	r3, #8
 8004e7c:	76fb      	strb	r3, [r7, #27]
 8004e7e:	e080      	b.n	8004f82 <UART_SetConfig+0x282>
 8004e80:	2310      	movs	r3, #16
 8004e82:	76fb      	strb	r3, [r7, #27]
 8004e84:	e07d      	b.n	8004f82 <UART_SetConfig+0x282>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a5b      	ldr	r2, [pc, #364]	; (8004ff8 <UART_SetConfig+0x2f8>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d120      	bne.n	8004ed2 <UART_SetConfig+0x1d2>
 8004e90:	4b56      	ldr	r3, [pc, #344]	; (8004fec <UART_SetConfig+0x2ec>)
 8004e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e9a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e9c:	d013      	beq.n	8004ec6 <UART_SetConfig+0x1c6>
 8004e9e:	2bc0      	cmp	r3, #192	; 0xc0
 8004ea0:	d814      	bhi.n	8004ecc <UART_SetConfig+0x1cc>
 8004ea2:	2b80      	cmp	r3, #128	; 0x80
 8004ea4:	d009      	beq.n	8004eba <UART_SetConfig+0x1ba>
 8004ea6:	2b80      	cmp	r3, #128	; 0x80
 8004ea8:	d810      	bhi.n	8004ecc <UART_SetConfig+0x1cc>
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d002      	beq.n	8004eb4 <UART_SetConfig+0x1b4>
 8004eae:	2b40      	cmp	r3, #64	; 0x40
 8004eb0:	d006      	beq.n	8004ec0 <UART_SetConfig+0x1c0>
 8004eb2:	e00b      	b.n	8004ecc <UART_SetConfig+0x1cc>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	76fb      	strb	r3, [r7, #27]
 8004eb8:	e063      	b.n	8004f82 <UART_SetConfig+0x282>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	76fb      	strb	r3, [r7, #27]
 8004ebe:	e060      	b.n	8004f82 <UART_SetConfig+0x282>
 8004ec0:	2304      	movs	r3, #4
 8004ec2:	76fb      	strb	r3, [r7, #27]
 8004ec4:	e05d      	b.n	8004f82 <UART_SetConfig+0x282>
 8004ec6:	2308      	movs	r3, #8
 8004ec8:	76fb      	strb	r3, [r7, #27]
 8004eca:	e05a      	b.n	8004f82 <UART_SetConfig+0x282>
 8004ecc:	2310      	movs	r3, #16
 8004ece:	76fb      	strb	r3, [r7, #27]
 8004ed0:	e057      	b.n	8004f82 <UART_SetConfig+0x282>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a49      	ldr	r2, [pc, #292]	; (8004ffc <UART_SetConfig+0x2fc>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d125      	bne.n	8004f28 <UART_SetConfig+0x228>
 8004edc:	4b43      	ldr	r3, [pc, #268]	; (8004fec <UART_SetConfig+0x2ec>)
 8004ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eea:	d017      	beq.n	8004f1c <UART_SetConfig+0x21c>
 8004eec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ef0:	d817      	bhi.n	8004f22 <UART_SetConfig+0x222>
 8004ef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ef6:	d00b      	beq.n	8004f10 <UART_SetConfig+0x210>
 8004ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004efc:	d811      	bhi.n	8004f22 <UART_SetConfig+0x222>
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <UART_SetConfig+0x20a>
 8004f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f06:	d006      	beq.n	8004f16 <UART_SetConfig+0x216>
 8004f08:	e00b      	b.n	8004f22 <UART_SetConfig+0x222>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	76fb      	strb	r3, [r7, #27]
 8004f0e:	e038      	b.n	8004f82 <UART_SetConfig+0x282>
 8004f10:	2302      	movs	r3, #2
 8004f12:	76fb      	strb	r3, [r7, #27]
 8004f14:	e035      	b.n	8004f82 <UART_SetConfig+0x282>
 8004f16:	2304      	movs	r3, #4
 8004f18:	76fb      	strb	r3, [r7, #27]
 8004f1a:	e032      	b.n	8004f82 <UART_SetConfig+0x282>
 8004f1c:	2308      	movs	r3, #8
 8004f1e:	76fb      	strb	r3, [r7, #27]
 8004f20:	e02f      	b.n	8004f82 <UART_SetConfig+0x282>
 8004f22:	2310      	movs	r3, #16
 8004f24:	76fb      	strb	r3, [r7, #27]
 8004f26:	e02c      	b.n	8004f82 <UART_SetConfig+0x282>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a2d      	ldr	r2, [pc, #180]	; (8004fe4 <UART_SetConfig+0x2e4>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d125      	bne.n	8004f7e <UART_SetConfig+0x27e>
 8004f32:	4b2e      	ldr	r3, [pc, #184]	; (8004fec <UART_SetConfig+0x2ec>)
 8004f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f40:	d017      	beq.n	8004f72 <UART_SetConfig+0x272>
 8004f42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f46:	d817      	bhi.n	8004f78 <UART_SetConfig+0x278>
 8004f48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f4c:	d00b      	beq.n	8004f66 <UART_SetConfig+0x266>
 8004f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f52:	d811      	bhi.n	8004f78 <UART_SetConfig+0x278>
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <UART_SetConfig+0x260>
 8004f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f5c:	d006      	beq.n	8004f6c <UART_SetConfig+0x26c>
 8004f5e:	e00b      	b.n	8004f78 <UART_SetConfig+0x278>
 8004f60:	2300      	movs	r3, #0
 8004f62:	76fb      	strb	r3, [r7, #27]
 8004f64:	e00d      	b.n	8004f82 <UART_SetConfig+0x282>
 8004f66:	2302      	movs	r3, #2
 8004f68:	76fb      	strb	r3, [r7, #27]
 8004f6a:	e00a      	b.n	8004f82 <UART_SetConfig+0x282>
 8004f6c:	2304      	movs	r3, #4
 8004f6e:	76fb      	strb	r3, [r7, #27]
 8004f70:	e007      	b.n	8004f82 <UART_SetConfig+0x282>
 8004f72:	2308      	movs	r3, #8
 8004f74:	76fb      	strb	r3, [r7, #27]
 8004f76:	e004      	b.n	8004f82 <UART_SetConfig+0x282>
 8004f78:	2310      	movs	r3, #16
 8004f7a:	76fb      	strb	r3, [r7, #27]
 8004f7c:	e001      	b.n	8004f82 <UART_SetConfig+0x282>
 8004f7e:	2310      	movs	r3, #16
 8004f80:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a17      	ldr	r2, [pc, #92]	; (8004fe4 <UART_SetConfig+0x2e4>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	f040 8087 	bne.w	800509c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f8e:	7efb      	ldrb	r3, [r7, #27]
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d837      	bhi.n	8005004 <UART_SetConfig+0x304>
 8004f94:	a201      	add	r2, pc, #4	; (adr r2, 8004f9c <UART_SetConfig+0x29c>)
 8004f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9a:	bf00      	nop
 8004f9c:	08004fc1 	.word	0x08004fc1
 8004fa0:	08005005 	.word	0x08005005
 8004fa4:	08004fc9 	.word	0x08004fc9
 8004fa8:	08005005 	.word	0x08005005
 8004fac:	08004fcf 	.word	0x08004fcf
 8004fb0:	08005005 	.word	0x08005005
 8004fb4:	08005005 	.word	0x08005005
 8004fb8:	08005005 	.word	0x08005005
 8004fbc:	08004fd7 	.word	0x08004fd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fc0:	f7fe fcec 	bl	800399c <HAL_RCC_GetPCLK1Freq>
 8004fc4:	6178      	str	r0, [r7, #20]
        break;
 8004fc6:	e022      	b.n	800500e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fc8:	4b0d      	ldr	r3, [pc, #52]	; (8005000 <UART_SetConfig+0x300>)
 8004fca:	617b      	str	r3, [r7, #20]
        break;
 8004fcc:	e01f      	b.n	800500e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fce:	f7fe fc4d 	bl	800386c <HAL_RCC_GetSysClockFreq>
 8004fd2:	6178      	str	r0, [r7, #20]
        break;
 8004fd4:	e01b      	b.n	800500e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fda:	617b      	str	r3, [r7, #20]
        break;
 8004fdc:	e017      	b.n	800500e <UART_SetConfig+0x30e>
 8004fde:	bf00      	nop
 8004fe0:	efff69f3 	.word	0xefff69f3
 8004fe4:	40008000 	.word	0x40008000
 8004fe8:	40013800 	.word	0x40013800
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	40004400 	.word	0x40004400
 8004ff4:	40004800 	.word	0x40004800
 8004ff8:	40004c00 	.word	0x40004c00
 8004ffc:	40005000 	.word	0x40005000
 8005000:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005004:	2300      	movs	r3, #0
 8005006:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	76bb      	strb	r3, [r7, #26]
        break;
 800500c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 80f1 	beq.w	80051f8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	4613      	mov	r3, r2
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	4413      	add	r3, r2
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	429a      	cmp	r2, r3
 8005024:	d305      	bcc.n	8005032 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	429a      	cmp	r2, r3
 8005030:	d902      	bls.n	8005038 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	76bb      	strb	r3, [r7, #26]
 8005036:	e0df      	b.n	80051f8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	4618      	mov	r0, r3
 800503c:	f04f 0100 	mov.w	r1, #0
 8005040:	f04f 0200 	mov.w	r2, #0
 8005044:	f04f 0300 	mov.w	r3, #0
 8005048:	020b      	lsls	r3, r1, #8
 800504a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800504e:	0202      	lsls	r2, r0, #8
 8005050:	6879      	ldr	r1, [r7, #4]
 8005052:	6849      	ldr	r1, [r1, #4]
 8005054:	0849      	lsrs	r1, r1, #1
 8005056:	4608      	mov	r0, r1
 8005058:	f04f 0100 	mov.w	r1, #0
 800505c:	1814      	adds	r4, r2, r0
 800505e:	eb43 0501 	adc.w	r5, r3, r1
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	461a      	mov	r2, r3
 8005068:	f04f 0300 	mov.w	r3, #0
 800506c:	4620      	mov	r0, r4
 800506e:	4629      	mov	r1, r5
 8005070:	f7fb f8bc 	bl	80001ec <__aeabi_uldivmod>
 8005074:	4602      	mov	r2, r0
 8005076:	460b      	mov	r3, r1
 8005078:	4613      	mov	r3, r2
 800507a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005082:	d308      	bcc.n	8005096 <UART_SetConfig+0x396>
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800508a:	d204      	bcs.n	8005096 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	60da      	str	r2, [r3, #12]
 8005094:	e0b0      	b.n	80051f8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	76bb      	strb	r3, [r7, #26]
 800509a:	e0ad      	b.n	80051f8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050a4:	d15c      	bne.n	8005160 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80050a6:	7efb      	ldrb	r3, [r7, #27]
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d828      	bhi.n	80050fe <UART_SetConfig+0x3fe>
 80050ac:	a201      	add	r2, pc, #4	; (adr r2, 80050b4 <UART_SetConfig+0x3b4>)
 80050ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b2:	bf00      	nop
 80050b4:	080050d9 	.word	0x080050d9
 80050b8:	080050e1 	.word	0x080050e1
 80050bc:	080050e9 	.word	0x080050e9
 80050c0:	080050ff 	.word	0x080050ff
 80050c4:	080050ef 	.word	0x080050ef
 80050c8:	080050ff 	.word	0x080050ff
 80050cc:	080050ff 	.word	0x080050ff
 80050d0:	080050ff 	.word	0x080050ff
 80050d4:	080050f7 	.word	0x080050f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050d8:	f7fe fc60 	bl	800399c <HAL_RCC_GetPCLK1Freq>
 80050dc:	6178      	str	r0, [r7, #20]
        break;
 80050de:	e013      	b.n	8005108 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050e0:	f7fe fc72 	bl	80039c8 <HAL_RCC_GetPCLK2Freq>
 80050e4:	6178      	str	r0, [r7, #20]
        break;
 80050e6:	e00f      	b.n	8005108 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050e8:	4b49      	ldr	r3, [pc, #292]	; (8005210 <UART_SetConfig+0x510>)
 80050ea:	617b      	str	r3, [r7, #20]
        break;
 80050ec:	e00c      	b.n	8005108 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050ee:	f7fe fbbd 	bl	800386c <HAL_RCC_GetSysClockFreq>
 80050f2:	6178      	str	r0, [r7, #20]
        break;
 80050f4:	e008      	b.n	8005108 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050fa:	617b      	str	r3, [r7, #20]
        break;
 80050fc:	e004      	b.n	8005108 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80050fe:	2300      	movs	r3, #0
 8005100:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	76bb      	strb	r3, [r7, #26]
        break;
 8005106:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d074      	beq.n	80051f8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	005a      	lsls	r2, r3, #1
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	085b      	lsrs	r3, r3, #1
 8005118:	441a      	add	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005122:	b29b      	uxth	r3, r3
 8005124:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	2b0f      	cmp	r3, #15
 800512a:	d916      	bls.n	800515a <UART_SetConfig+0x45a>
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005132:	d212      	bcs.n	800515a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	b29b      	uxth	r3, r3
 8005138:	f023 030f 	bic.w	r3, r3, #15
 800513c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	085b      	lsrs	r3, r3, #1
 8005142:	b29b      	uxth	r3, r3
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	b29a      	uxth	r2, r3
 800514a:	89fb      	ldrh	r3, [r7, #14]
 800514c:	4313      	orrs	r3, r2
 800514e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	89fa      	ldrh	r2, [r7, #14]
 8005156:	60da      	str	r2, [r3, #12]
 8005158:	e04e      	b.n	80051f8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	76bb      	strb	r3, [r7, #26]
 800515e:	e04b      	b.n	80051f8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005160:	7efb      	ldrb	r3, [r7, #27]
 8005162:	2b08      	cmp	r3, #8
 8005164:	d827      	bhi.n	80051b6 <UART_SetConfig+0x4b6>
 8005166:	a201      	add	r2, pc, #4	; (adr r2, 800516c <UART_SetConfig+0x46c>)
 8005168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516c:	08005191 	.word	0x08005191
 8005170:	08005199 	.word	0x08005199
 8005174:	080051a1 	.word	0x080051a1
 8005178:	080051b7 	.word	0x080051b7
 800517c:	080051a7 	.word	0x080051a7
 8005180:	080051b7 	.word	0x080051b7
 8005184:	080051b7 	.word	0x080051b7
 8005188:	080051b7 	.word	0x080051b7
 800518c:	080051af 	.word	0x080051af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005190:	f7fe fc04 	bl	800399c <HAL_RCC_GetPCLK1Freq>
 8005194:	6178      	str	r0, [r7, #20]
        break;
 8005196:	e013      	b.n	80051c0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005198:	f7fe fc16 	bl	80039c8 <HAL_RCC_GetPCLK2Freq>
 800519c:	6178      	str	r0, [r7, #20]
        break;
 800519e:	e00f      	b.n	80051c0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051a0:	4b1b      	ldr	r3, [pc, #108]	; (8005210 <UART_SetConfig+0x510>)
 80051a2:	617b      	str	r3, [r7, #20]
        break;
 80051a4:	e00c      	b.n	80051c0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051a6:	f7fe fb61 	bl	800386c <HAL_RCC_GetSysClockFreq>
 80051aa:	6178      	str	r0, [r7, #20]
        break;
 80051ac:	e008      	b.n	80051c0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051b2:	617b      	str	r3, [r7, #20]
        break;
 80051b4:	e004      	b.n	80051c0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80051b6:	2300      	movs	r3, #0
 80051b8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	76bb      	strb	r3, [r7, #26]
        break;
 80051be:	bf00      	nop
    }

    if (pclk != 0U)
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d018      	beq.n	80051f8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	085a      	lsrs	r2, r3, #1
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	441a      	add	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d8:	b29b      	uxth	r3, r3
 80051da:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	2b0f      	cmp	r3, #15
 80051e0:	d908      	bls.n	80051f4 <UART_SetConfig+0x4f4>
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051e8:	d204      	bcs.n	80051f4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	60da      	str	r2, [r3, #12]
 80051f2:	e001      	b.n	80051f8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005204:	7ebb      	ldrb	r3, [r7, #26]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3720      	adds	r7, #32
 800520a:	46bd      	mov	sp, r7
 800520c:	bdb0      	pop	{r4, r5, r7, pc}
 800520e:	bf00      	nop
 8005210:	00f42400 	.word	0x00f42400

08005214 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00a      	beq.n	800523e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00a      	beq.n	8005282 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	f003 0308 	and.w	r3, r3, #8
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a8:	f003 0310 	and.w	r3, r3, #16
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00a      	beq.n	80052c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ca:	f003 0320 	and.w	r3, r3, #32
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00a      	beq.n	80052e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	430a      	orrs	r2, r1
 80052e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d01a      	beq.n	800532a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005312:	d10a      	bne.n	800532a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	430a      	orrs	r2, r1
 8005328:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00a      	beq.n	800534c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	605a      	str	r2, [r3, #4]
  }
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af02      	add	r7, sp, #8
 800535e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005368:	f7fb fd1a 	bl	8000da0 <HAL_GetTick>
 800536c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0308 	and.w	r3, r3, #8
 8005378:	2b08      	cmp	r3, #8
 800537a:	d10e      	bne.n	800539a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800537c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f82d 	bl	80053ea <UART_WaitOnFlagUntilTimeout>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e023      	b.n	80053e2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0304 	and.w	r3, r3, #4
 80053a4:	2b04      	cmp	r3, #4
 80053a6:	d10e      	bne.n	80053c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f817 	bl	80053ea <UART_WaitOnFlagUntilTimeout>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e00d      	b.n	80053e2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2220      	movs	r2, #32
 80053ca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2220      	movs	r2, #32
 80053d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b084      	sub	sp, #16
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	60f8      	str	r0, [r7, #12]
 80053f2:	60b9      	str	r1, [r7, #8]
 80053f4:	603b      	str	r3, [r7, #0]
 80053f6:	4613      	mov	r3, r2
 80053f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053fa:	e05e      	b.n	80054ba <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005402:	d05a      	beq.n	80054ba <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005404:	f7fb fccc 	bl	8000da0 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	429a      	cmp	r2, r3
 8005412:	d302      	bcc.n	800541a <UART_WaitOnFlagUntilTimeout+0x30>
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d11b      	bne.n	8005452 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005428:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689a      	ldr	r2, [r3, #8]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 0201 	bic.w	r2, r2, #1
 8005438:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2220      	movs	r2, #32
 800543e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2220      	movs	r2, #32
 8005444:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e043      	b.n	80054da <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0304 	and.w	r3, r3, #4
 800545c:	2b00      	cmp	r3, #0
 800545e:	d02c      	beq.n	80054ba <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800546a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800546e:	d124      	bne.n	80054ba <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005478:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005488:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	689a      	ldr	r2, [r3, #8]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 0201 	bic.w	r2, r2, #1
 8005498:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2220      	movs	r2, #32
 800549e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2220      	movs	r2, #32
 80054a4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2220      	movs	r2, #32
 80054aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e00f      	b.n	80054da <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	69da      	ldr	r2, [r3, #28]
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	4013      	ands	r3, r2
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	bf0c      	ite	eq
 80054ca:	2301      	moveq	r3, #1
 80054cc:	2300      	movne	r3, #0
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	461a      	mov	r2, r3
 80054d2:	79fb      	ldrb	r3, [r7, #7]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d091      	beq.n	80053fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054e2:	b084      	sub	sp, #16
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	f107 001c 	add.w	r0, r7, #28
 80054f0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f92b 	bl	800575c <USB_CoreReset>
 8005506:	4603      	mov	r3, r0
 8005508:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800550a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800550c:	2b00      	cmp	r3, #0
 800550e:	d106      	bne.n	800551e <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005514:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	639a      	str	r2, [r3, #56]	; 0x38
 800551c:	e005      	b.n	800552a <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005522:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800552a:	7bfb      	ldrb	r3, [r7, #15]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005536:	b004      	add	sp, #16
 8005538:	4770      	bx	lr

0800553a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800553a:	b480      	push	{r7}
 800553c:	b083      	sub	sp, #12
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f043 0201 	orr.w	r2, r3, #1
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f023 0201 	bic.w	r2, r3, #1
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b082      	sub	sp, #8
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
 8005586:	460b      	mov	r3, r1
 8005588:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005596:	78fb      	ldrb	r3, [r7, #3]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d106      	bne.n	80055aa <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	60da      	str	r2, [r3, #12]
 80055a8:	e00b      	b.n	80055c2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80055aa:	78fb      	ldrb	r3, [r7, #3]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d106      	bne.n	80055be <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	60da      	str	r2, [r3, #12]
 80055bc:	e001      	b.n	80055c2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e003      	b.n	80055ca <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80055c2:	2032      	movs	r0, #50	; 0x32
 80055c4:	f7fb fbf8 	bl	8000db8 <HAL_Delay>

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
	...

080055d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	019b      	lsls	r3, r3, #6
 80055e6:	f043 0220 	orr.w	r2, r3, #32
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	3301      	adds	r3, #1
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	4a09      	ldr	r2, [pc, #36]	; (800561c <USB_FlushTxFifo+0x48>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d901      	bls.n	8005600 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e006      	b.n	800560e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	f003 0320 	and.w	r3, r3, #32
 8005608:	2b20      	cmp	r3, #32
 800560a:	d0f0      	beq.n	80055ee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	00030d40 	.word	0x00030d40

08005620 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005628:	2300      	movs	r3, #0
 800562a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2210      	movs	r2, #16
 8005630:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	3301      	adds	r3, #1
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4a09      	ldr	r2, [pc, #36]	; (8005660 <USB_FlushRxFifo+0x40>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d901      	bls.n	8005644 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e006      	b.n	8005652 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	f003 0310 	and.w	r3, r3, #16
 800564c:	2b10      	cmp	r3, #16
 800564e:	d0f0      	beq.n	8005632 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	00030d40 	.word	0x00030d40

08005664 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005664:	b480      	push	{r7}
 8005666:	b089      	sub	sp, #36	; 0x24
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	4611      	mov	r1, r2
 8005670:	461a      	mov	r2, r3
 8005672:	460b      	mov	r3, r1
 8005674:	71fb      	strb	r3, [r7, #7]
 8005676:	4613      	mov	r3, r2
 8005678:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005682:	88bb      	ldrh	r3, [r7, #4]
 8005684:	3303      	adds	r3, #3
 8005686:	089b      	lsrs	r3, r3, #2
 8005688:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800568a:	2300      	movs	r3, #0
 800568c:	61bb      	str	r3, [r7, #24]
 800568e:	e00f      	b.n	80056b0 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005690:	79fb      	ldrb	r3, [r7, #7]
 8005692:	031a      	lsls	r2, r3, #12
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	4413      	add	r3, r2
 8005698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800569c:	461a      	mov	r2, r3
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6013      	str	r3, [r2, #0]
    pSrc++;
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	3304      	adds	r3, #4
 80056a8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	3301      	adds	r3, #1
 80056ae:	61bb      	str	r3, [r7, #24]
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d3eb      	bcc.n	8005690 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3724      	adds	r7, #36	; 0x24
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b089      	sub	sp, #36	; 0x24
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	60f8      	str	r0, [r7, #12]
 80056ce:	60b9      	str	r1, [r7, #8]
 80056d0:	4613      	mov	r3, r2
 80056d2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80056dc:	88fb      	ldrh	r3, [r7, #6]
 80056de:	3303      	adds	r3, #3
 80056e0:	089b      	lsrs	r3, r3, #2
 80056e2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80056e4:	2300      	movs	r3, #0
 80056e6:	61bb      	str	r3, [r7, #24]
 80056e8:	e00b      	b.n	8005702 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	601a      	str	r2, [r3, #0]
    pDest++;
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	3304      	adds	r3, #4
 80056fa:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	3301      	adds	r3, #1
 8005700:	61bb      	str	r3, [r7, #24]
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	429a      	cmp	r2, r3
 8005708:	d3ef      	bcc.n	80056ea <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800570a:	69fb      	ldr	r3, [r7, #28]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3724      	adds	r7, #36	; 0x24
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	695b      	ldr	r3, [r3, #20]
 8005724:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	4013      	ands	r3, r2
 800572e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005730:	68fb      	ldr	r3, [r7, #12]
}
 8005732:	4618      	mov	r0, r3
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800573e:	b480      	push	{r7}
 8005740:	b083      	sub	sp, #12
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	f003 0301 	and.w	r3, r3, #1
}
 800574e:	4618      	mov	r0, r3
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
	...

0800575c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005764:	2300      	movs	r3, #0
 8005766:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	3301      	adds	r3, #1
 800576c:	60fb      	str	r3, [r7, #12]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4a13      	ldr	r2, [pc, #76]	; (80057c0 <USB_CoreReset+0x64>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d901      	bls.n	800577a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e01b      	b.n	80057b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	2b00      	cmp	r3, #0
 8005780:	daf2      	bge.n	8005768 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005782:	2300      	movs	r3, #0
 8005784:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	f043 0201 	orr.w	r2, r3, #1
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	3301      	adds	r3, #1
 8005796:	60fb      	str	r3, [r7, #12]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4a09      	ldr	r2, [pc, #36]	; (80057c0 <USB_CoreReset+0x64>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d901      	bls.n	80057a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e006      	b.n	80057b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d0f0      	beq.n	8005792 <USB_CoreReset+0x36>

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	00030d40 	.word	0x00030d40

080057c4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057c4:	b084      	sub	sp, #16
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b084      	sub	sp, #16
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	f107 001c 	add.w	r0, r7, #28
 80057d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80057e0:	461a      	mov	r2, r3
 80057e2:	2300      	movs	r3, #0
 80057e4:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800580c:	f023 0304 	bic.w	r3, r3, #4
 8005810:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005812:	2110      	movs	r1, #16
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f7ff fedd 	bl	80055d4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7ff ff00 	bl	8005620 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005820:	2300      	movs	r3, #0
 8005822:	60fb      	str	r3, [r7, #12]
 8005824:	e015      	b.n	8005852 <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	015a      	lsls	r2, r3, #5
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	4413      	add	r3, r2
 800582e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005832:	461a      	mov	r2, r3
 8005834:	f04f 33ff 	mov.w	r3, #4294967295
 8005838:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	4413      	add	r3, r2
 8005842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005846:	461a      	mov	r2, r3
 8005848:	2300      	movs	r3, #0
 800584a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	3301      	adds	r3, #1
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	6a3b      	ldr	r3, [r7, #32]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	429a      	cmp	r2, r3
 8005858:	d3e5      	bcc.n	8005826 <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800585a:	2101      	movs	r1, #1
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 f893 	bl	8005988 <USB_DriveVbus>

  HAL_Delay(200U);
 8005862:	20c8      	movs	r0, #200	; 0xc8
 8005864:	f7fb faa8 	bl	8000db8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f04f 32ff 	mov.w	r2, #4294967295
 8005874:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2280      	movs	r2, #128	; 0x80
 800587a:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a0d      	ldr	r2, [pc, #52]	; (80058b4 <USB_HostInit+0xf0>)
 8005880:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a0c      	ldr	r2, [pc, #48]	; (80058b8 <USB_HostInit+0xf4>)
 8005886:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	f043 0210 	orr.w	r2, r3, #16
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	699a      	ldr	r2, [r3, #24]
 800589a:	4b08      	ldr	r3, [pc, #32]	; (80058bc <USB_HostInit+0xf8>)
 800589c:	4313      	orrs	r3, r2
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058ae:	b004      	add	sp, #16
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	00600080 	.word	0x00600080
 80058b8:	004000e0 	.word	0x004000e0
 80058bc:	a3200008 	.word	0xa3200008

080058c0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	460b      	mov	r3, r1
 80058ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058de:	f023 0303 	bic.w	r3, r3, #3
 80058e2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	78fb      	ldrb	r3, [r7, #3]
 80058ee:	f003 0303 	and.w	r3, r3, #3
 80058f2:	68f9      	ldr	r1, [r7, #12]
 80058f4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80058f8:	4313      	orrs	r3, r2
 80058fa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80058fc:	78fb      	ldrb	r3, [r7, #3]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d107      	bne.n	8005912 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005908:	461a      	mov	r2, r3
 800590a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800590e:	6053      	str	r3, [r2, #4]
 8005910:	e009      	b.n	8005926 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005912:	78fb      	ldrb	r3, [r7, #3]
 8005914:	2b02      	cmp	r3, #2
 8005916:	d106      	bne.n	8005926 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800591e:	461a      	mov	r2, r3
 8005920:	f241 7370 	movw	r3, #6000	; 0x1770
 8005924:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005954:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800595e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005962:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005964:	2064      	movs	r0, #100	; 0x64
 8005966:	f7fb fa27 	bl	8000db8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005972:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005976:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005978:	200a      	movs	r0, #10
 800597a:	f7fb fa1d 	bl	8000db8 <HAL_Delay>

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	460b      	mov	r3, r1
 8005992:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005998:	2300      	movs	r3, #0
 800599a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80059ac:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d109      	bne.n	80059cc <USB_DriveVbus+0x44>
 80059b8:	78fb      	ldrb	r3, [r7, #3]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d106      	bne.n	80059cc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80059c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80059ca:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059d6:	d109      	bne.n	80059ec <USB_DriveVbus+0x64>
 80059d8:	78fb      	ldrb	r3, [r7, #3]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d106      	bne.n	80059ec <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80059e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059ea:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3714      	adds	r7, #20
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b085      	sub	sp, #20
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005a06:	2300      	movs	r3, #0
 8005a08:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	0c5b      	lsrs	r3, r3, #17
 8005a18:	f003 0303 	and.w	r3, r3, #3
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	b29b      	uxth	r3, r3
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
	...

08005a4c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b088      	sub	sp, #32
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	4608      	mov	r0, r1
 8005a56:	4611      	mov	r1, r2
 8005a58:	461a      	mov	r2, r3
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	70fb      	strb	r3, [r7, #3]
 8005a5e:	460b      	mov	r3, r1
 8005a60:	70bb      	strb	r3, [r7, #2]
 8005a62:	4613      	mov	r3, r2
 8005a64:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a66:	2300      	movs	r3, #0
 8005a68:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005a6e:	78fb      	ldrb	r3, [r7, #3]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a80:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005a82:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005a86:	2b03      	cmp	r3, #3
 8005a88:	d867      	bhi.n	8005b5a <USB_HC_Init+0x10e>
 8005a8a:	a201      	add	r2, pc, #4	; (adr r2, 8005a90 <USB_HC_Init+0x44>)
 8005a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a90:	08005aa1 	.word	0x08005aa1
 8005a94:	08005b1d 	.word	0x08005b1d
 8005a98:	08005aa1 	.word	0x08005aa1
 8005a9c:	08005adf 	.word	0x08005adf
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005aa0:	78fb      	ldrb	r3, [r7, #3]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aac:	461a      	mov	r2, r3
 8005aae:	f240 439d 	movw	r3, #1181	; 0x49d
 8005ab2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005ab4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	da51      	bge.n	8005b60 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005abc:	78fb      	ldrb	r3, [r7, #3]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	78fa      	ldrb	r2, [r7, #3]
 8005acc:	0151      	lsls	r1, r2, #5
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	440a      	add	r2, r1
 8005ad2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ada:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005adc:	e040      	b.n	8005b60 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ade:	78fb      	ldrb	r3, [r7, #3]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aea:	461a      	mov	r2, r3
 8005aec:	f240 639d 	movw	r3, #1693	; 0x69d
 8005af0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005af2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	da34      	bge.n	8005b64 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005afa:	78fb      	ldrb	r3, [r7, #3]
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	78fa      	ldrb	r2, [r7, #3]
 8005b0a:	0151      	lsls	r1, r2, #5
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	440a      	add	r2, r1
 8005b10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b18:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005b1a:	e023      	b.n	8005b64 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b1c:	78fb      	ldrb	r3, [r7, #3]
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b28:	461a      	mov	r2, r3
 8005b2a:	f240 2325 	movw	r3, #549	; 0x225
 8005b2e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005b30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	da17      	bge.n	8005b68 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005b38:	78fb      	ldrb	r3, [r7, #3]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	78fa      	ldrb	r2, [r7, #3]
 8005b48:	0151      	lsls	r1, r2, #5
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	440a      	add	r2, r1
 8005b4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b52:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005b56:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005b58:	e006      	b.n	8005b68 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	77fb      	strb	r3, [r7, #31]
      break;
 8005b5e:	e004      	b.n	8005b6a <USB_HC_Init+0x11e>
      break;
 8005b60:	bf00      	nop
 8005b62:	e002      	b.n	8005b6a <USB_HC_Init+0x11e>
      break;
 8005b64:	bf00      	nop
 8005b66:	e000      	b.n	8005b6a <USB_HC_Init+0x11e>
      break;
 8005b68:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b70:	699a      	ldr	r2, [r3, #24]
 8005b72:	78fb      	ldrb	r3, [r7, #3]
 8005b74:	f003 030f 	and.w	r3, r3, #15
 8005b78:	2101      	movs	r1, #1
 8005b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b7e:	6939      	ldr	r1, [r7, #16]
 8005b80:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005b84:	4313      	orrs	r3, r2
 8005b86:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005b94:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	da03      	bge.n	8005ba4 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005b9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ba0:	61bb      	str	r3, [r7, #24]
 8005ba2:	e001      	b.n	8005ba8 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f7ff ff26 	bl	80059fa <USB_GetHostSpeed>
 8005bae:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005bb0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d106      	bne.n	8005bc6 <USB_HC_Init+0x17a>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d003      	beq.n	8005bc6 <USB_HC_Init+0x17a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005bbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005bc2:	617b      	str	r3, [r7, #20]
 8005bc4:	e001      	b.n	8005bca <USB_HC_Init+0x17e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bca:	787b      	ldrb	r3, [r7, #1]
 8005bcc:	059b      	lsls	r3, r3, #22
 8005bce:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005bd2:	78bb      	ldrb	r3, [r7, #2]
 8005bd4:	02db      	lsls	r3, r3, #11
 8005bd6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bda:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005bdc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005be0:	049b      	lsls	r3, r3, #18
 8005be2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005be6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005be8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005bea:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005bee:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bf4:	78fb      	ldrb	r3, [r7, #3]
 8005bf6:	0159      	lsls	r1, r3, #5
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	440b      	add	r3, r1
 8005bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c00:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c06:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005c08:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005c0c:	2b03      	cmp	r3, #3
 8005c0e:	d10f      	bne.n	8005c30 <USB_HC_Init+0x1e4>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005c10:	78fb      	ldrb	r3, [r7, #3]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	78fa      	ldrb	r2, [r7, #3]
 8005c20:	0151      	lsls	r1, r2, #5
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	440a      	add	r2, r1
 8005c26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c2e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005c30:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3720      	adds	r7, #32
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop

08005c3c <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	785b      	ldrb	r3, [r3, #1]
 8005c4e:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005c50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c54:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d018      	beq.n	8005c90 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	8912      	ldrh	r2, [r2, #8]
 8005c66:	4413      	add	r3, r2
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	8912      	ldrh	r2, [r2, #8]
 8005c6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c72:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8005c74:	8bfa      	ldrh	r2, [r7, #30]
 8005c76:	8a7b      	ldrh	r3, [r7, #18]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d90b      	bls.n	8005c94 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8005c7c:	8a7b      	ldrh	r3, [r7, #18]
 8005c7e:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005c80:	8bfb      	ldrh	r3, [r7, #30]
 8005c82:	683a      	ldr	r2, [r7, #0]
 8005c84:	8912      	ldrh	r2, [r2, #8]
 8005c86:	fb02 f203 	mul.w	r2, r2, r3
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	611a      	str	r2, [r3, #16]
 8005c8e:	e001      	b.n	8005c94 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8005c90:	2301      	movs	r3, #1
 8005c92:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	78db      	ldrb	r3, [r3, #3]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d007      	beq.n	8005cac <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005c9c:	8bfb      	ldrh	r3, [r7, #30]
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	8912      	ldrh	r2, [r2, #8]
 8005ca2:	fb02 f203 	mul.w	r2, r2, r3
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	611a      	str	r2, [r3, #16]
 8005caa:	e003      	b.n	8005cb4 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	695a      	ldr	r2, [r3, #20]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005cbc:	8bfb      	ldrh	r3, [r7, #30]
 8005cbe:	04d9      	lsls	r1, r3, #19
 8005cc0:	4b59      	ldr	r3, [pc, #356]	; (8005e28 <USB_HC_StartXfer+0x1ec>)
 8005cc2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005cc4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	7a9b      	ldrb	r3, [r3, #10]
 8005cca:	075b      	lsls	r3, r3, #29
 8005ccc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005cd0:	6979      	ldr	r1, [r7, #20]
 8005cd2:	0148      	lsls	r0, r1, #5
 8005cd4:	69b9      	ldr	r1, [r7, #24]
 8005cd6:	4401      	add	r1, r0
 8005cd8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005cdc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005cde:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	bf0c      	ite	eq
 8005cf0:	2301      	moveq	r3, #1
 8005cf2:	2300      	movne	r3, #0
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	0151      	lsls	r1, r2, #5
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	440a      	add	r2, r1
 8005d0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d12:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005d16:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	7c7b      	ldrb	r3, [r7, #17]
 8005d28:	075b      	lsls	r3, r3, #29
 8005d2a:	6979      	ldr	r1, [r7, #20]
 8005d2c:	0148      	lsls	r0, r1, #5
 8005d2e:	69b9      	ldr	r1, [r7, #24]
 8005d30:	4401      	add	r1, r0
 8005d32:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005d36:	4313      	orrs	r3, r2
 8005d38:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d50:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	78db      	ldrb	r3, [r3, #3]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d004      	beq.n	8005d64 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d60:	60bb      	str	r3, [r7, #8]
 8005d62:	e003      	b.n	8005d6c <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d6a:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d72:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d80:	461a      	mov	r2, r3
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	78db      	ldrb	r3, [r3, #3]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d147      	bne.n	8005e1e <USB_HC_StartXfer+0x1e2>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d043      	beq.n	8005e1e <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	79db      	ldrb	r3, [r3, #7]
 8005d9a:	2b03      	cmp	r3, #3
 8005d9c:	d830      	bhi.n	8005e00 <USB_HC_StartXfer+0x1c4>
 8005d9e:	a201      	add	r2, pc, #4	; (adr r2, 8005da4 <USB_HC_StartXfer+0x168>)
 8005da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da4:	08005db5 	.word	0x08005db5
 8005da8:	08005dd9 	.word	0x08005dd9
 8005dac:	08005db5 	.word	0x08005db5
 8005db0:	08005dd9 	.word	0x08005dd9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	3303      	adds	r3, #3
 8005dba:	089b      	lsrs	r3, r3, #2
 8005dbc:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005dbe:	89fa      	ldrh	r2, [r7, #14]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d91c      	bls.n	8005e04 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	f043 0220 	orr.w	r2, r3, #32
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	619a      	str	r2, [r3, #24]
        }
        break;
 8005dd6:	e015      	b.n	8005e04 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	3303      	adds	r3, #3
 8005dde:	089b      	lsrs	r3, r3, #2
 8005de0:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005de2:	89fa      	ldrh	r2, [r7, #14]
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d90a      	bls.n	8005e08 <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	619a      	str	r2, [r3, #24]
        }
        break;
 8005dfe:	e003      	b.n	8005e08 <USB_HC_StartXfer+0x1cc>

      default:
        break;
 8005e00:	bf00      	nop
 8005e02:	e002      	b.n	8005e0a <USB_HC_StartXfer+0x1ce>
        break;
 8005e04:	bf00      	nop
 8005e06:	e000      	b.n	8005e0a <USB_HC_StartXfer+0x1ce>
        break;
 8005e08:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	68d9      	ldr	r1, [r3, #12]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	785a      	ldrb	r2, [r3, #1]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7ff fc23 	bl	8005664 <USB_WritePacket>
  }

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3720      	adds	r7, #32
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	1ff80000 	.word	0x1ff80000

08005e2c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	b29b      	uxth	r3, r3
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b089      	sub	sp, #36	; 0x24
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	460b      	mov	r3, r1
 8005e58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005e5e:	78fb      	ldrb	r3, [r7, #3]
 8005e60:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005e62:	2300      	movs	r3, #0
 8005e64:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	0c9b      	lsrs	r3, r3, #18
 8005e76:	f003 0303 	and.w	r3, r3, #3
 8005e7a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	0fdb      	lsrs	r3, r3, #31
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f003 0320 	and.w	r3, r3, #32
 8005e9a:	2b20      	cmp	r3, #32
 8005e9c:	d104      	bne.n	8005ea8 <USB_HC_Halt+0x5a>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	e0e8      	b.n	800607a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d002      	beq.n	8005eb4 <USB_HC_Halt+0x66>
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d173      	bne.n	8005f9c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	0151      	lsls	r1, r2, #5
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	440a      	add	r2, r1
 8005eca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ece:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ed2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f003 0320 	and.w	r3, r3, #32
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f040 80cb 	bne.w	8006078 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d143      	bne.n	8005f76 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	0151      	lsls	r1, r2, #5
 8005f00:	69ba      	ldr	r2, [r7, #24]
 8005f02:	440a      	add	r2, r1
 8005f04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f0c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	0151      	lsls	r1, r2, #5
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	440a      	add	r2, r1
 8005f24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f2c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	0151      	lsls	r1, r2, #5
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	440a      	add	r2, r1
 8005f44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f4c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	3301      	adds	r3, #1
 8005f52:	61fb      	str	r3, [r7, #28]
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f5a:	d81d      	bhi.n	8005f98 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f72:	d0ec      	beq.n	8005f4e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f74:	e080      	b.n	8006078 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	0151      	lsls	r1, r2, #5
 8005f88:	69ba      	ldr	r2, [r7, #24]
 8005f8a:	440a      	add	r2, r1
 8005f8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f94:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f96:	e06f      	b.n	8006078 <USB_HC_Halt+0x22a>
            break;
 8005f98:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f9a:	e06d      	b.n	8006078 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	015a      	lsls	r2, r3, #5
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	0151      	lsls	r1, r2, #5
 8005fae:	69ba      	ldr	r2, [r7, #24]
 8005fb0:	440a      	add	r2, r1
 8005fb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fba:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d143      	bne.n	8006054 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	0151      	lsls	r1, r2, #5
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	440a      	add	r2, r1
 8005fe2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fe6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fea:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	015a      	lsls	r2, r3, #5
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	0151      	lsls	r1, r2, #5
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	440a      	add	r2, r1
 8006002:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006006:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800600a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	4413      	add	r3, r2
 8006014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	0151      	lsls	r1, r2, #5
 800601e:	69ba      	ldr	r2, [r7, #24]
 8006020:	440a      	add	r2, r1
 8006022:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006026:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800602a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	3301      	adds	r3, #1
 8006030:	61fb      	str	r3, [r7, #28]
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006038:	d81d      	bhi.n	8006076 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	4413      	add	r3, r2
 8006042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800604c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006050:	d0ec      	beq.n	800602c <USB_HC_Halt+0x1de>
 8006052:	e011      	b.n	8006078 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	4413      	add	r3, r2
 800605c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	0151      	lsls	r1, r2, #5
 8006066:	69ba      	ldr	r2, [r7, #24]
 8006068:	440a      	add	r2, r1
 800606a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800606e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006072:	6013      	str	r3, [r2, #0]
 8006074:	e000      	b.n	8006078 <USB_HC_Halt+0x22a>
          break;
 8006076:	bf00      	nop
    }
  }

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3724      	adds	r7, #36	; 0x24
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b086      	sub	sp, #24
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006092:	2300      	movs	r3, #0
 8006094:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7ff fa60 	bl	800555c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800609c:	2110      	movs	r1, #16
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7ff fa98 	bl	80055d4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f7ff fabb 	bl	8005620 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80060aa:	2300      	movs	r3, #0
 80060ac:	613b      	str	r3, [r7, #16]
 80060ae:	e01f      	b.n	80060f0 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	015a      	lsls	r2, r3, #5
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060c6:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060ce:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80060d6:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	015a      	lsls	r2, r3, #5
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4413      	add	r3, r2
 80060e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e4:	461a      	mov	r2, r3
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	3301      	adds	r3, #1
 80060ee:	613b      	str	r3, [r7, #16]
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	2b0f      	cmp	r3, #15
 80060f4:	d9dc      	bls.n	80060b0 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80060f6:	2300      	movs	r3, #0
 80060f8:	613b      	str	r3, [r7, #16]
 80060fa:	e034      	b.n	8006166 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	015a      	lsls	r2, r3, #5
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	4413      	add	r3, r2
 8006104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006112:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800611a:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006122:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	4413      	add	r3, r2
 800612c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006130:	461a      	mov	r2, r3
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	3301      	adds	r3, #1
 800613a:	617b      	str	r3, [r7, #20]
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006142:	d80c      	bhi.n	800615e <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	4413      	add	r3, r2
 800614c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800615a:	d0ec      	beq.n	8006136 <USB_StopHost+0xb0>
 800615c:	e000      	b.n	8006160 <USB_StopHost+0xda>
        break;
 800615e:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	3301      	adds	r3, #1
 8006164:	613b      	str	r3, [r7, #16]
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	2b0f      	cmp	r3, #15
 800616a:	d9c7      	bls.n	80060fc <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006172:	461a      	mov	r2, r3
 8006174:	f04f 33ff 	mov.w	r3, #4294967295
 8006178:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f04f 32ff 	mov.w	r2, #4294967295
 8006180:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7ff f9d9 	bl	800553a <USB_EnableGlobalInt>

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3718      	adds	r7, #24
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <USBH_AUDIO_InterfaceInit>:
  *         The function init the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006192:	b590      	push	{r4, r7, lr}
 8006194:	b08b      	sub	sp, #44	; 0x2c
 8006196:	af04      	add	r7, sp, #16
 8006198:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef out_status, in_status;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  uint8_t  interface, index;
  uint16_t ep_size_out = 0U;
 800619a:	2300      	movs	r3, #0
 800619c:	82bb      	strh	r3, [r7, #20]
  uint16_t ep_size_in = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	827b      	strh	r3, [r7, #18]

  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0x00U);
 80061a2:	2300      	movs	r3, #0
 80061a4:	2201      	movs	r2, #1
 80061a6:	2101      	movs	r1, #1
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f001 ffa0 	bl	80080ee <USBH_FindInterface>
 80061ae:	4603      	mov	r3, r0
 80061b0:	747b      	strb	r3, [r7, #17]

  if (interface == 0xFFU) /* Not Valid Interface */
 80061b2:	7c7b      	ldrb	r3, [r7, #17]
 80061b4:	2bff      	cmp	r3, #255	; 0xff
 80061b6:	d101      	bne.n	80061bc <USBH_AUDIO_InterfaceInit+0x2a>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80061b8:	2302      	movs	r3, #2
 80061ba:	e1a5      	b.n	8006508 <USBH_AUDIO_InterfaceInit+0x376>
  }

  phost->pActiveClass->pData = (AUDIO_HandleTypeDef *)USBH_malloc(sizeof(AUDIO_HandleTypeDef));
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 444c 	ldr.w	r4, [r3, #1100]	; 0x44c
 80061c2:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80061c6:	f003 fd6d 	bl	8009ca4 <malloc>
 80061ca:	4603      	mov	r3, r0
 80061cc:	61e3      	str	r3, [r4, #28]
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80061d4:	69db      	ldr	r3, [r3, #28]
 80061d6:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle == NULL)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <USBH_AUDIO_InterfaceInit+0x50>
  {
    USBH_DbgLog("Cannot allocate memory for AUDIO Handle");
    return USBH_FAIL;
 80061de:	2302      	movs	r3, #2
 80061e0:	e192      	b.n	8006508 <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* Initialize audio handler */
  USBH_memset(AUDIO_Handle, 0, sizeof(AUDIO_HandleTypeDef));
 80061e2:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80061e6:	2100      	movs	r1, #0
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f003 fd6b 	bl	8009cc4 <memset>

  /* 1st Step:  Find Audio Interfaces */
  out_status = USBH_AUDIO_FindAudioStreamingIN(phost);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fc0f 	bl	8006a12 <USBH_AUDIO_FindAudioStreamingIN>
 80061f4:	4603      	mov	r3, r0
 80061f6:	72fb      	strb	r3, [r7, #11]

  in_status = USBH_AUDIO_FindAudioStreamingOUT(phost);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fcc9 	bl	8006b90 <USBH_AUDIO_FindAudioStreamingOUT>
 80061fe:	4603      	mov	r3, r0
 8006200:	72bb      	strb	r3, [r7, #10]

  if ((out_status == USBH_FAIL) && (in_status == USBH_FAIL))
 8006202:	7afb      	ldrb	r3, [r7, #11]
 8006204:	2b02      	cmp	r3, #2
 8006206:	d104      	bne.n	8006212 <USBH_AUDIO_InterfaceInit+0x80>
 8006208:	7abb      	ldrb	r3, [r7, #10]
 800620a:	2b02      	cmp	r3, #2
 800620c:	d101      	bne.n	8006212 <USBH_AUDIO_InterfaceInit+0x80>
  {
    USBH_DbgLog("%s class configuration not supported.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800620e:	2302      	movs	r3, #2
 8006210:	e17a      	b.n	8006508 <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* 2nd Step:  Select Audio Streaming Interfaces with largest endpoint size : default behavior */
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 8006212:	2300      	movs	r3, #0
 8006214:	75fb      	strb	r3, [r7, #23]
 8006216:	e0c6      	b.n	80063a6 <USBH_AUDIO_InterfaceInit+0x214>
  {
    if (AUDIO_Handle->stream_out[index].valid == 1U)
 8006218:	7dfa      	ldrb	r2, [r7, #23]
 800621a:	68f9      	ldr	r1, [r7, #12]
 800621c:	4613      	mov	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	440b      	add	r3, r1
 8006226:	333e      	adds	r3, #62	; 0x3e
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d156      	bne.n	80062dc <USBH_AUDIO_InterfaceInit+0x14a>
    {
      if (ep_size_out < AUDIO_Handle->stream_out[index].EpSize)
 800622e:	7dfa      	ldrb	r2, [r7, #23]
 8006230:	68f9      	ldr	r1, [r7, #12]
 8006232:	4613      	mov	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	005b      	lsls	r3, r3, #1
 800623a:	440b      	add	r3, r1
 800623c:	333a      	adds	r3, #58	; 0x3a
 800623e:	881b      	ldrh	r3, [r3, #0]
 8006240:	8aba      	ldrh	r2, [r7, #20]
 8006242:	429a      	cmp	r2, r3
 8006244:	d24a      	bcs.n	80062dc <USBH_AUDIO_InterfaceInit+0x14a>
      {
        ep_size_out = AUDIO_Handle->stream_out[index].EpSize;
 8006246:	7dfa      	ldrb	r2, [r7, #23]
 8006248:	68f9      	ldr	r1, [r7, #12]
 800624a:	4613      	mov	r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	4413      	add	r3, r2
 8006250:	005b      	lsls	r3, r3, #1
 8006252:	440b      	add	r3, r1
 8006254:	333a      	adds	r3, #58	; 0x3a
 8006256:	881b      	ldrh	r3, [r3, #0]
 8006258:	82bb      	strh	r3, [r7, #20]
        AUDIO_Handle->headphone.interface = AUDIO_Handle->stream_out[index].interface;
 800625a:	7dfa      	ldrb	r2, [r7, #23]
 800625c:	68f9      	ldr	r1, [r7, #12]
 800625e:	4613      	mov	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	005b      	lsls	r3, r3, #1
 8006266:	440b      	add	r3, r1
 8006268:	333d      	adds	r3, #61	; 0x3d
 800626a:	781a      	ldrb	r2, [r3, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
        AUDIO_Handle->headphone.AltSettings = AUDIO_Handle->stream_out[index].AltSettings;
 8006272:	7dfa      	ldrb	r2, [r7, #23]
 8006274:	68f9      	ldr	r1, [r7, #12]
 8006276:	4613      	mov	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4413      	add	r3, r2
 800627c:	005b      	lsls	r3, r3, #1
 800627e:	440b      	add	r3, r1
 8006280:	333c      	adds	r3, #60	; 0x3c
 8006282:	781a      	ldrb	r2, [r3, #0]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
        AUDIO_Handle->headphone.Ep = AUDIO_Handle->stream_out[index].Ep;
 800628a:	7dfa      	ldrb	r2, [r7, #23]
 800628c:	68f9      	ldr	r1, [r7, #12]
 800628e:	4613      	mov	r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	4413      	add	r3, r2
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	440b      	add	r3, r1
 8006298:	3338      	adds	r3, #56	; 0x38
 800629a:	781a      	ldrb	r2, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
        AUDIO_Handle->headphone.EpSize = AUDIO_Handle->stream_out[index].EpSize;
 80062a2:	7dfa      	ldrb	r2, [r7, #23]
 80062a4:	68f9      	ldr	r1, [r7, #12]
 80062a6:	4613      	mov	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4413      	add	r3, r2
 80062ac:	005b      	lsls	r3, r3, #1
 80062ae:	440b      	add	r3, r1
 80062b0:	333a      	adds	r3, #58	; 0x3a
 80062b2:	881a      	ldrh	r2, [r3, #0]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
        AUDIO_Handle->headphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 80062ba:	7dfa      	ldrb	r2, [r7, #23]
 80062bc:	68f9      	ldr	r1, [r7, #12]
 80062be:	4613      	mov	r3, r2
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	4413      	add	r3, r2
 80062c4:	005b      	lsls	r3, r3, #1
 80062c6:	440b      	add	r3, r1
 80062c8:	3340      	adds	r3, #64	; 0x40
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	b2da      	uxtb	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
        AUDIO_Handle->headphone.supported = 1U;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
      }
    }

    if (AUDIO_Handle->stream_in[index].valid == 1U)
 80062dc:	7dfa      	ldrb	r2, [r7, #23]
 80062de:	68f9      	ldr	r1, [r7, #12]
 80062e0:	4613      	mov	r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4413      	add	r3, r2
 80062e6:	005b      	lsls	r3, r3, #1
 80062e8:	440b      	add	r3, r1
 80062ea:	330c      	adds	r3, #12
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d156      	bne.n	80063a0 <USBH_AUDIO_InterfaceInit+0x20e>
    {
      if (ep_size_in < AUDIO_Handle->stream_in[index].EpSize)
 80062f2:	7dfa      	ldrb	r2, [r7, #23]
 80062f4:	68f9      	ldr	r1, [r7, #12]
 80062f6:	4613      	mov	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4413      	add	r3, r2
 80062fc:	005b      	lsls	r3, r3, #1
 80062fe:	440b      	add	r3, r1
 8006300:	3308      	adds	r3, #8
 8006302:	881b      	ldrh	r3, [r3, #0]
 8006304:	8a7a      	ldrh	r2, [r7, #18]
 8006306:	429a      	cmp	r2, r3
 8006308:	d24a      	bcs.n	80063a0 <USBH_AUDIO_InterfaceInit+0x20e>
      {
        ep_size_in = AUDIO_Handle->stream_in[index].EpSize;
 800630a:	7dfa      	ldrb	r2, [r7, #23]
 800630c:	68f9      	ldr	r1, [r7, #12]
 800630e:	4613      	mov	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4413      	add	r3, r2
 8006314:	005b      	lsls	r3, r3, #1
 8006316:	440b      	add	r3, r1
 8006318:	3308      	adds	r3, #8
 800631a:	881b      	ldrh	r3, [r3, #0]
 800631c:	827b      	strh	r3, [r7, #18]
        AUDIO_Handle->microphone.interface = AUDIO_Handle->stream_in[index].interface;
 800631e:	7dfa      	ldrb	r2, [r7, #23]
 8006320:	68f9      	ldr	r1, [r7, #12]
 8006322:	4613      	mov	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	005b      	lsls	r3, r3, #1
 800632a:	440b      	add	r3, r1
 800632c:	330b      	adds	r3, #11
 800632e:	781a      	ldrb	r2, [r3, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
        AUDIO_Handle->microphone.AltSettings = AUDIO_Handle->stream_in[index].AltSettings;
 8006336:	7dfa      	ldrb	r2, [r7, #23]
 8006338:	68f9      	ldr	r1, [r7, #12]
 800633a:	4613      	mov	r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	4413      	add	r3, r2
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	440b      	add	r3, r1
 8006344:	330a      	adds	r3, #10
 8006346:	781a      	ldrb	r2, [r3, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
        AUDIO_Handle->microphone.Ep = AUDIO_Handle->stream_in[index].Ep;
 800634e:	7dfa      	ldrb	r2, [r7, #23]
 8006350:	68f9      	ldr	r1, [r7, #12]
 8006352:	4613      	mov	r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4413      	add	r3, r2
 8006358:	005b      	lsls	r3, r3, #1
 800635a:	440b      	add	r3, r1
 800635c:	3306      	adds	r3, #6
 800635e:	781a      	ldrb	r2, [r3, #0]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        AUDIO_Handle->microphone.EpSize = AUDIO_Handle->stream_in[index].EpSize;
 8006366:	7dfa      	ldrb	r2, [r7, #23]
 8006368:	68f9      	ldr	r1, [r7, #12]
 800636a:	4613      	mov	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	005b      	lsls	r3, r3, #1
 8006372:	440b      	add	r3, r1
 8006374:	3308      	adds	r3, #8
 8006376:	881a      	ldrh	r2, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
        AUDIO_Handle->microphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 800637e:	7dfa      	ldrb	r2, [r7, #23]
 8006380:	68f9      	ldr	r1, [r7, #12]
 8006382:	4613      	mov	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	005b      	lsls	r3, r3, #1
 800638a:	440b      	add	r3, r1
 800638c:	3340      	adds	r3, #64	; 0x40
 800638e:	881b      	ldrh	r3, [r3, #0]
 8006390:	b2da      	uxtb	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
        AUDIO_Handle->microphone.supported = 1U;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 80063a0:	7dfb      	ldrb	r3, [r7, #23]
 80063a2:	3301      	adds	r3, #1
 80063a4:	75fb      	strb	r3, [r7, #23]
 80063a6:	7dfb      	ldrb	r3, [r7, #23]
 80063a8:	2b04      	cmp	r3, #4
 80063aa:	f67f af35 	bls.w	8006218 <USBH_AUDIO_InterfaceInit+0x86>
      }
    }
  }

  if (USBH_AUDIO_FindHIDControl(phost) == USBH_OK)
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fcad 	bl	8006d0e <USBH_AUDIO_FindHIDControl>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d103      	bne.n	80063c2 <USBH_AUDIO_InterfaceInit+0x230>
  {
    AUDIO_Handle->control.supported = 1U;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
  }

  /* 3rd Step:  Find and Parse Audio interfaces */
  USBH_AUDIO_ParseCSDescriptors(phost);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 fd25 	bl	8006e12 <USBH_AUDIO_ParseCSDescriptors>


  /* 4th Step:  Open the Audio streaming pipes*/
  if (AUDIO_Handle->headphone.supported == 1U)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d12e      	bne.n	8006430 <USBH_AUDIO_InterfaceInit+0x29e>
  {
    USBH_AUDIO_BuildHeadphonePath(phost);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 ff68 	bl	80072a8 <USBH_AUDIO_BuildHeadphonePath>

    AUDIO_Handle->headphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->headphone.Ep);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 80063de:	4619      	mov	r1, r3
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f003 f8d5 	bl	8009590 <USBH_AllocPipe>
 80063e6:	4603      	mov	r3, r0
 80063e8:	461a      	mov	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f893 10fb 	ldrb.w	r1, [r3, #251]	; 0xfb
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	; 0xf6
 800640e:	9202      	str	r2, [sp, #8]
 8006410:	2201      	movs	r2, #1
 8006412:	9201      	str	r2, [sp, #4]
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	4623      	mov	r3, r4
 8006418:	4602      	mov	r2, r0
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f003 f889 	bl	8009532 <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_ISOC,
                  AUDIO_Handle->headphone.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->headphone.Pipe, 0U);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8006426:	2200      	movs	r2, #0
 8006428:	4619      	mov	r1, r3
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f003 fb8d 	bl	8009b4a <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8006436:	2b01      	cmp	r3, #1
 8006438:	d12e      	bne.n	8006498 <USBH_AUDIO_InterfaceInit+0x306>
  {
    USBH_AUDIO_BuildMicrophonePath(phost);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 feac 	bl	8007198 <USBH_AUDIO_BuildMicrophonePath>
    AUDIO_Handle->microphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->microphone.Ep);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8006446:	4619      	mov	r1, r3
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f003 f8a1 	bl	8009590 <USBH_AllocPipe>
 800644e:	4603      	mov	r3, r0
 8006450:	461a      	mov	r2, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f893 1143 	ldrb.w	r1, [r3, #323]	; 0x143
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f893 013c 	ldrb.w	r0, [r3, #316]	; 0x13c
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	f8b2 213e 	ldrh.w	r2, [r2, #318]	; 0x13e
 8006476:	9202      	str	r2, [sp, #8]
 8006478:	2201      	movs	r2, #1
 800647a:	9201      	str	r2, [sp, #4]
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	4623      	mov	r3, r4
 8006480:	4602      	mov	r2, r0
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f003 f855 	bl	8009532 <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_ISOC,
                  AUDIO_Handle->microphone.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->microphone.Pipe, 0U);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 800648e:	2200      	movs	r2, #0
 8006490:	4619      	mov	r1, r3
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f003 fb59 	bl	8009b4a <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->control.supported == 1U)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d12b      	bne.n	80064fa <USBH_AUDIO_InterfaceInit+0x368>
  {
    AUDIO_Handle->control.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->control.Ep);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 80064a8:	4619      	mov	r1, r3
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f003 f870 	bl	8009590 <USBH_AllocPipe>
 80064b0:	4603      	mov	r3, r0
 80064b2:	461a      	mov	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f893 118a 	ldrb.w	r1, [r3, #394]	; 0x18a
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f893 0184 	ldrb.w	r0, [r3, #388]	; 0x184
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	f8b2 2186 	ldrh.w	r2, [r2, #390]	; 0x186
 80064d8:	9202      	str	r2, [sp, #8]
 80064da:	2203      	movs	r2, #3
 80064dc:	9201      	str	r2, [sp, #4]
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	4623      	mov	r3, r4
 80064e2:	4602      	mov	r2, r0
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f003 f824 	bl	8009532 <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_INTR,
                  AUDIO_Handle->control.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->control.Pipe, 0U);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 80064f0:	2200      	movs	r2, #0
 80064f2:	4619      	mov	r1, r3
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f003 fb28 	bl	8009b4a <USBH_LL_SetToggle>

  }

  AUDIO_Handle->req_state = AUDIO_REQ_INIT;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2201      	movs	r2, #1
 80064fe:	701a      	strb	r2, [r3, #0]
  AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2201      	movs	r2, #1
 8006504:	70da      	strb	r2, [r3, #3]

  return USBH_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	371c      	adds	r7, #28
 800650c:	46bd      	mov	sp, r7
 800650e:	bd90      	pop	{r4, r7, pc}

08006510 <USBH_AUDIO_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800651e:	69db      	ldr	r3, [r3, #28]
 8006520:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle->microphone.Pipe != 0x00U)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8006528:	2b00      	cmp	r3, #0
 800652a:	d011      	beq.n	8006550 <USBH_AUDIO_InterfaceDeInit+0x40>
  {
    USBH_ClosePipe(phost, AUDIO_Handle->microphone.Pipe);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8006532:	4619      	mov	r1, r3
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f003 f81b 	bl	8009570 <USBH_ClosePipe>
    USBH_FreePipe(phost, AUDIO_Handle->microphone.Pipe);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8006540:	4619      	mov	r1, r3
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f003 f846 	bl	80095d4 <USBH_FreePipe>
    AUDIO_Handle->microphone.Pipe = 0U;     /* Reset the pipe as Free */
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
  }

  if (AUDIO_Handle->headphone.Pipe != 0x00U)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8006556:	2b00      	cmp	r3, #0
 8006558:	d011      	beq.n	800657e <USBH_AUDIO_InterfaceDeInit+0x6e>
  {
    USBH_ClosePipe(phost,  AUDIO_Handle->headphone.Pipe);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8006560:	4619      	mov	r1, r3
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f003 f804 	bl	8009570 <USBH_ClosePipe>
    USBH_FreePipe(phost,  AUDIO_Handle->headphone.Pipe);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 800656e:	4619      	mov	r1, r3
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f003 f82f 	bl	80095d4 <USBH_FreePipe>
    AUDIO_Handle->headphone.Pipe = 0U;     /* Reset the pipe as Free */
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  }

  if (AUDIO_Handle->control.Pipe != 0x00U)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8006584:	2b00      	cmp	r3, #0
 8006586:	d011      	beq.n	80065ac <USBH_AUDIO_InterfaceDeInit+0x9c>
  {
    USBH_ClosePipe(phost,  AUDIO_Handle->control.Pipe);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 800658e:	4619      	mov	r1, r3
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f002 ffed 	bl	8009570 <USBH_ClosePipe>
    USBH_FreePipe(phost,  AUDIO_Handle->control.Pipe);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 800659c:	4619      	mov	r1, r3
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f003 f818 	bl	80095d4 <USBH_FreePipe>
    AUDIO_Handle->control.Pipe = 0U;     /* Reset the pipe as Free */
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
  }

  if (phost->pActiveClass->pData)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80065b2:	69db      	ldr	r3, [r3, #28]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00b      	beq.n	80065d0 <USBH_AUDIO_InterfaceDeInit+0xc0>
  {
    USBH_free(phost->pActiveClass->pData);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80065be:	69db      	ldr	r3, [r3, #28]
 80065c0:	4618      	mov	r0, r3
 80065c2:	f003 fb77 	bl	8009cb4 <free>
    phost->pActiveClass->pData = 0U;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80065cc:	2200      	movs	r2, #0
 80065ce:	61da      	str	r2, [r3, #28]
  }
  return USBH_OK ;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
	...

080065dc <USBH_AUDIO_ClassRequest>:
  *         for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ClassRequest(USBH_HandleTypeDef *phost)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b086      	sub	sp, #24
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 80065ee:	2301      	movs	r3, #1
 80065f0:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 80065f2:	2301      	movs	r3, #1
 80065f4:	73fb      	strb	r3, [r7, #15]

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->req_state)
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	3b01      	subs	r3, #1
 80065fc:	2b06      	cmp	r3, #6
 80065fe:	f200 80be 	bhi.w	800677e <USBH_AUDIO_ClassRequest+0x1a2>
 8006602:	a201      	add	r2, pc, #4	; (adr r2, 8006608 <USBH_AUDIO_ClassRequest+0x2c>)
 8006604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006608:	08006625 	.word	0x08006625
 800660c:	08006767 	.word	0x08006767
 8006610:	08006625 	.word	0x08006625
 8006614:	08006667 	.word	0x08006667
 8006618:	080066df 	.word	0x080066df
 800661c:	08006723 	.word	0x08006723
 8006620:	080066cb 	.word	0x080066cb
  {
  case AUDIO_REQ_INIT:
  case AUDIO_REQ_SET_DEFAULT_IN_INTERFACE:
    if (AUDIO_Handle->microphone.supported == 1U)
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 800662a:	2b01      	cmp	r3, #1
 800662c:	d117      	bne.n	800665e <USBH_AUDIO_ClassRequest+0x82>
    {
      req_status = USBH_SetInterface(phost,
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8006634:	2200      	movs	r2, #0
 8006636:	4619      	mov	r1, r3
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f002 fb2a 	bl	8008c92 <USBH_SetInterface>
 800663e:	4603      	mov	r3, r0
 8006640:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->microphone.interface,
                                     0U);

      if (req_status == USBH_OK)
 8006642:	7bfb      	ldrb	r3, [r7, #15]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d103      	bne.n	8006650 <USBH_AUDIO_ClassRequest+0x74>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	2204      	movs	r2, #4
 800664c:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800664e:	e098      	b.n	8006782 <USBH_AUDIO_ClassRequest+0x1a6>
      else if (req_status == USBH_NOT_SUPPORTED)
 8006650:	7bfb      	ldrb	r3, [r7, #15]
 8006652:	2b03      	cmp	r3, #3
 8006654:	f040 8095 	bne.w	8006782 <USBH_AUDIO_ClassRequest+0x1a6>
        status = USBH_FAIL;
 8006658:	2302      	movs	r3, #2
 800665a:	75fb      	strb	r3, [r7, #23]
    break;
 800665c:	e091      	b.n	8006782 <USBH_AUDIO_ClassRequest+0x1a6>
      AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	2204      	movs	r2, #4
 8006662:	701a      	strb	r2, [r3, #0]
    break;
 8006664:	e08d      	b.n	8006782 <USBH_AUDIO_ClassRequest+0x1a6>

  case AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE:
    if (AUDIO_Handle->headphone.supported == 1U)
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800666c:	2b01      	cmp	r3, #1
 800666e:	d125      	bne.n	80066bc <USBH_AUDIO_ClassRequest+0xe0>
    {
      req_status = USBH_SetInterface(phost,
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 8006676:	2200      	movs	r2, #0
 8006678:	4619      	mov	r1, r3
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f002 fb09 	bl	8008c92 <USBH_SetInterface>
 8006680:	4603      	mov	r3, r0
 8006682:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->headphone.interface,
                                     0U);

      if (req_status == USBH_OK)
 8006684:	7bfb      	ldrb	r3, [r7, #15]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d112      	bne.n	80066b0 <USBH_AUDIO_ClassRequest+0xd4>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	2207      	movs	r2, #7
 800668e:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	2206      	movs	r2, #6
 8006694:	705a      	strb	r2, [r3, #1]

        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80066ae:	e06a      	b.n	8006786 <USBH_AUDIO_ClassRequest+0x1aa>
      else if (req_status == USBH_NOT_SUPPORTED)
 80066b0:	7bfb      	ldrb	r3, [r7, #15]
 80066b2:	2b03      	cmp	r3, #3
 80066b4:	d167      	bne.n	8006786 <USBH_AUDIO_ClassRequest+0x1aa>
        status = USBH_FAIL;
 80066b6:	2302      	movs	r3, #2
 80066b8:	75fb      	strb	r3, [r7, #23]
    break;
 80066ba:	e064      	b.n	8006786 <USBH_AUDIO_ClassRequest+0x1aa>
      AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	2207      	movs	r2, #7
 80066c0:	701a      	strb	r2, [r3, #0]
      AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	2206      	movs	r2, #6
 80066c6:	705a      	strb	r2, [r3, #1]
    break;
 80066c8:	e05d      	b.n	8006786 <USBH_AUDIO_ClassRequest+0x1aa>

  case AUDIO_REQ_CS_REQUESTS:
    if (USBH_AUDIO_HandleCSRequest(phost) == USBH_OK)
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f938 	bl	8006940 <USBH_AUDIO_HandleCSRequest>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d159      	bne.n	800678a <USBH_AUDIO_ClassRequest+0x1ae>
    {
      AUDIO_Handle->req_state = AUDIO_REQ_SET_IN_INTERFACE;
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	2205      	movs	r2, #5
 80066da:	701a      	strb	r2, [r3, #0]
    }
    break;
 80066dc:	e055      	b.n	800678a <USBH_AUDIO_ClassRequest+0x1ae>

  case AUDIO_REQ_SET_IN_INTERFACE:
    if (AUDIO_Handle->microphone.supported == 1U)
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d118      	bne.n	800671a <USBH_AUDIO_ClassRequest+0x13e>
    {
      req_status = USBH_SetInterface(phost,
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	f893 1140 	ldrb.w	r1, [r3, #320]	; 0x140
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 80066f4:	461a      	mov	r2, r3
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f002 facb 	bl	8008c92 <USBH_SetInterface>
 80066fc:	4603      	mov	r3, r0
 80066fe:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->microphone.interface,
                                     AUDIO_Handle->microphone.AltSettings);

      if (req_status == USBH_OK)
 8006700:	7bfb      	ldrb	r3, [r7, #15]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d103      	bne.n	800670e <USBH_AUDIO_ClassRequest+0x132>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	2206      	movs	r2, #6
 800670a:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800670c:	e03f      	b.n	800678e <USBH_AUDIO_ClassRequest+0x1b2>
      else if (req_status == USBH_NOT_SUPPORTED)
 800670e:	7bfb      	ldrb	r3, [r7, #15]
 8006710:	2b03      	cmp	r3, #3
 8006712:	d13c      	bne.n	800678e <USBH_AUDIO_ClassRequest+0x1b2>
        status = USBH_FAIL;
 8006714:	2302      	movs	r3, #2
 8006716:	75fb      	strb	r3, [r7, #23]
    break;
 8006718:	e039      	b.n	800678e <USBH_AUDIO_ClassRequest+0x1b2>
      AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	2206      	movs	r2, #6
 800671e:	701a      	strb	r2, [r3, #0]
    break;
 8006720:	e035      	b.n	800678e <USBH_AUDIO_ClassRequest+0x1b2>
  case AUDIO_REQ_SET_OUT_INTERFACE:
    if (AUDIO_Handle->headphone.supported == 1U)
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8006728:	2b01      	cmp	r3, #1
 800672a:	d118      	bne.n	800675e <USBH_AUDIO_ClassRequest+0x182>
    {
      req_status = USBH_SetInterface(phost,
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	f893 10f8 	ldrb.w	r1, [r3, #248]	; 0xf8
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 8006738:	461a      	mov	r2, r3
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f002 faa9 	bl	8008c92 <USBH_SetInterface>
 8006740:	4603      	mov	r3, r0
 8006742:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->headphone.interface,
                                     AUDIO_Handle->headphone.AltSettings);

      if (req_status == USBH_OK)
 8006744:	7bfb      	ldrb	r3, [r7, #15]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d103      	bne.n	8006752 <USBH_AUDIO_ClassRequest+0x176>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	2202      	movs	r2, #2
 800674e:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006750:	e01f      	b.n	8006792 <USBH_AUDIO_ClassRequest+0x1b6>
      else if (req_status == USBH_NOT_SUPPORTED)
 8006752:	7bfb      	ldrb	r3, [r7, #15]
 8006754:	2b03      	cmp	r3, #3
 8006756:	d11c      	bne.n	8006792 <USBH_AUDIO_ClassRequest+0x1b6>
        status = USBH_FAIL;
 8006758:	2302      	movs	r3, #2
 800675a:	75fb      	strb	r3, [r7, #23]
    break;
 800675c:	e019      	b.n	8006792 <USBH_AUDIO_ClassRequest+0x1b6>
      AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	2202      	movs	r2, #2
 8006762:	701a      	strb	r2, [r3, #0]
    break;
 8006764:	e015      	b.n	8006792 <USBH_AUDIO_ClassRequest+0x1b6>
  case AUDIO_REQ_IDLE:
    AUDIO_Handle->play_state = AUDIO_PLAYBACK_INIT;
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	2201      	movs	r2, #1
 800676a:	709a      	strb	r2, [r3, #2]
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8006772:	2102      	movs	r1, #2
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	4798      	blx	r3
    status  = USBH_OK;
 8006778:	2300      	movs	r3, #0
 800677a:	75fb      	strb	r3, [r7, #23]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800677c:	e00a      	b.n	8006794 <USBH_AUDIO_ClassRequest+0x1b8>

  default:
    break;
 800677e:	bf00      	nop
 8006780:	e008      	b.n	8006794 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 8006782:	bf00      	nop
 8006784:	e006      	b.n	8006794 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 8006786:	bf00      	nop
 8006788:	e004      	b.n	8006794 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 800678a:	bf00      	nop
 800678c:	e002      	b.n	8006794 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 800678e:	bf00      	nop
 8006790:	e000      	b.n	8006794 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 8006792:	bf00      	nop
  }
  return status;
 8006794:	7dfb      	ldrb	r3, [r7, #23]
}
 8006796:	4618      	mov	r0, r3
 8006798:	3718      	adds	r7, #24
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop

080067a0 <USBH_AUDIO_CSRequest>:
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_CSRequest(USBH_HandleTypeDef *phost,
                                               uint8_t feature, uint8_t channel)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b088      	sub	sp, #32
 80067a4:	af02      	add	r7, sp, #8
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	460b      	mov	r3, r1
 80067aa:	70fb      	strb	r3, [r7, #3]
 80067ac:	4613      	mov	r3, r2
 80067ae:	70bb      	strb	r3, [r7, #2]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80067b6:	69db      	ldr	r3, [r3, #28]
 80067b8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 80067ba:	2301      	movs	r3, #1
 80067bc:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 80067be:	2301      	movs	r3, #1
 80067c0:	73fb      	strb	r3, [r7, #15]
  uint16_t VolumeCtl, ResolutionCtl;

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->cs_req_state)
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	785b      	ldrb	r3, [r3, #1]
 80067c6:	3b04      	subs	r3, #4
 80067c8:	2b04      	cmp	r3, #4
 80067ca:	f200 80aa 	bhi.w	8006922 <USBH_AUDIO_CSRequest+0x182>
 80067ce:	a201      	add	r2, pc, #4	; (adr r2, 80067d4 <USBH_AUDIO_CSRequest+0x34>)
 80067d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d4:	08006831 	.word	0x08006831
 80067d8:	08006877 	.word	0x08006877
 80067dc:	080067e9 	.word	0x080067e9
 80067e0:	080068d7 	.word	0x080068d7
 80067e4:	0800691d 	.word	0x0800691d
  {
    case AUDIO_REQ_GET_VOLUME:
      req_status = USBH_AC_GetCur(phost,
 80067e8:	78fa      	ldrb	r2, [r7, #3]
 80067ea:	2302      	movs	r3, #2
 80067ec:	9301      	str	r3, [sp, #4]
 80067ee:	78bb      	ldrb	r3, [r7, #2]
 80067f0:	9300      	str	r3, [sp, #0]
 80067f2:	2302      	movs	r3, #2
 80067f4:	2106      	movs	r1, #6
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 fe94 	bl	8007524 <USBH_AC_GetCur>
 80067fc:	4603      	mov	r3, r0
 80067fe:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8006800:	7bfb      	ldrb	r3, [r7, #15]
 8006802:	2b01      	cmp	r3, #1
 8006804:	f000 808f 	beq.w	8006926 <USBH_AUDIO_CSRequest+0x186>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MIN_VOLUME;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	2204      	movs	r2, #4
 800680c:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800681a:	3302      	adds	r3, #2
 800681c:	881b      	ldrh	r3, [r3, #0]
 800681e:	021b      	lsls	r3, r3, #8
 8006820:	b29b      	uxth	r3, r3
 8006822:	4313      	orrs	r3, r2
 8006824:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volume = (uint32_t)VolumeCtl;
 8006826:	897a      	ldrh	r2, [r7, #10]
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      }
      break;
 800682e:	e07a      	b.n	8006926 <USBH_AUDIO_CSRequest+0x186>

    case AUDIO_REQ_GET_MIN_VOLUME:
      req_status = USBH_AC_GetMin(phost,
 8006830:	78fa      	ldrb	r2, [r7, #3]
 8006832:	2302      	movs	r3, #2
 8006834:	9301      	str	r3, [sp, #4]
 8006836:	78bb      	ldrb	r3, [r7, #2]
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	2302      	movs	r3, #2
 800683c:	2106      	movs	r1, #6
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f001 f835 	bl	80078ae <USBH_AC_GetMin>
 8006844:	4603      	mov	r3, r0
 8006846:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8006848:	7bfb      	ldrb	r3, [r7, #15]
 800684a:	2b01      	cmp	r3, #1
 800684c:	d06d      	beq.n	800692a <USBH_AUDIO_CSRequest+0x18a>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MAX_VOLUME;
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	2205      	movs	r2, #5
 8006852:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8006860:	3302      	adds	r3, #2
 8006862:	881b      	ldrh	r3, [r3, #0]
 8006864:	021b      	lsls	r3, r3, #8
 8006866:	b29b      	uxth	r3, r3
 8006868:	4313      	orrs	r3, r2
 800686a:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMin = (uint32_t)VolumeCtl;
 800686c:	897a      	ldrh	r2, [r7, #10]
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
      }
      break;
 8006874:	e059      	b.n	800692a <USBH_AUDIO_CSRequest+0x18a>

    case AUDIO_REQ_GET_MAX_VOLUME:
      req_status = USBH_AC_GetMax(phost,
 8006876:	78fa      	ldrb	r2, [r7, #3]
 8006878:	2302      	movs	r3, #2
 800687a:	9301      	str	r3, [sp, #4]
 800687c:	78bb      	ldrb	r3, [r7, #2]
 800687e:	9300      	str	r3, [sp, #0]
 8006880:	2302      	movs	r3, #2
 8006882:	2106      	movs	r1, #6
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fee4 	bl	8007652 <USBH_AC_GetMax>
 800688a:	4603      	mov	r3, r0
 800688c:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 800688e:	7bfb      	ldrb	r3, [r7, #15]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d04c      	beq.n	800692e <USBH_AUDIO_CSRequest+0x18e>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_RESOLUTION;
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	2207      	movs	r2, #7
 8006898:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80068a6:	3302      	adds	r3, #2
 80068a8:	881b      	ldrh	r3, [r3, #0]
 80068aa:	021b      	lsls	r3, r3, #8
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	4313      	orrs	r3, r2
 80068b0:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMax = (uint32_t)VolumeCtl;
 80068b2:	897a      	ldrh	r2, [r7, #10]
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        if (AUDIO_Handle->headphone.attribute.volumeMax < AUDIO_Handle->headphone.attribute.volumeMin)
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d231      	bcs.n	800692e <USBH_AUDIO_CSRequest+0x18e>
        {
          AUDIO_Handle->headphone.attribute.volumeMax = 0xFF00U;
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 80068d0:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        }
      }
      break;
 80068d4:	e02b      	b.n	800692e <USBH_AUDIO_CSRequest+0x18e>

    case AUDIO_REQ_GET_RESOLUTION:
      req_status = USBH_AC_GetRes(phost,
 80068d6:	78fa      	ldrb	r2, [r7, #3]
 80068d8:	2302      	movs	r3, #2
 80068da:	9301      	str	r3, [sp, #4]
 80068dc:	78bb      	ldrb	r3, [r7, #2]
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	2302      	movs	r3, #2
 80068e2:	2106      	movs	r1, #6
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 ff4b 	bl	8007780 <USBH_AC_GetRes>
 80068ea:	4603      	mov	r3, r0
 80068ec:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);                /* length   */
      if (req_status != USBH_BUSY)
 80068ee:	7bfb      	ldrb	r3, [r7, #15]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d01e      	beq.n	8006932 <USBH_AUDIO_CSRequest+0x192>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_CS_IDLE;
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	2208      	movs	r2, #8
 80068f8:	705a      	strb	r2, [r3, #1]
        ResolutionCtl = LE16(&AUDIO_Handle->mem[0]);
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8006906:	3302      	adds	r3, #2
 8006908:	881b      	ldrh	r3, [r3, #0]
 800690a:	021b      	lsls	r3, r3, #8
 800690c:	b29b      	uxth	r3, r3
 800690e:	4313      	orrs	r3, r2
 8006910:	81bb      	strh	r3, [r7, #12]
        AUDIO_Handle->headphone.attribute.resolution = (uint32_t)ResolutionCtl;
 8006912:	89ba      	ldrh	r2, [r7, #12]
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
      }
      break;
 800691a:	e00a      	b.n	8006932 <USBH_AUDIO_CSRequest+0x192>


    case AUDIO_REQ_CS_IDLE:
      status = USBH_OK;
 800691c:	2300      	movs	r3, #0
 800691e:	75fb      	strb	r3, [r7, #23]
      break;
 8006920:	e008      	b.n	8006934 <USBH_AUDIO_CSRequest+0x194>

    default:
      break;
 8006922:	bf00      	nop
 8006924:	e006      	b.n	8006934 <USBH_AUDIO_CSRequest+0x194>
      break;
 8006926:	bf00      	nop
 8006928:	e004      	b.n	8006934 <USBH_AUDIO_CSRequest+0x194>
      break;
 800692a:	bf00      	nop
 800692c:	e002      	b.n	8006934 <USBH_AUDIO_CSRequest+0x194>
      break;
 800692e:	bf00      	nop
 8006930:	e000      	b.n	8006934 <USBH_AUDIO_CSRequest+0x194>
      break;
 8006932:	bf00      	nop
  }
  return status;
 8006934:	7dfb      	ldrb	r3, [r7, #23]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3718      	adds	r7, #24
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop

08006940 <USBH_AUDIO_HandleCSRequest>:
  *         and associated channels for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_HandleCSRequest(USBH_HandleTypeDef *phost)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_BUSY;
 8006948:	2301      	movs	r3, #1
 800694a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef cs_status = USBH_BUSY;
 800694c:	2301      	movs	r3, #1
 800694e:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006956:	69db      	ldr	r3, [r3, #28]
 8006958:	60bb      	str	r3, [r7, #8]

  cs_status = USBH_AUDIO_CSRequest(phost,
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8006966:	461a      	mov	r2, r3
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f7ff ff19 	bl	80067a0 <USBH_AUDIO_CSRequest>
 800696e:	4603      	mov	r3, r0
 8006970:	73bb      	strb	r3, [r7, #14]
                                   AUDIO_Handle->temp_feature,
                                   AUDIO_Handle->temp_channels);

  if (cs_status != USBH_BUSY)
 8006972:	7bbb      	ldrb	r3, [r7, #14]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d01c      	beq.n	80069b2 <USBH_AUDIO_HandleCSRequest+0x72>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800697e:	2b01      	cmp	r3, #1
 8006980:	d10c      	bne.n	800699c <USBH_AUDIO_HandleCSRequest+0x5c>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = 0U;
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
      status = USBH_OK;
 8006996:	2300      	movs	r3, #0
 8006998:	73fb      	strb	r3, [r7, #15]
 800699a:	e007      	b.n	80069ac <USBH_AUDIO_HandleCSRequest+0x6c>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 80069a2:	3b01      	subs	r3, #1
 80069a4:	b2da      	uxtb	r2, r3
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	2206      	movs	r2, #6
 80069b0:	705a      	strb	r2, [r3, #1]
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }

  return status;
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <USBH_AUDIO_Process>:
  *         The function is for managing state machine for Audio data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Process(USBH_HandleTypeDef *phost)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80069c4:	2301      	movs	r3, #1
 80069c6:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *)  phost->pActiveClass->pData;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80069ce:	69db      	ldr	r3, [r3, #28]
 80069d0:	60bb      	str	r3, [r7, #8]

  if (AUDIO_Handle->headphone.supported == 1U)
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d102      	bne.n	80069e2 <USBH_AUDIO_Process+0x26>
  {
    USBH_AUDIO_OutputStream(phost);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f001 f8e7 	bl	8007bb0 <USBH_AUDIO_OutputStream>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d102      	bne.n	80069f2 <USBH_AUDIO_Process+0x36>
  {
    USBH_AUDIO_InputStream(phost);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f001 f81d 	bl	8007a2c <USBH_AUDIO_InputStream>
  }

  return status;
 80069f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <USBH_AUDIO_SOFProcess>:
  *         The function is for managing the SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SOFProcess(USBH_HandleTypeDef *phost)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr

08006a12 <USBH_AUDIO_FindAudioStreamingIN>:
  * @brief  Find IN Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingIN(USBH_HandleTypeDef *phost)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b085      	sub	sp, #20
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
 8006a1a:	2302      	movs	r3, #2
 8006a1c:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	73fb      	strb	r3, [r7, #15]
 8006a30:	e09e      	b.n	8006b70 <USBH_AUDIO_FindAudioStreamingIN+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8006a32:	7bfb      	ldrb	r3, [r7, #15]
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	211a      	movs	r1, #26
 8006a38:	fb01 f303 	mul.w	r3, r1, r3
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f203 3347 	addw	r3, r3, #839	; 0x347
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	f040 8090 	bne.w	8006b6a <USBH_AUDIO_FindAudioStreamingIN+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 8006a4a:	7bfb      	ldrb	r3, [r7, #15]
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	211a      	movs	r1, #26
 8006a50:	fb01 f303 	mul.w	r3, r1, r3
 8006a54:	4413      	add	r3, r2
 8006a56:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8006a5a:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	f040 8084 	bne.w	8006b6a <USBH_AUDIO_FindAudioStreamingIN+0x158>
    {
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) &&
 8006a62:	7bfb      	ldrb	r3, [r7, #15]
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	211a      	movs	r1, #26
 8006a68:	fb01 f303 	mul.w	r3, r1, r3
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	b25b      	sxtb	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	da77      	bge.n	8006b6a <USBH_AUDIO_FindAudioStreamingIN+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8006a7a:	7bfb      	ldrb	r3, [r7, #15]
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	211a      	movs	r1, #26
 8006a80:	fb01 f303 	mul.w	r3, r1, r3
 8006a84:	4413      	add	r3, r2
 8006a86:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006a8a:	881b      	ldrh	r3, [r3, #0]
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) &&
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d06c      	beq.n	8006b6a <USBH_AUDIO_FindAudioStreamingIN+0x158>
      {
        AUDIO_Handle->stream_in[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006a90:	7bfb      	ldrb	r3, [r7, #15]
 8006a92:	7bba      	ldrb	r2, [r7, #14]
 8006a94:	6879      	ldr	r1, [r7, #4]
 8006a96:	201a      	movs	r0, #26
 8006a98:	fb00 f303 	mul.w	r3, r0, r3
 8006a9c:	440b      	add	r3, r1
 8006a9e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006aa2:	7818      	ldrb	r0, [r3, #0]
 8006aa4:	68b9      	ldr	r1, [r7, #8]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4413      	add	r3, r2
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	440b      	add	r3, r1
 8006ab0:	3306      	adds	r3, #6
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ab6:	7bfb      	ldrb	r3, [r7, #15]
 8006ab8:	7bba      	ldrb	r2, [r7, #14]
 8006aba:	6879      	ldr	r1, [r7, #4]
 8006abc:	201a      	movs	r0, #26
 8006abe:	fb00 f303 	mul.w	r3, r0, r3
 8006ac2:	440b      	add	r3, r1
 8006ac4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006ac8:	8818      	ldrh	r0, [r3, #0]
 8006aca:	68b9      	ldr	r1, [r7, #8]
 8006acc:	4613      	mov	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4413      	add	r3, r2
 8006ad2:	005b      	lsls	r3, r3, #1
 8006ad4:	440b      	add	r3, r1
 8006ad6:	3308      	adds	r3, #8
 8006ad8:	4602      	mov	r2, r0
 8006ada:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
 8006ade:	7bba      	ldrb	r2, [r7, #14]
 8006ae0:	6879      	ldr	r1, [r7, #4]
 8006ae2:	201a      	movs	r0, #26
 8006ae4:	fb00 f303 	mul.w	r3, r0, r3
 8006ae8:	440b      	add	r3, r1
 8006aea:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8006aee:	7818      	ldrb	r0, [r3, #0]
 8006af0:	68b9      	ldr	r1, [r7, #8]
 8006af2:	4613      	mov	r3, r2
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4413      	add	r3, r2
 8006af8:	005b      	lsls	r3, r3, #1
 8006afa:	440b      	add	r3, r1
 8006afc:	330b      	adds	r3, #11
 8006afe:	4602      	mov	r2, r0
 8006b00:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8006b02:	7bfb      	ldrb	r3, [r7, #15]
 8006b04:	7bba      	ldrb	r2, [r7, #14]
 8006b06:	6879      	ldr	r1, [r7, #4]
 8006b08:	201a      	movs	r0, #26
 8006b0a:	fb00 f303 	mul.w	r3, r0, r3
 8006b0e:	440b      	add	r3, r1
 8006b10:	f203 3345 	addw	r3, r3, #837	; 0x345
 8006b14:	7818      	ldrb	r0, [r3, #0]
 8006b16:	68b9      	ldr	r1, [r7, #8]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4413      	add	r3, r2
 8006b1e:	005b      	lsls	r3, r3, #1
 8006b20:	440b      	add	r3, r1
 8006b22:	330a      	adds	r3, #10
 8006b24:	4602      	mov	r2, r0
 8006b26:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8006b28:	7bfb      	ldrb	r3, [r7, #15]
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	211a      	movs	r1, #26
 8006b2e:	fb01 f303 	mul.w	r3, r1, r3
 8006b32:	4413      	add	r3, r2
 8006b34:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	7bba      	ldrb	r2, [r7, #14]
 8006b3c:	b298      	uxth	r0, r3
 8006b3e:	68b9      	ldr	r1, [r7, #8]
 8006b40:	4613      	mov	r3, r2
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	4413      	add	r3, r2
 8006b46:	005b      	lsls	r3, r3, #1
 8006b48:	440b      	add	r3, r1
 8006b4a:	330e      	adds	r3, #14
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].valid = 1U;
 8006b50:	7bba      	ldrb	r2, [r7, #14]
 8006b52:	68b9      	ldr	r1, [r7, #8]
 8006b54:	4613      	mov	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	005b      	lsls	r3, r3, #1
 8006b5c:	440b      	add	r3, r1
 8006b5e:	330c      	adds	r3, #12
 8006b60:	2201      	movs	r2, #1
 8006b62:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 8006b64:	7bbb      	ldrb	r3, [r7, #14]
 8006b66:	3301      	adds	r3, #1
 8006b68:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	73fb      	strb	r3, [r7, #15]
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
 8006b72:	2b09      	cmp	r3, #9
 8006b74:	f67f af5d 	bls.w	8006a32 <USBH_AUDIO_FindAudioStreamingIN+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 8006b78:	7bbb      	ldrb	r3, [r7, #14]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d001      	beq.n	8006b82 <USBH_AUDIO_FindAudioStreamingIN+0x170>
  {
    status = USBH_OK;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8006b82:	7b7b      	ldrb	r3, [r7, #13]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <USBH_AUDIO_FindAudioStreamingOUT>:
  * @brief  Find OUT Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingOUT(USBH_HandleTypeDef *phost)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
 8006b98:	2302      	movs	r3, #2
 8006b9a:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006ba2:	69db      	ldr	r3, [r3, #28]
 8006ba4:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8006baa:	2300      	movs	r3, #0
 8006bac:	73fb      	strb	r3, [r7, #15]
 8006bae:	e09e      	b.n	8006cee <USBH_AUDIO_FindAudioStreamingOUT+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8006bb0:	7bfb      	ldrb	r3, [r7, #15]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	211a      	movs	r1, #26
 8006bb6:	fb01 f303 	mul.w	r3, r1, r3
 8006bba:	4413      	add	r3, r2
 8006bbc:	f203 3347 	addw	r3, r3, #839	; 0x347
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	f040 8090 	bne.w	8006ce8 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 8006bc8:	7bfb      	ldrb	r3, [r7, #15]
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	211a      	movs	r1, #26
 8006bce:	fb01 f303 	mul.w	r3, r1, r3
 8006bd2:	4413      	add	r3, r2
 8006bd4:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8006bd8:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	f040 8084 	bne.w	8006ce8 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
    {
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	211a      	movs	r1, #26
 8006be6:	fb01 f303 	mul.w	r3, r1, r3
 8006bea:	4413      	add	r3, r2
 8006bec:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	b25b      	sxtb	r3, r3
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	db77      	blt.n	8006ce8 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	211a      	movs	r1, #26
 8006bfe:	fb01 f303 	mul.w	r3, r1, r3
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006c08:	881b      	ldrh	r3, [r3, #0]
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d06c      	beq.n	8006ce8 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
      {
        AUDIO_Handle->stream_out[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c0e:	7bfb      	ldrb	r3, [r7, #15]
 8006c10:	7bba      	ldrb	r2, [r7, #14]
 8006c12:	6879      	ldr	r1, [r7, #4]
 8006c14:	201a      	movs	r0, #26
 8006c16:	fb00 f303 	mul.w	r3, r0, r3
 8006c1a:	440b      	add	r3, r1
 8006c1c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c20:	7818      	ldrb	r0, [r3, #0]
 8006c22:	68b9      	ldr	r1, [r7, #8]
 8006c24:	4613      	mov	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4413      	add	r3, r2
 8006c2a:	005b      	lsls	r3, r3, #1
 8006c2c:	440b      	add	r3, r1
 8006c2e:	3338      	adds	r3, #56	; 0x38
 8006c30:	4602      	mov	r2, r0
 8006c32:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c34:	7bfb      	ldrb	r3, [r7, #15]
 8006c36:	7bba      	ldrb	r2, [r7, #14]
 8006c38:	6879      	ldr	r1, [r7, #4]
 8006c3a:	201a      	movs	r0, #26
 8006c3c:	fb00 f303 	mul.w	r3, r0, r3
 8006c40:	440b      	add	r3, r1
 8006c42:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006c46:	8818      	ldrh	r0, [r3, #0]
 8006c48:	68b9      	ldr	r1, [r7, #8]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4413      	add	r3, r2
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	440b      	add	r3, r1
 8006c54:	333a      	adds	r3, #58	; 0x3a
 8006c56:	4602      	mov	r2, r0
 8006c58:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
 8006c5c:	7bba      	ldrb	r2, [r7, #14]
 8006c5e:	6879      	ldr	r1, [r7, #4]
 8006c60:	201a      	movs	r0, #26
 8006c62:	fb00 f303 	mul.w	r3, r0, r3
 8006c66:	440b      	add	r3, r1
 8006c68:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8006c6c:	7818      	ldrb	r0, [r3, #0]
 8006c6e:	68b9      	ldr	r1, [r7, #8]
 8006c70:	4613      	mov	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	005b      	lsls	r3, r3, #1
 8006c78:	440b      	add	r3, r1
 8006c7a:	333d      	adds	r3, #61	; 0x3d
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
 8006c82:	7bba      	ldrb	r2, [r7, #14]
 8006c84:	6879      	ldr	r1, [r7, #4]
 8006c86:	201a      	movs	r0, #26
 8006c88:	fb00 f303 	mul.w	r3, r0, r3
 8006c8c:	440b      	add	r3, r1
 8006c8e:	f203 3345 	addw	r3, r3, #837	; 0x345
 8006c92:	7818      	ldrb	r0, [r3, #0]
 8006c94:	68b9      	ldr	r1, [r7, #8]
 8006c96:	4613      	mov	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4413      	add	r3, r2
 8006c9c:	005b      	lsls	r3, r3, #1
 8006c9e:	440b      	add	r3, r1
 8006ca0:	333c      	adds	r3, #60	; 0x3c
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8006ca6:	7bfb      	ldrb	r3, [r7, #15]
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	211a      	movs	r1, #26
 8006cac:	fb01 f303 	mul.w	r3, r1, r3
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	7bba      	ldrb	r2, [r7, #14]
 8006cba:	b298      	uxth	r0, r3
 8006cbc:	68b9      	ldr	r1, [r7, #8]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	4413      	add	r3, r2
 8006cc4:	005b      	lsls	r3, r3, #1
 8006cc6:	440b      	add	r3, r1
 8006cc8:	3340      	adds	r3, #64	; 0x40
 8006cca:	4602      	mov	r2, r0
 8006ccc:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].valid = 1U;
 8006cce:	7bba      	ldrb	r2, [r7, #14]
 8006cd0:	68b9      	ldr	r1, [r7, #8]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	005b      	lsls	r3, r3, #1
 8006cda:	440b      	add	r3, r1
 8006cdc:	333e      	adds	r3, #62	; 0x3e
 8006cde:	2201      	movs	r2, #1
 8006ce0:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 8006ce2:	7bbb      	ldrb	r3, [r7, #14]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
 8006cea:	3301      	adds	r3, #1
 8006cec:	73fb      	strb	r3, [r7, #15]
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
 8006cf0:	2b09      	cmp	r3, #9
 8006cf2:	f67f af5d 	bls.w	8006bb0 <USBH_AUDIO_FindAudioStreamingOUT+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 8006cf6:	7bbb      	ldrb	r3, [r7, #14]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d001      	beq.n	8006d00 <USBH_AUDIO_FindAudioStreamingOUT+0x170>
  {
    status = USBH_OK;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8006d00:	7b7b      	ldrb	r3, [r7, #13]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3714      	adds	r7, #20
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr

08006d0e <USBH_AUDIO_FindHIDControl>:
  * @brief  Find HID Control interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindHIDControl(USBH_HandleTypeDef *phost)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b084      	sub	sp, #16
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  uint8_t interface;
  USBH_StatusTypeDef status = USBH_FAIL;
 8006d16:	2302      	movs	r3, #2
 8006d18:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006d20:	69db      	ldr	r3, [r3, #28]
 8006d22:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOCONTROL  interface */
  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0xFFU);
 8006d24:	23ff      	movs	r3, #255	; 0xff
 8006d26:	2201      	movs	r2, #1
 8006d28:	2101      	movs	r1, #1
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f001 f9df 	bl	80080ee <USBH_FindInterface>
 8006d30:	4603      	mov	r3, r0
 8006d32:	73fb      	strb	r3, [r7, #15]
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES))
 8006d34:	7bfb      	ldrb	r3, [r7, #15]
 8006d36:	2bff      	cmp	r3, #255	; 0xff
 8006d38:	d002      	beq.n	8006d40 <USBH_AUDIO_FindHIDControl+0x32>
 8006d3a:	7bfb      	ldrb	r3, [r7, #15]
 8006d3c:	2b09      	cmp	r3, #9
 8006d3e:	d901      	bls.n	8006d44 <USBH_AUDIO_FindHIDControl+0x36>
  {
    return USBH_FAIL;
 8006d40:	2302      	movs	r3, #2
 8006d42:	e062      	b.n	8006e0a <USBH_AUDIO_FindHIDControl+0xfc>
  }

  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8006d44:	2300      	movs	r3, #0
 8006d46:	73fb      	strb	r3, [r7, #15]
 8006d48:	e05b      	b.n	8006e02 <USBH_AUDIO_FindHIDControl+0xf4>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 8006d4a:	7bfb      	ldrb	r3, [r7, #15]
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	211a      	movs	r1, #26
 8006d50:	fb01 f303 	mul.w	r3, r1, r3
 8006d54:	4413      	add	r3, r2
 8006d56:	f203 3347 	addw	r3, r3, #839	; 0x347
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	2b03      	cmp	r3, #3
 8006d5e:	d14d      	bne.n	8006dfc <USBH_AUDIO_FindHIDControl+0xee>
        (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8006d60:	7bfb      	ldrb	r3, [r7, #15]
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	211a      	movs	r1, #26
 8006d66:	fb01 f303 	mul.w	r3, r1, r3
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006d70:	881b      	ldrh	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d042      	beq.n	8006dfc <USBH_AUDIO_FindHIDControl+0xee>
    {
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x80U)
 8006d76:	7bfb      	ldrb	r3, [r7, #15]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	211a      	movs	r1, #26
 8006d7c:	fb01 f303 	mul.w	r3, r1, r3
 8006d80:	4413      	add	r3, r2
 8006d82:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	b25b      	sxtb	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	da36      	bge.n	8006dfc <USBH_AUDIO_FindHIDControl+0xee>
      {
        AUDIO_Handle->control.Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006d8e:	7bfb      	ldrb	r3, [r7, #15]
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	211a      	movs	r1, #26
 8006d94:	fb01 f303 	mul.w	r3, r1, r3
 8006d98:	4413      	add	r3, r2
 8006d9a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d9e:	781a      	ldrb	r2, [r3, #0]
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
        AUDIO_Handle->control.EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006da6:	7bfb      	ldrb	r3, [r7, #15]
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	211a      	movs	r1, #26
 8006dac:	fb01 f303 	mul.w	r3, r1, r3
 8006db0:	4413      	add	r3, r2
 8006db2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006db6:	881a      	ldrh	r2, [r3, #0]
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	f8a3 2186 	strh.w	r2, [r3, #390]	; 0x186
        AUDIO_Handle->control.interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8006dbe:	7bfb      	ldrb	r3, [r7, #15]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	211a      	movs	r1, #26
 8006dc4:	fb01 f303 	mul.w	r3, r1, r3
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8006dce:	781a      	ldrb	r2, [r3, #0]
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
        AUDIO_Handle->control.Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8006dd6:	7bfb      	ldrb	r3, [r7, #15]
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	211a      	movs	r1, #26
 8006ddc:	fb01 f303 	mul.w	r3, r1, r3
 8006de0:	4413      	add	r3, r2
 8006de2:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006de6:	781a      	ldrb	r2, [r3, #0]
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
        AUDIO_Handle->control.supported = 1U;
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	2201      	movs	r2, #1
 8006df2:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
        status = USBH_OK;
 8006df6:	2300      	movs	r3, #0
 8006df8:	73bb      	strb	r3, [r7, #14]
        break;
 8006dfa:	e005      	b.n	8006e08 <USBH_AUDIO_FindHIDControl+0xfa>
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8006dfc:	7bfb      	ldrb	r3, [r7, #15]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	73fb      	strb	r3, [r7, #15]
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
 8006e04:	2b09      	cmp	r3, #9
 8006e06:	d9a0      	bls.n	8006d4a <USBH_AUDIO_FindHIDControl+0x3c>
      }
    }
  }

  return status;
 8006e08:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <USBH_AUDIO_ParseCSDescriptors>:
  * @brief  Parse AC and interfaces Descriptors
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ParseCSDescriptors(USBH_HandleTypeDef *phost)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b088      	sub	sp, #32
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	77fb      	strb	r3, [r7, #31]
  USBH_DescHeader_t            *pdesc;
  uint16_t                      ptr;
  uint8_t                       itf_index = 0U;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	75fb      	strb	r3, [r7, #23]
  uint8_t                       itf_number = 0U;
 8006e22:	2300      	movs	r3, #0
 8006e24:	75bb      	strb	r3, [r7, #22]
  uint8_t                       alt_setting;
  AUDIO_HandleTypeDef           *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	613b      	str	r3, [r7, #16]
  pdesc   = (USBH_DescHeader_t *)(void *)(phost->device.CfgDesc_Raw);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	331c      	adds	r3, #28
 8006e34:	61bb      	str	r3, [r7, #24]
  ptr = USB_LEN_CFG_DESC;
 8006e36:	2309      	movs	r3, #9
 8006e38:	81bb      	strh	r3, [r7, #12]

  AUDIO_Handle->class_desc.FeatureUnitNum = 0U;
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
  AUDIO_Handle->class_desc.InputTerminalNum = 0U;
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
  AUDIO_Handle->class_desc.OutputTerminalNum = 0U;
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
  AUDIO_Handle->class_desc.ASNum = 0U;
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8

  while (ptr < phost->device.CfgDesc.wTotalLength)
 8006e5a:	e03d      	b.n	8006ed8 <USBH_AUDIO_ParseCSDescriptors+0xc6>
  {
    pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006e5c:	f107 030c 	add.w	r3, r7, #12
 8006e60:	4619      	mov	r1, r3
 8006e62:	69b8      	ldr	r0, [r7, #24]
 8006e64:	f002 f901 	bl	800906a <USBH_GetNextDesc>
 8006e68:	61b8      	str	r0, [r7, #24]

    switch (pdesc->bDescriptorType)
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	785b      	ldrb	r3, [r3, #1]
 8006e6e:	2b04      	cmp	r3, #4
 8006e70:	d002      	beq.n	8006e78 <USBH_AUDIO_ParseCSDescriptors+0x66>
 8006e72:	2b24      	cmp	r3, #36	; 0x24
 8006e74:	d00f      	beq.n	8006e96 <USBH_AUDIO_ParseCSDescriptors+0x84>
 8006e76:	e02e      	b.n	8006ed6 <USBH_AUDIO_ParseCSDescriptors+0xc4>
    {

      case USB_DESC_TYPE_INTERFACE:
        itf_number = *((uint8_t *)(void *)pdesc + 2U);
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	789b      	ldrb	r3, [r3, #2]
 8006e7c:	75bb      	strb	r3, [r7, #22]
        alt_setting = *((uint8_t *)(void *)pdesc + 3U);
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	78db      	ldrb	r3, [r3, #3]
 8006e82:	73fb      	strb	r3, [r7, #15]
        itf_index = USBH_FindInterfaceIndex(phost, itf_number, alt_setting);
 8006e84:	7bfa      	ldrb	r2, [r7, #15]
 8006e86:	7dbb      	ldrb	r3, [r7, #22]
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f001 f975 	bl	800817a <USBH_FindInterfaceIndex>
 8006e90:	4603      	mov	r3, r0
 8006e92:	75fb      	strb	r3, [r7, #23]
        break;
 8006e94:	e020      	b.n	8006ed8 <USBH_AUDIO_ParseCSDescriptors+0xc6>

      case USB_DESC_TYPE_CS_INTERFACE:
        if (itf_number <= phost->device.CfgDesc.bNumInterfaces)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006e9c:	7dba      	ldrb	r2, [r7, #22]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d81a      	bhi.n	8006ed8 <USBH_AUDIO_ParseCSDescriptors+0xc6>
        {
          if ((itf_index == 0xFFU) || (itf_index >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006ea2:	7dfb      	ldrb	r3, [r7, #23]
 8006ea4:	2bff      	cmp	r3, #255	; 0xff
 8006ea6:	d002      	beq.n	8006eae <USBH_AUDIO_ParseCSDescriptors+0x9c>
 8006ea8:	7dfb      	ldrb	r3, [r7, #23]
 8006eaa:	2b09      	cmp	r3, #9
 8006eac:	d902      	bls.n	8006eb4 <USBH_AUDIO_ParseCSDescriptors+0xa2>
          {
            USBH_DbgLog("Cannot Find the audio interface index for %s class.", phost->pActiveClass->Name);
            status = USBH_FAIL;
 8006eae:	2302      	movs	r3, #2
 8006eb0:	77fb      	strb	r3, [r7, #31]
 8006eb2:	e00f      	b.n	8006ed4 <USBH_AUDIO_ParseCSDescriptors+0xc2>
          }
          else
          {

            ParseCSDescriptors(&AUDIO_Handle->class_desc,
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8006eba:	7dfb      	ldrb	r3, [r7, #23]
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	211a      	movs	r1, #26
 8006ec0:	fb01 f303 	mul.w	r3, r1, r3
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	69ba      	ldr	r2, [r7, #24]
 8006ece:	4619      	mov	r1, r3
 8006ed0:	f000 f80e 	bl	8006ef0 <ParseCSDescriptors>
                               phost->device.CfgDesc.Itf_Desc[itf_index].bInterfaceSubClass,
                               (uint8_t *)pdesc);
          }
        }
        break;
 8006ed4:	e000      	b.n	8006ed8 <USBH_AUDIO_ParseCSDescriptors+0xc6>

      default:
        break;
 8006ed6:	bf00      	nop
  while (ptr < phost->device.CfgDesc.wTotalLength)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8b3 233a 	ldrh.w	r2, [r3, #826]	; 0x33a
 8006ede:	89bb      	ldrh	r3, [r7, #12]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d8bb      	bhi.n	8006e5c <USBH_AUDIO_ParseCSDescriptors+0x4a>
    }
  }

  return status;
 8006ee4:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3720      	adds	r7, #32
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
	...

08006ef0 <ParseCSDescriptors>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef ParseCSDescriptors(AUDIO_ClassSpecificDescTypedef *class_desc,
                                             uint8_t ac_subclass,
                                             uint8_t *pdesc)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	460b      	mov	r3, r1
 8006efa:	607a      	str	r2, [r7, #4]
 8006efc:	72fb      	strb	r3, [r7, #11]
  if (ac_subclass == USB_SUBCLASS_AUDIOCONTROL)
 8006efe:	7afb      	ldrb	r3, [r7, #11]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d163      	bne.n	8006fcc <ParseCSDescriptors+0xdc>
  {
    switch (pdesc[2])
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	3302      	adds	r3, #2
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	2b05      	cmp	r3, #5
 8006f0e:	f200 8081 	bhi.w	8007014 <ParseCSDescriptors+0x124>
 8006f12:	a201      	add	r2, pc, #4	; (adr r2, 8006f18 <ParseCSDescriptors+0x28>)
 8006f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f18:	08006f31 	.word	0x08006f31
 8006f1c:	08006f39 	.word	0x08006f39
 8006f20:	08006f55 	.word	0x08006f55
 8006f24:	08006faf 	.word	0x08006faf
 8006f28:	08006f91 	.word	0x08006f91
 8006f2c:	08006f73 	.word	0x08006f73
    {
      case UAC_HEADER:
        class_desc->cs_desc.HeaderDesc = (AUDIO_HeaderDescTypeDef *)(void *)pdesc;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	601a      	str	r2, [r3, #0]
        break;
 8006f36:	e070      	b.n	800701a <ParseCSDescriptors+0x12a>

      case UAC_INPUT_TERMINAL:
        class_desc->cs_desc.InputTerminalDesc[class_desc->InputTerminalNum++] = (AUDIO_ITDescTypeDef *)(void *)pdesc;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8006f3e:	1c5a      	adds	r2, r3, #1
 8006f40:	b291      	uxth	r1, r2
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	f8a2 107e 	strh.w	r1, [r2, #126]	; 0x7e
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4413      	add	r3, r2
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	605a      	str	r2, [r3, #4]
        break;
 8006f52:	e062      	b.n	800701a <ParseCSDescriptors+0x12a>

      case UAC_OUTPUT_TERMINAL:
        class_desc->cs_desc.OutputTerminalDesc[class_desc->OutputTerminalNum++] = (AUDIO_OTDescTypeDef *)(void *)pdesc;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8006f5a:	1c5a      	adds	r2, r3, #1
 8006f5c:	b291      	uxth	r1, r2
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	3304      	adds	r3, #4
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	4413      	add	r3, r2
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	605a      	str	r2, [r3, #4]
        break;
 8006f70:	e053      	b.n	800701a <ParseCSDescriptors+0x12a>

      case UAC_FEATURE_UNIT:
        class_desc->cs_desc.FeatureUnitDesc[class_desc->FeatureUnitNum++] = (AUDIO_FeatureDescTypeDef *)(void *)pdesc;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8006f78:	1c5a      	adds	r2, r3, #1
 8006f7a:	b291      	uxth	r1, r2
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	f8a2 1082 	strh.w	r1, [r2, #130]	; 0x82
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	3308      	adds	r3, #8
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	4413      	add	r3, r2
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	605a      	str	r2, [r3, #4]
        break;
 8006f8e:	e044      	b.n	800701a <ParseCSDescriptors+0x12a>

      case UAC_SELECTOR_UNIT:
        class_desc->cs_desc.SelectorUnitDesc[class_desc->SelectorUnitNum++] = (AUDIO_SelectorDescTypeDef *)(void *)pdesc;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8006f96:	1c5a      	adds	r2, r3, #1
 8006f98:	b291      	uxth	r1, r2
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	3310      	adds	r3, #16
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4413      	add	r3, r2
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	605a      	str	r2, [r3, #4]
        break;
 8006fac:	e035      	b.n	800701a <ParseCSDescriptors+0x12a>

      case UAC_MIXER_UNIT:
        class_desc->cs_desc.MixerUnitDesc[class_desc->MixerUnitNum++] = (AUDIO_MixerDescTypeDef *)(void *)pdesc;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8006fb4:	1c5a      	adds	r2, r3, #1
 8006fb6:	b291      	uxth	r1, r2
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	f8a2 1086 	strh.w	r1, [r2, #134]	; 0x86
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	330c      	adds	r3, #12
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4413      	add	r3, r2
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	605a      	str	r2, [r3, #4]
        break;
 8006fca:	e026      	b.n	800701a <ParseCSDescriptors+0x12a>
        break;
    }
  }
  else
  {
    if (ac_subclass == USB_SUBCLASS_AUDIOSTREAMING)
 8006fcc:	7afb      	ldrb	r3, [r7, #11]
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d122      	bne.n	8007018 <ParseCSDescriptors+0x128>
    {
      switch (pdesc[2])
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	3302      	adds	r3, #2
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d002      	beq.n	8006fe2 <ParseCSDescriptors+0xf2>
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d00a      	beq.n	8006ff6 <ParseCSDescriptors+0x106>
          break;
        case UAC_FORMAT_TYPE:
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
          break;
        default:
          break;
 8006fe0:	e01b      	b.n	800701a <ParseCSDescriptors+0x12a>
          class_desc->as_desc[class_desc->ASNum].GeneralDesc = (AUDIO_ASGeneralDescTypeDef *)(void *)pdesc;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	330a      	adds	r3, #10
 8006fec:	00db      	lsls	r3, r3, #3
 8006fee:	4413      	add	r3, r2
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	605a      	str	r2, [r3, #4]
          break;
 8006ff4:	e011      	b.n	800701a <ParseCSDescriptors+0x12a>
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8006ffc:	1c5a      	adds	r2, r3, #1
 8006ffe:	b291      	uxth	r1, r2
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	f8a2 107c 	strh.w	r1, [r2, #124]	; 0x7c
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	330a      	adds	r3, #10
 800700a:	00db      	lsls	r3, r3, #3
 800700c:	4413      	add	r3, r2
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	609a      	str	r2, [r3, #8]
          break;
 8007012:	e002      	b.n	800701a <ParseCSDescriptors+0x12a>
        break;
 8007014:	bf00      	nop
 8007016:	e000      	b.n	800701a <ParseCSDescriptors+0x12a>
      }
    }
 8007018:	bf00      	nop
  }

  return USBH_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3714      	adds	r7, #20
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <USBH_AUDIO_FindLinkedUnit>:
  * @param  phost: Host handle
  * @param  UnitID: Unit identifer
  * @retval UnitID, Index and Type of the associated Unit
  */
static uint32_t USBH_AUDIO_FindLinkedUnit(USBH_HandleTypeDef *phost, uint8_t UnitID)
{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	460b      	mov	r3, r1
 8007032:	70fb      	strb	r3, [r7, #3]
  uint8_t Index;
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800703a:	69db      	ldr	r3, [r3, #28]
 800703c:	60bb      	str	r3, [r7, #8]

  /* Find Feature Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 800703e:	2300      	movs	r3, #0
 8007040:	73fb      	strb	r3, [r7, #15]
 8007042:	e01b      	b.n	800707c <USBH_AUDIO_FindLinkedUnit+0x54>
  {
    if (AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bSourceID == UnitID)
 8007044:	7bfb      	ldrb	r3, [r7, #15]
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	3322      	adds	r3, #34	; 0x22
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	4413      	add	r3, r2
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	791b      	ldrb	r3, [r3, #4]
 8007052:	78fa      	ldrb	r2, [r7, #3]
 8007054:	429a      	cmp	r2, r3
 8007056:	d10e      	bne.n	8007076 <USBH_AUDIO_FindLinkedUnit+0x4e>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bUnitID;
 8007058:	7bfb      	ldrb	r3, [r7, #15]
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	3322      	adds	r3, #34	; 0x22
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4413      	add	r3, r2
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	78db      	ldrb	r3, [r3, #3]
 8007066:	70fb      	strb	r3, [r7, #3]

      return (((uint32_t)UnitID << 16U) | (UAC_FEATURE_UNIT << 8U) | (uint32_t)Index);
 8007068:	78fb      	ldrb	r3, [r7, #3]
 800706a:	041a      	lsls	r2, r3, #16
 800706c:	7bfb      	ldrb	r3, [r7, #15]
 800706e:	4313      	orrs	r3, r2
 8007070:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007074:	e089      	b.n	800718a <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 8007076:	7bfb      	ldrb	r3, [r7, #15]
 8007078:	3301      	adds	r3, #1
 800707a:	73fb      	strb	r3, [r7, #15]
 800707c:	7bfb      	ldrb	r3, [r7, #15]
 800707e:	b29a      	uxth	r2, r3
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 8007086:	429a      	cmp	r2, r3
 8007088:	d3dc      	bcc.n	8007044 <USBH_AUDIO_FindLinkedUnit+0x1c>
    }
  }

  /* Find Mixer Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 800708a:	2300      	movs	r3, #0
 800708c:	73fb      	strb	r3, [r7, #15]
 800708e:	e026      	b.n	80070de <USBH_AUDIO_FindLinkedUnit+0xb6>
  {
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 8007090:	7bfb      	ldrb	r3, [r7, #15]
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	3326      	adds	r3, #38	; 0x26
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4413      	add	r3, r2
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	795b      	ldrb	r3, [r3, #5]
 800709e:	78fa      	ldrb	r2, [r7, #3]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d009      	beq.n	80070b8 <USBH_AUDIO_FindLinkedUnit+0x90>
        (AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID1 == UnitID))
 80070a4:	7bfb      	ldrb	r3, [r7, #15]
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	3326      	adds	r3, #38	; 0x26
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	4413      	add	r3, r2
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	799b      	ldrb	r3, [r3, #6]
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 80070b2:	78fa      	ldrb	r2, [r7, #3]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d10f      	bne.n	80070d8 <USBH_AUDIO_FindLinkedUnit+0xb0>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bUnitID;
 80070b8:	7bfb      	ldrb	r3, [r7, #15]
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	3326      	adds	r3, #38	; 0x26
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	78db      	ldrb	r3, [r3, #3]
 80070c6:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_MIXER_UNIT << 8U) | Index);
 80070c8:	78fb      	ldrb	r3, [r7, #3]
 80070ca:	041b      	lsls	r3, r3, #16
 80070cc:	461a      	mov	r2, r3
 80070ce:	7bfb      	ldrb	r3, [r7, #15]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80070d6:	e058      	b.n	800718a <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 80070d8:	7bfb      	ldrb	r3, [r7, #15]
 80070da:	3301      	adds	r3, #1
 80070dc:	73fb      	strb	r3, [r7, #15]
 80070de:	7bfb      	ldrb	r3, [r7, #15]
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d3d1      	bcc.n	8007090 <USBH_AUDIO_FindLinkedUnit+0x68>
    }
  }

  /* Find Selector Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 80070ec:	2300      	movs	r3, #0
 80070ee:	73fb      	strb	r3, [r7, #15]
 80070f0:	e01c      	b.n	800712c <USBH_AUDIO_FindLinkedUnit+0x104>
  {
    if (AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bSourceID0 == UnitID)
 80070f2:	7bfb      	ldrb	r3, [r7, #15]
 80070f4:	68ba      	ldr	r2, [r7, #8]
 80070f6:	332a      	adds	r3, #42	; 0x2a
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	4413      	add	r3, r2
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	795b      	ldrb	r3, [r3, #5]
 8007100:	78fa      	ldrb	r2, [r7, #3]
 8007102:	429a      	cmp	r2, r3
 8007104:	d10f      	bne.n	8007126 <USBH_AUDIO_FindLinkedUnit+0xfe>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bUnitID;
 8007106:	7bfb      	ldrb	r3, [r7, #15]
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	332a      	adds	r3, #42	; 0x2a
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4413      	add	r3, r2
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	78db      	ldrb	r3, [r3, #3]
 8007114:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_SELECTOR_UNIT << 8U) | Index);
 8007116:	78fb      	ldrb	r3, [r7, #3]
 8007118:	041b      	lsls	r3, r3, #16
 800711a:	461a      	mov	r2, r3
 800711c:	7bfb      	ldrb	r3, [r7, #15]
 800711e:	4313      	orrs	r3, r2
 8007120:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8007124:	e031      	b.n	800718a <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 8007126:	7bfb      	ldrb	r3, [r7, #15]
 8007128:	3301      	adds	r3, #1
 800712a:	73fb      	strb	r3, [r7, #15]
 800712c:	7bfb      	ldrb	r3, [r7, #15]
 800712e:	b29a      	uxth	r2, r3
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 8007136:	429a      	cmp	r2, r3
 8007138:	d3db      	bcc.n	80070f2 <USBH_AUDIO_FindLinkedUnit+0xca>
    }
  }

  /* Find OT Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 800713a:	2300      	movs	r3, #0
 800713c:	73fb      	strb	r3, [r7, #15]
 800713e:	e01c      	b.n	800717a <USBH_AUDIO_FindLinkedUnit+0x152>
  {
    if (AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bSourceID == UnitID)
 8007140:	7bfb      	ldrb	r3, [r7, #15]
 8007142:	68ba      	ldr	r2, [r7, #8]
 8007144:	331e      	adds	r3, #30
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4413      	add	r3, r2
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	79db      	ldrb	r3, [r3, #7]
 800714e:	78fa      	ldrb	r2, [r7, #3]
 8007150:	429a      	cmp	r2, r3
 8007152:	d10f      	bne.n	8007174 <USBH_AUDIO_FindLinkedUnit+0x14c>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bTerminalID;
 8007154:	7bfb      	ldrb	r3, [r7, #15]
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	331e      	adds	r3, #30
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	4413      	add	r3, r2
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	78db      	ldrb	r3, [r3, #3]
 8007162:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_OUTPUT_TERMINAL << 8U) | Index);
 8007164:	78fb      	ldrb	r3, [r7, #3]
 8007166:	041b      	lsls	r3, r3, #16
 8007168:	461a      	mov	r2, r3
 800716a:	7bfb      	ldrb	r3, [r7, #15]
 800716c:	4313      	orrs	r3, r2
 800716e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007172:	e00a      	b.n	800718a <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 8007174:	7bfb      	ldrb	r3, [r7, #15]
 8007176:	3301      	adds	r3, #1
 8007178:	73fb      	strb	r3, [r7, #15]
 800717a:	7bfb      	ldrb	r3, [r7, #15]
 800717c:	b29a      	uxth	r2, r3
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8007184:	429a      	cmp	r2, r3
 8007186:	d3db      	bcc.n	8007140 <USBH_AUDIO_FindLinkedUnit+0x118>
    }
  }

  /* No associated Unit found return undefined ID 0x00*/
  return 0U;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
	...

08007198 <USBH_AUDIO_BuildMicrophonePath>:
  * @brief  Build full path for Microphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildMicrophonePath(USBH_HandleTypeDef *phost)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 80071a0:	2300      	movs	r3, #0
 80071a2:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 80071a4:	2300      	movs	r3, #0
 80071a6:	757b      	strb	r3, [r7, #21]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80071ae:	69db      	ldr	r3, [r3, #28]
 80071b0:	613b      	str	r3, [r7, #16]

  /*Find microphone IT*/
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 80071b2:	2300      	movs	r3, #0
 80071b4:	75bb      	strb	r3, [r7, #22]
 80071b6:	e02c      	b.n	8007212 <USBH_AUDIO_BuildMicrophonePath+0x7a>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x201)
 80071b8:	7dbb      	ldrb	r3, [r7, #22]
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	331a      	adds	r3, #26
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	4413      	add	r3, r2
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	791b      	ldrb	r3, [r3, #4]
 80071c6:	4619      	mov	r1, r3
 80071c8:	7dbb      	ldrb	r3, [r7, #22]
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	331a      	adds	r3, #26
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4413      	add	r3, r2
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	795b      	ldrb	r3, [r3, #5]
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	021b      	lsls	r3, r3, #8
 80071da:	b29b      	uxth	r3, r3
 80071dc:	430b      	orrs	r3, r1
 80071de:	f240 2201 	movw	r2, #513	; 0x201
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d112      	bne.n	800720c <USBH_AUDIO_BuildMicrophonePath+0x74>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 80071e6:	7dbb      	ldrb	r3, [r7, #22]
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	331a      	adds	r3, #26
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4413      	add	r3, r2
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	78db      	ldrb	r3, [r3, #3]
 80071f4:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->microphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 80071f6:	7dbb      	ldrb	r3, [r7, #22]
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	331a      	adds	r3, #26
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	79da      	ldrb	r2, [r3, #7]
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
      break;
 800720a:	e009      	b.n	8007220 <USBH_AUDIO_BuildMicrophonePath+0x88>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 800720c:	7dbb      	ldrb	r3, [r7, #22]
 800720e:	3301      	adds	r3, #1
 8007210:	75bb      	strb	r3, [r7, #22]
 8007212:	7dbb      	ldrb	r3, [r7, #22]
 8007214:	b29a      	uxth	r2, r3
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 800721c:	429a      	cmp	r2, r3
 800721e:	d3cb      	bcc.n	80071b8 <USBH_AUDIO_BuildMicrophonePath+0x20>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 8007220:	7dfb      	ldrb	r3, [r7, #23]
 8007222:	4619      	mov	r1, r3
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f7ff feff 	bl	8007028 <USBH_AUDIO_FindLinkedUnit>
 800722a:	60f8      	str	r0, [r7, #12]

    if (!value)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <USBH_AUDIO_BuildMicrophonePath+0x9e>
    {
      return USBH_FAIL;
 8007232:	2302      	movs	r3, #2
 8007234:	e034      	b.n	80072a0 <USBH_AUDIO_BuildMicrophonePath+0x108>
    }

    Index = (uint8_t)(value & 0xFFU);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	72fb      	strb	r3, [r7, #11]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	0a1b      	lsrs	r3, r3, #8
 800723e:	72bb      	strb	r3, [r7, #10]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	0c1b      	lsrs	r3, r3, #16
 8007244:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 8007246:	7abb      	ldrb	r3, [r7, #10]
 8007248:	3b03      	subs	r3, #3
 800724a:	2b03      	cmp	r3, #3
 800724c:	d81e      	bhi.n	800728c <USBH_AUDIO_BuildMicrophonePath+0xf4>
 800724e:	a201      	add	r2, pc, #4	; (adr r2, 8007254 <USBH_AUDIO_BuildMicrophonePath+0xbc>)
 8007250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007254:	08007283 	.word	0x08007283
 8007258:	0800726f 	.word	0x0800726f
 800725c:	08007279 	.word	0x08007279
 8007260:	08007265 	.word	0x08007265
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->microphone.asociated_feature = Index;
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	7afa      	ldrb	r2, [r7, #11]
 8007268:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
        break;
 800726c:	e011      	b.n	8007292 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->microphone.asociated_mixer = Index;
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	7afa      	ldrb	r2, [r7, #11]
 8007272:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
        break;
 8007276:	e00c      	b.n	8007292 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->microphone.asociated_selector = Index;
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	7afa      	ldrb	r2, [r7, #11]
 800727c:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
        break;
 8007280:	e007      	b.n	8007292 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->microphone.asociated_terminal = Index;
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	7afa      	ldrb	r2, [r7, #11]
 8007286:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
        break;
 800728a:	e002      	b.n	8007292 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      default:
        ret = USBH_FAIL;
 800728c:	2302      	movs	r3, #2
 800728e:	757b      	strb	r3, [r7, #21]
        break;
 8007290:	bf00      	nop
    }
  }
  while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 8007292:	7abb      	ldrb	r3, [r7, #10]
 8007294:	2b03      	cmp	r3, #3
 8007296:	d002      	beq.n	800729e <USBH_AUDIO_BuildMicrophonePath+0x106>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1c0      	bne.n	8007220 <USBH_AUDIO_BuildMicrophonePath+0x88>

  return ret;
 800729e:	7d7b      	ldrb	r3, [r7, #21]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3718      	adds	r7, #24
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <USBH_AUDIO_BuildHeadphonePath>:
  * @brief  Build full path for Headphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildHeadphonePath(USBH_HandleTypeDef *phost)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 80072b0:	2300      	movs	r3, #0
 80072b2:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 80072b4:	2300      	movs	r3, #0
 80072b6:	753b      	strb	r3, [r7, #20]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80072be:	69db      	ldr	r3, [r3, #28]
 80072c0:	613b      	str	r3, [r7, #16]

  /* Find association between audio streaming and microphone */
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 80072c2:	2300      	movs	r3, #0
 80072c4:	757b      	strb	r3, [r7, #21]
 80072c6:	e02c      	b.n	8007322 <USBH_AUDIO_BuildHeadphonePath+0x7a>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x101)
 80072c8:	7d7b      	ldrb	r3, [r7, #21]
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	331a      	adds	r3, #26
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4413      	add	r3, r2
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	791b      	ldrb	r3, [r3, #4]
 80072d6:	4619      	mov	r1, r3
 80072d8:	7d7b      	ldrb	r3, [r7, #21]
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	331a      	adds	r3, #26
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4413      	add	r3, r2
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	795b      	ldrb	r3, [r3, #5]
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	021b      	lsls	r3, r3, #8
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	430b      	orrs	r3, r1
 80072ee:	f240 1201 	movw	r2, #257	; 0x101
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d112      	bne.n	800731c <USBH_AUDIO_BuildHeadphonePath+0x74>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 80072f6:	7d7b      	ldrb	r3, [r7, #21]
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	331a      	adds	r3, #26
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4413      	add	r3, r2
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	78db      	ldrb	r3, [r3, #3]
 8007304:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->headphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 8007306:	7d7b      	ldrb	r3, [r7, #21]
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	331a      	adds	r3, #26
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4413      	add	r3, r2
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	79da      	ldrb	r2, [r3, #7]
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
      break;
 800731a:	e009      	b.n	8007330 <USBH_AUDIO_BuildHeadphonePath+0x88>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 800731c:	7d7b      	ldrb	r3, [r7, #21]
 800731e:	3301      	adds	r3, #1
 8007320:	757b      	strb	r3, [r7, #21]
 8007322:	7d7b      	ldrb	r3, [r7, #21]
 8007324:	b29a      	uxth	r2, r3
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 800732c:	429a      	cmp	r2, r3
 800732e:	d3cb      	bcc.n	80072c8 <USBH_AUDIO_BuildHeadphonePath+0x20>
    }
  }

  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 8007330:	2300      	movs	r3, #0
 8007332:	75bb      	strb	r3, [r7, #22]
 8007334:	e011      	b.n	800735a <USBH_AUDIO_BuildHeadphonePath+0xb2>
  {
    if (AUDIO_Handle->class_desc.as_desc[Index].GeneralDesc->bTerminalLink == UnitID)
 8007336:	7dbb      	ldrb	r3, [r7, #22]
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	3317      	adds	r3, #23
 800733c:	00db      	lsls	r3, r3, #3
 800733e:	4413      	add	r3, r2
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	78db      	ldrb	r3, [r3, #3]
 8007344:	7dfa      	ldrb	r2, [r7, #23]
 8007346:	429a      	cmp	r2, r3
 8007348:	d104      	bne.n	8007354 <USBH_AUDIO_BuildHeadphonePath+0xac>
    {
      AUDIO_Handle->headphone.asociated_as = Index;
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	7dba      	ldrb	r2, [r7, #22]
 800734e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
      break;
 8007352:	e009      	b.n	8007368 <USBH_AUDIO_BuildHeadphonePath+0xc0>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 8007354:	7dbb      	ldrb	r3, [r7, #22]
 8007356:	3301      	adds	r3, #1
 8007358:	75bb      	strb	r3, [r7, #22]
 800735a:	7dbb      	ldrb	r3, [r7, #22]
 800735c:	b29a      	uxth	r2, r3
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 8007364:	429a      	cmp	r2, r3
 8007366:	d3e6      	bcc.n	8007336 <USBH_AUDIO_BuildHeadphonePath+0x8e>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 8007368:	7dfb      	ldrb	r3, [r7, #23]
 800736a:	4619      	mov	r1, r3
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f7ff fe5b 	bl	8007028 <USBH_AUDIO_FindLinkedUnit>
 8007372:	60f8      	str	r0, [r7, #12]

    if (!value)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d101      	bne.n	800737e <USBH_AUDIO_BuildHeadphonePath+0xd6>
    {
      return USBH_FAIL;
 800737a:	2302      	movs	r3, #2
 800737c:	e053      	b.n	8007426 <USBH_AUDIO_BuildHeadphonePath+0x17e>
    }

    Index = (uint8_t)(value & 0xFFU);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	75bb      	strb	r3, [r7, #22]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	0a1b      	lsrs	r3, r3, #8
 8007386:	72fb      	strb	r3, [r7, #11]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	0c1b      	lsrs	r3, r3, #16
 800738c:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 800738e:	7afb      	ldrb	r3, [r7, #11]
 8007390:	3b03      	subs	r3, #3
 8007392:	2b03      	cmp	r3, #3
 8007394:	d83c      	bhi.n	8007410 <USBH_AUDIO_BuildHeadphonePath+0x168>
 8007396:	a201      	add	r2, pc, #4	; (adr r2, 800739c <USBH_AUDIO_BuildHeadphonePath+0xf4>)
 8007398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739c:	080073cb 	.word	0x080073cb
 80073a0:	080073b7 	.word	0x080073b7
 80073a4:	080073c1 	.word	0x080073c1
 80073a8:	080073ad 	.word	0x080073ad
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->headphone.asociated_feature = Index;
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	7dba      	ldrb	r2, [r7, #22]
 80073b0:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
        break;
 80073b4:	e030      	b.n	8007418 <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->headphone.asociated_mixer = Index;
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	7dba      	ldrb	r2, [r7, #22]
 80073ba:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
        break;
 80073be:	e02b      	b.n	8007418 <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->headphone.asociated_selector = Index;
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	7dba      	ldrb	r2, [r7, #22]
 80073c4:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
        break;
 80073c8:	e026      	b.n	8007418 <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->headphone.asociated_terminal = Index;
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	7dba      	ldrb	r2, [r7, #22]
 80073ce:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
        if (Index < AUDIO_MAX_NUM_OUT_TERMINAL)
 80073d2:	7dbb      	ldrb	r3, [r7, #22]
 80073d4:	2b03      	cmp	r3, #3
 80073d6:	d818      	bhi.n	800740a <USBH_AUDIO_BuildHeadphonePath+0x162>
        {
          if (LE16(AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->wTerminalType) != 0x103)
 80073d8:	7dbb      	ldrb	r3, [r7, #22]
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	331e      	adds	r3, #30
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	4413      	add	r3, r2
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	791b      	ldrb	r3, [r3, #4]
 80073e6:	4619      	mov	r1, r3
 80073e8:	7dbb      	ldrb	r3, [r7, #22]
 80073ea:	693a      	ldr	r2, [r7, #16]
 80073ec:	331e      	adds	r3, #30
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4413      	add	r3, r2
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	795b      	ldrb	r3, [r3, #5]
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	021b      	lsls	r3, r3, #8
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	430b      	orrs	r3, r1
 80073fe:	f240 1203 	movw	r2, #259	; 0x103
 8007402:	4293      	cmp	r3, r2
 8007404:	d007      	beq.n	8007416 <USBH_AUDIO_BuildHeadphonePath+0x16e>
          {
            return  USBH_OK;
 8007406:	2300      	movs	r3, #0
 8007408:	e00d      	b.n	8007426 <USBH_AUDIO_BuildHeadphonePath+0x17e>
          }
        }
        else
        {
          ret = USBH_FAIL;
 800740a:	2302      	movs	r3, #2
 800740c:	753b      	strb	r3, [r7, #20]
        }
        break;
 800740e:	e002      	b.n	8007416 <USBH_AUDIO_BuildHeadphonePath+0x16e>

      default:
        ret = USBH_FAIL;
 8007410:	2302      	movs	r3, #2
 8007412:	753b      	strb	r3, [r7, #20]
        break;
 8007414:	e000      	b.n	8007418 <USBH_AUDIO_BuildHeadphonePath+0x170>
        break;
 8007416:	bf00      	nop
    }
  }
  while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 8007418:	7afb      	ldrb	r3, [r7, #11]
 800741a:	2b03      	cmp	r3, #3
 800741c:	d002      	beq.n	8007424 <USBH_AUDIO_BuildHeadphonePath+0x17c>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1a1      	bne.n	8007368 <USBH_AUDIO_BuildHeadphonePath+0xc0>

  return ret;
 8007424:	7d3b      	ldrb	r3, [r7, #20]
}
 8007426:	4618      	mov	r0, r3
 8007428:	3718      	adds	r7, #24
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop

08007430 <USBH_AC_SetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	4608      	mov	r0, r1
 800743a:	4611      	mov	r1, r2
 800743c:	461a      	mov	r2, r3
 800743e:	4603      	mov	r3, r0
 8007440:	70fb      	strb	r3, [r7, #3]
 8007442:	460b      	mov	r3, r1
 8007444:	70bb      	strb	r3, [r7, #2]
 8007446:	4613      	mov	r3, r2
 8007448:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 800744a:	2300      	movs	r3, #0
 800744c:	82fb      	strh	r3, [r7, #22]
 800744e:	2300      	movs	r3, #0
 8007450:	82bb      	strh	r3, [r7, #20]
 8007452:	2300      	movs	r3, #0
 8007454:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID, InterfaceNum;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800745c:	69db      	ldr	r3, [r3, #28]
 800745e:	60fb      	str	r3, [r7, #12]
  USBH_StatusTypeDef ret = USBH_OK;
 8007460:	2300      	movs	r3, #0
 8007462:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8007464:	78fb      	ldrb	r3, [r7, #3]
 8007466:	2b02      	cmp	r3, #2
 8007468:	d002      	beq.n	8007470 <USBH_AC_SetCur+0x40>
 800746a:	2b06      	cmp	r3, #6
 800746c:	d018      	beq.n	80074a0 <USBH_AC_SetCur+0x70>
 800746e:	e035      	b.n	80074dc <USBH_AC_SetCur+0xac>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007474:	78db      	ldrb	r3, [r3, #3]
 8007476:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007478:	2300      	movs	r3, #0
 800747a:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800747c:	7afb      	ldrb	r3, [r7, #11]
 800747e:	b29b      	uxth	r3, r3
 8007480:	021b      	lsls	r3, r3, #8
 8007482:	b29a      	uxth	r2, r3
 8007484:	7abb      	ldrb	r3, [r7, #10]
 8007486:	b29b      	uxth	r3, r3
 8007488:	4313      	orrs	r3, r2
 800748a:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 800748c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007490:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 800749a:	2301      	movs	r3, #1
 800749c:	827b      	strh	r3, [r7, #18]
      break;
 800749e:	e020      	b.n	80074e2 <USBH_AC_SetCur+0xb2>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 80074a0:	78bb      	ldrb	r3, [r7, #2]
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	3322      	adds	r3, #34	; 0x22
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	4413      	add	r3, r2
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	78db      	ldrb	r3, [r3, #3]
 80074ae:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80074b0:	2300      	movs	r3, #0
 80074b2:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 80074b4:	7afb      	ldrb	r3, [r7, #11]
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	021b      	lsls	r3, r3, #8
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	7abb      	ldrb	r3, [r7, #10]
 80074be:	b29b      	uxth	r3, r3
 80074c0:	4313      	orrs	r3, r2
 80074c2:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 80074c4:	787b      	ldrb	r3, [r7, #1]
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	021b      	lsls	r3, r3, #8
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	4313      	orrs	r3, r2
 80074d4:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 80074d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074d8:	827b      	strh	r3, [r7, #18]
      break;
 80074da:	e002      	b.n	80074e2 <USBH_AC_SetCur+0xb2>

    default:
      ret = USBH_FAIL;
 80074dc:	2302      	movs	r3, #2
 80074de:	747b      	strb	r3, [r7, #17]
      break;
 80074e0:	bf00      	nop
  }

  if (ret != USBH_OK)
 80074e2:	7c7b      	ldrb	r3, [r7, #17]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d001      	beq.n	80074ec <USBH_AC_SetCur+0xbc>
  {
    return ret;
 80074e8:	7c7b      	ldrb	r3, [r7, #17]
 80074ea:	e017      	b.n	800751c <USBH_AC_SetCur+0xec>
  }

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2221      	movs	r2, #33	; 0x21
 80074f0:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	8afa      	ldrh	r2, [r7, #22]
 80074fc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	8aba      	ldrh	r2, [r7, #20]
 8007502:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	8a7a      	ldrh	r2, [r7, #18]
 8007508:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8007510:	8a7a      	ldrh	r2, [r7, #18]
 8007512:	4619      	mov	r1, r3
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f001 fdc3 	bl	80090a0 <USBH_CtlReq>
 800751a:	4603      	mov	r3, r0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3718      	adds	r7, #24
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <USBH_AC_GetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b086      	sub	sp, #24
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	4608      	mov	r0, r1
 800752e:	4611      	mov	r1, r2
 8007530:	461a      	mov	r2, r3
 8007532:	4603      	mov	r3, r0
 8007534:	70fb      	strb	r3, [r7, #3]
 8007536:	460b      	mov	r3, r1
 8007538:	70bb      	strb	r3, [r7, #2]
 800753a:	4613      	mov	r3, r2
 800753c:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 800753e:	2300      	movs	r3, #0
 8007540:	82fb      	strh	r3, [r7, #22]
 8007542:	2300      	movs	r3, #0
 8007544:	82bb      	strh	r3, [r7, #20]
 8007546:	2300      	movs	r3, #0
 8007548:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 800754a:	2300      	movs	r3, #0
 800754c:	743b      	strb	r3, [r7, #16]
 800754e:	2300      	movs	r3, #0
 8007550:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007558:	69db      	ldr	r3, [r3, #28]
 800755a:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 800755c:	2300      	movs	r3, #0
 800755e:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8007560:	78fb      	ldrb	r3, [r7, #3]
 8007562:	2b06      	cmp	r3, #6
 8007564:	d01e      	beq.n	80075a4 <USBH_AC_GetCur+0x80>
 8007566:	2b06      	cmp	r3, #6
 8007568:	dc4f      	bgt.n	800760a <USBH_AC_GetCur+0xe6>
 800756a:	2b02      	cmp	r3, #2
 800756c:	d002      	beq.n	8007574 <USBH_AC_GetCur+0x50>
 800756e:	2b03      	cmp	r3, #3
 8007570:	d036      	beq.n	80075e0 <USBH_AC_GetCur+0xbc>
 8007572:	e04a      	b.n	800760a <USBH_AC_GetCur+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007578:	78db      	ldrb	r3, [r3, #3]
 800757a:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800757c:	2300      	movs	r3, #0
 800757e:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8007580:	7c3b      	ldrb	r3, [r7, #16]
 8007582:	b29b      	uxth	r3, r3
 8007584:	021b      	lsls	r3, r3, #8
 8007586:	b29a      	uxth	r2, r3
 8007588:	7bfb      	ldrb	r3, [r7, #15]
 800758a:	b29b      	uxth	r3, r3
 800758c:	4313      	orrs	r3, r2
 800758e:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8007590:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007594:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	2200      	movs	r2, #0
 800759a:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 800759e:	2301      	movs	r3, #1
 80075a0:	827b      	strh	r3, [r7, #18]
      break;
 80075a2:	e035      	b.n	8007610 <USBH_AC_GetCur+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 80075a4:	78bb      	ldrb	r3, [r7, #2]
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	3322      	adds	r3, #34	; 0x22
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4413      	add	r3, r2
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	78db      	ldrb	r3, [r3, #3]
 80075b2:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80075b4:	2300      	movs	r3, #0
 80075b6:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80075b8:	7c3b      	ldrb	r3, [r7, #16]
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	021b      	lsls	r3, r3, #8
 80075be:	b29a      	uxth	r2, r3
 80075c0:	7bfb      	ldrb	r3, [r7, #15]
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	4313      	orrs	r3, r2
 80075c6:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 80075c8:	787b      	ldrb	r3, [r7, #1]
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	021b      	lsls	r3, r3, #8
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	4313      	orrs	r3, r2
 80075d8:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 80075da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075dc:	827b      	strh	r3, [r7, #18]
      break;
 80075de:	e017      	b.n	8007610 <USBH_AC_GetCur+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075e6:	78db      	ldrb	r3, [r3, #3]
 80075e8:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80075ea:	2300      	movs	r3, #0
 80075ec:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80075ee:	7c3b      	ldrb	r3, [r7, #16]
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	021b      	lsls	r3, r3, #8
 80075f4:	b29a      	uxth	r2, r3
 80075f6:	7bfb      	ldrb	r3, [r7, #15]
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	4313      	orrs	r3, r2
 80075fc:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 80075fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007602:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8007604:	2301      	movs	r3, #1
 8007606:	827b      	strh	r3, [r7, #18]
      break;
 8007608:	e002      	b.n	8007610 <USBH_AC_GetCur+0xec>

    default:
      ret = USBH_FAIL;
 800760a:	2302      	movs	r3, #2
 800760c:	747b      	strb	r3, [r7, #17]
      break;
 800760e:	bf00      	nop
  }

  if (ret != USBH_OK)
 8007610:	7c7b      	ldrb	r3, [r7, #17]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d001      	beq.n	800761a <USBH_AC_GetCur+0xf6>
  {
    return ret;
 8007616:	7c7b      	ldrb	r3, [r7, #17]
 8007618:	e017      	b.n	800764a <USBH_AC_GetCur+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	22a1      	movs	r2, #161	; 0xa1
 800761e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_CUR;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2281      	movs	r2, #129	; 0x81
 8007624:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	8afa      	ldrh	r2, [r7, #22]
 800762a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	8aba      	ldrh	r2, [r7, #20]
 8007630:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	8a7a      	ldrh	r2, [r7, #18]
 8007636:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800763e:	8a7a      	ldrh	r2, [r7, #18]
 8007640:	4619      	mov	r1, r3
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f001 fd2c 	bl	80090a0 <USBH_CtlReq>
 8007648:	4603      	mov	r3, r0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3718      	adds	r7, #24
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <USBH_AC_GetMax>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b086      	sub	sp, #24
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
 800765a:	4608      	mov	r0, r1
 800765c:	4611      	mov	r1, r2
 800765e:	461a      	mov	r2, r3
 8007660:	4603      	mov	r3, r0
 8007662:	70fb      	strb	r3, [r7, #3]
 8007664:	460b      	mov	r3, r1
 8007666:	70bb      	strb	r3, [r7, #2]
 8007668:	4613      	mov	r3, r2
 800766a:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 800766c:	2300      	movs	r3, #0
 800766e:	82fb      	strh	r3, [r7, #22]
 8007670:	2300      	movs	r3, #0
 8007672:	82bb      	strh	r3, [r7, #20]
 8007674:	2300      	movs	r3, #0
 8007676:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8007678:	2300      	movs	r3, #0
 800767a:	743b      	strb	r3, [r7, #16]
 800767c:	2300      	movs	r3, #0
 800767e:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007686:	69db      	ldr	r3, [r3, #28]
 8007688:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 800768a:	2300      	movs	r3, #0
 800768c:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 800768e:	78fb      	ldrb	r3, [r7, #3]
 8007690:	2b06      	cmp	r3, #6
 8007692:	d01e      	beq.n	80076d2 <USBH_AC_GetMax+0x80>
 8007694:	2b06      	cmp	r3, #6
 8007696:	dc4f      	bgt.n	8007738 <USBH_AC_GetMax+0xe6>
 8007698:	2b02      	cmp	r3, #2
 800769a:	d002      	beq.n	80076a2 <USBH_AC_GetMax+0x50>
 800769c:	2b03      	cmp	r3, #3
 800769e:	d036      	beq.n	800770e <USBH_AC_GetMax+0xbc>
 80076a0:	e04a      	b.n	8007738 <USBH_AC_GetMax+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076a6:	78db      	ldrb	r3, [r3, #3]
 80076a8:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80076aa:	2300      	movs	r3, #0
 80076ac:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80076ae:	7c3b      	ldrb	r3, [r7, #16]
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	021b      	lsls	r3, r3, #8
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	7bfb      	ldrb	r3, [r7, #15]
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	4313      	orrs	r3, r2
 80076bc:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 80076be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076c2:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 80076cc:	2301      	movs	r3, #1
 80076ce:	827b      	strh	r3, [r7, #18]
      break;
 80076d0:	e035      	b.n	800773e <USBH_AC_GetMax+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 80076d2:	78bb      	ldrb	r3, [r7, #2]
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	3322      	adds	r3, #34	; 0x22
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4413      	add	r3, r2
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	78db      	ldrb	r3, [r3, #3]
 80076e0:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80076e2:	2300      	movs	r3, #0
 80076e4:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 80076e6:	7c3b      	ldrb	r3, [r7, #16]
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	021b      	lsls	r3, r3, #8
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	7bfb      	ldrb	r3, [r7, #15]
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	4313      	orrs	r3, r2
 80076f4:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 80076f6:	787b      	ldrb	r3, [r7, #1]
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	021b      	lsls	r3, r3, #8
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007702:	b29b      	uxth	r3, r3
 8007704:	4313      	orrs	r3, r2
 8007706:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8007708:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800770a:	827b      	strh	r3, [r7, #18]
      break;
 800770c:	e017      	b.n	800773e <USBH_AC_GetMax+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007714:	78db      	ldrb	r3, [r3, #3]
 8007716:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007718:	2300      	movs	r3, #0
 800771a:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 800771c:	7c3b      	ldrb	r3, [r7, #16]
 800771e:	b29b      	uxth	r3, r3
 8007720:	021b      	lsls	r3, r3, #8
 8007722:	b29a      	uxth	r2, r3
 8007724:	7bfb      	ldrb	r3, [r7, #15]
 8007726:	b29b      	uxth	r3, r3
 8007728:	4313      	orrs	r3, r2
 800772a:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 800772c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007730:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8007732:	2301      	movs	r3, #1
 8007734:	827b      	strh	r3, [r7, #18]
      break;
 8007736:	e002      	b.n	800773e <USBH_AC_GetMax+0xec>

    default:
      ret = USBH_FAIL;
 8007738:	2302      	movs	r3, #2
 800773a:	747b      	strb	r3, [r7, #17]
      break;
 800773c:	bf00      	nop
  }

  if (ret != USBH_OK)
 800773e:	7c7b      	ldrb	r3, [r7, #17]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d001      	beq.n	8007748 <USBH_AC_GetMax+0xf6>
  {
    return ret;
 8007744:	7c7b      	ldrb	r3, [r7, #17]
 8007746:	e017      	b.n	8007778 <USBH_AC_GetMax+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	22a1      	movs	r2, #161	; 0xa1
 800774c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MAX;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2283      	movs	r2, #131	; 0x83
 8007752:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	8afa      	ldrh	r2, [r7, #22]
 8007758:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	8aba      	ldrh	r2, [r7, #20]
 800775e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	8a7a      	ldrh	r2, [r7, #18]
 8007764:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800776c:	8a7a      	ldrh	r2, [r7, #18]
 800776e:	4619      	mov	r1, r3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f001 fc95 	bl	80090a0 <USBH_CtlReq>
 8007776:	4603      	mov	r3, r0

}
 8007778:	4618      	mov	r0, r3
 800777a:	3718      	adds	r7, #24
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <USBH_AC_GetRes>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b086      	sub	sp, #24
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	4608      	mov	r0, r1
 800778a:	4611      	mov	r1, r2
 800778c:	461a      	mov	r2, r3
 800778e:	4603      	mov	r3, r0
 8007790:	70fb      	strb	r3, [r7, #3]
 8007792:	460b      	mov	r3, r1
 8007794:	70bb      	strb	r3, [r7, #2]
 8007796:	4613      	mov	r3, r2
 8007798:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 800779a:	2300      	movs	r3, #0
 800779c:	82fb      	strh	r3, [r7, #22]
 800779e:	2300      	movs	r3, #0
 80077a0:	82bb      	strh	r3, [r7, #20]
 80077a2:	2300      	movs	r3, #0
 80077a4:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 80077a6:	2300      	movs	r3, #0
 80077a8:	743b      	strb	r3, [r7, #16]
 80077aa:	2300      	movs	r3, #0
 80077ac:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80077b4:	69db      	ldr	r3, [r3, #28]
 80077b6:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 80077b8:	2300      	movs	r3, #0
 80077ba:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 80077bc:	78fb      	ldrb	r3, [r7, #3]
 80077be:	2b06      	cmp	r3, #6
 80077c0:	d01e      	beq.n	8007800 <USBH_AC_GetRes+0x80>
 80077c2:	2b06      	cmp	r3, #6
 80077c4:	dc4f      	bgt.n	8007866 <USBH_AC_GetRes+0xe6>
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d002      	beq.n	80077d0 <USBH_AC_GetRes+0x50>
 80077ca:	2b03      	cmp	r3, #3
 80077cc:	d036      	beq.n	800783c <USBH_AC_GetRes+0xbc>
 80077ce:	e04a      	b.n	8007866 <USBH_AC_GetRes+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077d4:	78db      	ldrb	r3, [r3, #3]
 80077d6:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80077d8:	2300      	movs	r3, #0
 80077da:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80077dc:	7c3b      	ldrb	r3, [r7, #16]
 80077de:	b29b      	uxth	r3, r3
 80077e0:	021b      	lsls	r3, r3, #8
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	7bfb      	ldrb	r3, [r7, #15]
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	4313      	orrs	r3, r2
 80077ea:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 80077ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077f0:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 80077fa:	2301      	movs	r3, #1
 80077fc:	827b      	strh	r3, [r7, #18]
      break;
 80077fe:	e035      	b.n	800786c <USBH_AC_GetRes+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8007800:	78bb      	ldrb	r3, [r7, #2]
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	3322      	adds	r3, #34	; 0x22
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	4413      	add	r3, r2
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	78db      	ldrb	r3, [r3, #3]
 800780e:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007810:	2300      	movs	r3, #0
 8007812:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8007814:	7c3b      	ldrb	r3, [r7, #16]
 8007816:	b29b      	uxth	r3, r3
 8007818:	021b      	lsls	r3, r3, #8
 800781a:	b29a      	uxth	r2, r3
 800781c:	7bfb      	ldrb	r3, [r7, #15]
 800781e:	b29b      	uxth	r3, r3
 8007820:	4313      	orrs	r3, r2
 8007822:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8007824:	787b      	ldrb	r3, [r7, #1]
 8007826:	b29b      	uxth	r3, r3
 8007828:	021b      	lsls	r3, r3, #8
 800782a:	b29a      	uxth	r2, r3
 800782c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007830:	b29b      	uxth	r3, r3
 8007832:	4313      	orrs	r3, r2
 8007834:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8007836:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007838:	827b      	strh	r3, [r7, #18]
      break;
 800783a:	e017      	b.n	800786c <USBH_AC_GetRes+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007842:	78db      	ldrb	r3, [r3, #3]
 8007844:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007846:	2300      	movs	r3, #0
 8007848:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800784a:	7c3b      	ldrb	r3, [r7, #16]
 800784c:	b29b      	uxth	r3, r3
 800784e:	021b      	lsls	r3, r3, #8
 8007850:	b29a      	uxth	r2, r3
 8007852:	7bfb      	ldrb	r3, [r7, #15]
 8007854:	b29b      	uxth	r3, r3
 8007856:	4313      	orrs	r3, r2
 8007858:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 800785a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800785e:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8007860:	2301      	movs	r3, #1
 8007862:	827b      	strh	r3, [r7, #18]
      break;
 8007864:	e002      	b.n	800786c <USBH_AC_GetRes+0xec>

    default:
      ret = USBH_FAIL;
 8007866:	2302      	movs	r3, #2
 8007868:	747b      	strb	r3, [r7, #17]
      break;
 800786a:	bf00      	nop
  }

  if (ret != USBH_OK)
 800786c:	7c7b      	ldrb	r3, [r7, #17]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d001      	beq.n	8007876 <USBH_AC_GetRes+0xf6>
  {
    return ret;
 8007872:	7c7b      	ldrb	r3, [r7, #17]
 8007874:	e017      	b.n	80078a6 <USBH_AC_GetRes+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	22a1      	movs	r2, #161	; 0xa1
 800787a:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_RES;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2284      	movs	r2, #132	; 0x84
 8007880:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	8afa      	ldrh	r2, [r7, #22]
 8007886:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	8aba      	ldrh	r2, [r7, #20]
 800788c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	8a7a      	ldrh	r2, [r7, #18]
 8007892:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800789a:	8a7a      	ldrh	r2, [r7, #18]
 800789c:	4619      	mov	r1, r3
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f001 fbfe 	bl	80090a0 <USBH_CtlReq>
 80078a4:	4603      	mov	r3, r0

}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3718      	adds	r7, #24
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <USBH_AC_GetMin>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b086      	sub	sp, #24
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
 80078b6:	4608      	mov	r0, r1
 80078b8:	4611      	mov	r1, r2
 80078ba:	461a      	mov	r2, r3
 80078bc:	4603      	mov	r3, r0
 80078be:	70fb      	strb	r3, [r7, #3]
 80078c0:	460b      	mov	r3, r1
 80078c2:	70bb      	strb	r3, [r7, #2]
 80078c4:	4613      	mov	r3, r2
 80078c6:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 80078c8:	2300      	movs	r3, #0
 80078ca:	82fb      	strh	r3, [r7, #22]
 80078cc:	2300      	movs	r3, #0
 80078ce:	82bb      	strh	r3, [r7, #20]
 80078d0:	2300      	movs	r3, #0
 80078d2:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 80078d4:	2300      	movs	r3, #0
 80078d6:	743b      	strb	r3, [r7, #16]
 80078d8:	2300      	movs	r3, #0
 80078da:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80078e2:	69db      	ldr	r3, [r3, #28]
 80078e4:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 80078ea:	78fb      	ldrb	r3, [r7, #3]
 80078ec:	2b06      	cmp	r3, #6
 80078ee:	d01e      	beq.n	800792e <USBH_AC_GetMin+0x80>
 80078f0:	2b06      	cmp	r3, #6
 80078f2:	dc4f      	bgt.n	8007994 <USBH_AC_GetMin+0xe6>
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d002      	beq.n	80078fe <USBH_AC_GetMin+0x50>
 80078f8:	2b03      	cmp	r3, #3
 80078fa:	d036      	beq.n	800796a <USBH_AC_GetMin+0xbc>
 80078fc:	e04a      	b.n	8007994 <USBH_AC_GetMin+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007902:	78db      	ldrb	r3, [r3, #3]
 8007904:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007906:	2300      	movs	r3, #0
 8007908:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800790a:	7c3b      	ldrb	r3, [r7, #16]
 800790c:	b29b      	uxth	r3, r3
 800790e:	021b      	lsls	r3, r3, #8
 8007910:	b29a      	uxth	r2, r3
 8007912:	7bfb      	ldrb	r3, [r7, #15]
 8007914:	b29b      	uxth	r3, r3
 8007916:	4313      	orrs	r3, r2
 8007918:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 800791a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800791e:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	2200      	movs	r2, #0
 8007924:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8007928:	2301      	movs	r3, #1
 800792a:	827b      	strh	r3, [r7, #18]
      break;
 800792c:	e035      	b.n	800799a <USBH_AC_GetMin+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 800792e:	78bb      	ldrb	r3, [r7, #2]
 8007930:	68ba      	ldr	r2, [r7, #8]
 8007932:	3322      	adds	r3, #34	; 0x22
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	4413      	add	r3, r2
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	78db      	ldrb	r3, [r3, #3]
 800793c:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800793e:	2300      	movs	r3, #0
 8007940:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8007942:	7c3b      	ldrb	r3, [r7, #16]
 8007944:	b29b      	uxth	r3, r3
 8007946:	021b      	lsls	r3, r3, #8
 8007948:	b29a      	uxth	r2, r3
 800794a:	7bfb      	ldrb	r3, [r7, #15]
 800794c:	b29b      	uxth	r3, r3
 800794e:	4313      	orrs	r3, r2
 8007950:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8007952:	787b      	ldrb	r3, [r7, #1]
 8007954:	b29b      	uxth	r3, r3
 8007956:	021b      	lsls	r3, r3, #8
 8007958:	b29a      	uxth	r2, r3
 800795a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800795e:	b29b      	uxth	r3, r3
 8007960:	4313      	orrs	r3, r2
 8007962:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8007964:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007966:	827b      	strh	r3, [r7, #18]
      break;
 8007968:	e017      	b.n	800799a <USBH_AC_GetMin+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007970:	78db      	ldrb	r3, [r3, #3]
 8007972:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007974:	2300      	movs	r3, #0
 8007976:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8007978:	7c3b      	ldrb	r3, [r7, #16]
 800797a:	b29b      	uxth	r3, r3
 800797c:	021b      	lsls	r3, r3, #8
 800797e:	b29a      	uxth	r2, r3
 8007980:	7bfb      	ldrb	r3, [r7, #15]
 8007982:	b29b      	uxth	r3, r3
 8007984:	4313      	orrs	r3, r2
 8007986:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8007988:	f44f 7380 	mov.w	r3, #256	; 0x100
 800798c:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 800798e:	2301      	movs	r3, #1
 8007990:	827b      	strh	r3, [r7, #18]
      break;
 8007992:	e002      	b.n	800799a <USBH_AC_GetMin+0xec>

    default:
      ret = USBH_FAIL;
 8007994:	2302      	movs	r3, #2
 8007996:	747b      	strb	r3, [r7, #17]
      break;
 8007998:	bf00      	nop
  }

  if (ret != USBH_OK)
 800799a:	7c7b      	ldrb	r3, [r7, #17]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d001      	beq.n	80079a4 <USBH_AC_GetMin+0xf6>
  {
    return ret;
 80079a0:	7c7b      	ldrb	r3, [r7, #17]
 80079a2:	e017      	b.n	80079d4 <USBH_AC_GetMin+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	22a1      	movs	r2, #161	; 0xa1
 80079a8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MIN;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2282      	movs	r2, #130	; 0x82
 80079ae:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	8afa      	ldrh	r2, [r7, #22]
 80079b4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	8aba      	ldrh	r2, [r7, #20]
 80079ba:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	8a7a      	ldrh	r2, [r7, #18]
 80079c0:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80079c8:	8a7a      	ldrh	r2, [r7, #18]
 80079ca:	4619      	mov	r1, r3
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f001 fb67 	bl	80090a0 <USBH_CtlReq>
 80079d2:	4603      	mov	r3, r0

}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3718      	adds	r7, #24
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <USBH_AUDIO_SetEndpointControls>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetEndpointControls(USBH_HandleTypeDef *phost,
                                                         uint8_t  Ep,
                                                         uint8_t *buff)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	460b      	mov	r3, r1
 80079e6:	607a      	str	r2, [r7, #4]
 80079e8:	72fb      	strb	r3, [r7, #11]
  uint16_t wValue, wIndex, wLength;

  wValue = SAMPLING_FREQ_CONTROL << 8U;
 80079ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079ee:	82fb      	strh	r3, [r7, #22]
  wIndex = Ep;
 80079f0:	7afb      	ldrb	r3, [r7, #11]
 80079f2:	82bb      	strh	r3, [r7, #20]
  wLength = 3U; /*length of the frequency parameter*/
 80079f4:	2303      	movs	r3, #3
 80079f6:	827b      	strh	r3, [r7, #18]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT | \
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2222      	movs	r2, #34	; 0x22
 80079fc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2201      	movs	r2, #1
 8007a02:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	8afa      	ldrh	r2, [r7, #22]
 8007a08:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	8aba      	ldrh	r2, [r7, #20]
 8007a0e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	8a7a      	ldrh	r2, [r7, #18]
 8007a14:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)buff, wLength));
 8007a16:	8a7b      	ldrh	r3, [r7, #18]
 8007a18:	461a      	mov	r2, r3
 8007a1a:	6879      	ldr	r1, [r7, #4]
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f001 fb3f 	bl	80090a0 <USBH_CtlReq>
 8007a22:	4603      	mov	r3, r0

}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3718      	adds	r7, #24
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <USBH_AUDIO_InputStream>:
  * @brief  Handle Input stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InputStream(USBH_HandleTypeDef *phost)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  USBH_StatusTypeDef status = USBH_BUSY;
 8007a34:	2301      	movs	r3, #1
 8007a36:	73fb      	strb	r3, [r7, #15]

  return status;
 8007a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3714      	adds	r7, #20
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
	...

08007a48 <USBH_AUDIO_Control>:
  * @brief  Handle HID Control process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Control(USBH_HandleTypeDef *phost)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b086      	sub	sp, #24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8007a50:	2301      	movs	r3, #1
 8007a52:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007a5a:	69db      	ldr	r3, [r3, #28]
 8007a5c:	613b      	str	r3, [r7, #16]
  uint16_t attribute  = 0U;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	81fb      	strh	r3, [r7, #14]

  switch (AUDIO_Handle->control_state)
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	78db      	ldrb	r3, [r3, #3]
 8007a66:	3b01      	subs	r3, #1
 8007a68:	2b04      	cmp	r3, #4
 8007a6a:	f200 8090 	bhi.w	8007b8e <USBH_AUDIO_Control+0x146>
 8007a6e:	a201      	add	r2, pc, #4	; (adr r2, 8007a74 <USBH_AUDIO_Control+0x2c>)
 8007a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a74:	08007a89 	.word	0x08007a89
 8007a78:	08007add 	.word	0x08007add
 8007a7c:	08007b8f 	.word	0x08007b8f
 8007a80:	08007b5b 	.word	0x08007b5b
 8007a84:	08007b75 	.word	0x08007b75
  {
    case AUDIO_CONTROL_INIT:
      if ((phost->Timer & 1U) == 0U)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d17d      	bne.n	8007b92 <USBH_AUDIO_Control+0x14a>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
        USBH_InterruptReceiveData(phost,
                                  (uint8_t *)(void *)(AUDIO_Handle->mem),
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                  (uint8_t)AUDIO_Handle->control.EpSize,
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
        USBH_InterruptReceiveData(phost,
 8007aae:	b2da      	uxtb	r2, r3
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f001 fd01 	bl	80094be <USBH_InterruptReceiveData>
                                  AUDIO_Handle->control.Pipe);

        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1

        AUDIO_Handle->control_state = AUDIO_CONTROL_CHANGE ;
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	70da      	strb	r2, [r3, #3]
      }
      break;
 8007ada:	e05a      	b.n	8007b92 <USBH_AUDIO_Control+0x14a>

    case AUDIO_CONTROL_CHANGE:
      if (USBH_LL_GetURBState(phost, AUDIO_Handle->control.Pipe) == USBH_URB_DONE)
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f002 f806 	bl	8009af6 <USBH_LL_GetURBState>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d114      	bne.n	8007b1a <USBH_AUDIO_Control+0xd2>
      {
        attribute = LE16(&AUDIO_Handle->mem[0]);
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8007afc:	3302      	adds	r3, #2
 8007afe:	881b      	ldrh	r3, [r3, #0]
 8007b00:	021b      	lsls	r3, r3, #8
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	4313      	orrs	r3, r2
 8007b06:	81fb      	strh	r3, [r7, #14]
        if (USBH_AUDIO_SetControlAttribute(phost, (uint8_t)attribute) == USBH_BUSY)
 8007b08:	89fb      	ldrh	r3, [r7, #14]
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f97a 	bl	8007e08 <USBH_AUDIO_SetControlAttribute>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d03d      	beq.n	8007b96 <USBH_AUDIO_Control+0x14e>
        {
          break;
        }
      }

      if ((phost->Timer - AUDIO_Handle->control.timer) >= AUDIO_Handle->control.Poll)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8007b26:	1ad3      	subs	r3, r2, r3
 8007b28:	693a      	ldr	r2, [r7, #16]
 8007b2a:	f892 218b 	ldrb.w	r2, [r2, #395]	; 0x18b
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d333      	bcc.n	8007b9a <USBH_AUDIO_Control+0x152>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

        USBH_InterruptReceiveData(phost,
                                  (uint8_t *)(void *)(AUDIO_Handle->mem),
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                  (uint8_t)AUDIO_Handle->control.EpSize,
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
        USBH_InterruptReceiveData(phost,
 8007b4a:	b2da      	uxtb	r2, r3
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f001 fcb3 	bl	80094be <USBH_InterruptReceiveData>
                                  AUDIO_Handle->control.Pipe);

      }
      break;
 8007b58:	e01f      	b.n	8007b9a <USBH_AUDIO_Control+0x152>

    case AUDIO_CONTROL_VOLUME_UP:
      if (USBH_AUDIO_SetControlAttribute(phost, 1U) == USBH_OK)
 8007b5a:	2101      	movs	r1, #1
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f953 	bl	8007e08 <USBH_AUDIO_SetControlAttribute>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d11a      	bne.n	8007b9e <USBH_AUDIO_Control+0x156>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007b72:	e014      	b.n	8007b9e <USBH_AUDIO_Control+0x156>

    case AUDIO_CONTROL_VOLUME_DOWN:
      if (USBH_AUDIO_SetControlAttribute(phost, 2U) == USBH_OK)
 8007b74:	2102      	movs	r1, #2
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f946 	bl	8007e08 <USBH_AUDIO_SetControlAttribute>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10f      	bne.n	8007ba2 <USBH_AUDIO_Control+0x15a>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	2201      	movs	r2, #1
 8007b86:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007b8c:	e009      	b.n	8007ba2 <USBH_AUDIO_Control+0x15a>

    case AUDIO_CONTROL_IDLE:
    default:
      break;
 8007b8e:	bf00      	nop
 8007b90:	e008      	b.n	8007ba4 <USBH_AUDIO_Control+0x15c>
      break;
 8007b92:	bf00      	nop
 8007b94:	e006      	b.n	8007ba4 <USBH_AUDIO_Control+0x15c>
          break;
 8007b96:	bf00      	nop
 8007b98:	e004      	b.n	8007ba4 <USBH_AUDIO_Control+0x15c>
      break;
 8007b9a:	bf00      	nop
 8007b9c:	e002      	b.n	8007ba4 <USBH_AUDIO_Control+0x15c>
      break;
 8007b9e:	bf00      	nop
 8007ba0:	e000      	b.n	8007ba4 <USBH_AUDIO_Control+0x15c>
      break;
 8007ba2:	bf00      	nop
  }

  return status;
 8007ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3718      	adds	r7, #24
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop

08007bb0 <USBH_AUDIO_OutputStream>:
  * @brief  Handle Output stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_OutputStream(USBH_HandleTypeDef *phost)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007bc2:	69db      	ldr	r3, [r3, #28]
 8007bc4:	613b      	str	r3, [r7, #16]
  uint8_t *buff;


  switch (AUDIO_Handle->play_state)
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	789b      	ldrb	r3, [r3, #2]
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	2b04      	cmp	r3, #4
 8007bce:	d85c      	bhi.n	8007c8a <USBH_AUDIO_OutputStream+0xda>
 8007bd0:	a201      	add	r2, pc, #4	; (adr r2, 8007bd8 <USBH_AUDIO_OutputStream+0x28>)
 8007bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd6:	bf00      	nop
 8007bd8:	08007bed 	.word	0x08007bed
 8007bdc:	08007c49 	.word	0x08007c49
 8007be0:	08007c13 	.word	0x08007c13
 8007be4:	08007c7f 	.word	0x08007c7f
 8007be8:	08007c79 	.word	0x08007c79
  {
    case AUDIO_PLAYBACK_INIT:

      if (AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->bSamFreqType == 0U)
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	3317      	adds	r3, #23
 8007bf6:	00db      	lsls	r3, r3, #3
 8007bf8:	4413      	add	r3, r2
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	79db      	ldrb	r3, [r3, #7]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d103      	bne.n	8007c0a <USBH_AUDIO_OutputStream+0x5a>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP_FREQ;
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	2203      	movs	r2, #3
 8007c06:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007c08:	e044      	b.n	8007c94 <USBH_AUDIO_OutputStream+0xe4>
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP;
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	2202      	movs	r2, #2
 8007c0e:	709a      	strb	r2, [r3, #2]
      break;
 8007c10:	e040      	b.n	8007c94 <USBH_AUDIO_OutputStream+0xe4>

    case AUDIO_PLAYBACK_SET_EP_FREQ:

      buff = (uint8_t *)AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->tSamFreq[0];
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8007c18:	693a      	ldr	r2, [r7, #16]
 8007c1a:	3317      	adds	r3, #23
 8007c1c:	00db      	lsls	r3, r3, #3
 8007c1e:	4413      	add	r3, r2
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	3308      	adds	r3, #8
 8007c24:	60fb      	str	r3, [r7, #12]

      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	4619      	mov	r1, r3
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f7ff fed3 	bl	80079dc <USBH_AUDIO_SetEndpointControls>
 8007c36:	4603      	mov	r3, r0
 8007c38:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8007c3a:	7dfb      	ldrb	r3, [r7, #23]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d126      	bne.n	8007c8e <USBH_AUDIO_OutputStream+0xde>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	2205      	movs	r2, #5
 8007c44:	709a      	strb	r2, [r3, #2]
      }
      break;
 8007c46:	e022      	b.n	8007c8e <USBH_AUDIO_OutputStream+0xde>

    case AUDIO_PLAYBACK_SET_EP:
      buff = (uint8_t *)(void *)&AUDIO_Handle->headphone.frequency;
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8007c4e:	60fb      	str	r3, [r7, #12]
      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7ff febe 	bl	80079dc <USBH_AUDIO_SetEndpointControls>
 8007c60:	4603      	mov	r3, r0
 8007c62:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8007c64:	7dfb      	ldrb	r3, [r7, #23]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d113      	bne.n	8007c92 <USBH_AUDIO_OutputStream+0xe2>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	2205      	movs	r2, #5
 8007c6e:	709a      	strb	r2, [r3, #2]
        USBH_AUDIO_FrequencySet(phost);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f96e 	bl	8007f52 <USBH_AUDIO_FrequencySet>
      }
      break;
 8007c76:	e00c      	b.n	8007c92 <USBH_AUDIO_OutputStream+0xe2>

    case AUDIO_PLAYBACK_IDLE:
      status = USBH_OK;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007c7c:	e00a      	b.n	8007c94 <USBH_AUDIO_OutputStream+0xe4>

    case AUDIO_PLAYBACK_PLAY:
      USBH_AUDIO_Transmit(phost);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f80e 	bl	8007ca0 <USBH_AUDIO_Transmit>
      status = USBH_OK;
 8007c84:	2300      	movs	r3, #0
 8007c86:	75fb      	strb	r3, [r7, #23]
      break;
 8007c88:	e004      	b.n	8007c94 <USBH_AUDIO_OutputStream+0xe4>

    default:
      break;
 8007c8a:	bf00      	nop
 8007c8c:	e002      	b.n	8007c94 <USBH_AUDIO_OutputStream+0xe4>
      break;
 8007c8e:	bf00      	nop
 8007c90:	e000      	b.n	8007c94 <USBH_AUDIO_OutputStream+0xe4>
      break;
 8007c92:	bf00      	nop
  }

  return status;
 8007c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3718      	adds	r7, #24
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop

08007ca0 <USBH_AUDIO_Transmit>:
  * @brief  Handle Transmission process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Transmit(USBH_HandleTypeDef *phost)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007cb2:	69db      	ldr	r3, [r3, #28]
 8007cb4:	60bb      	str	r3, [r7, #8]

  switch (AUDIO_Handle->processing_state)
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	791b      	ldrb	r3, [r3, #4]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d002      	beq.n	8007cc4 <USBH_AUDIO_Transmit+0x24>
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	d033      	beq.n	8007d2a <USBH_AUDIO_Transmit+0x8a>
 8007cc2:	e096      	b.n	8007df2 <USBH_AUDIO_Transmit+0x152>
  {
    case AUDIO_DATA_START_OUT:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) == 0U)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8007cca:	f003 0301 	and.w	r3, r3, #1
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	f040 8092 	bne.w	8007df8 <USBH_AUDIO_Transmit+0x158>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        AUDIO_Handle->processing_state = AUDIO_DATA_OUT;
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	2202      	movs	r2, #2
 8007ce4:	711a      	strb	r2, [r3, #4]
        USBH_IsocSendData(phost,
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
                          AUDIO_Handle->headphone.buf,
                          (uint32_t)AUDIO_Handle->headphone.frame_length,
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
        USBH_IsocSendData(phost,
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f001 fbfe 	bl	80094fc <USBH_IsocSendData>
                          AUDIO_Handle->headphone.Pipe);

        AUDIO_Handle->headphone.partial_ptr = AUDIO_Handle->headphone.frame_length;
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8007d06:	461a      	mov	r2, r3
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        AUDIO_Handle->headphone.global_ptr = AUDIO_Handle->headphone.frame_length;
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8007d14:	461a      	mov	r2, r3
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        AUDIO_Handle->headphone.cbuf = AUDIO_Handle->headphone.buf;
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007d28:	e066      	b.n	8007df8 <USBH_AUDIO_Transmit+0x158>

    case AUDIO_DATA_OUT:
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8007d30:	4619      	mov	r1, r3
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f001 fedf 	bl	8009af6 <USBH_LL_GetURBState>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d15e      	bne.n	8007dfc <USBH_AUDIO_Transmit+0x15c>
          ((phost->Timer - AUDIO_Handle->headphone.timer) >= AUDIO_Handle->headphone.Poll))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	f892 20fc 	ldrb.w	r2, [r2, #252]	; 0xfc
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d352      	bcc.n	8007dfc <USBH_AUDIO_Transmit+0x15c>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

        if (AUDIO_Handle->control.supported == 1U)
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d102      	bne.n	8007d72 <USBH_AUDIO_Transmit+0xd2>
        {
          USBH_AUDIO_Control(phost);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f7ff fe6b 	bl	8007a48 <USBH_AUDIO_Control>
        }

        if (AUDIO_Handle->headphone.global_ptr <= AUDIO_Handle->headphone.total_length)
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d82b      	bhi.n	8007dda <USBH_AUDIO_Transmit+0x13a>
        {
          USBH_IsocSendData(phost,
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
                            AUDIO_Handle->headphone.cbuf,
                            (uint32_t)AUDIO_Handle->headphone.frame_length,
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
          USBH_IsocSendData(phost,
 8007d8e:	461a      	mov	r2, r3
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f001 fbb0 	bl	80094fc <USBH_IsocSendData>
                            AUDIO_Handle->headphone.Pipe);

          AUDIO_Handle->headphone.cbuf += AUDIO_Handle->headphone.frame_length;
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8007da8:	441a      	add	r2, r3
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
          AUDIO_Handle->headphone.partial_ptr += AUDIO_Handle->headphone.frame_length;
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8007dbc:	441a      	add	r2, r3
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
          AUDIO_Handle->headphone.global_ptr += AUDIO_Handle->headphone.frame_length;
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8007dd0:	441a      	add	r2, r3
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
          USBH_AUDIO_BufferEmptyCallback(phost);
        }
      }
      break;
 8007dd8:	e010      	b.n	8007dfc <USBH_AUDIO_Transmit+0x15c>
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8007de0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	2205      	movs	r2, #5
 8007de8:	709a      	strb	r2, [r3, #2]
          USBH_AUDIO_BufferEmptyCallback(phost);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 f8bb 	bl	8007f66 <USBH_AUDIO_BufferEmptyCallback>
      break;
 8007df0:	e004      	b.n	8007dfc <USBH_AUDIO_Transmit+0x15c>

    default:
      status = USBH_FAIL;
 8007df2:	2302      	movs	r3, #2
 8007df4:	73fb      	strb	r3, [r7, #15]
      break;
 8007df6:	e002      	b.n	8007dfe <USBH_AUDIO_Transmit+0x15e>
      break;
 8007df8:	bf00      	nop
 8007dfa:	e000      	b.n	8007dfe <USBH_AUDIO_Transmit+0x15e>
      break;
 8007dfc:	bf00      	nop
  }
  return status;
 8007dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <USBH_AUDIO_SetControlAttribute>:
  * @param  phost: Host handle
  * @param  attrib: control attribute
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetControlAttribute(USBH_HandleTypeDef *phost, uint8_t attrib)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	460b      	mov	r3, r1
 8007e12:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007e14:	2301      	movs	r3, #1
 8007e16:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007e1e:	69db      	ldr	r3, [r3, #28]
 8007e20:	60bb      	str	r3, [r7, #8]

  switch (attrib)
 8007e22:	78fb      	ldrb	r3, [r7, #3]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d002      	beq.n	8007e2e <USBH_AUDIO_SetControlAttribute+0x26>
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d00b      	beq.n	8007e44 <USBH_AUDIO_SetControlAttribute+0x3c>
 8007e2c:	e015      	b.n	8007e5a <USBH_AUDIO_SetControlAttribute+0x52>
  {
    case 0x01:
      AUDIO_Handle->headphone.attribute.volume += AUDIO_Handle->headphone.attribute.resolution;
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8007e3a:	441a      	add	r2, r3
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      break;
 8007e42:	e00d      	b.n	8007e60 <USBH_AUDIO_SetControlAttribute+0x58>

    case 0x02:
      AUDIO_Handle->headphone.attribute.volume -= AUDIO_Handle->headphone.attribute.resolution;
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8007e50:	1ad2      	subs	r2, r2, r3
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      break;
 8007e58:	e002      	b.n	8007e60 <USBH_AUDIO_SetControlAttribute+0x58>

    default :
      status = USBH_FAIL;
 8007e5a:	2302      	movs	r3, #2
 8007e5c:	73fb      	strb	r3, [r7, #15]
      break;
 8007e5e:	bf00      	nop
  }

  if (AUDIO_Handle->headphone.attribute.volume > AUDIO_Handle->headphone.attribute.volumeMax)
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d905      	bls.n	8007e7c <USBH_AUDIO_SetControlAttribute+0x74>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMax;
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if (AUDIO_Handle->headphone.attribute.volume < AUDIO_Handle->headphone.attribute.volumeMin)
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d205      	bcs.n	8007e98 <USBH_AUDIO_SetControlAttribute+0x90>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMin;
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if (AUDIO_SetVolume(phost,
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
                      AUDIO_Handle->temp_feature,
                      (uint8_t)AUDIO_Handle->temp_channels,
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	f893 21a1 	ldrb.w	r2, [r3, #417]	; 0x1a1
                      (uint16_t)AUDIO_Handle->headphone.attribute.volume) != USBH_BUSY)
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
  if (AUDIO_SetVolume(phost,
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 f827 	bl	8007f00 <AUDIO_SetVolume>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d01e      	beq.n	8007ef6 <USBH_AUDIO_SetControlAttribute+0xee>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d10e      	bne.n	8007ee0 <USBH_AUDIO_SetControlAttribute+0xd8>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
      status = USBH_OK;
 8007eda:	2300      	movs	r3, #0
 8007edc:	73fb      	strb	r3, [r7, #15]
 8007ede:	e007      	b.n	8007ef0 <USBH_AUDIO_SetControlAttribute+0xe8>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	b2da      	uxtb	r2, r3
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	2206      	movs	r2, #6
 8007ef4:	705a      	strb	r2, [r3, #1]
  }


  return status;
 8007ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3710      	adds	r7, #16
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <AUDIO_SetVolume>:
  * @param  channel: channel index
  * @param  volume: new volume
  * @retval USBH Status
  */
static USBH_StatusTypeDef AUDIO_SetVolume(USBH_HandleTypeDef *phost, uint8_t feature, uint8_t channel, uint16_t volume)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b086      	sub	sp, #24
 8007f04:	af02      	add	r7, sp, #8
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	4608      	mov	r0, r1
 8007f0a:	4611      	mov	r1, r2
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	4603      	mov	r3, r0
 8007f10:	70fb      	strb	r3, [r7, #3]
 8007f12:	460b      	mov	r3, r1
 8007f14:	70bb      	strb	r3, [r7, #2]
 8007f16:	4613      	mov	r3, r2
 8007f18:	803b      	strh	r3, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007f24:	69db      	ldr	r3, [r3, #28]
 8007f26:	60bb      	str	r3, [r7, #8]

  AUDIO_Handle->mem[0] = volume;
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	883a      	ldrh	r2, [r7, #0]
 8007f2c:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

  status = USBH_AC_SetCur(phost, UAC_FEATURE_UNIT, feature,
 8007f30:	78fa      	ldrb	r2, [r7, #3]
 8007f32:	2302      	movs	r3, #2
 8007f34:	9301      	str	r3, [sp, #4]
 8007f36:	78bb      	ldrb	r3, [r7, #2]
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	2302      	movs	r3, #2
 8007f3c:	2106      	movs	r1, #6
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f7ff fa76 	bl	8007430 <USBH_AC_SetCur>
 8007f44:	4603      	mov	r3, r0
 8007f46:	73fb      	strb	r3, [r7, #15]
                          VOLUME_CONTROL, channel, 2U);

  return status;
 8007f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3710      	adds	r7, #16
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <USBH_AUDIO_FrequencySet>:
  * @brief  The function informs user that Settings have been changed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void USBH_AUDIO_FrequencySet(USBH_HandleTypeDef *phost)
{
 8007f52:	b480      	push	{r7}
 8007f54:	b083      	sub	sp, #12
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007f5a:	bf00      	nop
 8007f5c:	370c      	adds	r7, #12
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr

08007f66 <USBH_AUDIO_BufferEmptyCallback>:
  * @brief  The function informs user that User data are processed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void  USBH_AUDIO_BufferEmptyCallback(USBH_HandleTypeDef *phost)
{
 8007f66:	b480      	push	{r7}
 8007f68:	b083      	sub	sp, #12
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007f6e:	bf00      	nop
 8007f70:	370c      	adds	r7, #12
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr

08007f7a <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b084      	sub	sp, #16
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	60f8      	str	r0, [r7, #12]
 8007f82:	60b9      	str	r1, [r7, #8]
 8007f84:	4613      	mov	r3, r2
 8007f86:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d101      	bne.n	8007f92 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007f8e:	2302      	movs	r3, #2
 8007f90:	e029      	b.n	8007fe6 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	79fa      	ldrb	r2, [r7, #7]
 8007f96:	f883 249c 	strb.w	r2, [r3, #1180]	; 0x49c

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
  phost->ClassNumber = 0U;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f000 f81f 	bl	8007fee <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d003      	beq.n	8007fde <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	68ba      	ldr	r2, [r7, #8]
 8007fda:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007fde:	68f8      	ldr	r0, [r7, #12]
 8007fe0:	f001 fc56 	bl	8009890 <USBH_LL_Init>

  return USBH_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b085      	sub	sp, #20
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	60fb      	str	r3, [r7, #12]
 8007ffe:	e00a      	b.n	8008016 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	4413      	add	r3, r2
 800800c:	2200      	movs	r2, #0
 800800e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	3301      	adds	r3, #1
 8008014:	60fb      	str	r3, [r7, #12]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2b0e      	cmp	r3, #14
 800801a:	d9f1      	bls.n	8008000 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800801c:	2300      	movs	r3, #0
 800801e:	60fb      	str	r3, [r7, #12]
 8008020:	e009      	b.n	8008036 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	4413      	add	r3, r2
 8008028:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800802c:	2200      	movs	r2, #0
 800802e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	3301      	adds	r3, #1
 8008034:	60fb      	str	r3, [r7, #12]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800803c:	d3f1      	bcc.n	8008022 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2201      	movs	r2, #1
 800804e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

  phost->Control.state = CTRL_SETUP;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2240      	movs	r2, #64	; 0x40
 8008062:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3714      	adds	r7, #20
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80080a2:	2300      	movs	r3, #0
 80080a4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d017      	beq.n	80080dc <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10f      	bne.n	80080d6 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 80080bc:	1c59      	adds	r1, r3, #1
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	f503 7389 	add.w	r3, r3, #274	; 0x112
 80080ca:	6839      	ldr	r1, [r7, #0]
 80080cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80080d0:	2300      	movs	r3, #0
 80080d2:	73fb      	strb	r3, [r7, #15]
 80080d4:	e004      	b.n	80080e0 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80080d6:	2302      	movs	r3, #2
 80080d8:	73fb      	strb	r3, [r7, #15]
 80080da:	e001      	b.n	80080e0 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80080dc:	2302      	movs	r3, #2
 80080de:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80080e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3714      	adds	r7, #20
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr

080080ee <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80080ee:	b480      	push	{r7}
 80080f0:	b087      	sub	sp, #28
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
 80080f6:	4608      	mov	r0, r1
 80080f8:	4611      	mov	r1, r2
 80080fa:	461a      	mov	r2, r3
 80080fc:	4603      	mov	r3, r0
 80080fe:	70fb      	strb	r3, [r7, #3]
 8008100:	460b      	mov	r3, r1
 8008102:	70bb      	strb	r3, [r7, #2]
 8008104:	4613      	mov	r3, r2
 8008106:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008108:	2300      	movs	r3, #0
 800810a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800810c:	2300      	movs	r3, #0
 800810e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008116:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008118:	e025      	b.n	8008166 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800811a:	7dfb      	ldrb	r3, [r7, #23]
 800811c:	221a      	movs	r2, #26
 800811e:	fb02 f303 	mul.w	r3, r2, r3
 8008122:	3308      	adds	r3, #8
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	4413      	add	r3, r2
 8008128:	3302      	adds	r3, #2
 800812a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	795b      	ldrb	r3, [r3, #5]
 8008130:	78fa      	ldrb	r2, [r7, #3]
 8008132:	429a      	cmp	r2, r3
 8008134:	d002      	beq.n	800813c <USBH_FindInterface+0x4e>
 8008136:	78fb      	ldrb	r3, [r7, #3]
 8008138:	2bff      	cmp	r3, #255	; 0xff
 800813a:	d111      	bne.n	8008160 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008140:	78ba      	ldrb	r2, [r7, #2]
 8008142:	429a      	cmp	r2, r3
 8008144:	d002      	beq.n	800814c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008146:	78bb      	ldrb	r3, [r7, #2]
 8008148:	2bff      	cmp	r3, #255	; 0xff
 800814a:	d109      	bne.n	8008160 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008150:	787a      	ldrb	r2, [r7, #1]
 8008152:	429a      	cmp	r2, r3
 8008154:	d002      	beq.n	800815c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008156:	787b      	ldrb	r3, [r7, #1]
 8008158:	2bff      	cmp	r3, #255	; 0xff
 800815a:	d101      	bne.n	8008160 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800815c:	7dfb      	ldrb	r3, [r7, #23]
 800815e:	e006      	b.n	800816e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008160:	7dfb      	ldrb	r3, [r7, #23]
 8008162:	3301      	adds	r3, #1
 8008164:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008166:	7dfb      	ldrb	r3, [r7, #23]
 8008168:	2b09      	cmp	r3, #9
 800816a:	d9d6      	bls.n	800811a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800816c:	23ff      	movs	r3, #255	; 0xff
}
 800816e:	4618      	mov	r0, r3
 8008170:	371c      	adds	r7, #28
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr

0800817a <USBH_FindInterfaceIndex>:
  * @param  alt_settings    : alternate setting number
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterfaceIndex(USBH_HandleTypeDef *phost, uint8_t interface_number, uint8_t alt_settings)
{
 800817a:	b480      	push	{r7}
 800817c:	b087      	sub	sp, #28
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
 8008182:	460b      	mov	r3, r1
 8008184:	70fb      	strb	r3, [r7, #3]
 8008186:	4613      	mov	r3, r2
 8008188:	70bb      	strb	r3, [r7, #2]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800818a:	2300      	movs	r3, #0
 800818c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800818e:	2300      	movs	r3, #0
 8008190:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008198:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800819a:	e017      	b.n	80081cc <USBH_FindInterfaceIndex+0x52>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800819c:	7dfb      	ldrb	r3, [r7, #23]
 800819e:	221a      	movs	r2, #26
 80081a0:	fb02 f303 	mul.w	r3, r2, r3
 80081a4:	3308      	adds	r3, #8
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	4413      	add	r3, r2
 80081aa:	3302      	adds	r3, #2
 80081ac:	613b      	str	r3, [r7, #16]
    if ((pif->bInterfaceNumber == interface_number) && (pif->bAlternateSetting == alt_settings))
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	789b      	ldrb	r3, [r3, #2]
 80081b2:	78fa      	ldrb	r2, [r7, #3]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d106      	bne.n	80081c6 <USBH_FindInterfaceIndex+0x4c>
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	78db      	ldrb	r3, [r3, #3]
 80081bc:	78ba      	ldrb	r2, [r7, #2]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d101      	bne.n	80081c6 <USBH_FindInterfaceIndex+0x4c>
    {
      return  if_ix;
 80081c2:	7dfb      	ldrb	r3, [r7, #23]
 80081c4:	e006      	b.n	80081d4 <USBH_FindInterfaceIndex+0x5a>
    }
    if_ix++;
 80081c6:	7dfb      	ldrb	r3, [r7, #23]
 80081c8:	3301      	adds	r3, #1
 80081ca:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80081cc:	7dfb      	ldrb	r3, [r7, #23]
 80081ce:	2b09      	cmp	r3, #9
 80081d0:	d9e4      	bls.n	800819c <USBH_FindInterfaceIndex+0x22>
  }
  return 0xFFU;
 80081d2:	23ff      	movs	r3, #255	; 0xff
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	371c      	adds	r7, #28
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f001 fb8d 	bl	8009908 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80081ee:	2101      	movs	r1, #1
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f001 fc93 	bl	8009b1c <USBH_LL_DriverVBUS>

  return USBH_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3708      	adds	r7, #8
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b088      	sub	sp, #32
 8008204:	af04      	add	r7, sp, #16
 8008206:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008208:	2302      	movs	r3, #2
 800820a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800820c:	2300      	movs	r3, #0
 800820e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008216:	b2db      	uxtb	r3, r3
 8008218:	2b01      	cmp	r3, #1
 800821a:	d102      	bne.n	8008222 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2203      	movs	r2, #3
 8008220:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	b2db      	uxtb	r3, r3
 8008228:	2b0b      	cmp	r3, #11
 800822a:	f200 81b5 	bhi.w	8008598 <USBH_Process+0x398>
 800822e:	a201      	add	r2, pc, #4	; (adr r2, 8008234 <USBH_Process+0x34>)
 8008230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008234:	08008265 	.word	0x08008265
 8008238:	08008297 	.word	0x08008297
 800823c:	080082ff 	.word	0x080082ff
 8008240:	08008533 	.word	0x08008533
 8008244:	08008599 	.word	0x08008599
 8008248:	080083a3 	.word	0x080083a3
 800824c:	080084d9 	.word	0x080084d9
 8008250:	080083d9 	.word	0x080083d9
 8008254:	080083f9 	.word	0x080083f9
 8008258:	08008419 	.word	0x08008419
 800825c:	08008447 	.word	0x08008447
 8008260:	0800851b 	.word	0x0800851b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800826a:	b2db      	uxtb	r3, r3
 800826c:	2b00      	cmp	r3, #0
 800826e:	f000 8195 	beq.w	800859c <USBH_Process+0x39c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2201      	movs	r2, #1
 8008276:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008278:	20c8      	movs	r0, #200	; 0xc8
 800827a:	f001 fc96 	bl	8009baa <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f001 fb9f 	bl	80099c2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008294:	e182      	b.n	800859c <USBH_Process+0x39c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800829c:	2b01      	cmp	r3, #1
 800829e:	d107      	bne.n	80082b0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2202      	movs	r2, #2
 80082ac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80082ae:	e184      	b.n	80085ba <USBH_Process+0x3ba>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 80082b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082ba:	d914      	bls.n	80082e6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80082c2:	3301      	adds	r3, #1
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80082d2:	2b03      	cmp	r3, #3
 80082d4:	d903      	bls.n	80082de <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	220d      	movs	r2, #13
 80082da:	701a      	strb	r2, [r3, #0]
      break;
 80082dc:	e16d      	b.n	80085ba <USBH_Process+0x3ba>
            phost->gState = HOST_IDLE;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	701a      	strb	r2, [r3, #0]
      break;
 80082e4:	e169      	b.n	80085ba <USBH_Process+0x3ba>
          phost->Timeout += 10U;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 80082ec:	f103 020a 	add.w	r2, r3, #10
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
          USBH_Delay(10U);
 80082f6:	200a      	movs	r0, #10
 80082f8:	f001 fc57 	bl	8009baa <USBH_Delay>
      break;
 80082fc:	e15d      	b.n	80085ba <USBH_Process+0x3ba>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8008304:	2b00      	cmp	r3, #0
 8008306:	d005      	beq.n	8008314 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800830e:	2104      	movs	r1, #4
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008314:	2064      	movs	r0, #100	; 0x64
 8008316:	f001 fc48 	bl	8009baa <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f001 fb2a 	bl	8009974 <USBH_LL_GetSpeed>
 8008320:	4603      	mov	r3, r0
 8008322:	461a      	mov	r2, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2205      	movs	r2, #5
 800832e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008330:	2100      	movs	r1, #0
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f001 f92c 	bl	8009590 <USBH_AllocPipe>
 8008338:	4603      	mov	r3, r0
 800833a:	461a      	mov	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008340:	2180      	movs	r1, #128	; 0x80
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f001 f924 	bl	8009590 <USBH_AllocPipe>
 8008348:	4603      	mov	r3, r0
 800834a:	461a      	mov	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	7919      	ldrb	r1, [r3, #4]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008364:	b292      	uxth	r2, r2
 8008366:	9202      	str	r2, [sp, #8]
 8008368:	2200      	movs	r2, #0
 800836a:	9201      	str	r2, [sp, #4]
 800836c:	9300      	str	r3, [sp, #0]
 800836e:	4603      	mov	r3, r0
 8008370:	2280      	movs	r2, #128	; 0x80
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f001 f8dd 	bl	8009532 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	7959      	ldrb	r1, [r3, #5]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800838c:	b292      	uxth	r2, r2
 800838e:	9202      	str	r2, [sp, #8]
 8008390:	2200      	movs	r2, #0
 8008392:	9201      	str	r2, [sp, #4]
 8008394:	9300      	str	r3, [sp, #0]
 8008396:	4603      	mov	r3, r0
 8008398:	2200      	movs	r2, #0
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f001 f8c9 	bl	8009532 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80083a0:	e10b      	b.n	80085ba <USBH_Process+0x3ba>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 f90e 	bl	80085c4 <USBH_HandleEnum>
 80083a8:	4603      	mov	r3, r0
 80083aa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80083ac:	7bbb      	ldrb	r3, [r7, #14]
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f040 80f5 	bne.w	80085a0 <USBH_Process+0x3a0>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d103      	bne.n	80083d0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2208      	movs	r2, #8
 80083cc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80083ce:	e0e7      	b.n	80085a0 <USBH_Process+0x3a0>
          phost->gState = HOST_INPUT;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2207      	movs	r2, #7
 80083d4:	701a      	strb	r2, [r3, #0]
      break;
 80083d6:	e0e3      	b.n	80085a0 <USBH_Process+0x3a0>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f000 80e0 	beq.w	80085a4 <USBH_Process+0x3a4>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80083ea:	2101      	movs	r1, #1
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2208      	movs	r2, #8
 80083f4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80083f6:	e0d5      	b.n	80085a4 <USBH_Process+0x3a4>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80083fe:	b29b      	uxth	r3, r3
 8008400:	4619      	mov	r1, r3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fc22 	bl	8008c4c <USBH_SetCfg>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	f040 80cc 	bne.w	80085a8 <USBH_Process+0x3a8>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2209      	movs	r2, #9
 8008414:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008416:	e0c7      	b.n	80085a8 <USBH_Process+0x3a8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800841e:	f003 0320 	and.w	r3, r3, #32
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00b      	beq.n	800843e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008426:	2101      	movs	r1, #1
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fc59 	bl	8008ce0 <USBH_SetFeature>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	f040 80bb 	bne.w	80085ac <USBH_Process+0x3ac>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	220a      	movs	r2, #10
 800843a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800843c:	e0b6      	b.n	80085ac <USBH_Process+0x3ac>
        phost->gState = HOST_CHECK_CLASS;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	220a      	movs	r2, #10
 8008442:	701a      	strb	r2, [r3, #0]
      break;
 8008444:	e0b2      	b.n	80085ac <USBH_Process+0x3ac>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 800844c:	2b00      	cmp	r3, #0
 800844e:	f000 80af 	beq.w	80085b0 <USBH_Process+0x3b0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800845a:	2300      	movs	r3, #0
 800845c:	73fb      	strb	r3, [r7, #15]
 800845e:	e018      	b.n	8008492 <USBH_Process+0x292>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008460:	7bfa      	ldrb	r2, [r7, #15]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f502 7289 	add.w	r2, r2, #274	; 0x112
 8008468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800846c:	791a      	ldrb	r2, [r3, #4]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008474:	429a      	cmp	r2, r3
 8008476:	d109      	bne.n	800848c <USBH_Process+0x28c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008478:	7bfa      	ldrb	r2, [r7, #15]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f502 7289 	add.w	r2, r2, #274	; 0x112
 8008480:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
            break;
 800848a:	e005      	b.n	8008498 <USBH_Process+0x298>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800848c:	7bfb      	ldrb	r3, [r7, #15]
 800848e:	3301      	adds	r3, #1
 8008490:	73fb      	strb	r3, [r7, #15]
 8008492:	7bfb      	ldrb	r3, [r7, #15]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d0e3      	beq.n	8008460 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d016      	beq.n	80084d0 <USBH_Process+0x2d0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	4798      	blx	r3
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d109      	bne.n	80084c8 <USBH_Process+0x2c8>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2206      	movs	r2, #6
 80084b8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80084c0:	2103      	movs	r1, #3
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80084c6:	e073      	b.n	80085b0 <USBH_Process+0x3b0>
            phost->gState = HOST_ABORT_STATE;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	220d      	movs	r2, #13
 80084cc:	701a      	strb	r2, [r3, #0]
      break;
 80084ce:	e06f      	b.n	80085b0 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	220d      	movs	r2, #13
 80084d4:	701a      	strb	r2, [r3, #0]
      break;
 80084d6:	e06b      	b.n	80085b0 <USBH_Process+0x3b0>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d017      	beq.n	8008512 <USBH_Process+0x312>
      {
        status = phost->pActiveClass->Requests(phost);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	4798      	blx	r3
 80084ee:	4603      	mov	r3, r0
 80084f0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80084f2:	7bbb      	ldrb	r3, [r7, #14]
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d103      	bne.n	8008502 <USBH_Process+0x302>
        {
          phost->gState = HOST_CLASS;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	220b      	movs	r2, #11
 80084fe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008500:	e058      	b.n	80085b4 <USBH_Process+0x3b4>
        else if (status == USBH_FAIL)
 8008502:	7bbb      	ldrb	r3, [r7, #14]
 8008504:	b2db      	uxtb	r3, r3
 8008506:	2b02      	cmp	r3, #2
 8008508:	d154      	bne.n	80085b4 <USBH_Process+0x3b4>
          phost->gState = HOST_ABORT_STATE;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	220d      	movs	r2, #13
 800850e:	701a      	strb	r2, [r3, #0]
      break;
 8008510:	e050      	b.n	80085b4 <USBH_Process+0x3b4>
        phost->gState = HOST_ABORT_STATE;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	220d      	movs	r2, #13
 8008516:	701a      	strb	r2, [r3, #0]
      break;
 8008518:	e04c      	b.n	80085b4 <USBH_Process+0x3b4>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008520:	2b00      	cmp	r3, #0
 8008522:	d049      	beq.n	80085b8 <USBH_Process+0x3b8>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800852a:	695b      	ldr	r3, [r3, #20]
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	4798      	blx	r3
      }
      break;
 8008530:	e042      	b.n	80085b8 <USBH_Process+0x3b8>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f7ff fd57 	bl	8007fee <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008546:	2b00      	cmp	r3, #0
 8008548:	d009      	beq.n	800855e <USBH_Process+0x35e>
      {
        phost->pActiveClass->DeInit(phost);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
      }

      if (phost->pUser != NULL)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8008564:	2b00      	cmp	r3, #0
 8008566:	d005      	beq.n	8008574 <USBH_Process+0x374>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800856e:	2105      	movs	r1, #5
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800857a:	b2db      	uxtb	r3, r3
 800857c:	2b01      	cmp	r3, #1
 800857e:	d107      	bne.n	8008590 <USBH_Process+0x390>
      {
        phost->device.is_ReEnumerated = 0U;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f7ff fe29 	bl	80081e0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800858e:	e014      	b.n	80085ba <USBH_Process+0x3ba>
        USBH_LL_Start(phost);
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f001 f9b9 	bl	8009908 <USBH_LL_Start>
      break;
 8008596:	e010      	b.n	80085ba <USBH_Process+0x3ba>

    case HOST_ABORT_STATE:
    default :
      break;
 8008598:	bf00      	nop
 800859a:	e00e      	b.n	80085ba <USBH_Process+0x3ba>
      break;
 800859c:	bf00      	nop
 800859e:	e00c      	b.n	80085ba <USBH_Process+0x3ba>
      break;
 80085a0:	bf00      	nop
 80085a2:	e00a      	b.n	80085ba <USBH_Process+0x3ba>
    break;
 80085a4:	bf00      	nop
 80085a6:	e008      	b.n	80085ba <USBH_Process+0x3ba>
      break;
 80085a8:	bf00      	nop
 80085aa:	e006      	b.n	80085ba <USBH_Process+0x3ba>
      break;
 80085ac:	bf00      	nop
 80085ae:	e004      	b.n	80085ba <USBH_Process+0x3ba>
      break;
 80085b0:	bf00      	nop
 80085b2:	e002      	b.n	80085ba <USBH_Process+0x3ba>
      break;
 80085b4:	bf00      	nop
 80085b6:	e000      	b.n	80085ba <USBH_Process+0x3ba>
      break;
 80085b8:	bf00      	nop
  }
  return USBH_OK;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b088      	sub	sp, #32
 80085c8:	af04      	add	r7, sp, #16
 80085ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80085cc:	2301      	movs	r3, #1
 80085ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80085d0:	2301      	movs	r3, #1
 80085d2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	785b      	ldrb	r3, [r3, #1]
 80085d8:	2b07      	cmp	r3, #7
 80085da:	f200 81c1 	bhi.w	8008960 <USBH_HandleEnum+0x39c>
 80085de:	a201      	add	r2, pc, #4	; (adr r2, 80085e4 <USBH_HandleEnum+0x20>)
 80085e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e4:	08008605 	.word	0x08008605
 80085e8:	080086c3 	.word	0x080086c3
 80085ec:	0800872d 	.word	0x0800872d
 80085f0:	080087bb 	.word	0x080087bb
 80085f4:	08008825 	.word	0x08008825
 80085f8:	08008895 	.word	0x08008895
 80085fc:	080088db 	.word	0x080088db
 8008600:	08008921 	.word	0x08008921
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008604:	2108      	movs	r1, #8
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 fa50 	bl	8008aac <USBH_Get_DevDesc>
 800860c:	4603      	mov	r3, r0
 800860e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008610:	7bbb      	ldrb	r3, [r7, #14]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d130      	bne.n	8008678 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	7919      	ldrb	r1, [r3, #4]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800863a:	b292      	uxth	r2, r2
 800863c:	9202      	str	r2, [sp, #8]
 800863e:	2200      	movs	r2, #0
 8008640:	9201      	str	r2, [sp, #4]
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	4603      	mov	r3, r0
 8008646:	2280      	movs	r2, #128	; 0x80
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 ff72 	bl	8009532 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	7959      	ldrb	r1, [r3, #5]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008662:	b292      	uxth	r2, r2
 8008664:	9202      	str	r2, [sp, #8]
 8008666:	2200      	movs	r2, #0
 8008668:	9201      	str	r2, [sp, #4]
 800866a:	9300      	str	r3, [sp, #0]
 800866c:	4603      	mov	r3, r0
 800866e:	2200      	movs	r2, #0
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 ff5e 	bl	8009532 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008676:	e175      	b.n	8008964 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008678:	7bbb      	ldrb	r3, [r7, #14]
 800867a:	2b03      	cmp	r3, #3
 800867c:	f040 8172 	bne.w	8008964 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008686:	3301      	adds	r3, #1
 8008688:	b2da      	uxtb	r2, r3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008696:	2b03      	cmp	r3, #3
 8008698:	d903      	bls.n	80086a2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	220d      	movs	r2, #13
 800869e:	701a      	strb	r2, [r3, #0]
      break;
 80086a0:	e160      	b.n	8008964 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	795b      	ldrb	r3, [r3, #5]
 80086a6:	4619      	mov	r1, r3
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 ff93 	bl	80095d4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	791b      	ldrb	r3, [r3, #4]
 80086b2:	4619      	mov	r1, r3
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 ff8d 	bl	80095d4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	701a      	strb	r2, [r3, #0]
      break;
 80086c0:	e150      	b.n	8008964 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80086c2:	2112      	movs	r1, #18
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 f9f1 	bl	8008aac <USBH_Get_DevDesc>
 80086ca:	4603      	mov	r3, r0
 80086cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80086ce:	7bbb      	ldrb	r3, [r7, #14]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d103      	bne.n	80086dc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2202      	movs	r2, #2
 80086d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80086da:	e145      	b.n	8008968 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086dc:	7bbb      	ldrb	r3, [r7, #14]
 80086de:	2b03      	cmp	r3, #3
 80086e0:	f040 8142 	bne.w	8008968 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80086ea:	3301      	adds	r3, #1
 80086ec:	b2da      	uxtb	r2, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80086fa:	2b03      	cmp	r3, #3
 80086fc:	d903      	bls.n	8008706 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	220d      	movs	r2, #13
 8008702:	701a      	strb	r2, [r3, #0]
      break;
 8008704:	e130      	b.n	8008968 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	795b      	ldrb	r3, [r3, #5]
 800870a:	4619      	mov	r1, r3
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 ff61 	bl	80095d4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	791b      	ldrb	r3, [r3, #4]
 8008716:	4619      	mov	r1, r3
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 ff5b 	bl	80095d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	701a      	strb	r2, [r3, #0]
      break;
 800872a:	e11d      	b.n	8008968 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800872c:	2101      	movs	r1, #1
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 fa68 	bl	8008c04 <USBH_SetAddress>
 8008734:	4603      	mov	r3, r0
 8008736:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008738:	7bbb      	ldrb	r3, [r7, #14]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d132      	bne.n	80087a4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800873e:	2002      	movs	r0, #2
 8008740:	f001 fa33 	bl	8009baa <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2203      	movs	r2, #3
 8008750:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	7919      	ldrb	r1, [r3, #4]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008766:	b292      	uxth	r2, r2
 8008768:	9202      	str	r2, [sp, #8]
 800876a:	2200      	movs	r2, #0
 800876c:	9201      	str	r2, [sp, #4]
 800876e:	9300      	str	r3, [sp, #0]
 8008770:	4603      	mov	r3, r0
 8008772:	2280      	movs	r2, #128	; 0x80
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 fedc 	bl	8009532 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	7959      	ldrb	r1, [r3, #5]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800878e:	b292      	uxth	r2, r2
 8008790:	9202      	str	r2, [sp, #8]
 8008792:	2200      	movs	r2, #0
 8008794:	9201      	str	r2, [sp, #4]
 8008796:	9300      	str	r3, [sp, #0]
 8008798:	4603      	mov	r3, r0
 800879a:	2200      	movs	r2, #0
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 fec8 	bl	8009532 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80087a2:	e0e3      	b.n	800896c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80087a4:	7bbb      	ldrb	r3, [r7, #14]
 80087a6:	2b03      	cmp	r3, #3
 80087a8:	f040 80e0 	bne.w	800896c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	220d      	movs	r2, #13
 80087b0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	705a      	strb	r2, [r3, #1]
      break;
 80087b8:	e0d8      	b.n	800896c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80087ba:	2109      	movs	r1, #9
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 f99d 	bl	8008afc <USBH_Get_CfgDesc>
 80087c2:	4603      	mov	r3, r0
 80087c4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80087c6:	7bbb      	ldrb	r3, [r7, #14]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d103      	bne.n	80087d4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2204      	movs	r2, #4
 80087d0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80087d2:	e0cd      	b.n	8008970 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80087d4:	7bbb      	ldrb	r3, [r7, #14]
 80087d6:	2b03      	cmp	r3, #3
 80087d8:	f040 80ca 	bne.w	8008970 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80087e2:	3301      	adds	r3, #1
 80087e4:	b2da      	uxtb	r2, r3
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80087f2:	2b03      	cmp	r3, #3
 80087f4:	d903      	bls.n	80087fe <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	220d      	movs	r2, #13
 80087fa:	701a      	strb	r2, [r3, #0]
      break;
 80087fc:	e0b8      	b.n	8008970 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	795b      	ldrb	r3, [r3, #5]
 8008802:	4619      	mov	r1, r3
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 fee5 	bl	80095d4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	791b      	ldrb	r3, [r3, #4]
 800880e:	4619      	mov	r1, r3
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fedf 	bl	80095d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	701a      	strb	r2, [r3, #0]
      break;
 8008822:	e0a5      	b.n	8008970 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800882a:	4619      	mov	r1, r3
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 f965 	bl	8008afc <USBH_Get_CfgDesc>
 8008832:	4603      	mov	r3, r0
 8008834:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008836:	7bbb      	ldrb	r3, [r7, #14]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d103      	bne.n	8008844 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2205      	movs	r2, #5
 8008840:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008842:	e097      	b.n	8008974 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008844:	7bbb      	ldrb	r3, [r7, #14]
 8008846:	2b03      	cmp	r3, #3
 8008848:	f040 8094 	bne.w	8008974 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008852:	3301      	adds	r3, #1
 8008854:	b2da      	uxtb	r2, r3
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008862:	2b03      	cmp	r3, #3
 8008864:	d903      	bls.n	800886e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	220d      	movs	r2, #13
 800886a:	701a      	strb	r2, [r3, #0]
      break;
 800886c:	e082      	b.n	8008974 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	795b      	ldrb	r3, [r3, #5]
 8008872:	4619      	mov	r1, r3
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 fead 	bl	80095d4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	791b      	ldrb	r3, [r3, #4]
 800887e:	4619      	mov	r1, r3
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 fea7 	bl	80095d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	701a      	strb	r2, [r3, #0]
      break;
 8008892:	e06f      	b.n	8008974 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800889a:	2b00      	cmp	r3, #0
 800889c:	d019      	beq.n	80088d2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80088aa:	23ff      	movs	r3, #255	; 0xff
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f949 	bl	8008b44 <USBH_Get_StringDesc>
 80088b2:	4603      	mov	r3, r0
 80088b4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80088b6:	7bbb      	ldrb	r3, [r7, #14]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d103      	bne.n	80088c4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2206      	movs	r2, #6
 80088c0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80088c2:	e059      	b.n	8008978 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80088c4:	7bbb      	ldrb	r3, [r7, #14]
 80088c6:	2b03      	cmp	r3, #3
 80088c8:	d156      	bne.n	8008978 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2206      	movs	r2, #6
 80088ce:	705a      	strb	r2, [r3, #1]
      break;
 80088d0:	e052      	b.n	8008978 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2206      	movs	r2, #6
 80088d6:	705a      	strb	r2, [r3, #1]
      break;
 80088d8:	e04e      	b.n	8008978 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d019      	beq.n	8008918 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80088f0:	23ff      	movs	r3, #255	; 0xff
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 f926 	bl	8008b44 <USBH_Get_StringDesc>
 80088f8:	4603      	mov	r3, r0
 80088fa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80088fc:	7bbb      	ldrb	r3, [r7, #14]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d103      	bne.n	800890a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2207      	movs	r2, #7
 8008906:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008908:	e038      	b.n	800897c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800890a:	7bbb      	ldrb	r3, [r7, #14]
 800890c:	2b03      	cmp	r3, #3
 800890e:	d135      	bne.n	800897c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2207      	movs	r2, #7
 8008914:	705a      	strb	r2, [r3, #1]
      break;
 8008916:	e031      	b.n	800897c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2207      	movs	r2, #7
 800891c:	705a      	strb	r2, [r3, #1]
      break;
 800891e:	e02d      	b.n	800897c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008926:	2b00      	cmp	r3, #0
 8008928:	d017      	beq.n	800895a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008936:	23ff      	movs	r3, #255	; 0xff
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 f903 	bl	8008b44 <USBH_Get_StringDesc>
 800893e:	4603      	mov	r3, r0
 8008940:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008942:	7bbb      	ldrb	r3, [r7, #14]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d102      	bne.n	800894e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008948:	2300      	movs	r3, #0
 800894a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800894c:	e018      	b.n	8008980 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800894e:	7bbb      	ldrb	r3, [r7, #14]
 8008950:	2b03      	cmp	r3, #3
 8008952:	d115      	bne.n	8008980 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008954:	2300      	movs	r3, #0
 8008956:	73fb      	strb	r3, [r7, #15]
      break;
 8008958:	e012      	b.n	8008980 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800895a:	2300      	movs	r3, #0
 800895c:	73fb      	strb	r3, [r7, #15]
      break;
 800895e:	e00f      	b.n	8008980 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008960:	bf00      	nop
 8008962:	e00e      	b.n	8008982 <USBH_HandleEnum+0x3be>
      break;
 8008964:	bf00      	nop
 8008966:	e00c      	b.n	8008982 <USBH_HandleEnum+0x3be>
      break;
 8008968:	bf00      	nop
 800896a:	e00a      	b.n	8008982 <USBH_HandleEnum+0x3be>
      break;
 800896c:	bf00      	nop
 800896e:	e008      	b.n	8008982 <USBH_HandleEnum+0x3be>
      break;
 8008970:	bf00      	nop
 8008972:	e006      	b.n	8008982 <USBH_HandleEnum+0x3be>
      break;
 8008974:	bf00      	nop
 8008976:	e004      	b.n	8008982 <USBH_HandleEnum+0x3be>
      break;
 8008978:	bf00      	nop
 800897a:	e002      	b.n	8008982 <USBH_HandleEnum+0x3be>
      break;
 800897c:	bf00      	nop
 800897e:	e000      	b.n	8008982 <USBH_HandleEnum+0x3be>
      break;
 8008980:	bf00      	nop
  }
  return Status;
 8008982:	7bfb      	ldrb	r3, [r7, #15]
}
 8008984:	4618      	mov	r0, r3
 8008986:	3710      	adds	r7, #16
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	683a      	ldr	r2, [r7, #0]
 800899a:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
}
 800899e:	bf00      	nop
 80089a0:	370c      	adds	r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr

080089aa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b082      	sub	sp, #8
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80089b8:	1c5a      	adds	r2, r3, #1
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
  USBH_HandleSof(phost);
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 f804 	bl	80089ce <USBH_HandleSof>
}
 80089c6:	bf00      	nop
 80089c8:	3708      	adds	r7, #8
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b082      	sub	sp, #8
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	2b0b      	cmp	r3, #11
 80089de:	d10a      	bne.n	80089f6 <USBH_HandleSof+0x28>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d005      	beq.n	80089f6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80089f0:	699b      	ldr	r3, [r3, #24]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	4798      	blx	r3
  }
}
 80089f6:	bf00      	nop
 80089f8:	3708      	adds	r7, #8
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80089fe:	b480      	push	{r7}
 8008a00:	b083      	sub	sp, #12
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8008a0e:	bf00      	nop
}
 8008a10:	370c      	adds	r7, #12
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr

08008a1a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008a1a:	b480      	push	{r7}
 8008a1c:	b083      	sub	sp, #12
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008a2a:	bf00      	nop
}
 8008a2c:	370c      	adds	r7, #12
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr

08008a36 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008a36:	b480      	push	{r7}
 8008a38:	b083      	sub	sp, #12
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2201      	movs	r2, #1
 8008a42:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 ff5a 	bl	800993e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	791b      	ldrb	r3, [r3, #4]
 8008a8e:	4619      	mov	r1, r3
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 fd9f 	bl	80095d4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	795b      	ldrb	r3, [r3, #5]
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 fd99 	bl	80095d4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3708      	adds	r7, #8
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b086      	sub	sp, #24
 8008ab0:	af02      	add	r7, sp, #8
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008abe:	78fb      	ldrb	r3, [r7, #3]
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	9300      	str	r3, [sp, #0]
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008aca:	2100      	movs	r1, #0
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 f864 	bl	8008b9a <USBH_GetDescriptor>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	73fb      	strb	r3, [r7, #15]
 8008ad6:	7bfb      	ldrb	r3, [r7, #15]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d10a      	bne.n	8008af2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008ae8:	78fa      	ldrb	r2, [r7, #3]
 8008aea:	b292      	uxth	r2, r2
 8008aec:	4619      	mov	r1, r3
 8008aee:	f000 f91b 	bl	8008d28 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3710      	adds	r7, #16
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b086      	sub	sp, #24
 8008b00:	af02      	add	r7, sp, #8
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	460b      	mov	r3, r1
 8008b06:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	331c      	adds	r3, #28
 8008b0c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008b0e:	887b      	ldrh	r3, [r7, #2]
 8008b10:	9300      	str	r3, [sp, #0]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b18:	2100      	movs	r1, #0
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f83d 	bl	8008b9a <USBH_GetDescriptor>
 8008b20:	4603      	mov	r3, r0
 8008b22:	72fb      	strb	r3, [r7, #11]
 8008b24:	7afb      	ldrb	r3, [r7, #11]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d107      	bne.n	8008b3a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008b30:	887a      	ldrh	r2, [r7, #2]
 8008b32:	68f9      	ldr	r1, [r7, #12]
 8008b34:	4618      	mov	r0, r3
 8008b36:	f000 f967 	bl	8008e08 <USBH_ParseCfgDesc>
  }

  return status;
 8008b3a:	7afb      	ldrb	r3, [r7, #11]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b088      	sub	sp, #32
 8008b48:	af02      	add	r7, sp, #8
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	607a      	str	r2, [r7, #4]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	460b      	mov	r3, r1
 8008b52:	72fb      	strb	r3, [r7, #11]
 8008b54:	4613      	mov	r3, r2
 8008b56:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008b58:	7afb      	ldrb	r3, [r7, #11]
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008b60:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008b68:	893b      	ldrh	r3, [r7, #8]
 8008b6a:	9300      	str	r3, [sp, #0]
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	2100      	movs	r1, #0
 8008b70:	68f8      	ldr	r0, [r7, #12]
 8008b72:	f000 f812 	bl	8008b9a <USBH_GetDescriptor>
 8008b76:	4603      	mov	r3, r0
 8008b78:	75fb      	strb	r3, [r7, #23]
 8008b7a:	7dfb      	ldrb	r3, [r7, #23]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d107      	bne.n	8008b90 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008b86:	893a      	ldrh	r2, [r7, #8]
 8008b88:	6879      	ldr	r1, [r7, #4]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 fa3a 	bl	8009004 <USBH_ParseStringDesc>
  }

  return status;
 8008b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3718      	adds	r7, #24
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b084      	sub	sp, #16
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	60f8      	str	r0, [r7, #12]
 8008ba2:	607b      	str	r3, [r7, #4]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	72fb      	strb	r3, [r7, #11]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	789b      	ldrb	r3, [r3, #2]
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d11c      	bne.n	8008bee <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008bb4:	7afb      	ldrb	r3, [r7, #11]
 8008bb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2206      	movs	r2, #6
 8008bc4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	893a      	ldrh	r2, [r7, #8]
 8008bca:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008bcc:	893b      	ldrh	r3, [r7, #8]
 8008bce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008bd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bd6:	d104      	bne.n	8008be2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f240 4209 	movw	r2, #1033	; 0x409
 8008bde:	829a      	strh	r2, [r3, #20]
 8008be0:	e002      	b.n	8008be8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2200      	movs	r2, #0
 8008be6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	8b3a      	ldrh	r2, [r7, #24]
 8008bec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008bee:	8b3b      	ldrh	r3, [r7, #24]
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	6879      	ldr	r1, [r7, #4]
 8008bf4:	68f8      	ldr	r0, [r7, #12]
 8008bf6:	f000 fa53 	bl	80090a0 <USBH_CtlReq>
 8008bfa:	4603      	mov	r3, r0
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	789b      	ldrb	r3, [r3, #2]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d10f      	bne.n	8008c38 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2205      	movs	r2, #5
 8008c22:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008c24:	78fb      	ldrb	r3, [r7, #3]
 8008c26:	b29a      	uxth	r2, r3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008c38:	2200      	movs	r2, #0
 8008c3a:	2100      	movs	r1, #0
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 fa2f 	bl	80090a0 <USBH_CtlReq>
 8008c42:	4603      	mov	r3, r0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3708      	adds	r7, #8
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	460b      	mov	r3, r1
 8008c56:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	789b      	ldrb	r3, [r3, #2]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d10e      	bne.n	8008c7e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2209      	movs	r2, #9
 8008c6a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	887a      	ldrh	r2, [r7, #2]
 8008c70:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008c7e:	2200      	movs	r2, #0
 8008c80:	2100      	movs	r1, #0
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 fa0c 	bl	80090a0 <USBH_CtlReq>
 8008c88:	4603      	mov	r3, r0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3708      	adds	r7, #8
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <USBH_SetInterface>:
  * @param  altSetting: Interface value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetInterface(USBH_HandleTypeDef *phost, uint8_t ep_num,
                                     uint8_t altSetting)
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b082      	sub	sp, #8
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	70fb      	strb	r3, [r7, #3]
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	70bb      	strb	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	789b      	ldrb	r3, [r3, #2]
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d110      	bne.n	8008ccc <USBH_SetInterface+0x3a>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2201      	movs	r2, #1
 8008cae:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_INTERFACE;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	220b      	movs	r2, #11
 8008cb4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = altSetting;
 8008cb6:	78bb      	ldrb	r3, [r7, #2]
 8008cb8:	b29a      	uxth	r2, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008cbe:	78fb      	ldrb	r3, [r7, #3]
 8008cc0:	b29a      	uxth	r2, r3
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008ccc:	2200      	movs	r2, #0
 8008cce:	2100      	movs	r1, #0
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 f9e5 	bl	80090a0 <USBH_CtlReq>
 8008cd6:	4603      	mov	r3, r0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3708      	adds	r7, #8
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	460b      	mov	r3, r1
 8008cea:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	789b      	ldrb	r3, [r3, #2]
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d10f      	bne.n	8008d14 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2203      	movs	r2, #3
 8008cfe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008d00:	78fb      	ldrb	r3, [r7, #3]
 8008d02:	b29a      	uxth	r2, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008d14:	2200      	movs	r2, #0
 8008d16:	2100      	movs	r1, #0
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 f9c1 	bl	80090a0 <USBH_CtlReq>
 8008d1e:	4603      	mov	r3, r0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	4613      	mov	r3, r2
 8008d34:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	781a      	ldrb	r2, [r3, #0]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	785a      	ldrb	r2, [r3, #1]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	3302      	adds	r3, #2
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	b29a      	uxth	r2, r3
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	3303      	adds	r3, #3
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	021b      	lsls	r3, r3, #8
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	b29a      	uxth	r2, r3
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	791a      	ldrb	r2, [r3, #4]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	795a      	ldrb	r2, [r3, #5]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	799a      	ldrb	r2, [r3, #6]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	79da      	ldrb	r2, [r3, #7]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008d82:	88fb      	ldrh	r3, [r7, #6]
 8008d84:	2b08      	cmp	r3, #8
 8008d86:	d939      	bls.n	8008dfc <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	3308      	adds	r3, #8
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	3309      	adds	r3, #9
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	021b      	lsls	r3, r3, #8
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	330a      	adds	r3, #10
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	b29a      	uxth	r2, r3
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	330b      	adds	r3, #11
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	021b      	lsls	r3, r3, #8
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	4313      	orrs	r3, r2
 8008dba:	b29a      	uxth	r2, r3
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	330c      	adds	r3, #12
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	b29a      	uxth	r2, r3
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	330d      	adds	r3, #13
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	021b      	lsls	r3, r3, #8
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	b29a      	uxth	r2, r3
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	7b9a      	ldrb	r2, [r3, #14]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	7bda      	ldrb	r2, [r3, #15]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	7c1a      	ldrb	r2, [r3, #16]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	7c5a      	ldrb	r2, [r3, #17]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	745a      	strb	r2, [r3, #17]
  }
}
 8008dfc:	bf00      	nop
 8008dfe:	3714      	adds	r7, #20
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b08a      	sub	sp, #40	; 0x28
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	4613      	mov	r3, r2
 8008e14:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008e20:	2300      	movs	r3, #0
 8008e22:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	781a      	ldrb	r2, [r3, #0]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	785a      	ldrb	r2, [r3, #1]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	3302      	adds	r3, #2
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	b29a      	uxth	r2, r3
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	3303      	adds	r3, #3
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	021b      	lsls	r3, r3, #8
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	791a      	ldrb	r2, [r3, #4]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	795a      	ldrb	r2, [r3, #5]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	799a      	ldrb	r2, [r3, #6]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	79da      	ldrb	r2, [r3, #7]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	7a1a      	ldrb	r2, [r3, #8]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008e7e:	88fb      	ldrh	r3, [r7, #6]
 8008e80:	2b09      	cmp	r3, #9
 8008e82:	d95f      	bls.n	8008f44 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008e84:	2309      	movs	r3, #9
 8008e86:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008e8c:	e051      	b.n	8008f32 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008e8e:	f107 0316 	add.w	r3, r7, #22
 8008e92:	4619      	mov	r1, r3
 8008e94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e96:	f000 f8e8 	bl	800906a <USBH_GetNextDesc>
 8008e9a:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9e:	785b      	ldrb	r3, [r3, #1]
 8008ea0:	2b04      	cmp	r3, #4
 8008ea2:	d146      	bne.n	8008f32 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008ea4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ea8:	221a      	movs	r2, #26
 8008eaa:	fb02 f303 	mul.w	r3, r2, r3
 8008eae:	3308      	adds	r3, #8
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	4413      	add	r3, r2
 8008eb4:	3302      	adds	r3, #2
 8008eb6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008eb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008eba:	69f8      	ldr	r0, [r7, #28]
 8008ebc:	f000 f846 	bl	8008f4c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008eca:	e022      	b.n	8008f12 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008ecc:	f107 0316 	add.w	r3, r7, #22
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ed4:	f000 f8c9 	bl	800906a <USBH_GetNextDesc>
 8008ed8:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008edc:	785b      	ldrb	r3, [r3, #1]
 8008ede:	2b05      	cmp	r3, #5
 8008ee0:	d117      	bne.n	8008f12 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008ee2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ee6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008eea:	3201      	adds	r2, #1
 8008eec:	00d2      	lsls	r2, r2, #3
 8008eee:	211a      	movs	r1, #26
 8008ef0:	fb01 f303 	mul.w	r3, r1, r3
 8008ef4:	4413      	add	r3, r2
 8008ef6:	3308      	adds	r3, #8
 8008ef8:	68fa      	ldr	r2, [r7, #12]
 8008efa:	4413      	add	r3, r2
 8008efc:	3304      	adds	r3, #4
 8008efe:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008f00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f02:	69b8      	ldr	r0, [r7, #24]
 8008f04:	f000 f851 	bl	8008faa <USBH_ParseEPDesc>
            ep_ix++;
 8008f08:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	791b      	ldrb	r3, [r3, #4]
 8008f16:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d204      	bcs.n	8008f28 <USBH_ParseCfgDesc+0x120>
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	885a      	ldrh	r2, [r3, #2]
 8008f22:	8afb      	ldrh	r3, [r7, #22]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d8d1      	bhi.n	8008ecc <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008f28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008f32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f36:	2b09      	cmp	r3, #9
 8008f38:	d804      	bhi.n	8008f44 <USBH_ParseCfgDesc+0x13c>
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	885a      	ldrh	r2, [r3, #2]
 8008f3e:	8afb      	ldrh	r3, [r7, #22]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d8a4      	bhi.n	8008e8e <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008f44:	bf00      	nop
 8008f46:	3728      	adds	r7, #40	; 0x28
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	781a      	ldrb	r2, [r3, #0]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	785a      	ldrb	r2, [r3, #1]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	789a      	ldrb	r2, [r3, #2]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	78da      	ldrb	r2, [r3, #3]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	791a      	ldrb	r2, [r3, #4]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	795a      	ldrb	r2, [r3, #5]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	799a      	ldrb	r2, [r3, #6]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	79da      	ldrb	r2, [r3, #7]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	7a1a      	ldrb	r2, [r3, #8]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	721a      	strb	r2, [r3, #8]
}
 8008f9e:	bf00      	nop
 8008fa0:	370c      	adds	r7, #12
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr

08008faa <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008faa:	b480      	push	{r7}
 8008fac:	b083      	sub	sp, #12
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
 8008fb2:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	781a      	ldrb	r2, [r3, #0]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	785a      	ldrb	r2, [r3, #1]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	789a      	ldrb	r2, [r3, #2]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	78da      	ldrb	r2, [r3, #3]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	3304      	adds	r3, #4
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	3305      	adds	r3, #5
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	021b      	lsls	r3, r3, #8
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	799a      	ldrb	r2, [r3, #6]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	719a      	strb	r2, [r3, #6]
}
 8008ff8:	bf00      	nop
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009004:	b480      	push	{r7}
 8009006:	b087      	sub	sp, #28
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	4613      	mov	r3, r2
 8009010:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	3301      	adds	r3, #1
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	2b03      	cmp	r3, #3
 800901a:	d120      	bne.n	800905e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	1e9a      	subs	r2, r3, #2
 8009022:	88fb      	ldrh	r3, [r7, #6]
 8009024:	4293      	cmp	r3, r2
 8009026:	bf28      	it	cs
 8009028:	4613      	movcs	r3, r2
 800902a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	3302      	adds	r3, #2
 8009030:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009032:	2300      	movs	r3, #0
 8009034:	82fb      	strh	r3, [r7, #22]
 8009036:	e00b      	b.n	8009050 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009038:	8afb      	ldrh	r3, [r7, #22]
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	4413      	add	r3, r2
 800903e:	781a      	ldrb	r2, [r3, #0]
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	3301      	adds	r3, #1
 8009048:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800904a:	8afb      	ldrh	r3, [r7, #22]
 800904c:	3302      	adds	r3, #2
 800904e:	82fb      	strh	r3, [r7, #22]
 8009050:	8afa      	ldrh	r2, [r7, #22]
 8009052:	8abb      	ldrh	r3, [r7, #20]
 8009054:	429a      	cmp	r2, r3
 8009056:	d3ef      	bcc.n	8009038 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	2200      	movs	r2, #0
 800905c:	701a      	strb	r2, [r3, #0]
  }
}
 800905e:	bf00      	nop
 8009060:	371c      	adds	r7, #28
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr

0800906a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800906a:	b480      	push	{r7}
 800906c:	b085      	sub	sp, #20
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
 8009072:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	881a      	ldrh	r2, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	b29b      	uxth	r3, r3
 800907e:	4413      	add	r3, r2
 8009080:	b29a      	uxth	r2, r3
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4413      	add	r3, r2
 8009090:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009092:	68fb      	ldr	r3, [r7, #12]
}
 8009094:	4618      	mov	r0, r3
 8009096:	3714      	adds	r7, #20
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b086      	sub	sp, #24
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	4613      	mov	r3, r2
 80090ac:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80090ae:	2301      	movs	r3, #1
 80090b0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	789b      	ldrb	r3, [r3, #2]
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d002      	beq.n	80090c0 <USBH_CtlReq+0x20>
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d00f      	beq.n	80090de <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80090be:	e027      	b.n	8009110 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	68ba      	ldr	r2, [r7, #8]
 80090c4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	88fa      	ldrh	r2, [r7, #6]
 80090ca:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2201      	movs	r2, #1
 80090d0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2202      	movs	r2, #2
 80090d6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80090d8:	2301      	movs	r3, #1
 80090da:	75fb      	strb	r3, [r7, #23]
      break;
 80090dc:	e018      	b.n	8009110 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80090de:	68f8      	ldr	r0, [r7, #12]
 80090e0:	f000 f81c 	bl	800911c <USBH_HandleControl>
 80090e4:	4603      	mov	r3, r0
 80090e6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80090e8:	7dfb      	ldrb	r3, [r7, #23]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d002      	beq.n	80090f4 <USBH_CtlReq+0x54>
 80090ee:	7dfb      	ldrb	r3, [r7, #23]
 80090f0:	2b03      	cmp	r3, #3
 80090f2:	d106      	bne.n	8009102 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2201      	movs	r2, #1
 80090f8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2200      	movs	r2, #0
 80090fe:	761a      	strb	r2, [r3, #24]
      break;
 8009100:	e005      	b.n	800910e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009102:	7dfb      	ldrb	r3, [r7, #23]
 8009104:	2b02      	cmp	r3, #2
 8009106:	d102      	bne.n	800910e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2201      	movs	r2, #1
 800910c:	709a      	strb	r2, [r3, #2]
      break;
 800910e:	bf00      	nop
  }
  return status;
 8009110:	7dfb      	ldrb	r3, [r7, #23]
}
 8009112:	4618      	mov	r0, r3
 8009114:	3718      	adds	r7, #24
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
	...

0800911c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b086      	sub	sp, #24
 8009120:	af02      	add	r7, sp, #8
 8009122:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009124:	2301      	movs	r3, #1
 8009126:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009128:	2300      	movs	r3, #0
 800912a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	7e1b      	ldrb	r3, [r3, #24]
 8009130:	3b01      	subs	r3, #1
 8009132:	2b0a      	cmp	r3, #10
 8009134:	f200 8156 	bhi.w	80093e4 <USBH_HandleControl+0x2c8>
 8009138:	a201      	add	r2, pc, #4	; (adr r2, 8009140 <USBH_HandleControl+0x24>)
 800913a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800913e:	bf00      	nop
 8009140:	0800916d 	.word	0x0800916d
 8009144:	08009187 	.word	0x08009187
 8009148:	080091f1 	.word	0x080091f1
 800914c:	08009217 	.word	0x08009217
 8009150:	0800924f 	.word	0x0800924f
 8009154:	08009279 	.word	0x08009279
 8009158:	080092cb 	.word	0x080092cb
 800915c:	080092ed 	.word	0x080092ed
 8009160:	08009329 	.word	0x08009329
 8009164:	0800934f 	.word	0x0800934f
 8009168:	0800938d 	.word	0x0800938d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f103 0110 	add.w	r1, r3, #16
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	795b      	ldrb	r3, [r3, #5]
 8009176:	461a      	mov	r2, r3
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 f943 	bl	8009404 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2202      	movs	r2, #2
 8009182:	761a      	strb	r2, [r3, #24]
      break;
 8009184:	e139      	b.n	80093fa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	795b      	ldrb	r3, [r3, #5]
 800918a:	4619      	mov	r1, r3
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 fcb2 	bl	8009af6 <USBH_LL_GetURBState>
 8009192:	4603      	mov	r3, r0
 8009194:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009196:	7bbb      	ldrb	r3, [r7, #14]
 8009198:	2b01      	cmp	r3, #1
 800919a:	d11e      	bne.n	80091da <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	7c1b      	ldrb	r3, [r3, #16]
 80091a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80091a4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	8adb      	ldrh	r3, [r3, #22]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d00a      	beq.n	80091c4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80091ae:	7b7b      	ldrb	r3, [r7, #13]
 80091b0:	2b80      	cmp	r3, #128	; 0x80
 80091b2:	d103      	bne.n	80091bc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2203      	movs	r2, #3
 80091b8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80091ba:	e115      	b.n	80093e8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2205      	movs	r2, #5
 80091c0:	761a      	strb	r2, [r3, #24]
      break;
 80091c2:	e111      	b.n	80093e8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80091c4:	7b7b      	ldrb	r3, [r7, #13]
 80091c6:	2b80      	cmp	r3, #128	; 0x80
 80091c8:	d103      	bne.n	80091d2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2209      	movs	r2, #9
 80091ce:	761a      	strb	r2, [r3, #24]
      break;
 80091d0:	e10a      	b.n	80093e8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2207      	movs	r2, #7
 80091d6:	761a      	strb	r2, [r3, #24]
      break;
 80091d8:	e106      	b.n	80093e8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80091da:	7bbb      	ldrb	r3, [r7, #14]
 80091dc:	2b04      	cmp	r3, #4
 80091de:	d003      	beq.n	80091e8 <USBH_HandleControl+0xcc>
 80091e0:	7bbb      	ldrb	r3, [r7, #14]
 80091e2:	2b02      	cmp	r3, #2
 80091e4:	f040 8100 	bne.w	80093e8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	220b      	movs	r2, #11
 80091ec:	761a      	strb	r2, [r3, #24]
      break;
 80091ee:	e0fb      	b.n	80093e8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80091f6:	b29a      	uxth	r2, r3
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6899      	ldr	r1, [r3, #8]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	899a      	ldrh	r2, [r3, #12]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	791b      	ldrb	r3, [r3, #4]
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 f93a 	bl	8009482 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2204      	movs	r2, #4
 8009212:	761a      	strb	r2, [r3, #24]
      break;
 8009214:	e0f1      	b.n	80093fa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	791b      	ldrb	r3, [r3, #4]
 800921a:	4619      	mov	r1, r3
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 fc6a 	bl	8009af6 <USBH_LL_GetURBState>
 8009222:	4603      	mov	r3, r0
 8009224:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009226:	7bbb      	ldrb	r3, [r7, #14]
 8009228:	2b01      	cmp	r3, #1
 800922a:	d102      	bne.n	8009232 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2209      	movs	r2, #9
 8009230:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009232:	7bbb      	ldrb	r3, [r7, #14]
 8009234:	2b05      	cmp	r3, #5
 8009236:	d102      	bne.n	800923e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009238:	2303      	movs	r3, #3
 800923a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800923c:	e0d6      	b.n	80093ec <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800923e:	7bbb      	ldrb	r3, [r7, #14]
 8009240:	2b04      	cmp	r3, #4
 8009242:	f040 80d3 	bne.w	80093ec <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	220b      	movs	r2, #11
 800924a:	761a      	strb	r2, [r3, #24]
      break;
 800924c:	e0ce      	b.n	80093ec <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6899      	ldr	r1, [r3, #8]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	899a      	ldrh	r2, [r3, #12]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	795b      	ldrb	r3, [r3, #5]
 800925a:	2001      	movs	r0, #1
 800925c:	9000      	str	r0, [sp, #0]
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 f8ea 	bl	8009438 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800926a:	b29a      	uxth	r2, r3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2206      	movs	r2, #6
 8009274:	761a      	strb	r2, [r3, #24]
      break;
 8009276:	e0c0      	b.n	80093fa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	795b      	ldrb	r3, [r3, #5]
 800927c:	4619      	mov	r1, r3
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 fc39 	bl	8009af6 <USBH_LL_GetURBState>
 8009284:	4603      	mov	r3, r0
 8009286:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009288:	7bbb      	ldrb	r3, [r7, #14]
 800928a:	2b01      	cmp	r3, #1
 800928c:	d103      	bne.n	8009296 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2207      	movs	r2, #7
 8009292:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009294:	e0ac      	b.n	80093f0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009296:	7bbb      	ldrb	r3, [r7, #14]
 8009298:	2b05      	cmp	r3, #5
 800929a:	d105      	bne.n	80092a8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	220c      	movs	r2, #12
 80092a0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80092a2:	2303      	movs	r3, #3
 80092a4:	73fb      	strb	r3, [r7, #15]
      break;
 80092a6:	e0a3      	b.n	80093f0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80092a8:	7bbb      	ldrb	r3, [r7, #14]
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d103      	bne.n	80092b6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2205      	movs	r2, #5
 80092b2:	761a      	strb	r2, [r3, #24]
      break;
 80092b4:	e09c      	b.n	80093f0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80092b6:	7bbb      	ldrb	r3, [r7, #14]
 80092b8:	2b04      	cmp	r3, #4
 80092ba:	f040 8099 	bne.w	80093f0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	220b      	movs	r2, #11
 80092c2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80092c4:	2302      	movs	r3, #2
 80092c6:	73fb      	strb	r3, [r7, #15]
      break;
 80092c8:	e092      	b.n	80093f0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	791b      	ldrb	r3, [r3, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	2100      	movs	r1, #0
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 f8d5 	bl	8009482 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80092de:	b29a      	uxth	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2208      	movs	r2, #8
 80092e8:	761a      	strb	r2, [r3, #24]

      break;
 80092ea:	e086      	b.n	80093fa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	791b      	ldrb	r3, [r3, #4]
 80092f0:	4619      	mov	r1, r3
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 fbff 	bl	8009af6 <USBH_LL_GetURBState>
 80092f8:	4603      	mov	r3, r0
 80092fa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80092fc:	7bbb      	ldrb	r3, [r7, #14]
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d105      	bne.n	800930e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	220d      	movs	r2, #13
 8009306:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009308:	2300      	movs	r3, #0
 800930a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800930c:	e072      	b.n	80093f4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800930e:	7bbb      	ldrb	r3, [r7, #14]
 8009310:	2b04      	cmp	r3, #4
 8009312:	d103      	bne.n	800931c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	220b      	movs	r2, #11
 8009318:	761a      	strb	r2, [r3, #24]
      break;
 800931a:	e06b      	b.n	80093f4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800931c:	7bbb      	ldrb	r3, [r7, #14]
 800931e:	2b05      	cmp	r3, #5
 8009320:	d168      	bne.n	80093f4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009322:	2303      	movs	r3, #3
 8009324:	73fb      	strb	r3, [r7, #15]
      break;
 8009326:	e065      	b.n	80093f4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	795b      	ldrb	r3, [r3, #5]
 800932c:	2201      	movs	r2, #1
 800932e:	9200      	str	r2, [sp, #0]
 8009330:	2200      	movs	r2, #0
 8009332:	2100      	movs	r1, #0
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 f87f 	bl	8009438 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8009340:	b29a      	uxth	r2, r3
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	220a      	movs	r2, #10
 800934a:	761a      	strb	r2, [r3, #24]
      break;
 800934c:	e055      	b.n	80093fa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	795b      	ldrb	r3, [r3, #5]
 8009352:	4619      	mov	r1, r3
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 fbce 	bl	8009af6 <USBH_LL_GetURBState>
 800935a:	4603      	mov	r3, r0
 800935c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800935e:	7bbb      	ldrb	r3, [r7, #14]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d105      	bne.n	8009370 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009364:	2300      	movs	r3, #0
 8009366:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	220d      	movs	r2, #13
 800936c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800936e:	e043      	b.n	80093f8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009370:	7bbb      	ldrb	r3, [r7, #14]
 8009372:	2b02      	cmp	r3, #2
 8009374:	d103      	bne.n	800937e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2209      	movs	r2, #9
 800937a:	761a      	strb	r2, [r3, #24]
      break;
 800937c:	e03c      	b.n	80093f8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800937e:	7bbb      	ldrb	r3, [r7, #14]
 8009380:	2b04      	cmp	r3, #4
 8009382:	d139      	bne.n	80093f8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	220b      	movs	r2, #11
 8009388:	761a      	strb	r2, [r3, #24]
      break;
 800938a:	e035      	b.n	80093f8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	7e5b      	ldrb	r3, [r3, #25]
 8009390:	3301      	adds	r3, #1
 8009392:	b2da      	uxtb	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	765a      	strb	r2, [r3, #25]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	7e5b      	ldrb	r3, [r3, #25]
 800939c:	2b02      	cmp	r3, #2
 800939e:	d806      	bhi.n	80093ae <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2201      	movs	r2, #1
 80093aa:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80093ac:	e025      	b.n	80093fa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80093b4:	2106      	movs	r1, #6
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	795b      	ldrb	r3, [r3, #5]
 80093c4:	4619      	mov	r1, r3
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f904 	bl	80095d4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	791b      	ldrb	r3, [r3, #4]
 80093d0:	4619      	mov	r1, r3
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 f8fe 	bl	80095d4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80093de:	2302      	movs	r3, #2
 80093e0:	73fb      	strb	r3, [r7, #15]
      break;
 80093e2:	e00a      	b.n	80093fa <USBH_HandleControl+0x2de>

    default:
      break;
 80093e4:	bf00      	nop
 80093e6:	e008      	b.n	80093fa <USBH_HandleControl+0x2de>
      break;
 80093e8:	bf00      	nop
 80093ea:	e006      	b.n	80093fa <USBH_HandleControl+0x2de>
      break;
 80093ec:	bf00      	nop
 80093ee:	e004      	b.n	80093fa <USBH_HandleControl+0x2de>
      break;
 80093f0:	bf00      	nop
 80093f2:	e002      	b.n	80093fa <USBH_HandleControl+0x2de>
      break;
 80093f4:	bf00      	nop
 80093f6:	e000      	b.n	80093fa <USBH_HandleControl+0x2de>
      break;
 80093f8:	bf00      	nop
  }

  return status;
 80093fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3710      	adds	r7, #16
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b088      	sub	sp, #32
 8009408:	af04      	add	r7, sp, #16
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	4613      	mov	r3, r2
 8009410:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009412:	79f9      	ldrb	r1, [r7, #7]
 8009414:	2300      	movs	r3, #0
 8009416:	9303      	str	r3, [sp, #12]
 8009418:	2308      	movs	r3, #8
 800941a:	9302      	str	r3, [sp, #8]
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	9301      	str	r3, [sp, #4]
 8009420:	2300      	movs	r3, #0
 8009422:	9300      	str	r3, [sp, #0]
 8009424:	2300      	movs	r3, #0
 8009426:	2200      	movs	r2, #0
 8009428:	68f8      	ldr	r0, [r7, #12]
 800942a:	f000 fb33 	bl	8009a94 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800942e:	2300      	movs	r3, #0
}
 8009430:	4618      	mov	r0, r3
 8009432:	3710      	adds	r7, #16
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b088      	sub	sp, #32
 800943c:	af04      	add	r7, sp, #16
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	4611      	mov	r1, r2
 8009444:	461a      	mov	r2, r3
 8009446:	460b      	mov	r3, r1
 8009448:	80fb      	strh	r3, [r7, #6]
 800944a:	4613      	mov	r3, r2
 800944c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009454:	2b00      	cmp	r3, #0
 8009456:	d001      	beq.n	800945c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009458:	2300      	movs	r3, #0
 800945a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800945c:	7979      	ldrb	r1, [r7, #5]
 800945e:	7e3b      	ldrb	r3, [r7, #24]
 8009460:	9303      	str	r3, [sp, #12]
 8009462:	88fb      	ldrh	r3, [r7, #6]
 8009464:	9302      	str	r3, [sp, #8]
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	9301      	str	r3, [sp, #4]
 800946a:	2301      	movs	r3, #1
 800946c:	9300      	str	r3, [sp, #0]
 800946e:	2300      	movs	r3, #0
 8009470:	2200      	movs	r2, #0
 8009472:	68f8      	ldr	r0, [r7, #12]
 8009474:	f000 fb0e 	bl	8009a94 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b088      	sub	sp, #32
 8009486:	af04      	add	r7, sp, #16
 8009488:	60f8      	str	r0, [r7, #12]
 800948a:	60b9      	str	r1, [r7, #8]
 800948c:	4611      	mov	r1, r2
 800948e:	461a      	mov	r2, r3
 8009490:	460b      	mov	r3, r1
 8009492:	80fb      	strh	r3, [r7, #6]
 8009494:	4613      	mov	r3, r2
 8009496:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009498:	7979      	ldrb	r1, [r7, #5]
 800949a:	2300      	movs	r3, #0
 800949c:	9303      	str	r3, [sp, #12]
 800949e:	88fb      	ldrh	r3, [r7, #6]
 80094a0:	9302      	str	r3, [sp, #8]
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	9301      	str	r3, [sp, #4]
 80094a6:	2301      	movs	r3, #1
 80094a8:	9300      	str	r3, [sp, #0]
 80094aa:	2300      	movs	r3, #0
 80094ac:	2201      	movs	r2, #1
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	f000 faf0 	bl	8009a94 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80094b4:	2300      	movs	r3, #0

}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}

080094be <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 80094be:	b580      	push	{r7, lr}
 80094c0:	b088      	sub	sp, #32
 80094c2:	af04      	add	r7, sp, #16
 80094c4:	60f8      	str	r0, [r7, #12]
 80094c6:	60b9      	str	r1, [r7, #8]
 80094c8:	4611      	mov	r1, r2
 80094ca:	461a      	mov	r2, r3
 80094cc:	460b      	mov	r3, r1
 80094ce:	71fb      	strb	r3, [r7, #7]
 80094d0:	4613      	mov	r3, r2
 80094d2:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80094d4:	79fb      	ldrb	r3, [r7, #7]
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	79b9      	ldrb	r1, [r7, #6]
 80094da:	2200      	movs	r2, #0
 80094dc:	9203      	str	r2, [sp, #12]
 80094de:	9302      	str	r3, [sp, #8]
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	9301      	str	r3, [sp, #4]
 80094e4:	2301      	movs	r3, #1
 80094e6:	9300      	str	r3, [sp, #0]
 80094e8:	2303      	movs	r3, #3
 80094ea:	2201      	movs	r2, #1
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f000 fad1 	bl	8009a94 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3710      	adds	r7, #16
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <USBH_IsocSendData>:
  */
USBH_StatusTypeDef USBH_IsocSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint32_t length,
                                     uint8_t pipe_num)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b088      	sub	sp, #32
 8009500:	af04      	add	r7, sp, #16
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	607a      	str	r2, [r7, #4]
 8009508:	70fb      	strb	r3, [r7, #3]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	b29b      	uxth	r3, r3
 800950e:	78f9      	ldrb	r1, [r7, #3]
 8009510:	2200      	movs	r2, #0
 8009512:	9203      	str	r2, [sp, #12]
 8009514:	9302      	str	r3, [sp, #8]
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	9301      	str	r3, [sp, #4]
 800951a:	2301      	movs	r3, #1
 800951c:	9300      	str	r3, [sp, #0]
 800951e:	2301      	movs	r3, #1
 8009520:	2200      	movs	r2, #0
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	f000 fab6 	bl	8009a94 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3710      	adds	r7, #16
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b086      	sub	sp, #24
 8009536:	af04      	add	r7, sp, #16
 8009538:	6078      	str	r0, [r7, #4]
 800953a:	4608      	mov	r0, r1
 800953c:	4611      	mov	r1, r2
 800953e:	461a      	mov	r2, r3
 8009540:	4603      	mov	r3, r0
 8009542:	70fb      	strb	r3, [r7, #3]
 8009544:	460b      	mov	r3, r1
 8009546:	70bb      	strb	r3, [r7, #2]
 8009548:	4613      	mov	r3, r2
 800954a:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800954c:	7878      	ldrb	r0, [r7, #1]
 800954e:	78ba      	ldrb	r2, [r7, #2]
 8009550:	78f9      	ldrb	r1, [r7, #3]
 8009552:	8b3b      	ldrh	r3, [r7, #24]
 8009554:	9302      	str	r3, [sp, #8]
 8009556:	7d3b      	ldrb	r3, [r7, #20]
 8009558:	9301      	str	r3, [sp, #4]
 800955a:	7c3b      	ldrb	r3, [r7, #16]
 800955c:	9300      	str	r3, [sp, #0]
 800955e:	4603      	mov	r3, r0
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 fa49 	bl	80099f8 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009566:	2300      	movs	r3, #0
}
 8009568:	4618      	mov	r0, r3
 800956a:	3708      	adds	r7, #8
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	460b      	mov	r3, r1
 800957a:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800957c:	78fb      	ldrb	r3, [r7, #3]
 800957e:	4619      	mov	r1, r3
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 fa68 	bl	8009a56 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009586:	2300      	movs	r3, #0
}
 8009588:	4618      	mov	r0, r3
 800958a:	3708      	adds	r7, #8
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	460b      	mov	r3, r1
 800959a:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 f839 	bl	8009614 <USBH_GetFreePipe>
 80095a2:	4603      	mov	r3, r0
 80095a4:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80095a6:	89fb      	ldrh	r3, [r7, #14]
 80095a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d00b      	beq.n	80095c8 <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80095b0:	78fa      	ldrb	r2, [r7, #3]
 80095b2:	89fb      	ldrh	r3, [r7, #14]
 80095b4:	f003 030f 	and.w	r3, r3, #15
 80095b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80095bc:	6879      	ldr	r1, [r7, #4]
 80095be:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	440b      	add	r3, r1
 80095c6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80095c8:	89fb      	ldrh	r3, [r7, #14]
 80095ca:	b2db      	uxtb	r3, r3
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	460b      	mov	r3, r1
 80095de:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80095e0:	78fb      	ldrb	r3, [r7, #3]
 80095e2:	2b0a      	cmp	r3, #10
 80095e4:	d80f      	bhi.n	8009606 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80095e6:	78fb      	ldrb	r3, [r7, #3]
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	4413      	add	r3, r2
 80095f2:	685a      	ldr	r2, [r3, #4]
 80095f4:	78fb      	ldrb	r3, [r7, #3]
 80095f6:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80095fa:	6879      	ldr	r1, [r7, #4]
 80095fc:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	440b      	add	r3, r1
 8009604:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009606:	2300      	movs	r3, #0
}
 8009608:	4618      	mov	r0, r3
 800960a:	370c      	adds	r7, #12
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr

08009614 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009614:	b480      	push	{r7}
 8009616:	b085      	sub	sp, #20
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800961c:	2300      	movs	r3, #0
 800961e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009620:	2300      	movs	r3, #0
 8009622:	73fb      	strb	r3, [r7, #15]
 8009624:	e010      	b.n	8009648 <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009626:	7bfb      	ldrb	r3, [r7, #15]
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	4413      	add	r3, r2
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009638:	2b00      	cmp	r3, #0
 800963a:	d102      	bne.n	8009642 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 800963c:	7bfb      	ldrb	r3, [r7, #15]
 800963e:	b29b      	uxth	r3, r3
 8009640:	e007      	b.n	8009652 <USBH_GetFreePipe+0x3e>
  for (idx = 0U ; idx < 11U ; idx++)
 8009642:	7bfb      	ldrb	r3, [r7, #15]
 8009644:	3301      	adds	r3, #1
 8009646:	73fb      	strb	r3, [r7, #15]
 8009648:	7bfb      	ldrb	r3, [r7, #15]
 800964a:	2b0a      	cmp	r3, #10
 800964c:	d9eb      	bls.n	8009626 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800964e:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009652:	4618      	mov	r0, r3
 8009654:	3714      	adds	r7, #20
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr
	...

08009660 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009664:	2201      	movs	r2, #1
 8009666:	490e      	ldr	r1, [pc, #56]	; (80096a0 <MX_USB_HOST_Init+0x40>)
 8009668:	480e      	ldr	r0, [pc, #56]	; (80096a4 <MX_USB_HOST_Init+0x44>)
 800966a:	f7fe fc86 	bl	8007f7a <USBH_Init>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d001      	beq.n	8009678 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009674:	f7f7 f9ca 	bl	8000a0c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_AUDIO_CLASS) != USBH_OK)
 8009678:	490b      	ldr	r1, [pc, #44]	; (80096a8 <MX_USB_HOST_Init+0x48>)
 800967a:	480a      	ldr	r0, [pc, #40]	; (80096a4 <MX_USB_HOST_Init+0x44>)
 800967c:	f7fe fd0c 	bl	8008098 <USBH_RegisterClass>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d001      	beq.n	800968a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009686:	f7f7 f9c1 	bl	8000a0c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800968a:	4806      	ldr	r0, [pc, #24]	; (80096a4 <MX_USB_HOST_Init+0x44>)
 800968c:	f7fe fda8 	bl	80081e0 <USBH_Start>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d001      	beq.n	800969a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009696:	f7f7 f9b9 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800969a:	bf00      	nop
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	080096c1 	.word	0x080096c1
 80096a4:	2000016c 	.word	0x2000016c
 80096a8:	2000000c 	.word	0x2000000c

080096ac <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80096b0:	4802      	ldr	r0, [pc, #8]	; (80096bc <MX_USB_HOST_Process+0x10>)
 80096b2:	f7fe fda5 	bl	8008200 <USBH_Process>
}
 80096b6:	bf00      	nop
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	2000016c 	.word	0x2000016c

080096c0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	460b      	mov	r3, r1
 80096ca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80096cc:	78fb      	ldrb	r3, [r7, #3]
 80096ce:	3b01      	subs	r3, #1
 80096d0:	2b04      	cmp	r3, #4
 80096d2:	d819      	bhi.n	8009708 <USBH_UserProcess+0x48>
 80096d4:	a201      	add	r2, pc, #4	; (adr r2, 80096dc <USBH_UserProcess+0x1c>)
 80096d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096da:	bf00      	nop
 80096dc:	08009709 	.word	0x08009709
 80096e0:	080096f9 	.word	0x080096f9
 80096e4:	08009709 	.word	0x08009709
 80096e8:	08009701 	.word	0x08009701
 80096ec:	080096f1 	.word	0x080096f1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80096f0:	4b09      	ldr	r3, [pc, #36]	; (8009718 <USBH_UserProcess+0x58>)
 80096f2:	2203      	movs	r2, #3
 80096f4:	701a      	strb	r2, [r3, #0]
  break;
 80096f6:	e008      	b.n	800970a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80096f8:	4b07      	ldr	r3, [pc, #28]	; (8009718 <USBH_UserProcess+0x58>)
 80096fa:	2202      	movs	r2, #2
 80096fc:	701a      	strb	r2, [r3, #0]
  break;
 80096fe:	e004      	b.n	800970a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009700:	4b05      	ldr	r3, [pc, #20]	; (8009718 <USBH_UserProcess+0x58>)
 8009702:	2201      	movs	r2, #1
 8009704:	701a      	strb	r2, [r3, #0]
  break;
 8009706:	e000      	b.n	800970a <USBH_UserProcess+0x4a>

  default:
  break;
 8009708:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800970a:	bf00      	nop
 800970c:	370c      	adds	r7, #12
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr
 8009716:	bf00      	nop
 8009718:	200000b4 	.word	0x200000b4

0800971c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b08a      	sub	sp, #40	; 0x28
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009724:	f107 0314 	add.w	r3, r7, #20
 8009728:	2200      	movs	r2, #0
 800972a:	601a      	str	r2, [r3, #0]
 800972c:	605a      	str	r2, [r3, #4]
 800972e:	609a      	str	r2, [r3, #8]
 8009730:	60da      	str	r2, [r3, #12]
 8009732:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800973c:	d14e      	bne.n	80097dc <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800973e:	4b29      	ldr	r3, [pc, #164]	; (80097e4 <HAL_HCD_MspInit+0xc8>)
 8009740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009742:	4a28      	ldr	r2, [pc, #160]	; (80097e4 <HAL_HCD_MspInit+0xc8>)
 8009744:	f043 0301 	orr.w	r3, r3, #1
 8009748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800974a:	4b26      	ldr	r3, [pc, #152]	; (80097e4 <HAL_HCD_MspInit+0xc8>)
 800974c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800974e:	f003 0301 	and.w	r3, r3, #1
 8009752:	613b      	str	r3, [r7, #16]
 8009754:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8009756:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800975a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800975c:	2302      	movs	r3, #2
 800975e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009760:	2300      	movs	r3, #0
 8009762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009764:	2303      	movs	r3, #3
 8009766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009768:	230a      	movs	r3, #10
 800976a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800976c:	f107 0314 	add.w	r3, r7, #20
 8009770:	4619      	mov	r1, r3
 8009772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009776:	f7f7 fc55 	bl	8001024 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800977a:	4b1a      	ldr	r3, [pc, #104]	; (80097e4 <HAL_HCD_MspInit+0xc8>)
 800977c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800977e:	4a19      	ldr	r2, [pc, #100]	; (80097e4 <HAL_HCD_MspInit+0xc8>)
 8009780:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009786:	4b17      	ldr	r3, [pc, #92]	; (80097e4 <HAL_HCD_MspInit+0xc8>)
 8009788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800978a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800978e:	60fb      	str	r3, [r7, #12]
 8009790:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009792:	4b14      	ldr	r3, [pc, #80]	; (80097e4 <HAL_HCD_MspInit+0xc8>)
 8009794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800979a:	2b00      	cmp	r3, #0
 800979c:	d114      	bne.n	80097c8 <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800979e:	4b11      	ldr	r3, [pc, #68]	; (80097e4 <HAL_HCD_MspInit+0xc8>)
 80097a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097a2:	4a10      	ldr	r2, [pc, #64]	; (80097e4 <HAL_HCD_MspInit+0xc8>)
 80097a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097a8:	6593      	str	r3, [r2, #88]	; 0x58
 80097aa:	4b0e      	ldr	r3, [pc, #56]	; (80097e4 <HAL_HCD_MspInit+0xc8>)
 80097ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097b2:	60bb      	str	r3, [r7, #8]
 80097b4:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80097b6:	f7f9 fb31 	bl	8002e1c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80097ba:	4b0a      	ldr	r3, [pc, #40]	; (80097e4 <HAL_HCD_MspInit+0xc8>)
 80097bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097be:	4a09      	ldr	r2, [pc, #36]	; (80097e4 <HAL_HCD_MspInit+0xc8>)
 80097c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097c4:	6593      	str	r3, [r2, #88]	; 0x58
 80097c6:	e001      	b.n	80097cc <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80097c8:	f7f9 fb28 	bl	8002e1c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80097cc:	2200      	movs	r2, #0
 80097ce:	2100      	movs	r1, #0
 80097d0:	2043      	movs	r0, #67	; 0x43
 80097d2:	f7f7 fbf0 	bl	8000fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80097d6:	2043      	movs	r0, #67	; 0x43
 80097d8:	f7f7 fc09 	bl	8000fee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80097dc:	bf00      	nop
 80097de:	3728      	adds	r7, #40	; 0x28
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	40021000 	.word	0x40021000

080097e8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7ff f8d7 	bl	80089aa <USBH_LL_IncTimer>
}
 80097fc:	bf00      	nop
 80097fe:	3708      	adds	r7, #8
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009812:	4618      	mov	r0, r3
 8009814:	f7ff f90f 	bl	8008a36 <USBH_LL_Connect>
}
 8009818:	bf00      	nop
 800981a:	3708      	adds	r7, #8
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800982e:	4618      	mov	r0, r3
 8009830:	f7ff f918 	bl	8008a64 <USBH_LL_Disconnect>
}
 8009834:	bf00      	nop
 8009836:	3708      	adds	r7, #8
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	460b      	mov	r3, r1
 8009846:	70fb      	strb	r3, [r7, #3]
 8009848:	4613      	mov	r3, r2
 800984a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800984c:	bf00      	nop
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009866:	4618      	mov	r0, r3
 8009868:	f7ff f8c9 	bl	80089fe <USBH_LL_PortEnabled>
}
 800986c:	bf00      	nop
 800986e:	3708      	adds	r7, #8
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009882:	4618      	mov	r0, r3
 8009884:	f7ff f8c9 	bl	8008a1a <USBH_LL_PortDisabled>
}
 8009888:	bf00      	nop
 800988a:	3708      	adds	r7, #8
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d12a      	bne.n	80098f8 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80098a2:	4a18      	ldr	r2, [pc, #96]	; (8009904 <USBH_LL_Init+0x74>)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4a15      	ldr	r2, [pc, #84]	; (8009904 <USBH_LL_Init+0x74>)
 80098ae:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80098b2:	4b14      	ldr	r3, [pc, #80]	; (8009904 <USBH_LL_Init+0x74>)
 80098b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80098b8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 80098ba:	4b12      	ldr	r3, [pc, #72]	; (8009904 <USBH_LL_Init+0x74>)
 80098bc:	220c      	movs	r2, #12
 80098be:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80098c0:	4b10      	ldr	r3, [pc, #64]	; (8009904 <USBH_LL_Init+0x74>)
 80098c2:	2201      	movs	r2, #1
 80098c4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80098c6:	4b0f      	ldr	r3, [pc, #60]	; (8009904 <USBH_LL_Init+0x74>)
 80098c8:	2200      	movs	r2, #0
 80098ca:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80098cc:	4b0d      	ldr	r3, [pc, #52]	; (8009904 <USBH_LL_Init+0x74>)
 80098ce:	2202      	movs	r2, #2
 80098d0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80098d2:	4b0c      	ldr	r3, [pc, #48]	; (8009904 <USBH_LL_Init+0x74>)
 80098d4:	2200      	movs	r2, #0
 80098d6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80098d8:	480a      	ldr	r0, [pc, #40]	; (8009904 <USBH_LL_Init+0x74>)
 80098da:	f7f7 fd67 	bl	80013ac <HAL_HCD_Init>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d001      	beq.n	80098e8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80098e4:	f7f7 f892 	bl	8000a0c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80098e8:	4806      	ldr	r0, [pc, #24]	; (8009904 <USBH_LL_Init+0x74>)
 80098ea:	f7f8 f92b 	bl	8001b44 <HAL_HCD_GetCurrentFrame>
 80098ee:	4603      	mov	r3, r0
 80098f0:	4619      	mov	r1, r3
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f7ff f84a 	bl	800898c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3708      	adds	r7, #8
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	20000614 	.word	0x20000614

08009908 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009910:	2300      	movs	r3, #0
 8009912:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009914:	2300      	movs	r3, #0
 8009916:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800991e:	4618      	mov	r0, r3
 8009920:	f7f8 f8ae 	bl	8001a80 <HAL_HCD_Start>
 8009924:	4603      	mov	r3, r0
 8009926:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009928:	7bfb      	ldrb	r3, [r7, #15]
 800992a:	4618      	mov	r0, r3
 800992c:	f000 f948 	bl	8009bc0 <USBH_Get_USB_Status>
 8009930:	4603      	mov	r3, r0
 8009932:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009934:	7bbb      	ldrb	r3, [r7, #14]
}
 8009936:	4618      	mov	r0, r3
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b084      	sub	sp, #16
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009946:	2300      	movs	r3, #0
 8009948:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800994a:	2300      	movs	r3, #0
 800994c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8009954:	4618      	mov	r0, r3
 8009956:	f7f8 f8b6 	bl	8001ac6 <HAL_HCD_Stop>
 800995a:	4603      	mov	r3, r0
 800995c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800995e:	7bfb      	ldrb	r3, [r7, #15]
 8009960:	4618      	mov	r0, r3
 8009962:	f000 f92d 	bl	8009bc0 <USBH_Get_USB_Status>
 8009966:	4603      	mov	r3, r0
 8009968:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800996a:	7bbb      	ldrb	r3, [r7, #14]
}
 800996c:	4618      	mov	r0, r3
 800996e:	3710      	adds	r7, #16
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800997c:	2301      	movs	r3, #1
 800997e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8009986:	4618      	mov	r0, r3
 8009988:	f7f8 f8ea 	bl	8001b60 <HAL_HCD_GetCurrentSpeed>
 800998c:	4603      	mov	r3, r0
 800998e:	2b02      	cmp	r3, #2
 8009990:	d00c      	beq.n	80099ac <USBH_LL_GetSpeed+0x38>
 8009992:	2b02      	cmp	r3, #2
 8009994:	d80d      	bhi.n	80099b2 <USBH_LL_GetSpeed+0x3e>
 8009996:	2b00      	cmp	r3, #0
 8009998:	d002      	beq.n	80099a0 <USBH_LL_GetSpeed+0x2c>
 800999a:	2b01      	cmp	r3, #1
 800999c:	d003      	beq.n	80099a6 <USBH_LL_GetSpeed+0x32>
 800999e:	e008      	b.n	80099b2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80099a0:	2300      	movs	r3, #0
 80099a2:	73fb      	strb	r3, [r7, #15]
    break;
 80099a4:	e008      	b.n	80099b8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80099a6:	2301      	movs	r3, #1
 80099a8:	73fb      	strb	r3, [r7, #15]
    break;
 80099aa:	e005      	b.n	80099b8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80099ac:	2302      	movs	r3, #2
 80099ae:	73fb      	strb	r3, [r7, #15]
    break;
 80099b0:	e002      	b.n	80099b8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80099b2:	2301      	movs	r3, #1
 80099b4:	73fb      	strb	r3, [r7, #15]
    break;
 80099b6:	bf00      	nop
  }
  return  speed;
 80099b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3710      	adds	r7, #16
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b084      	sub	sp, #16
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099ca:	2300      	movs	r3, #0
 80099cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099ce:	2300      	movs	r3, #0
 80099d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80099d8:	4618      	mov	r0, r3
 80099da:	f7f8 f891 	bl	8001b00 <HAL_HCD_ResetPort>
 80099de:	4603      	mov	r3, r0
 80099e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80099e2:	7bfb      	ldrb	r3, [r7, #15]
 80099e4:	4618      	mov	r0, r3
 80099e6:	f000 f8eb 	bl	8009bc0 <USBH_Get_USB_Status>
 80099ea:	4603      	mov	r3, r0
 80099ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80099f8:	b590      	push	{r4, r7, lr}
 80099fa:	b089      	sub	sp, #36	; 0x24
 80099fc:	af04      	add	r7, sp, #16
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	4608      	mov	r0, r1
 8009a02:	4611      	mov	r1, r2
 8009a04:	461a      	mov	r2, r3
 8009a06:	4603      	mov	r3, r0
 8009a08:	70fb      	strb	r3, [r7, #3]
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	70bb      	strb	r3, [r7, #2]
 8009a0e:	4613      	mov	r3, r2
 8009a10:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a12:	2300      	movs	r3, #0
 8009a14:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a16:	2300      	movs	r3, #0
 8009a18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 8009a20:	787c      	ldrb	r4, [r7, #1]
 8009a22:	78ba      	ldrb	r2, [r7, #2]
 8009a24:	78f9      	ldrb	r1, [r7, #3]
 8009a26:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009a28:	9302      	str	r3, [sp, #8]
 8009a2a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009a2e:	9301      	str	r3, [sp, #4]
 8009a30:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009a34:	9300      	str	r3, [sp, #0]
 8009a36:	4623      	mov	r3, r4
 8009a38:	f7f7 fd1a 	bl	8001470 <HAL_HCD_HC_Init>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009a40:	7bfb      	ldrb	r3, [r7, #15]
 8009a42:	4618      	mov	r0, r3
 8009a44:	f000 f8bc 	bl	8009bc0 <USBH_Get_USB_Status>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3714      	adds	r7, #20
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd90      	pop	{r4, r7, pc}

08009a56 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b084      	sub	sp, #16
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
 8009a5e:	460b      	mov	r3, r1
 8009a60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a62:	2300      	movs	r3, #0
 8009a64:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a66:	2300      	movs	r3, #0
 8009a68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8009a70:	78fa      	ldrb	r2, [r7, #3]
 8009a72:	4611      	mov	r1, r2
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7f7 fd8a 	bl	800158e <HAL_HCD_HC_Halt>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009a7e:	7bfb      	ldrb	r3, [r7, #15]
 8009a80:	4618      	mov	r0, r3
 8009a82:	f000 f89d 	bl	8009bc0 <USBH_Get_USB_Status>
 8009a86:	4603      	mov	r3, r0
 8009a88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3710      	adds	r7, #16
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009a94:	b590      	push	{r4, r7, lr}
 8009a96:	b089      	sub	sp, #36	; 0x24
 8009a98:	af04      	add	r7, sp, #16
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	4608      	mov	r0, r1
 8009a9e:	4611      	mov	r1, r2
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	70fb      	strb	r3, [r7, #3]
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	70bb      	strb	r3, [r7, #2]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 8009abc:	787c      	ldrb	r4, [r7, #1]
 8009abe:	78ba      	ldrb	r2, [r7, #2]
 8009ac0:	78f9      	ldrb	r1, [r7, #3]
 8009ac2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009ac6:	9303      	str	r3, [sp, #12]
 8009ac8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009aca:	9302      	str	r3, [sp, #8]
 8009acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ace:	9301      	str	r3, [sp, #4]
 8009ad0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009ad4:	9300      	str	r3, [sp, #0]
 8009ad6:	4623      	mov	r3, r4
 8009ad8:	f7f7 fd7c 	bl	80015d4 <HAL_HCD_HC_SubmitRequest>
 8009adc:	4603      	mov	r3, r0
 8009ade:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009ae0:	7bfb      	ldrb	r3, [r7, #15]
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f000 f86c 	bl	8009bc0 <USBH_Get_USB_Status>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009aec:	7bbb      	ldrb	r3, [r7, #14]
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3714      	adds	r7, #20
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd90      	pop	{r4, r7, pc}

08009af6 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009af6:	b580      	push	{r7, lr}
 8009af8:	b082      	sub	sp, #8
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
 8009afe:	460b      	mov	r3, r1
 8009b00:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8009b08:	78fa      	ldrb	r2, [r7, #3]
 8009b0a:	4611      	mov	r1, r2
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7f8 f805 	bl	8001b1c <HAL_HCD_HC_GetURBState>
 8009b12:	4603      	mov	r3, r0
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3708      	adds	r7, #8
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	460b      	mov	r3, r1
 8009b26:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d103      	bne.n	8009b3a <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009b32:	78fb      	ldrb	r3, [r7, #3]
 8009b34:	4618      	mov	r0, r3
 8009b36:	f000 f86f 	bl	8009c18 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009b3a:	20c8      	movs	r0, #200	; 0xc8
 8009b3c:	f7f7 f93c 	bl	8000db8 <HAL_Delay>
  return USBH_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3708      	adds	r7, #8
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009b4a:	b480      	push	{r7}
 8009b4c:	b085      	sub	sp, #20
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
 8009b52:	460b      	mov	r3, r1
 8009b54:	70fb      	strb	r3, [r7, #3]
 8009b56:	4613      	mov	r3, r2
 8009b58:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8009b60:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009b62:	78fb      	ldrb	r3, [r7, #3]
 8009b64:	68fa      	ldr	r2, [r7, #12]
 8009b66:	212c      	movs	r1, #44	; 0x2c
 8009b68:	fb01 f303 	mul.w	r3, r1, r3
 8009b6c:	4413      	add	r3, r2
 8009b6e:	333b      	adds	r3, #59	; 0x3b
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d009      	beq.n	8009b8a <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009b76:	78fb      	ldrb	r3, [r7, #3]
 8009b78:	68fa      	ldr	r2, [r7, #12]
 8009b7a:	212c      	movs	r1, #44	; 0x2c
 8009b7c:	fb01 f303 	mul.w	r3, r1, r3
 8009b80:	4413      	add	r3, r2
 8009b82:	3354      	adds	r3, #84	; 0x54
 8009b84:	78ba      	ldrb	r2, [r7, #2]
 8009b86:	701a      	strb	r2, [r3, #0]
 8009b88:	e008      	b.n	8009b9c <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009b8a:	78fb      	ldrb	r3, [r7, #3]
 8009b8c:	68fa      	ldr	r2, [r7, #12]
 8009b8e:	212c      	movs	r1, #44	; 0x2c
 8009b90:	fb01 f303 	mul.w	r3, r1, r3
 8009b94:	4413      	add	r3, r2
 8009b96:	3355      	adds	r3, #85	; 0x55
 8009b98:	78ba      	ldrb	r2, [r7, #2]
 8009b9a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3714      	adds	r7, #20
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr

08009baa <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b082      	sub	sp, #8
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f7f7 f900 	bl	8000db8 <HAL_Delay>
}
 8009bb8:	bf00      	nop
 8009bba:	3708      	adds	r7, #8
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b085      	sub	sp, #20
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009bce:	79fb      	ldrb	r3, [r7, #7]
 8009bd0:	2b03      	cmp	r3, #3
 8009bd2:	d817      	bhi.n	8009c04 <USBH_Get_USB_Status+0x44>
 8009bd4:	a201      	add	r2, pc, #4	; (adr r2, 8009bdc <USBH_Get_USB_Status+0x1c>)
 8009bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bda:	bf00      	nop
 8009bdc:	08009bed 	.word	0x08009bed
 8009be0:	08009bf3 	.word	0x08009bf3
 8009be4:	08009bf9 	.word	0x08009bf9
 8009be8:	08009bff 	.word	0x08009bff
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009bec:	2300      	movs	r3, #0
 8009bee:	73fb      	strb	r3, [r7, #15]
    break;
 8009bf0:	e00b      	b.n	8009c0a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009bf2:	2302      	movs	r3, #2
 8009bf4:	73fb      	strb	r3, [r7, #15]
    break;
 8009bf6:	e008      	b.n	8009c0a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	73fb      	strb	r3, [r7, #15]
    break;
 8009bfc:	e005      	b.n	8009c0a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009bfe:	2302      	movs	r3, #2
 8009c00:	73fb      	strb	r3, [r7, #15]
    break;
 8009c02:	e002      	b.n	8009c0a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009c04:	2302      	movs	r3, #2
 8009c06:	73fb      	strb	r3, [r7, #15]
    break;
 8009c08:	bf00      	nop
  }
  return usb_status;
 8009c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3714      	adds	r7, #20
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	4603      	mov	r3, r0
 8009c20:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009c22:	79fb      	ldrb	r3, [r7, #7]
 8009c24:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009c26:	79fb      	ldrb	r3, [r7, #7]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d102      	bne.n	8009c32 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	73fb      	strb	r3, [r7, #15]
 8009c30:	e001      	b.n	8009c36 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8009c32:	2300      	movs	r3, #0
 8009c34:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
 8009c36:	7bfb      	ldrb	r3, [r7, #15]
 8009c38:	461a      	mov	r2, r3
 8009c3a:	2140      	movs	r1, #64	; 0x40
 8009c3c:	4803      	ldr	r0, [pc, #12]	; (8009c4c <MX_DriverVbusFS+0x34>)
 8009c3e:	f7f7 fb83 	bl	8001348 <HAL_GPIO_WritePin>
}
 8009c42:	bf00      	nop
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	48001800 	.word	0x48001800

08009c50 <__errno>:
 8009c50:	4b01      	ldr	r3, [pc, #4]	; (8009c58 <__errno+0x8>)
 8009c52:	6818      	ldr	r0, [r3, #0]
 8009c54:	4770      	bx	lr
 8009c56:	bf00      	nop
 8009c58:	2000002c 	.word	0x2000002c

08009c5c <__libc_init_array>:
 8009c5c:	b570      	push	{r4, r5, r6, lr}
 8009c5e:	4d0d      	ldr	r5, [pc, #52]	; (8009c94 <__libc_init_array+0x38>)
 8009c60:	4c0d      	ldr	r4, [pc, #52]	; (8009c98 <__libc_init_array+0x3c>)
 8009c62:	1b64      	subs	r4, r4, r5
 8009c64:	10a4      	asrs	r4, r4, #2
 8009c66:	2600      	movs	r6, #0
 8009c68:	42a6      	cmp	r6, r4
 8009c6a:	d109      	bne.n	8009c80 <__libc_init_array+0x24>
 8009c6c:	4d0b      	ldr	r5, [pc, #44]	; (8009c9c <__libc_init_array+0x40>)
 8009c6e:	4c0c      	ldr	r4, [pc, #48]	; (8009ca0 <__libc_init_array+0x44>)
 8009c70:	f000 f8f8 	bl	8009e64 <_init>
 8009c74:	1b64      	subs	r4, r4, r5
 8009c76:	10a4      	asrs	r4, r4, #2
 8009c78:	2600      	movs	r6, #0
 8009c7a:	42a6      	cmp	r6, r4
 8009c7c:	d105      	bne.n	8009c8a <__libc_init_array+0x2e>
 8009c7e:	bd70      	pop	{r4, r5, r6, pc}
 8009c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c84:	4798      	blx	r3
 8009c86:	3601      	adds	r6, #1
 8009c88:	e7ee      	b.n	8009c68 <__libc_init_array+0xc>
 8009c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c8e:	4798      	blx	r3
 8009c90:	3601      	adds	r6, #1
 8009c92:	e7f2      	b.n	8009c7a <__libc_init_array+0x1e>
 8009c94:	08009ed4 	.word	0x08009ed4
 8009c98:	08009ed4 	.word	0x08009ed4
 8009c9c:	08009ed4 	.word	0x08009ed4
 8009ca0:	08009ed8 	.word	0x08009ed8

08009ca4 <malloc>:
 8009ca4:	4b02      	ldr	r3, [pc, #8]	; (8009cb0 <malloc+0xc>)
 8009ca6:	4601      	mov	r1, r0
 8009ca8:	6818      	ldr	r0, [r3, #0]
 8009caa:	f000 b863 	b.w	8009d74 <_malloc_r>
 8009cae:	bf00      	nop
 8009cb0:	2000002c 	.word	0x2000002c

08009cb4 <free>:
 8009cb4:	4b02      	ldr	r3, [pc, #8]	; (8009cc0 <free+0xc>)
 8009cb6:	4601      	mov	r1, r0
 8009cb8:	6818      	ldr	r0, [r3, #0]
 8009cba:	f000 b80b 	b.w	8009cd4 <_free_r>
 8009cbe:	bf00      	nop
 8009cc0:	2000002c 	.word	0x2000002c

08009cc4 <memset>:
 8009cc4:	4402      	add	r2, r0
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d100      	bne.n	8009cce <memset+0xa>
 8009ccc:	4770      	bx	lr
 8009cce:	f803 1b01 	strb.w	r1, [r3], #1
 8009cd2:	e7f9      	b.n	8009cc8 <memset+0x4>

08009cd4 <_free_r>:
 8009cd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cd6:	2900      	cmp	r1, #0
 8009cd8:	d048      	beq.n	8009d6c <_free_r+0x98>
 8009cda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cde:	9001      	str	r0, [sp, #4]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f1a1 0404 	sub.w	r4, r1, #4
 8009ce6:	bfb8      	it	lt
 8009ce8:	18e4      	addlt	r4, r4, r3
 8009cea:	f000 f8ad 	bl	8009e48 <__malloc_lock>
 8009cee:	4a20      	ldr	r2, [pc, #128]	; (8009d70 <_free_r+0x9c>)
 8009cf0:	9801      	ldr	r0, [sp, #4]
 8009cf2:	6813      	ldr	r3, [r2, #0]
 8009cf4:	4615      	mov	r5, r2
 8009cf6:	b933      	cbnz	r3, 8009d06 <_free_r+0x32>
 8009cf8:	6063      	str	r3, [r4, #4]
 8009cfa:	6014      	str	r4, [r2, #0]
 8009cfc:	b003      	add	sp, #12
 8009cfe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d02:	f000 b8a7 	b.w	8009e54 <__malloc_unlock>
 8009d06:	42a3      	cmp	r3, r4
 8009d08:	d90b      	bls.n	8009d22 <_free_r+0x4e>
 8009d0a:	6821      	ldr	r1, [r4, #0]
 8009d0c:	1862      	adds	r2, r4, r1
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	bf04      	itt	eq
 8009d12:	681a      	ldreq	r2, [r3, #0]
 8009d14:	685b      	ldreq	r3, [r3, #4]
 8009d16:	6063      	str	r3, [r4, #4]
 8009d18:	bf04      	itt	eq
 8009d1a:	1852      	addeq	r2, r2, r1
 8009d1c:	6022      	streq	r2, [r4, #0]
 8009d1e:	602c      	str	r4, [r5, #0]
 8009d20:	e7ec      	b.n	8009cfc <_free_r+0x28>
 8009d22:	461a      	mov	r2, r3
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	b10b      	cbz	r3, 8009d2c <_free_r+0x58>
 8009d28:	42a3      	cmp	r3, r4
 8009d2a:	d9fa      	bls.n	8009d22 <_free_r+0x4e>
 8009d2c:	6811      	ldr	r1, [r2, #0]
 8009d2e:	1855      	adds	r5, r2, r1
 8009d30:	42a5      	cmp	r5, r4
 8009d32:	d10b      	bne.n	8009d4c <_free_r+0x78>
 8009d34:	6824      	ldr	r4, [r4, #0]
 8009d36:	4421      	add	r1, r4
 8009d38:	1854      	adds	r4, r2, r1
 8009d3a:	42a3      	cmp	r3, r4
 8009d3c:	6011      	str	r1, [r2, #0]
 8009d3e:	d1dd      	bne.n	8009cfc <_free_r+0x28>
 8009d40:	681c      	ldr	r4, [r3, #0]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	6053      	str	r3, [r2, #4]
 8009d46:	4421      	add	r1, r4
 8009d48:	6011      	str	r1, [r2, #0]
 8009d4a:	e7d7      	b.n	8009cfc <_free_r+0x28>
 8009d4c:	d902      	bls.n	8009d54 <_free_r+0x80>
 8009d4e:	230c      	movs	r3, #12
 8009d50:	6003      	str	r3, [r0, #0]
 8009d52:	e7d3      	b.n	8009cfc <_free_r+0x28>
 8009d54:	6825      	ldr	r5, [r4, #0]
 8009d56:	1961      	adds	r1, r4, r5
 8009d58:	428b      	cmp	r3, r1
 8009d5a:	bf04      	itt	eq
 8009d5c:	6819      	ldreq	r1, [r3, #0]
 8009d5e:	685b      	ldreq	r3, [r3, #4]
 8009d60:	6063      	str	r3, [r4, #4]
 8009d62:	bf04      	itt	eq
 8009d64:	1949      	addeq	r1, r1, r5
 8009d66:	6021      	streq	r1, [r4, #0]
 8009d68:	6054      	str	r4, [r2, #4]
 8009d6a:	e7c7      	b.n	8009cfc <_free_r+0x28>
 8009d6c:	b003      	add	sp, #12
 8009d6e:	bd30      	pop	{r4, r5, pc}
 8009d70:	200000b8 	.word	0x200000b8

08009d74 <_malloc_r>:
 8009d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d76:	1ccd      	adds	r5, r1, #3
 8009d78:	f025 0503 	bic.w	r5, r5, #3
 8009d7c:	3508      	adds	r5, #8
 8009d7e:	2d0c      	cmp	r5, #12
 8009d80:	bf38      	it	cc
 8009d82:	250c      	movcc	r5, #12
 8009d84:	2d00      	cmp	r5, #0
 8009d86:	4606      	mov	r6, r0
 8009d88:	db01      	blt.n	8009d8e <_malloc_r+0x1a>
 8009d8a:	42a9      	cmp	r1, r5
 8009d8c:	d903      	bls.n	8009d96 <_malloc_r+0x22>
 8009d8e:	230c      	movs	r3, #12
 8009d90:	6033      	str	r3, [r6, #0]
 8009d92:	2000      	movs	r0, #0
 8009d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d96:	f000 f857 	bl	8009e48 <__malloc_lock>
 8009d9a:	4921      	ldr	r1, [pc, #132]	; (8009e20 <_malloc_r+0xac>)
 8009d9c:	680a      	ldr	r2, [r1, #0]
 8009d9e:	4614      	mov	r4, r2
 8009da0:	b99c      	cbnz	r4, 8009dca <_malloc_r+0x56>
 8009da2:	4f20      	ldr	r7, [pc, #128]	; (8009e24 <_malloc_r+0xb0>)
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	b923      	cbnz	r3, 8009db2 <_malloc_r+0x3e>
 8009da8:	4621      	mov	r1, r4
 8009daa:	4630      	mov	r0, r6
 8009dac:	f000 f83c 	bl	8009e28 <_sbrk_r>
 8009db0:	6038      	str	r0, [r7, #0]
 8009db2:	4629      	mov	r1, r5
 8009db4:	4630      	mov	r0, r6
 8009db6:	f000 f837 	bl	8009e28 <_sbrk_r>
 8009dba:	1c43      	adds	r3, r0, #1
 8009dbc:	d123      	bne.n	8009e06 <_malloc_r+0x92>
 8009dbe:	230c      	movs	r3, #12
 8009dc0:	6033      	str	r3, [r6, #0]
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	f000 f846 	bl	8009e54 <__malloc_unlock>
 8009dc8:	e7e3      	b.n	8009d92 <_malloc_r+0x1e>
 8009dca:	6823      	ldr	r3, [r4, #0]
 8009dcc:	1b5b      	subs	r3, r3, r5
 8009dce:	d417      	bmi.n	8009e00 <_malloc_r+0x8c>
 8009dd0:	2b0b      	cmp	r3, #11
 8009dd2:	d903      	bls.n	8009ddc <_malloc_r+0x68>
 8009dd4:	6023      	str	r3, [r4, #0]
 8009dd6:	441c      	add	r4, r3
 8009dd8:	6025      	str	r5, [r4, #0]
 8009dda:	e004      	b.n	8009de6 <_malloc_r+0x72>
 8009ddc:	6863      	ldr	r3, [r4, #4]
 8009dde:	42a2      	cmp	r2, r4
 8009de0:	bf0c      	ite	eq
 8009de2:	600b      	streq	r3, [r1, #0]
 8009de4:	6053      	strne	r3, [r2, #4]
 8009de6:	4630      	mov	r0, r6
 8009de8:	f000 f834 	bl	8009e54 <__malloc_unlock>
 8009dec:	f104 000b 	add.w	r0, r4, #11
 8009df0:	1d23      	adds	r3, r4, #4
 8009df2:	f020 0007 	bic.w	r0, r0, #7
 8009df6:	1ac2      	subs	r2, r0, r3
 8009df8:	d0cc      	beq.n	8009d94 <_malloc_r+0x20>
 8009dfa:	1a1b      	subs	r3, r3, r0
 8009dfc:	50a3      	str	r3, [r4, r2]
 8009dfe:	e7c9      	b.n	8009d94 <_malloc_r+0x20>
 8009e00:	4622      	mov	r2, r4
 8009e02:	6864      	ldr	r4, [r4, #4]
 8009e04:	e7cc      	b.n	8009da0 <_malloc_r+0x2c>
 8009e06:	1cc4      	adds	r4, r0, #3
 8009e08:	f024 0403 	bic.w	r4, r4, #3
 8009e0c:	42a0      	cmp	r0, r4
 8009e0e:	d0e3      	beq.n	8009dd8 <_malloc_r+0x64>
 8009e10:	1a21      	subs	r1, r4, r0
 8009e12:	4630      	mov	r0, r6
 8009e14:	f000 f808 	bl	8009e28 <_sbrk_r>
 8009e18:	3001      	adds	r0, #1
 8009e1a:	d1dd      	bne.n	8009dd8 <_malloc_r+0x64>
 8009e1c:	e7cf      	b.n	8009dbe <_malloc_r+0x4a>
 8009e1e:	bf00      	nop
 8009e20:	200000b8 	.word	0x200000b8
 8009e24:	200000bc 	.word	0x200000bc

08009e28 <_sbrk_r>:
 8009e28:	b538      	push	{r3, r4, r5, lr}
 8009e2a:	4d06      	ldr	r5, [pc, #24]	; (8009e44 <_sbrk_r+0x1c>)
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	4604      	mov	r4, r0
 8009e30:	4608      	mov	r0, r1
 8009e32:	602b      	str	r3, [r5, #0]
 8009e34:	f7f6 feba 	bl	8000bac <_sbrk>
 8009e38:	1c43      	adds	r3, r0, #1
 8009e3a:	d102      	bne.n	8009e42 <_sbrk_r+0x1a>
 8009e3c:	682b      	ldr	r3, [r5, #0]
 8009e3e:	b103      	cbz	r3, 8009e42 <_sbrk_r+0x1a>
 8009e40:	6023      	str	r3, [r4, #0]
 8009e42:	bd38      	pop	{r3, r4, r5, pc}
 8009e44:	20000918 	.word	0x20000918

08009e48 <__malloc_lock>:
 8009e48:	4801      	ldr	r0, [pc, #4]	; (8009e50 <__malloc_lock+0x8>)
 8009e4a:	f000 b809 	b.w	8009e60 <__retarget_lock_acquire_recursive>
 8009e4e:	bf00      	nop
 8009e50:	20000920 	.word	0x20000920

08009e54 <__malloc_unlock>:
 8009e54:	4801      	ldr	r0, [pc, #4]	; (8009e5c <__malloc_unlock+0x8>)
 8009e56:	f000 b804 	b.w	8009e62 <__retarget_lock_release_recursive>
 8009e5a:	bf00      	nop
 8009e5c:	20000920 	.word	0x20000920

08009e60 <__retarget_lock_acquire_recursive>:
 8009e60:	4770      	bx	lr

08009e62 <__retarget_lock_release_recursive>:
 8009e62:	4770      	bx	lr

08009e64 <_init>:
 8009e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e66:	bf00      	nop
 8009e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e6a:	bc08      	pop	{r3}
 8009e6c:	469e      	mov	lr, r3
 8009e6e:	4770      	bx	lr

08009e70 <_fini>:
 8009e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e72:	bf00      	nop
 8009e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e76:	bc08      	pop	{r3}
 8009e78:	469e      	mov	lr, r3
 8009e7a:	4770      	bx	lr
