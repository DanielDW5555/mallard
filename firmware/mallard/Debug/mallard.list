
mallard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b620  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800b7e0  0800b7e0  0001b7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8e8  0800b8e8  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  0800b8e8  0800b8e8  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b8e8  0800b8e8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8e8  0800b8e8  0001b8e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8ec  0800b8ec  0001b8ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800b8f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e4  20000090  0800b980  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000874  0800b980  00020874  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002441c  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043e0  00000000  00000000  000444dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001548  00000000  00000000  000488c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013a0  00000000  00000000  00049e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032fdc  00000000  00000000  0004b1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000198ec  00000000  00000000  0007e184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001261d8  00000000  00000000  00097a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001bdc48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060f8  00000000  00000000  001bdc9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000090 	.word	0x20000090
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b7c8 	.word	0x0800b7c8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000094 	.word	0x20000094
 80001fc:	0800b7c8 	.word	0x0800b7c8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <blinky>:
/* USER CODE BEGIN 0 */
// ************************************************* START FUNCTIONS HERE ***************************************

// Blinky!!
void blinky(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
	for(int i = 0; i < 2; i ++)
 80002a6:	2300      	movs	r3, #0
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	e011      	b.n	80002d0 <blinky+0x30>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80002ac:	2180      	movs	r1, #128	; 0x80
 80002ae:	480c      	ldr	r0, [pc, #48]	; (80002e0 <blinky+0x40>)
 80002b0:	f002 f978 	bl	80025a4 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80002b4:	2064      	movs	r0, #100	; 0x64
 80002b6:	f000 fc85 	bl	8000bc4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80002ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002be:	4808      	ldr	r0, [pc, #32]	; (80002e0 <blinky+0x40>)
 80002c0:	f002 f970 	bl	80025a4 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80002c4:	2064      	movs	r0, #100	; 0x64
 80002c6:	f000 fc7d 	bl	8000bc4 <HAL_Delay>
	for(int i = 0; i < 2; i ++)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	3301      	adds	r3, #1
 80002ce:	607b      	str	r3, [r7, #4]
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2b01      	cmp	r3, #1
 80002d4:	ddea      	ble.n	80002ac <blinky+0xc>
	}
}
 80002d6:	bf00      	nop
 80002d8:	bf00      	nop
 80002da:	3708      	adds	r7, #8
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	48000400 	.word	0x48000400

080002e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ea:	f000 fbf6 	bl	8000ada <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ee:	f000 f82d 	bl	800034c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80002f2:	f000 f884 	bl	80003fe <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f6:	f000 f973 	bl	80005e0 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 80002fa:	f009 ffd7 	bl	800a2ac <MX_USB_HOST_Init>
  MX_ADC1_Init();
 80002fe:	f000 f8ad 	bl	800045c <MX_ADC1_Init>
  MX_USART1_Init();
 8000302:	f000 f921 	bl	8000548 <MX_USART1_Init>
  // ************************************************* START BEFORE WHILE CODE HERE ***************************************

  // Bootup Blinkys
  // These are put in place to allow programming before the microcontroller enters its sleep loop, currently its set to wait 5 seconds before entering sleep mode

  printf("System Starting!");
 8000306:	480f      	ldr	r0, [pc, #60]	; (8000344 <main+0x60>)
 8000308:	f00a fbb2 	bl	800aa70 <iprintf>

  blinky();
 800030c:	f7ff ffc8 	bl	80002a0 <blinky>
  HAL_Delay(5000);
 8000310:	f241 3088 	movw	r0, #5000	; 0x1388
 8000314:	f000 fc56 	bl	8000bc4 <HAL_Delay>
  blinky();
 8000318:	f7ff ffc2 	bl	80002a0 <blinky>
  //Assign ADC Variable
  uint16_t ADC_READING = 0;
 800031c:	2300      	movs	r3, #0
 800031e:	80fb      	strh	r3, [r7, #6]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000320:	f009 ffea 	bl	800a2f8 <MX_USB_HOST_Process>
    /* USER CODE BEGIN 3 */


    // ************************************************* START WHILE CODE HERE ***************************************
    //Start ADC Conversion
    HAL_ADC_Start(&hadc1);
 8000324:	4808      	ldr	r0, [pc, #32]	; (8000348 <main+0x64>)
 8000326:	f000 ffb9 	bl	800129c <HAL_ADC_Start>

    //Poll ADC 1 Periferal and Timeout 1ms
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800032a:	f04f 31ff 	mov.w	r1, #4294967295
 800032e:	4806      	ldr	r0, [pc, #24]	; (8000348 <main+0x64>)
 8000330:	f001 f86e 	bl	8001410 <HAL_ADC_PollForConversion>

    //Store ADC Value in ADC_Reading
    ADC_READING = HAL_ADC_GetValue(&hadc1);
 8000334:	4804      	ldr	r0, [pc, #16]	; (8000348 <main+0x64>)
 8000336:	f001 f943 	bl	80015c0 <HAL_ADC_GetValue>
 800033a:	4603      	mov	r3, r0
 800033c:	80fb      	strh	r3, [r7, #6]

    // Enter sleep mode using RTC wakeup functions
    // enterSleepMode(3); // Parameter depicts how long the sleep cycle is (currently its set to 3 seconds)
    blinky();
 800033e:	f7ff ffaf 	bl	80002a0 <blinky>
    MX_USB_HOST_Process();
 8000342:	e7ed      	b.n	8000320 <main+0x3c>
 8000344:	0800b7e0 	.word	0x0800b7e0
 8000348:	200000bc 	.word	0x200000bc

0800034c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b098      	sub	sp, #96	; 0x60
 8000350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000352:	f107 0318 	add.w	r3, r7, #24
 8000356:	2248      	movs	r2, #72	; 0x48
 8000358:	2100      	movs	r1, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f00a fad6 	bl	800a90c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]
 800036c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800036e:	2000      	movs	r0, #0
 8000370:	f003 fcfc 	bl	8003d6c <HAL_PWREx_ControlVoltageScaling>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800037a:	f000 f999 	bl	80006b0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800037e:	2310      	movs	r3, #16
 8000380:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000382:	2301      	movs	r3, #1
 8000384:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000386:	2300      	movs	r3, #0
 8000388:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800038a:	2360      	movs	r3, #96	; 0x60
 800038c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800038e:	2302      	movs	r3, #2
 8000390:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000392:	2301      	movs	r3, #1
 8000394:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000396:	2301      	movs	r3, #1
 8000398:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 60;
 800039a:	233c      	movs	r3, #60	; 0x3c
 800039c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800039e:	2302      	movs	r3, #2
 80003a0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003a2:	2302      	movs	r3, #2
 80003a4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003a6:	2302      	movs	r3, #2
 80003a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003aa:	f107 0318 	add.w	r3, r7, #24
 80003ae:	4618      	mov	r0, r3
 80003b0:	f003 fd90 	bl	8003ed4 <HAL_RCC_OscConfig>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <SystemClock_Config+0x72>
  {
    Error_Handler();
 80003ba:	f000 f979 	bl	80006b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003be:	230f      	movs	r3, #15
 80003c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c2:	2303      	movs	r3, #3
 80003c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c6:	2300      	movs	r3, #0
 80003c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ce:	2300      	movs	r3, #0
 80003d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2105      	movs	r1, #5
 80003d6:	4618      	mov	r0, r3
 80003d8:	f004 fa04 	bl	80047e4 <HAL_RCC_ClockConfig>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003e2:	f000 f965 	bl	80006b0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80003e6:	2200      	movs	r2, #0
 80003e8:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80003ec:	2000      	movs	r0, #0
 80003ee:	f004 fb25 	bl	8004a3c <HAL_RCC_MCOConfig>
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80003f2:	f005 f849 	bl	8005488 <HAL_RCCEx_EnableMSIPLLMode>
}
 80003f6:	bf00      	nop
 80003f8:	3760      	adds	r7, #96	; 0x60
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}

080003fe <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80003fe:	b580      	push	{r7, lr}
 8000400:	b0a6      	sub	sp, #152	; 0x98
 8000402:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000404:	463b      	mov	r3, r7
 8000406:	2298      	movs	r2, #152	; 0x98
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f00a fa7e 	bl	800a90c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8000410:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000414:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000416:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800041a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800041e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000422:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000424:	2301      	movs	r3, #1
 8000426:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000428:	2301      	movs	r3, #1
 800042a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800042c:	2318      	movs	r3, #24
 800042e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000430:	2302      	movs	r3, #2
 8000432:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000434:	2302      	movs	r3, #2
 8000436:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000438:	2302      	movs	r3, #2
 800043a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 800043c:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8000440:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000442:	463b      	mov	r3, r7
 8000444:	4618      	mov	r0, r3
 8000446:	f004 fcb3 	bl	8004db0 <HAL_RCCEx_PeriphCLKConfig>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000450:	f000 f92e 	bl	80006b0 <Error_Handler>
  }
}
 8000454:	bf00      	nop
 8000456:	3798      	adds	r7, #152	; 0x98
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b08a      	sub	sp, #40	; 0x28
 8000460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000462:	f107 031c 	add.w	r3, r7, #28
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	2200      	movs	r2, #0
 8000472:	601a      	str	r2, [r3, #0]
 8000474:	605a      	str	r2, [r3, #4]
 8000476:	609a      	str	r2, [r3, #8]
 8000478:	60da      	str	r2, [r3, #12]
 800047a:	611a      	str	r2, [r3, #16]
 800047c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800047e:	4b2f      	ldr	r3, [pc, #188]	; (800053c <MX_ADC1_Init+0xe0>)
 8000480:	4a2f      	ldr	r2, [pc, #188]	; (8000540 <MX_ADC1_Init+0xe4>)
 8000482:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000484:	4b2d      	ldr	r3, [pc, #180]	; (800053c <MX_ADC1_Init+0xe0>)
 8000486:	2200      	movs	r2, #0
 8000488:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800048a:	4b2c      	ldr	r3, [pc, #176]	; (800053c <MX_ADC1_Init+0xe0>)
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000490:	4b2a      	ldr	r3, [pc, #168]	; (800053c <MX_ADC1_Init+0xe0>)
 8000492:	2200      	movs	r2, #0
 8000494:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000496:	4b29      	ldr	r3, [pc, #164]	; (800053c <MX_ADC1_Init+0xe0>)
 8000498:	2200      	movs	r2, #0
 800049a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800049c:	4b27      	ldr	r3, [pc, #156]	; (800053c <MX_ADC1_Init+0xe0>)
 800049e:	2204      	movs	r2, #4
 80004a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004a2:	4b26      	ldr	r3, [pc, #152]	; (800053c <MX_ADC1_Init+0xe0>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004a8:	4b24      	ldr	r3, [pc, #144]	; (800053c <MX_ADC1_Init+0xe0>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80004ae:	4b23      	ldr	r3, [pc, #140]	; (800053c <MX_ADC1_Init+0xe0>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004b4:	4b21      	ldr	r3, [pc, #132]	; (800053c <MX_ADC1_Init+0xe0>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004bc:	4b1f      	ldr	r3, [pc, #124]	; (800053c <MX_ADC1_Init+0xe0>)
 80004be:	2200      	movs	r2, #0
 80004c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004c2:	4b1e      	ldr	r3, [pc, #120]	; (800053c <MX_ADC1_Init+0xe0>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80004c8:	4b1c      	ldr	r3, [pc, #112]	; (800053c <MX_ADC1_Init+0xe0>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004d0:	4b1a      	ldr	r3, [pc, #104]	; (800053c <MX_ADC1_Init+0xe0>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80004d6:	4b19      	ldr	r3, [pc, #100]	; (800053c <MX_ADC1_Init+0xe0>)
 80004d8:	2200      	movs	r2, #0
 80004da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004de:	4817      	ldr	r0, [pc, #92]	; (800053c <MX_ADC1_Init+0xe0>)
 80004e0:	f000 fd8a 	bl	8000ff8 <HAL_ADC_Init>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80004ea:	f000 f8e1 	bl	80006b0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80004ee:	2300      	movs	r3, #0
 80004f0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80004f2:	f107 031c 	add.w	r3, r7, #28
 80004f6:	4619      	mov	r1, r3
 80004f8:	4810      	ldr	r0, [pc, #64]	; (800053c <MX_ADC1_Init+0xe0>)
 80004fa:	f001 fcf3 	bl	8001ee4 <HAL_ADCEx_MultiModeConfigChannel>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000504:	f000 f8d4 	bl	80006b0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <MX_ADC1_Init+0xe8>)
 800050a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800050c:	2306      	movs	r3, #6
 800050e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000510:	2300      	movs	r3, #0
 8000512:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000514:	237f      	movs	r3, #127	; 0x7f
 8000516:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000518:	2304      	movs	r3, #4
 800051a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	4619      	mov	r1, r3
 8000524:	4805      	ldr	r0, [pc, #20]	; (800053c <MX_ADC1_Init+0xe0>)
 8000526:	f001 f859 	bl	80015dc <HAL_ADC_ConfigChannel>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000530:	f000 f8be 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000534:	bf00      	nop
 8000536:	3728      	adds	r7, #40	; 0x28
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	200000bc 	.word	0x200000bc
 8000540:	50040000 	.word	0x50040000
 8000544:	43210000 	.word	0x43210000

08000548 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 800054c:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <MX_USART1_Init+0x90>)
 800054e:	4a23      	ldr	r2, [pc, #140]	; (80005dc <MX_USART1_Init+0x94>)
 8000550:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8000552:	4b21      	ldr	r3, [pc, #132]	; (80005d8 <MX_USART1_Init+0x90>)
 8000554:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000558:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 800055a:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <MX_USART1_Init+0x90>)
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000560:	4b1d      	ldr	r3, [pc, #116]	; (80005d8 <MX_USART1_Init+0x90>)
 8000562:	2200      	movs	r2, #0
 8000564:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8000566:	4b1c      	ldr	r3, [pc, #112]	; (80005d8 <MX_USART1_Init+0x90>)
 8000568:	2200      	movs	r2, #0
 800056a:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 800056c:	4b1a      	ldr	r3, [pc, #104]	; (80005d8 <MX_USART1_Init+0x90>)
 800056e:	220c      	movs	r2, #12
 8000570:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000572:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <MX_USART1_Init+0x90>)
 8000574:	2200      	movs	r2, #0
 8000576:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8000578:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <MX_USART1_Init+0x90>)
 800057a:	2200      	movs	r2, #0
 800057c:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800057e:	4b16      	ldr	r3, [pc, #88]	; (80005d8 <MX_USART1_Init+0x90>)
 8000580:	2200      	movs	r2, #0
 8000582:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000584:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <MX_USART1_Init+0x90>)
 8000586:	2200      	movs	r2, #0
 8000588:	625a      	str	r2, [r3, #36]	; 0x24
  husart1.SlaveMode = USART_SLAVEMODE_DISABLE;
 800058a:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <MX_USART1_Init+0x90>)
 800058c:	2200      	movs	r2, #0
 800058e:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000590:	4811      	ldr	r0, [pc, #68]	; (80005d8 <MX_USART1_Init+0x90>)
 8000592:	f005 f971 	bl	8005878 <HAL_USART_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_USART1_Init+0x58>
  {
    Error_Handler();
 800059c:	f000 f888 	bl	80006b0 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005a0:	2100      	movs	r1, #0
 80005a2:	480d      	ldr	r0, [pc, #52]	; (80005d8 <MX_USART1_Init+0x90>)
 80005a4:	f005 fd4c 	bl	8006040 <HAL_USARTEx_SetTxFifoThreshold>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 80005ae:	f000 f87f 	bl	80006b0 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005b2:	2100      	movs	r1, #0
 80005b4:	4808      	ldr	r0, [pc, #32]	; (80005d8 <MX_USART1_Init+0x90>)
 80005b6:	f005 fd81 	bl	80060bc <HAL_USARTEx_SetRxFifoThreshold>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 80005c0:	f000 f876 	bl	80006b0 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 80005c4:	4804      	ldr	r0, [pc, #16]	; (80005d8 <MX_USART1_Init+0x90>)
 80005c6:	f005 fd02 	bl	8005fce <HAL_USARTEx_DisableFifoMode>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_USART1_Init+0x8c>
  {
    Error_Handler();
 80005d0:	f000 f86e 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000124 	.word	0x20000124
 80005dc:	40013800 	.word	0x40013800

080005e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f6:	4b2c      	ldr	r3, [pc, #176]	; (80006a8 <MX_GPIO_Init+0xc8>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fa:	4a2b      	ldr	r2, [pc, #172]	; (80006a8 <MX_GPIO_Init+0xc8>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000602:	4b29      	ldr	r3, [pc, #164]	; (80006a8 <MX_GPIO_Init+0xc8>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060e:	4b26      	ldr	r3, [pc, #152]	; (80006a8 <MX_GPIO_Init+0xc8>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	4a25      	ldr	r2, [pc, #148]	; (80006a8 <MX_GPIO_Init+0xc8>)
 8000614:	f043 0302 	orr.w	r3, r3, #2
 8000618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061a:	4b23      	ldr	r3, [pc, #140]	; (80006a8 <MX_GPIO_Init+0xc8>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	f003 0302 	and.w	r3, r3, #2
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000626:	2200      	movs	r2, #0
 8000628:	21f8      	movs	r1, #248	; 0xf8
 800062a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062e:	f001 ffa1 	bl	8002574 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	f243 4101 	movw	r1, #13313	; 0x3401
 8000638:	481c      	ldr	r0, [pc, #112]	; (80006ac <MX_GPIO_Init+0xcc>)
 800063a:	f001 ff9b 	bl	8002574 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800063e:	23f8      	movs	r3, #248	; 0xf8
 8000640:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000642:	2301      	movs	r3, #1
 8000644:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	2300      	movs	r3, #0
 800064c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064e:	f107 030c 	add.w	r3, r7, #12
 8000652:	4619      	mov	r1, r3
 8000654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000658:	f001 fdfa 	bl	8002250 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13;
 800065c:	f243 4301 	movw	r3, #13313	; 0x3401
 8000660:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000662:	2301      	movs	r3, #1
 8000664:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	4619      	mov	r1, r3
 8000674:	480d      	ldr	r0, [pc, #52]	; (80006ac <MX_GPIO_Init+0xcc>)
 8000676:	f001 fdeb 	bl	8002250 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800067a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800067e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000680:	2302      	movs	r3, #2
 8000682:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	4619      	mov	r1, r3
 8000696:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069a:	f001 fdd9 	bl	8002250 <HAL_GPIO_Init>

}
 800069e:	bf00      	nop
 80006a0:	3720      	adds	r7, #32
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000
 80006ac:	48000400 	.word	0x48000400

080006b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b4:	b672      	cpsid	i
}
 80006b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <Error_Handler+0x8>
	...

080006bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <HAL_MspInit+0x44>)
 80006c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006c6:	4a0e      	ldr	r2, [pc, #56]	; (8000700 <HAL_MspInit+0x44>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6613      	str	r3, [r2, #96]	; 0x60
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <HAL_MspInit+0x44>)
 80006d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <HAL_MspInit+0x44>)
 80006dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006de:	4a08      	ldr	r2, [pc, #32]	; (8000700 <HAL_MspInit+0x44>)
 80006e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e4:	6593      	str	r3, [r2, #88]	; 0x58
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <HAL_MspInit+0x44>)
 80006e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000

08000704 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	; 0x28
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <HAL_ADC_MspInit+0xa4>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d13c      	bne.n	80007a0 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000726:	4b21      	ldr	r3, [pc, #132]	; (80007ac <HAL_ADC_MspInit+0xa8>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	4a20      	ldr	r2, [pc, #128]	; (80007ac <HAL_ADC_MspInit+0xa8>)
 800072c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000732:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <HAL_ADC_MspInit+0xa8>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <HAL_ADC_MspInit+0xa8>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a1a      	ldr	r2, [pc, #104]	; (80007ac <HAL_ADC_MspInit+0xa8>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <HAL_ADC_MspInit+0xa8>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <HAL_ADC_MspInit+0xa8>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	4a14      	ldr	r2, [pc, #80]	; (80007ac <HAL_ADC_MspInit+0xa8>)
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <HAL_ADC_MspInit+0xa8>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800076e:	2307      	movs	r3, #7
 8000770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000772:	230b      	movs	r3, #11
 8000774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	4619      	mov	r1, r3
 8000780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000784:	f001 fd64 	bl	8002250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000788:	2302      	movs	r3, #2
 800078a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800078c:	230b      	movs	r3, #11
 800078e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	4619      	mov	r1, r3
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <HAL_ADC_MspInit+0xac>)
 800079c:	f001 fd58 	bl	8002250 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007a0:	bf00      	nop
 80007a2:	3728      	adds	r7, #40	; 0x28
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	50040000 	.word	0x50040000
 80007ac:	40021000 	.word	0x40021000
 80007b0:	48000400 	.word	0x48000400

080007b4 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b0b0      	sub	sp, #192	; 0xc0
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	2298      	movs	r2, #152	; 0x98
 80007d2:	2100      	movs	r1, #0
 80007d4:	4618      	mov	r0, r3
 80007d6:	f00a f899 	bl	800a90c <memset>
  if(husart->Instance==USART1)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a32      	ldr	r2, [pc, #200]	; (80008a8 <HAL_USART_MspInit+0xf4>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d15d      	bne.n	80008a0 <HAL_USART_MspInit+0xec>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80007e4:	2301      	movs	r3, #1
 80007e6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007e8:	2300      	movs	r3, #0
 80007ea:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4618      	mov	r0, r3
 80007f2:	f004 fadd 	bl	8004db0 <HAL_RCCEx_PeriphCLKConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 80007fc:	f7ff ff58 	bl	80006b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000800:	4b2a      	ldr	r3, [pc, #168]	; (80008ac <HAL_USART_MspInit+0xf8>)
 8000802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000804:	4a29      	ldr	r2, [pc, #164]	; (80008ac <HAL_USART_MspInit+0xf8>)
 8000806:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080a:	6613      	str	r3, [r2, #96]	; 0x60
 800080c:	4b27      	ldr	r3, [pc, #156]	; (80008ac <HAL_USART_MspInit+0xf8>)
 800080e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000818:	4b24      	ldr	r3, [pc, #144]	; (80008ac <HAL_USART_MspInit+0xf8>)
 800081a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081c:	4a23      	ldr	r2, [pc, #140]	; (80008ac <HAL_USART_MspInit+0xf8>)
 800081e:	f043 0301 	orr.w	r3, r3, #1
 8000822:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000824:	4b21      	ldr	r3, [pc, #132]	; (80008ac <HAL_USART_MspInit+0xf8>)
 8000826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000828:	f003 0301 	and.w	r3, r3, #1
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000830:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <HAL_USART_MspInit+0xf8>)
 8000832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000834:	4a1d      	ldr	r2, [pc, #116]	; (80008ac <HAL_USART_MspInit+0xf8>)
 8000836:	f043 0302 	orr.w	r3, r3, #2
 800083a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083c:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <HAL_USART_MspInit+0xf8>)
 800083e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000840:	f003 0302 	and.w	r3, r3, #2
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PB5     ------> USART1_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000848:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800084c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085c:	2303      	movs	r3, #3
 800085e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000862:	2307      	movs	r3, #7
 8000864:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800086c:	4619      	mov	r1, r3
 800086e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000872:	f001 fced 	bl	8002250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000876:	2320      	movs	r3, #32
 8000878:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000888:	2303      	movs	r3, #3
 800088a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800088e:	2307      	movs	r3, #7
 8000890:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000894:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000898:	4619      	mov	r1, r3
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <HAL_USART_MspInit+0xfc>)
 800089c:	f001 fcd8 	bl	8002250 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008a0:	bf00      	nop
 80008a2:	37c0      	adds	r7, #192	; 0xc0
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40013800 	.word	0x40013800
 80008ac:	40021000 	.word	0x40021000
 80008b0:	48000400 	.word	0x48000400

080008b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <NMI_Handler+0x4>

080008ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008be:	e7fe      	b.n	80008be <HardFault_Handler+0x4>

080008c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <MemManage_Handler+0x4>

080008c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <BusFault_Handler+0x4>

080008cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <UsageFault_Handler+0x4>

080008d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000900:	f000 f940 	bl	8000b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}

08000908 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <OTG_FS_IRQHandler+0x10>)
 800090e:	f002 f8c9 	bl	8002aa4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000560 	.word	0x20000560

0800091c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	e00a      	b.n	8000944 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800092e:	f3af 8000 	nop.w
 8000932:	4601      	mov	r1, r0
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	60ba      	str	r2, [r7, #8]
 800093a:	b2ca      	uxtb	r2, r1
 800093c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	3301      	adds	r3, #1
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	697a      	ldr	r2, [r7, #20]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	429a      	cmp	r2, r3
 800094a:	dbf0      	blt.n	800092e <_read+0x12>
	}

return len;
 800094c:	687b      	ldr	r3, [r7, #4]
}
 800094e:	4618      	mov	r0, r3
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b086      	sub	sp, #24
 800095a:	af00      	add	r7, sp, #0
 800095c:	60f8      	str	r0, [r7, #12]
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
 8000966:	e009      	b.n	800097c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	1c5a      	adds	r2, r3, #1
 800096c:	60ba      	str	r2, [r7, #8]
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	4618      	mov	r0, r3
 8000972:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	3301      	adds	r3, #1
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	697a      	ldr	r2, [r7, #20]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	429a      	cmp	r2, r3
 8000982:	dbf1      	blt.n	8000968 <_write+0x12>
	}
	return len;
 8000984:	687b      	ldr	r3, [r7, #4]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <_close>:

int _close(int file)
{
 800098e:	b480      	push	{r7}
 8000990:	b083      	sub	sp, #12
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
	return -1;
 8000996:	f04f 33ff 	mov.w	r3, #4294967295
}
 800099a:	4618      	mov	r0, r3
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
 80009ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009b6:	605a      	str	r2, [r3, #4]
	return 0;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <_isatty>:

int _isatty(int file)
{
 80009c6:	b480      	push	{r7}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
	return 1;
 80009ce:	2301      	movs	r3, #1
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
	return 0;
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
	...

080009f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a00:	4a14      	ldr	r2, [pc, #80]	; (8000a54 <_sbrk+0x5c>)
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <_sbrk+0x60>)
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <_sbrk+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d102      	bne.n	8000a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <_sbrk+0x64>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <_sbrk+0x68>)
 8000a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d207      	bcs.n	8000a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a28:	f009 ff28 	bl	800a87c <__errno>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	220c      	movs	r2, #12
 8000a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295
 8000a36:	e009      	b.n	8000a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <_sbrk+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <_sbrk+0x64>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <_sbrk+0x64>)
 8000a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20050000 	.word	0x20050000
 8000a58:	00000400 	.word	0x00000400
 8000a5c:	200000ac 	.word	0x200000ac
 8000a60:	20000878 	.word	0x20000878

08000a64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <SystemInit+0x20>)
 8000a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6e:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <SystemInit+0x20>)
 8000a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a8c:	f7ff ffea 	bl	8000a64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a90:	480c      	ldr	r0, [pc, #48]	; (8000ac4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a92:	490d      	ldr	r1, [pc, #52]	; (8000ac8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a94:	4a0d      	ldr	r2, [pc, #52]	; (8000acc <LoopForever+0xe>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a98:	e002      	b.n	8000aa0 <LoopCopyDataInit>

08000a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9e:	3304      	adds	r3, #4

08000aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa4:	d3f9      	bcc.n	8000a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa6:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aa8:	4c0a      	ldr	r4, [pc, #40]	; (8000ad4 <LoopForever+0x16>)
  movs r3, #0
 8000aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aac:	e001      	b.n	8000ab2 <LoopFillZerobss>

08000aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab0:	3204      	adds	r2, #4

08000ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab4:	d3fb      	bcc.n	8000aae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ab6:	f009 fee7 	bl	800a888 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aba:	f7ff fc13 	bl	80002e4 <main>

08000abe <LoopForever>:

LoopForever:
    b LoopForever
 8000abe:	e7fe      	b.n	8000abe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ac0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000acc:	0800b8f0 	.word	0x0800b8f0
  ldr r2, =_sbss
 8000ad0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000ad4:	20000874 	.word	0x20000874

08000ad8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ad8:	e7fe      	b.n	8000ad8 <ADC1_2_IRQHandler>

08000ada <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae4:	2003      	movs	r0, #3
 8000ae6:	f001 fb71 	bl	80021cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aea:	200f      	movs	r0, #15
 8000aec:	f000 f80e 	bl	8000b0c <HAL_InitTick>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d002      	beq.n	8000afc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	71fb      	strb	r3, [r7, #7]
 8000afa:	e001      	b.n	8000b00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000afc:	f7ff fdde 	bl	80006bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b00:	79fb      	ldrb	r3, [r7, #7]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b14:	2300      	movs	r3, #0
 8000b16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_InitTick+0x6c>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d023      	beq.n	8000b68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b20:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <HAL_InitTick+0x70>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <HAL_InitTick+0x6c>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b36:	4618      	mov	r0, r3
 8000b38:	f001 fb7d 	bl	8002236 <HAL_SYSTICK_Config>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d10f      	bne.n	8000b62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b0f      	cmp	r3, #15
 8000b46:	d809      	bhi.n	8000b5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	f001 fb47 	bl	80021e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b54:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <HAL_InitTick+0x74>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6013      	str	r3, [r2, #0]
 8000b5a:	e007      	b.n	8000b6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	73fb      	strb	r3, [r7, #15]
 8000b60:	e004      	b.n	8000b6c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	73fb      	strb	r3, [r7, #15]
 8000b66:	e001      	b.n	8000b6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000008 	.word	0x20000008
 8000b7c:	20000000 	.word	0x20000000
 8000b80:	20000004 	.word	0x20000004

08000b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_IncTick+0x20>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b96:	6013      	str	r3, [r2, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	20000184 	.word	0x20000184

08000bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <HAL_GetTick+0x14>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	20000184 	.word	0x20000184

08000bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bcc:	f7ff ffee 	bl	8000bac <HAL_GetTick>
 8000bd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bdc:	d005      	beq.n	8000bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <HAL_Delay+0x44>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	461a      	mov	r2, r3
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4413      	add	r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bea:	bf00      	nop
 8000bec:	f7ff ffde 	bl	8000bac <HAL_GetTick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d8f7      	bhi.n	8000bec <HAL_Delay+0x28>
  {
  }
}
 8000bfc:	bf00      	nop
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000008 	.word	0x20000008

08000c0c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	431a      	orrs	r2, r3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	609a      	str	r2, [r3, #8]
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b083      	sub	sp, #12
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
 8000c3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	431a      	orrs	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b087      	sub	sp, #28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
 8000c80:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	3360      	adds	r3, #96	; 0x60
 8000c86:	461a      	mov	r2, r3
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	4413      	add	r3, r2
 8000c8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <LL_ADC_SetOffset+0x44>)
 8000c96:	4013      	ands	r3, r2
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000c9e:	683a      	ldr	r2, [r7, #0]
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000cac:	bf00      	nop
 8000cae:	371c      	adds	r7, #28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	03fff000 	.word	0x03fff000

08000cbc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	3360      	adds	r3, #96	; 0x60
 8000cca:	461a      	mov	r2, r3
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	4413      	add	r3, r2
 8000cd2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b087      	sub	sp, #28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	3360      	adds	r3, #96	; 0x60
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4413      	add	r3, r2
 8000d00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000d12:	bf00      	nop
 8000d14:	371c      	adds	r7, #28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
 8000d26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	695b      	ldr	r3, [r3, #20]
 8000d2c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	431a      	orrs	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	615a      	str	r2, [r3, #20]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d101      	bne.n	8000d5c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e000      	b.n	8000d5e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b087      	sub	sp, #28
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	60f8      	str	r0, [r7, #12]
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	3330      	adds	r3, #48	; 0x30
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	0a1b      	lsrs	r3, r3, #8
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	f003 030c 	and.w	r3, r3, #12
 8000d86:	4413      	add	r3, r2
 8000d88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	f003 031f 	and.w	r3, r3, #31
 8000d94:	211f      	movs	r1, #31
 8000d96:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	0e9b      	lsrs	r3, r3, #26
 8000da2:	f003 011f 	and.w	r1, r3, #31
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	f003 031f 	and.w	r3, r3, #31
 8000dac:	fa01 f303 	lsl.w	r3, r1, r3
 8000db0:	431a      	orrs	r2, r3
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000db6:	bf00      	nop
 8000db8:	371c      	adds	r7, #28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b087      	sub	sp, #28
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	60f8      	str	r0, [r7, #12]
 8000dca:	60b9      	str	r1, [r7, #8]
 8000dcc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	3314      	adds	r3, #20
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	0e5b      	lsrs	r3, r3, #25
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	f003 0304 	and.w	r3, r3, #4
 8000dde:	4413      	add	r3, r2
 8000de0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	0d1b      	lsrs	r3, r3, #20
 8000dea:	f003 031f 	and.w	r3, r3, #31
 8000dee:	2107      	movs	r1, #7
 8000df0:	fa01 f303 	lsl.w	r3, r1, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	401a      	ands	r2, r3
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	0d1b      	lsrs	r3, r3, #20
 8000dfc:	f003 031f 	and.w	r3, r3, #31
 8000e00:	6879      	ldr	r1, [r7, #4]
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	431a      	orrs	r2, r3
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000e0c:	bf00      	nop
 8000e0e:	371c      	adds	r7, #28
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e30:	43db      	mvns	r3, r3
 8000e32:	401a      	ands	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f003 0318 	and.w	r3, r3, #24
 8000e3a:	4908      	ldr	r1, [pc, #32]	; (8000e5c <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e3c:	40d9      	lsrs	r1, r3
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	400b      	ands	r3, r1
 8000e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e46:	431a      	orrs	r2, r3
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000e4e:	bf00      	nop
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	0007ffff 	.word	0x0007ffff

08000e60 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	f003 031f 	and.w	r3, r3, #31
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000ea8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	6093      	str	r3, [r2, #8]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ecc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ed0:	d101      	bne.n	8000ed6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e000      	b.n	8000ed8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000ed6:	2300      	movs	r3, #0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000ef4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ef8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000f20:	d101      	bne.n	8000f26 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f22:	2301      	movs	r3, #1
 8000f24:	e000      	b.n	8000f28 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f26:	2300      	movs	r3, #0
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f48:	f043 0201 	orr.w	r2, r3, #1
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d101      	bne.n	8000f74 <LL_ADC_IsEnabled+0x18>
 8000f70:	2301      	movs	r3, #1
 8000f72:	e000      	b.n	8000f76 <LL_ADC_IsEnabled+0x1a>
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f92:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f96:	f043 0204 	orr.w	r2, r3, #4
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000faa:	b480      	push	{r7}
 8000fac:	b083      	sub	sp, #12
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	d101      	bne.n	8000fc2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e000      	b.n	8000fc4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f003 0308 	and.w	r3, r3, #8
 8000fe0:	2b08      	cmp	r3, #8
 8000fe2:	d101      	bne.n	8000fe8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e000      	b.n	8000fea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001000:	2300      	movs	r3, #0
 8001002:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d101      	bne.n	8001012 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e134      	b.n	800127c <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	691b      	ldr	r3, [r3, #16]
 8001016:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101c:	2b00      	cmp	r3, #0
 800101e:	d109      	bne.n	8001034 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff fb6f 	bl	8000704 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff3f 	bl	8000ebc <LL_ADC_IsDeepPowerDownEnabled>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d004      	beq.n	800104e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff25 	bl	8000e98 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff5a 	bl	8000f0c <LL_ADC_IsInternalRegulatorEnabled>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d115      	bne.n	800108a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ff3e 	bl	8000ee4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001068:	4b86      	ldr	r3, [pc, #536]	; (8001284 <HAL_ADC_Init+0x28c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	099b      	lsrs	r3, r3, #6
 800106e:	4a86      	ldr	r2, [pc, #536]	; (8001288 <HAL_ADC_Init+0x290>)
 8001070:	fba2 2303 	umull	r2, r3, r2, r3
 8001074:	099b      	lsrs	r3, r3, #6
 8001076:	3301      	adds	r3, #1
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800107c:	e002      	b.n	8001084 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	3b01      	subs	r3, #1
 8001082:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1f9      	bne.n	800107e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff ff3c 	bl	8000f0c <LL_ADC_IsInternalRegulatorEnabled>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d10d      	bne.n	80010b6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109e:	f043 0210 	orr.w	r2, r3, #16
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010aa:	f043 0201 	orr.w	r2, r3, #1
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ff75 	bl	8000faa <LL_ADC_REG_IsConversionOngoing>
 80010c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c6:	f003 0310 	and.w	r3, r3, #16
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f040 80cd 	bne.w	800126a <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f040 80c9 	bne.w	800126a <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80010e0:	f043 0202 	orr.w	r2, r3, #2
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff35 	bl	8000f5c <LL_ADC_IsEnabled>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d110      	bne.n	800111a <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80010f8:	4864      	ldr	r0, [pc, #400]	; (800128c <HAL_ADC_Init+0x294>)
 80010fa:	f7ff ff2f 	bl	8000f5c <LL_ADC_IsEnabled>
 80010fe:	4604      	mov	r4, r0
 8001100:	4863      	ldr	r0, [pc, #396]	; (8001290 <HAL_ADC_Init+0x298>)
 8001102:	f7ff ff2b 	bl	8000f5c <LL_ADC_IsEnabled>
 8001106:	4603      	mov	r3, r0
 8001108:	4323      	orrs	r3, r4
 800110a:	2b00      	cmp	r3, #0
 800110c:	d105      	bne.n	800111a <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	4619      	mov	r1, r3
 8001114:	485f      	ldr	r0, [pc, #380]	; (8001294 <HAL_ADC_Init+0x29c>)
 8001116:	f7ff fd79 	bl	8000c0c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	7e5b      	ldrb	r3, [r3, #25]
 800111e:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001124:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800112a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001130:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001138:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d106      	bne.n	8001156 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114c:	3b01      	subs	r3, #1
 800114e:	045b      	lsls	r3, r3, #17
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115a:	2b00      	cmp	r3, #0
 800115c:	d009      	beq.n	8001172 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001162:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	68da      	ldr	r2, [r3, #12]
 8001178:	4b47      	ldr	r3, [pc, #284]	; (8001298 <HAL_ADC_Init+0x2a0>)
 800117a:	4013      	ands	r3, r2
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	6812      	ldr	r2, [r2, #0]
 8001180:	69b9      	ldr	r1, [r7, #24]
 8001182:	430b      	orrs	r3, r1
 8001184:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff0d 	bl	8000faa <LL_ADC_REG_IsConversionOngoing>
 8001190:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff ff1a 	bl	8000fd0 <LL_ADC_INJ_IsConversionOngoing>
 800119c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d140      	bne.n	8001226 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d13d      	bne.n	8001226 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	7e1b      	ldrb	r3, [r3, #24]
 80011b2:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011b4:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80011bc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011cc:	f023 0306 	bic.w	r3, r3, #6
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6812      	ldr	r2, [r2, #0]
 80011d4:	69b9      	ldr	r1, [r7, #24]
 80011d6:	430b      	orrs	r3, r1
 80011d8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d118      	bne.n	8001216 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80011ee:	f023 0304 	bic.w	r3, r3, #4
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80011fa:	4311      	orrs	r1, r2
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001200:	4311      	orrs	r1, r2
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001206:	430a      	orrs	r2, r1
 8001208:	431a      	orrs	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f042 0201 	orr.w	r2, r2, #1
 8001212:	611a      	str	r2, [r3, #16]
 8001214:	e007      	b.n	8001226 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f022 0201 	bic.w	r2, r2, #1
 8001224:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d10c      	bne.n	8001248 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001234:	f023 010f 	bic.w	r1, r3, #15
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69db      	ldr	r3, [r3, #28]
 800123c:	1e5a      	subs	r2, r3, #1
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	430a      	orrs	r2, r1
 8001244:	631a      	str	r2, [r3, #48]	; 0x30
 8001246:	e007      	b.n	8001258 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f022 020f 	bic.w	r2, r2, #15
 8001256:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125c:	f023 0303 	bic.w	r3, r3, #3
 8001260:	f043 0201 	orr.w	r2, r3, #1
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	659a      	str	r2, [r3, #88]	; 0x58
 8001268:	e007      	b.n	800127a <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126e:	f043 0210 	orr.w	r2, r3, #16
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800127a:	7ffb      	ldrb	r3, [r7, #31]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3724      	adds	r7, #36	; 0x24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd90      	pop	{r4, r7, pc}
 8001284:	20000000 	.word	0x20000000
 8001288:	053e2d63 	.word	0x053e2d63
 800128c:	50040000 	.word	0x50040000
 8001290:	50040100 	.word	0x50040100
 8001294:	50040300 	.word	0x50040300
 8001298:	fff0c007 	.word	0xfff0c007

0800129c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80012a4:	4857      	ldr	r0, [pc, #348]	; (8001404 <HAL_ADC_Start+0x168>)
 80012a6:	f7ff fddb 	bl	8000e60 <LL_ADC_GetMultimode>
 80012aa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff fe7a 	bl	8000faa <LL_ADC_REG_IsConversionOngoing>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f040 809c 	bne.w	80013f6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d101      	bne.n	80012cc <HAL_ADC_Start+0x30>
 80012c8:	2302      	movs	r3, #2
 80012ca:	e097      	b.n	80013fc <HAL_ADC_Start+0x160>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2201      	movs	r2, #1
 80012d0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f000 fd7d 	bl	8001dd4 <ADC_Enable>
 80012da:	4603      	mov	r3, r0
 80012dc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80012de:	7dfb      	ldrb	r3, [r7, #23]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f040 8083 	bne.w	80013ec <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80012ee:	f023 0301 	bic.w	r3, r3, #1
 80012f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a42      	ldr	r2, [pc, #264]	; (8001408 <HAL_ADC_Start+0x16c>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d002      	beq.n	800130a <HAL_ADC_Start+0x6e>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	e000      	b.n	800130c <HAL_ADC_Start+0x70>
 800130a:	4b40      	ldr	r3, [pc, #256]	; (800140c <HAL_ADC_Start+0x170>)
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	6812      	ldr	r2, [r2, #0]
 8001310:	4293      	cmp	r3, r2
 8001312:	d002      	beq.n	800131a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d105      	bne.n	8001326 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800132e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001332:	d106      	bne.n	8001342 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001338:	f023 0206 	bic.w	r2, r3, #6
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001340:	e002      	b.n	8001348 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	221c      	movs	r2, #28
 800134e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a2a      	ldr	r2, [pc, #168]	; (8001408 <HAL_ADC_Start+0x16c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d002      	beq.n	8001368 <HAL_ADC_Start+0xcc>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	e000      	b.n	800136a <HAL_ADC_Start+0xce>
 8001368:	4b28      	ldr	r3, [pc, #160]	; (800140c <HAL_ADC_Start+0x170>)
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	6812      	ldr	r2, [r2, #0]
 800136e:	4293      	cmp	r3, r2
 8001370:	d008      	beq.n	8001384 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d005      	beq.n	8001384 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	2b05      	cmp	r3, #5
 800137c:	d002      	beq.n	8001384 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	2b09      	cmp	r3, #9
 8001382:	d114      	bne.n	80013ae <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d007      	beq.n	80013a2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001396:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800139a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fdeb 	bl	8000f82 <LL_ADC_REG_StartConversion>
 80013ac:	e025      	b.n	80013fa <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a12      	ldr	r2, [pc, #72]	; (8001408 <HAL_ADC_Start+0x16c>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d002      	beq.n	80013ca <HAL_ADC_Start+0x12e>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	e000      	b.n	80013cc <HAL_ADC_Start+0x130>
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <HAL_ADC_Start+0x170>)
 80013cc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00f      	beq.n	80013fa <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	659a      	str	r2, [r3, #88]	; 0x58
 80013ea:	e006      	b.n	80013fa <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80013f4:	e001      	b.n	80013fa <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013f6:	2302      	movs	r3, #2
 80013f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80013fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	50040300 	.word	0x50040300
 8001408:	50040100 	.word	0x50040100
 800140c:	50040000 	.word	0x50040000

08001410 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800141a:	4866      	ldr	r0, [pc, #408]	; (80015b4 <HAL_ADC_PollForConversion+0x1a4>)
 800141c:	f7ff fd20 	bl	8000e60 <LL_ADC_GetMultimode>
 8001420:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	2b08      	cmp	r3, #8
 8001428:	d102      	bne.n	8001430 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800142a:	2308      	movs	r3, #8
 800142c:	61fb      	str	r3, [r7, #28]
 800142e:	e02a      	b.n	8001486 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d005      	beq.n	8001442 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	2b05      	cmp	r3, #5
 800143a:	d002      	beq.n	8001442 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	2b09      	cmp	r3, #9
 8001440:	d111      	bne.n	8001466 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	2b00      	cmp	r3, #0
 800144e:	d007      	beq.n	8001460 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001454:	f043 0220 	orr.w	r2, r3, #32
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e0a4      	b.n	80015aa <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001460:	2304      	movs	r3, #4
 8001462:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001464:	e00f      	b.n	8001486 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001466:	4853      	ldr	r0, [pc, #332]	; (80015b4 <HAL_ADC_PollForConversion+0x1a4>)
 8001468:	f7ff fd08 	bl	8000e7c <LL_ADC_GetMultiDMATransfer>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d007      	beq.n	8001482 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001476:	f043 0220 	orr.w	r2, r3, #32
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e093      	b.n	80015aa <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001482:	2304      	movs	r3, #4
 8001484:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001486:	f7ff fb91 	bl	8000bac <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800148c:	e021      	b.n	80014d2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001494:	d01d      	beq.n	80014d2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001496:	f7ff fb89 	bl	8000bac <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d302      	bcc.n	80014ac <HAL_ADC_PollForConversion+0x9c>
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d112      	bne.n	80014d2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	4013      	ands	r3, r2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10b      	bne.n	80014d2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014be:	f043 0204 	orr.w	r2, r3, #4
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e06b      	b.n	80015aa <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	4013      	ands	r3, r2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0d6      	beq.n	800148e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fc27 	bl	8000d44 <LL_ADC_REG_IsTriggerSourceSWStart>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d01c      	beq.n	8001536 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	7e5b      	ldrb	r3, [r3, #25]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d118      	bne.n	8001536 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	2b08      	cmp	r3, #8
 8001510:	d111      	bne.n	8001536 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001516:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001522:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d105      	bne.n	8001536 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152e:	f043 0201 	orr.w	r2, r3, #1
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a1f      	ldr	r2, [pc, #124]	; (80015b8 <HAL_ADC_PollForConversion+0x1a8>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d002      	beq.n	8001546 <HAL_ADC_PollForConversion+0x136>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	e000      	b.n	8001548 <HAL_ADC_PollForConversion+0x138>
 8001546:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <HAL_ADC_PollForConversion+0x1ac>)
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	6812      	ldr	r2, [r2, #0]
 800154c:	4293      	cmp	r3, r2
 800154e:	d008      	beq.n	8001562 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d005      	beq.n	8001562 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	2b05      	cmp	r3, #5
 800155a:	d002      	beq.n	8001562 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	2b09      	cmp	r3, #9
 8001560:	d104      	bne.n	800156c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	61bb      	str	r3, [r7, #24]
 800156a:	e00c      	b.n	8001586 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a11      	ldr	r2, [pc, #68]	; (80015b8 <HAL_ADC_PollForConversion+0x1a8>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d002      	beq.n	800157c <HAL_ADC_PollForConversion+0x16c>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	e000      	b.n	800157e <HAL_ADC_PollForConversion+0x16e>
 800157c:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <HAL_ADC_PollForConversion+0x1ac>)
 800157e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	2b08      	cmp	r3, #8
 800158a:	d104      	bne.n	8001596 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2208      	movs	r2, #8
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	e008      	b.n	80015a8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d103      	bne.n	80015a8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	220c      	movs	r2, #12
 80015a6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3720      	adds	r7, #32
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	50040300 	.word	0x50040300
 80015b8:	50040100 	.word	0x50040100
 80015bc:	50040000 	.word	0x50040000

080015c0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b0b6      	sub	sp, #216	; 0xd8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d101      	bne.n	80015fe <HAL_ADC_ConfigChannel+0x22>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e3d5      	b.n	8001daa <HAL_ADC_ConfigChannel+0x7ce>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fccd 	bl	8000faa <LL_ADC_REG_IsConversionOngoing>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	f040 83ba 	bne.w	8001d8c <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b05      	cmp	r3, #5
 800161e:	d824      	bhi.n	800166a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	3b02      	subs	r3, #2
 8001626:	2b03      	cmp	r3, #3
 8001628:	d81b      	bhi.n	8001662 <HAL_ADC_ConfigChannel+0x86>
 800162a:	a201      	add	r2, pc, #4	; (adr r2, 8001630 <HAL_ADC_ConfigChannel+0x54>)
 800162c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001630:	08001641 	.word	0x08001641
 8001634:	08001649 	.word	0x08001649
 8001638:	08001651 	.word	0x08001651
 800163c:	08001659 	.word	0x08001659
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	220c      	movs	r2, #12
 8001644:	605a      	str	r2, [r3, #4]
          break;
 8001646:	e011      	b.n	800166c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	2212      	movs	r2, #18
 800164c:	605a      	str	r2, [r3, #4]
          break;
 800164e:	e00d      	b.n	800166c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	2218      	movs	r2, #24
 8001654:	605a      	str	r2, [r3, #4]
          break;
 8001656:	e009      	b.n	800166c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800165e:	605a      	str	r2, [r3, #4]
          break;
 8001660:	e004      	b.n	800166c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	2206      	movs	r2, #6
 8001666:	605a      	str	r2, [r3, #4]
          break;
 8001668:	e000      	b.n	800166c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800166a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6818      	ldr	r0, [r3, #0]
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	6859      	ldr	r1, [r3, #4]
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	f7ff fb76 	bl	8000d6a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fc91 	bl	8000faa <LL_ADC_REG_IsConversionOngoing>
 8001688:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fc9d 	bl	8000fd0 <LL_ADC_INJ_IsConversionOngoing>
 8001696:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800169a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f040 81c1 	bne.w	8001a26 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f040 81bc 	bne.w	8001a26 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016b6:	d10f      	bne.n	80016d8 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6818      	ldr	r0, [r3, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2200      	movs	r2, #0
 80016c2:	4619      	mov	r1, r3
 80016c4:	f7ff fb7d 	bl	8000dc2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fb24 	bl	8000d1e <LL_ADC_SetSamplingTimeCommonConfig>
 80016d6:	e00e      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6818      	ldr	r0, [r3, #0]
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	6819      	ldr	r1, [r3, #0]
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	461a      	mov	r2, r3
 80016e6:	f7ff fb6c 	bl	8000dc2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2100      	movs	r1, #0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fb14 	bl	8000d1e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	695a      	ldr	r2, [r3, #20]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	08db      	lsrs	r3, r3, #3
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	2b04      	cmp	r3, #4
 8001716:	d00a      	beq.n	800172e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6818      	ldr	r0, [r3, #0]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	6919      	ldr	r1, [r3, #16]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001728:	f7ff faa4 	bl	8000c74 <LL_ADC_SetOffset>
 800172c:	e17b      	b.n	8001a26 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fac1 	bl	8000cbc <LL_ADC_GetOffsetChannel>
 800173a:	4603      	mov	r3, r0
 800173c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001740:	2b00      	cmp	r3, #0
 8001742:	d10a      	bne.n	800175a <HAL_ADC_ConfigChannel+0x17e>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fab6 	bl	8000cbc <LL_ADC_GetOffsetChannel>
 8001750:	4603      	mov	r3, r0
 8001752:	0e9b      	lsrs	r3, r3, #26
 8001754:	f003 021f 	and.w	r2, r3, #31
 8001758:	e01e      	b.n	8001798 <HAL_ADC_ConfigChannel+0x1bc>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2100      	movs	r1, #0
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff faab 	bl	8000cbc <LL_ADC_GetOffsetChannel>
 8001766:	4603      	mov	r3, r0
 8001768:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001770:	fa93 f3a3 	rbit	r3, r3
 8001774:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001778:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800177c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001780:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001788:	2320      	movs	r3, #32
 800178a:	e004      	b.n	8001796 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800178c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001790:	fab3 f383 	clz	r3, r3
 8001794:	b2db      	uxtb	r3, r3
 8001796:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d105      	bne.n	80017b0 <HAL_ADC_ConfigChannel+0x1d4>
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	0e9b      	lsrs	r3, r3, #26
 80017aa:	f003 031f 	and.w	r3, r3, #31
 80017ae:	e018      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x206>
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80017bc:	fa93 f3a3 	rbit	r3, r3
 80017c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80017c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80017cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80017d4:	2320      	movs	r3, #32
 80017d6:	e004      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80017d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80017dc:	fab3 f383 	clz	r3, r3
 80017e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d106      	bne.n	80017f4 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2200      	movs	r2, #0
 80017ec:	2100      	movs	r1, #0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fa7a 	bl	8000ce8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2101      	movs	r1, #1
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff fa5e 	bl	8000cbc <LL_ADC_GetOffsetChannel>
 8001800:	4603      	mov	r3, r0
 8001802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10a      	bne.n	8001820 <HAL_ADC_ConfigChannel+0x244>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2101      	movs	r1, #1
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fa53 	bl	8000cbc <LL_ADC_GetOffsetChannel>
 8001816:	4603      	mov	r3, r0
 8001818:	0e9b      	lsrs	r3, r3, #26
 800181a:	f003 021f 	and.w	r2, r3, #31
 800181e:	e01e      	b.n	800185e <HAL_ADC_ConfigChannel+0x282>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2101      	movs	r1, #1
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fa48 	bl	8000cbc <LL_ADC_GetOffsetChannel>
 800182c:	4603      	mov	r3, r0
 800182e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001832:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001836:	fa93 f3a3 	rbit	r3, r3
 800183a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800183e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001842:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001846:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800184e:	2320      	movs	r3, #32
 8001850:	e004      	b.n	800185c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001852:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001856:	fab3 f383 	clz	r3, r3
 800185a:	b2db      	uxtb	r3, r3
 800185c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001866:	2b00      	cmp	r3, #0
 8001868:	d105      	bne.n	8001876 <HAL_ADC_ConfigChannel+0x29a>
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	0e9b      	lsrs	r3, r3, #26
 8001870:	f003 031f 	and.w	r3, r3, #31
 8001874:	e018      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x2cc>
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001882:	fa93 f3a3 	rbit	r3, r3
 8001886:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800188a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800188e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001892:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800189a:	2320      	movs	r3, #32
 800189c:	e004      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800189e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018a2:	fab3 f383 	clz	r3, r3
 80018a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d106      	bne.n	80018ba <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2200      	movs	r2, #0
 80018b2:	2101      	movs	r1, #1
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fa17 	bl	8000ce8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2102      	movs	r1, #2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff f9fb 	bl	8000cbc <LL_ADC_GetOffsetChannel>
 80018c6:	4603      	mov	r3, r0
 80018c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d10a      	bne.n	80018e6 <HAL_ADC_ConfigChannel+0x30a>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2102      	movs	r1, #2
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff f9f0 	bl	8000cbc <LL_ADC_GetOffsetChannel>
 80018dc:	4603      	mov	r3, r0
 80018de:	0e9b      	lsrs	r3, r3, #26
 80018e0:	f003 021f 	and.w	r2, r3, #31
 80018e4:	e01e      	b.n	8001924 <HAL_ADC_ConfigChannel+0x348>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2102      	movs	r1, #2
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff f9e5 	bl	8000cbc <LL_ADC_GetOffsetChannel>
 80018f2:	4603      	mov	r3, r0
 80018f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018fc:	fa93 f3a3 	rbit	r3, r3
 8001900:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001904:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001908:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800190c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001914:	2320      	movs	r3, #32
 8001916:	e004      	b.n	8001922 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001918:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800191c:	fab3 f383 	clz	r3, r3
 8001920:	b2db      	uxtb	r3, r3
 8001922:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800192c:	2b00      	cmp	r3, #0
 800192e:	d105      	bne.n	800193c <HAL_ADC_ConfigChannel+0x360>
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	0e9b      	lsrs	r3, r3, #26
 8001936:	f003 031f 	and.w	r3, r3, #31
 800193a:	e016      	b.n	800196a <HAL_ADC_ConfigChannel+0x38e>
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001944:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001948:	fa93 f3a3 	rbit	r3, r3
 800194c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800194e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001950:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001954:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800195c:	2320      	movs	r3, #32
 800195e:	e004      	b.n	800196a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001960:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001964:	fab3 f383 	clz	r3, r3
 8001968:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800196a:	429a      	cmp	r2, r3
 800196c:	d106      	bne.n	800197c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2200      	movs	r2, #0
 8001974:	2102      	movs	r1, #2
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff f9b6 	bl	8000ce8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2103      	movs	r1, #3
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff f99a 	bl	8000cbc <LL_ADC_GetOffsetChannel>
 8001988:	4603      	mov	r3, r0
 800198a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10a      	bne.n	80019a8 <HAL_ADC_ConfigChannel+0x3cc>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2103      	movs	r1, #3
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff f98f 	bl	8000cbc <LL_ADC_GetOffsetChannel>
 800199e:	4603      	mov	r3, r0
 80019a0:	0e9b      	lsrs	r3, r3, #26
 80019a2:	f003 021f 	and.w	r2, r3, #31
 80019a6:	e017      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x3fc>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2103      	movs	r1, #3
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff f984 	bl	8000cbc <LL_ADC_GetOffsetChannel>
 80019b4:	4603      	mov	r3, r0
 80019b6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019ba:	fa93 f3a3 	rbit	r3, r3
 80019be:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80019c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019c2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80019c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80019ca:	2320      	movs	r3, #32
 80019cc:	e003      	b.n	80019d6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80019ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019d0:	fab3 f383 	clz	r3, r3
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d105      	bne.n	80019f0 <HAL_ADC_ConfigChannel+0x414>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	0e9b      	lsrs	r3, r3, #26
 80019ea:	f003 031f 	and.w	r3, r3, #31
 80019ee:	e011      	b.n	8001a14 <HAL_ADC_ConfigChannel+0x438>
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019f8:	fa93 f3a3 	rbit	r3, r3
 80019fc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80019fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a00:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001a08:	2320      	movs	r3, #32
 8001a0a:	e003      	b.n	8001a14 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a0e:	fab3 f383 	clz	r3, r3
 8001a12:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d106      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2103      	movs	r1, #3
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff f961 	bl	8000ce8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fa96 	bl	8000f5c <LL_ADC_IsEnabled>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f040 8140 	bne.w	8001cb8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6818      	ldr	r0, [r3, #0]
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	6819      	ldr	r1, [r3, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	461a      	mov	r2, r3
 8001a46:	f7ff f9e7 	bl	8000e18 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	4a8f      	ldr	r2, [pc, #572]	; (8001c8c <HAL_ADC_ConfigChannel+0x6b0>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	f040 8131 	bne.w	8001cb8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10b      	bne.n	8001a7e <HAL_ADC_ConfigChannel+0x4a2>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	0e9b      	lsrs	r3, r3, #26
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	f003 031f 	and.w	r3, r3, #31
 8001a72:	2b09      	cmp	r3, #9
 8001a74:	bf94      	ite	ls
 8001a76:	2301      	movls	r3, #1
 8001a78:	2300      	movhi	r3, #0
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	e019      	b.n	8001ab2 <HAL_ADC_ConfigChannel+0x4d6>
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a86:	fa93 f3a3 	rbit	r3, r3
 8001a8a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001a8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a8e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001a90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001a96:	2320      	movs	r3, #32
 8001a98:	e003      	b.n	8001aa2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001a9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a9c:	fab3 f383 	clz	r3, r3
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	f003 031f 	and.w	r3, r3, #31
 8001aa8:	2b09      	cmp	r3, #9
 8001aaa:	bf94      	ite	ls
 8001aac:	2301      	movls	r3, #1
 8001aae:	2300      	movhi	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d079      	beq.n	8001baa <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d107      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x4f6>
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	0e9b      	lsrs	r3, r3, #26
 8001ac8:	3301      	adds	r3, #1
 8001aca:	069b      	lsls	r3, r3, #26
 8001acc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ad0:	e015      	b.n	8001afe <HAL_ADC_ConfigChannel+0x522>
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ada:	fa93 f3a3 	rbit	r3, r3
 8001ade:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ae2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001aea:	2320      	movs	r3, #32
 8001aec:	e003      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001af0:	fab3 f383 	clz	r3, r3
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	3301      	adds	r3, #1
 8001af8:	069b      	lsls	r3, r3, #26
 8001afa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d109      	bne.n	8001b1e <HAL_ADC_ConfigChannel+0x542>
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	0e9b      	lsrs	r3, r3, #26
 8001b10:	3301      	adds	r3, #1
 8001b12:	f003 031f 	and.w	r3, r3, #31
 8001b16:	2101      	movs	r1, #1
 8001b18:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1c:	e017      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x572>
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b26:	fa93 f3a3 	rbit	r3, r3
 8001b2a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b2e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001b30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001b36:	2320      	movs	r3, #32
 8001b38:	e003      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b3c:	fab3 f383 	clz	r3, r3
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	3301      	adds	r3, #1
 8001b44:	f003 031f 	and.w	r3, r3, #31
 8001b48:	2101      	movs	r1, #1
 8001b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4e:	ea42 0103 	orr.w	r1, r2, r3
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10a      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x598>
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	0e9b      	lsrs	r3, r3, #26
 8001b64:	3301      	adds	r3, #1
 8001b66:	f003 021f 	and.w	r2, r3, #31
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	4413      	add	r3, r2
 8001b70:	051b      	lsls	r3, r3, #20
 8001b72:	e018      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x5ca>
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b7c:	fa93 f3a3 	rbit	r3, r3
 8001b80:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b84:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001b8c:	2320      	movs	r3, #32
 8001b8e:	e003      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b92:	fab3 f383 	clz	r3, r3
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	3301      	adds	r3, #1
 8001b9a:	f003 021f 	and.w	r2, r3, #31
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	4413      	add	r3, r2
 8001ba4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ba6:	430b      	orrs	r3, r1
 8001ba8:	e081      	b.n	8001cae <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d107      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x5ea>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	0e9b      	lsrs	r3, r3, #26
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	069b      	lsls	r3, r3, #26
 8001bc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bc4:	e015      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x616>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bce:	fa93 f3a3 	rbit	r3, r3
 8001bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001bde:	2320      	movs	r3, #32
 8001be0:	e003      	b.n	8001bea <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be4:	fab3 f383 	clz	r3, r3
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	3301      	adds	r3, #1
 8001bec:	069b      	lsls	r3, r3, #26
 8001bee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d109      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x636>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	0e9b      	lsrs	r3, r3, #26
 8001c04:	3301      	adds	r3, #1
 8001c06:	f003 031f 	and.w	r3, r3, #31
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c10:	e017      	b.n	8001c42 <HAL_ADC_ConfigChannel+0x666>
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c18:	6a3b      	ldr	r3, [r7, #32]
 8001c1a:	fa93 f3a3 	rbit	r3, r3
 8001c1e:	61fb      	str	r3, [r7, #28]
  return result;
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001c2a:	2320      	movs	r3, #32
 8001c2c:	e003      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	fab3 f383 	clz	r3, r3
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	3301      	adds	r3, #1
 8001c38:	f003 031f 	and.w	r3, r3, #31
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c42:	ea42 0103 	orr.w	r1, r2, r3
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10d      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x692>
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	0e9b      	lsrs	r3, r3, #26
 8001c58:	3301      	adds	r3, #1
 8001c5a:	f003 021f 	and.w	r2, r3, #31
 8001c5e:	4613      	mov	r3, r2
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	4413      	add	r3, r2
 8001c64:	3b1e      	subs	r3, #30
 8001c66:	051b      	lsls	r3, r3, #20
 8001c68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c6c:	e01e      	b.n	8001cac <HAL_ADC_ConfigChannel+0x6d0>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	fa93 f3a3 	rbit	r3, r3
 8001c7a:	613b      	str	r3, [r7, #16]
  return result;
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d104      	bne.n	8001c90 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001c86:	2320      	movs	r3, #32
 8001c88:	e006      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x6bc>
 8001c8a:	bf00      	nop
 8001c8c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	fab3 f383 	clz	r3, r3
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	3301      	adds	r3, #1
 8001c9a:	f003 021f 	and.w	r2, r3, #31
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3b1e      	subs	r3, #30
 8001ca6:	051b      	lsls	r3, r3, #20
 8001ca8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cac:	430b      	orrs	r3, r1
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	6892      	ldr	r2, [r2, #8]
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f7ff f885 	bl	8000dc2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4b3d      	ldr	r3, [pc, #244]	; (8001db4 <HAL_ADC_ConfigChannel+0x7d8>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d06c      	beq.n	8001d9e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cc4:	483c      	ldr	r0, [pc, #240]	; (8001db8 <HAL_ADC_ConfigChannel+0x7dc>)
 8001cc6:	f7fe ffc7 	bl	8000c58 <LL_ADC_GetCommonPathInternalCh>
 8001cca:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a3a      	ldr	r2, [pc, #232]	; (8001dbc <HAL_ADC_ConfigChannel+0x7e0>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d127      	bne.n	8001d28 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001cd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d121      	bne.n	8001d28 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a35      	ldr	r2, [pc, #212]	; (8001dc0 <HAL_ADC_ConfigChannel+0x7e4>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d157      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cf2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	482f      	ldr	r0, [pc, #188]	; (8001db8 <HAL_ADC_ConfigChannel+0x7dc>)
 8001cfa:	f7fe ff9a 	bl	8000c32 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cfe:	4b31      	ldr	r3, [pc, #196]	; (8001dc4 <HAL_ADC_ConfigChannel+0x7e8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	099b      	lsrs	r3, r3, #6
 8001d04:	4a30      	ldr	r2, [pc, #192]	; (8001dc8 <HAL_ADC_ConfigChannel+0x7ec>)
 8001d06:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0a:	099b      	lsrs	r3, r3, #6
 8001d0c:	1c5a      	adds	r2, r3, #1
 8001d0e:	4613      	mov	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d18:	e002      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f9      	bne.n	8001d1a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d26:	e03a      	b.n	8001d9e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a27      	ldr	r2, [pc, #156]	; (8001dcc <HAL_ADC_ConfigChannel+0x7f0>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d113      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x77e>
 8001d32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10d      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a1f      	ldr	r2, [pc, #124]	; (8001dc0 <HAL_ADC_ConfigChannel+0x7e4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d12a      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d50:	4619      	mov	r1, r3
 8001d52:	4819      	ldr	r0, [pc, #100]	; (8001db8 <HAL_ADC_ConfigChannel+0x7dc>)
 8001d54:	f7fe ff6d 	bl	8000c32 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d58:	e021      	b.n	8001d9e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a1c      	ldr	r2, [pc, #112]	; (8001dd0 <HAL_ADC_ConfigChannel+0x7f4>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d11c      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d116      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a12      	ldr	r2, [pc, #72]	; (8001dc0 <HAL_ADC_ConfigChannel+0x7e4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d111      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d82:	4619      	mov	r1, r3
 8001d84:	480c      	ldr	r0, [pc, #48]	; (8001db8 <HAL_ADC_ConfigChannel+0x7dc>)
 8001d86:	f7fe ff54 	bl	8000c32 <LL_ADC_SetCommonPathInternalCh>
 8001d8a:	e008      	b.n	8001d9e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d90:	f043 0220 	orr.w	r2, r3, #32
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001da6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	37d8      	adds	r7, #216	; 0xd8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	80080000 	.word	0x80080000
 8001db8:	50040300 	.word	0x50040300
 8001dbc:	c7520000 	.word	0xc7520000
 8001dc0:	50040000 	.word	0x50040000
 8001dc4:	20000000 	.word	0x20000000
 8001dc8:	053e2d63 	.word	0x053e2d63
 8001dcc:	cb840000 	.word	0xcb840000
 8001dd0:	80000001 	.word	0x80000001

08001dd4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff f8bb 	bl	8000f5c <LL_ADC_IsEnabled>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d14d      	bne.n	8001e88 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	4b28      	ldr	r3, [pc, #160]	; (8001e94 <ADC_Enable+0xc0>)
 8001df4:	4013      	ands	r3, r2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00d      	beq.n	8001e16 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfe:	f043 0210 	orr.w	r2, r3, #16
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0a:	f043 0201 	orr.w	r2, r3, #1
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e039      	b.n	8001e8a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff f88a 	bl	8000f34 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001e20:	f7fe fec4 	bl	8000bac <HAL_GetTick>
 8001e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e26:	e028      	b.n	8001e7a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff f895 	bl	8000f5c <LL_ADC_IsEnabled>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d104      	bne.n	8001e42 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff f879 	bl	8000f34 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e42:	f7fe feb3 	bl	8000bac <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d914      	bls.n	8001e7a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d00d      	beq.n	8001e7a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e62:	f043 0210 	orr.w	r2, r3, #16
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6e:	f043 0201 	orr.w	r2, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e007      	b.n	8001e8a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d1cf      	bne.n	8001e28 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	8000003f 	.word	0x8000003f

08001e98 <LL_ADC_IsEnabled>:
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <LL_ADC_IsEnabled+0x18>
 8001eac:	2301      	movs	r3, #1
 8001eae:	e000      	b.n	8001eb2 <LL_ADC_IsEnabled+0x1a>
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <LL_ADC_REG_IsConversionOngoing>:
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d101      	bne.n	8001ed6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001ee4:	b590      	push	{r4, r7, lr}
 8001ee6:	b0a1      	sub	sp, #132	; 0x84
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d101      	bne.n	8001f02 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001efe:	2302      	movs	r3, #2
 8001f00:	e089      	b.n	8002016 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001f0e:	2300      	movs	r3, #0
 8001f10:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a42      	ldr	r2, [pc, #264]	; (8002020 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d102      	bne.n	8001f22 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001f1c:	4b41      	ldr	r3, [pc, #260]	; (8002024 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	e001      	b.n	8001f26 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10b      	bne.n	8001f44 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f30:	f043 0220 	orr.w	r2, r3, #32
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e068      	b.n	8002016 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff ffb9 	bl	8001ebe <LL_ADC_REG_IsConversionOngoing>
 8001f4c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff ffb3 	bl	8001ebe <LL_ADC_REG_IsConversionOngoing>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d14a      	bne.n	8001ff4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001f5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d147      	bne.n	8001ff4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001f64:	4b30      	ldr	r3, [pc, #192]	; (8002028 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8001f66:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d027      	beq.n	8001fc0 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001f70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	6859      	ldr	r1, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f82:	035b      	lsls	r3, r3, #13
 8001f84:	430b      	orrs	r3, r1
 8001f86:	431a      	orrs	r2, r3
 8001f88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f8a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f8c:	4824      	ldr	r0, [pc, #144]	; (8002020 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001f8e:	f7ff ff83 	bl	8001e98 <LL_ADC_IsEnabled>
 8001f92:	4604      	mov	r4, r0
 8001f94:	4823      	ldr	r0, [pc, #140]	; (8002024 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001f96:	f7ff ff7f 	bl	8001e98 <LL_ADC_IsEnabled>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	4323      	orrs	r3, r4
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d132      	bne.n	8002008 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001fa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001faa:	f023 030f 	bic.w	r3, r3, #15
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	6811      	ldr	r1, [r2, #0]
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	6892      	ldr	r2, [r2, #8]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fbc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fbe:	e023      	b.n	8002008 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001fc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fca:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fcc:	4814      	ldr	r0, [pc, #80]	; (8002020 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001fce:	f7ff ff63 	bl	8001e98 <LL_ADC_IsEnabled>
 8001fd2:	4604      	mov	r4, r0
 8001fd4:	4813      	ldr	r0, [pc, #76]	; (8002024 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001fd6:	f7ff ff5f 	bl	8001e98 <LL_ADC_IsEnabled>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	4323      	orrs	r3, r4
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d112      	bne.n	8002008 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001fe2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001fea:	f023 030f 	bic.w	r3, r3, #15
 8001fee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001ff0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ff2:	e009      	b.n	8002008 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	f043 0220 	orr.w	r2, r3, #32
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002006:	e000      	b.n	800200a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002008:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002012:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002016:	4618      	mov	r0, r3
 8002018:	3784      	adds	r7, #132	; 0x84
 800201a:	46bd      	mov	sp, r7
 800201c:	bd90      	pop	{r4, r7, pc}
 800201e:	bf00      	nop
 8002020:	50040000 	.word	0x50040000
 8002024:	50040100 	.word	0x50040100
 8002028:	50040300 	.word	0x50040300

0800202c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002048:	4013      	ands	r3, r2
 800204a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800205c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800205e:	4a04      	ldr	r2, [pc, #16]	; (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	60d3      	str	r3, [r2, #12]
}
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <__NVIC_GetPriorityGrouping+0x18>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	0a1b      	lsrs	r3, r3, #8
 800207e:	f003 0307 	and.w	r3, r3, #7
}
 8002082:	4618      	mov	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	db0b      	blt.n	80020ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	f003 021f 	and.w	r2, r3, #31
 80020a8:	4907      	ldr	r1, [pc, #28]	; (80020c8 <__NVIC_EnableIRQ+0x38>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	2001      	movs	r0, #1
 80020b2:	fa00 f202 	lsl.w	r2, r0, r2
 80020b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000e100 	.word	0xe000e100

080020cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	6039      	str	r1, [r7, #0]
 80020d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	db0a      	blt.n	80020f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	490c      	ldr	r1, [pc, #48]	; (8002118 <__NVIC_SetPriority+0x4c>)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	0112      	lsls	r2, r2, #4
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	440b      	add	r3, r1
 80020f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f4:	e00a      	b.n	800210c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	4908      	ldr	r1, [pc, #32]	; (800211c <__NVIC_SetPriority+0x50>)
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	3b04      	subs	r3, #4
 8002104:	0112      	lsls	r2, r2, #4
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	440b      	add	r3, r1
 800210a:	761a      	strb	r2, [r3, #24]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000e100 	.word	0xe000e100
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002120:	b480      	push	{r7}
 8002122:	b089      	sub	sp, #36	; 0x24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f1c3 0307 	rsb	r3, r3, #7
 800213a:	2b04      	cmp	r3, #4
 800213c:	bf28      	it	cs
 800213e:	2304      	movcs	r3, #4
 8002140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3304      	adds	r3, #4
 8002146:	2b06      	cmp	r3, #6
 8002148:	d902      	bls.n	8002150 <NVIC_EncodePriority+0x30>
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3b03      	subs	r3, #3
 800214e:	e000      	b.n	8002152 <NVIC_EncodePriority+0x32>
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	f04f 32ff 	mov.w	r2, #4294967295
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43da      	mvns	r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	401a      	ands	r2, r3
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002168:	f04f 31ff 	mov.w	r1, #4294967295
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	fa01 f303 	lsl.w	r3, r1, r3
 8002172:	43d9      	mvns	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002178:	4313      	orrs	r3, r2
         );
}
 800217a:	4618      	mov	r0, r3
 800217c:	3724      	adds	r7, #36	; 0x24
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3b01      	subs	r3, #1
 8002194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002198:	d301      	bcc.n	800219e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800219a:	2301      	movs	r3, #1
 800219c:	e00f      	b.n	80021be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800219e:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <SysTick_Config+0x40>)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021a6:	210f      	movs	r1, #15
 80021a8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ac:	f7ff ff8e 	bl	80020cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <SysTick_Config+0x40>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021b6:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <SysTick_Config+0x40>)
 80021b8:	2207      	movs	r2, #7
 80021ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	e000e010 	.word	0xe000e010

080021cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff ff29 	bl	800202c <__NVIC_SetPriorityGrouping>
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b086      	sub	sp, #24
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	4603      	mov	r3, r0
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	607a      	str	r2, [r7, #4]
 80021ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021f4:	f7ff ff3e 	bl	8002074 <__NVIC_GetPriorityGrouping>
 80021f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68b9      	ldr	r1, [r7, #8]
 80021fe:	6978      	ldr	r0, [r7, #20]
 8002200:	f7ff ff8e 	bl	8002120 <NVIC_EncodePriority>
 8002204:	4602      	mov	r2, r0
 8002206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800220a:	4611      	mov	r1, r2
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ff5d 	bl	80020cc <__NVIC_SetPriority>
}
 8002212:	bf00      	nop
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	4603      	mov	r3, r0
 8002222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff ff31 	bl	8002090 <__NVIC_EnableIRQ>
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff ffa2 	bl	8002188 <SysTick_Config>
 8002244:	4603      	mov	r3, r0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002250:	b480      	push	{r7}
 8002252:	b087      	sub	sp, #28
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800225e:	e166      	b.n	800252e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	2101      	movs	r1, #1
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	fa01 f303 	lsl.w	r3, r1, r3
 800226c:	4013      	ands	r3, r2
 800226e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 8158 	beq.w	8002528 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	2b01      	cmp	r3, #1
 8002282:	d005      	beq.n	8002290 <HAL_GPIO_Init+0x40>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d130      	bne.n	80022f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	2203      	movs	r2, #3
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	4013      	ands	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	68da      	ldr	r2, [r3, #12]
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022c6:	2201      	movs	r2, #1
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	091b      	lsrs	r3, r3, #4
 80022dc:	f003 0201 	and.w	r2, r3, #1
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	2b03      	cmp	r3, #3
 80022fc:	d017      	beq.n	800232e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	2203      	movs	r2, #3
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4013      	ands	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	689a      	ldr	r2, [r3, #8]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4313      	orrs	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d123      	bne.n	8002382 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	08da      	lsrs	r2, r3, #3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3208      	adds	r2, #8
 8002342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002346:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	220f      	movs	r2, #15
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4013      	ands	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	691a      	ldr	r2, [r3, #16]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	08da      	lsrs	r2, r3, #3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3208      	adds	r2, #8
 800237c:	6939      	ldr	r1, [r7, #16]
 800237e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	2203      	movs	r2, #3
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	4013      	ands	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 0203 	and.w	r2, r3, #3
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 80b2 	beq.w	8002528 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c4:	4b61      	ldr	r3, [pc, #388]	; (800254c <HAL_GPIO_Init+0x2fc>)
 80023c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c8:	4a60      	ldr	r2, [pc, #384]	; (800254c <HAL_GPIO_Init+0x2fc>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	6613      	str	r3, [r2, #96]	; 0x60
 80023d0:	4b5e      	ldr	r3, [pc, #376]	; (800254c <HAL_GPIO_Init+0x2fc>)
 80023d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023dc:	4a5c      	ldr	r2, [pc, #368]	; (8002550 <HAL_GPIO_Init+0x300>)
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	089b      	lsrs	r3, r3, #2
 80023e2:	3302      	adds	r3, #2
 80023e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	220f      	movs	r2, #15
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4013      	ands	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002406:	d02b      	beq.n	8002460 <HAL_GPIO_Init+0x210>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a52      	ldr	r2, [pc, #328]	; (8002554 <HAL_GPIO_Init+0x304>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d025      	beq.n	800245c <HAL_GPIO_Init+0x20c>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a51      	ldr	r2, [pc, #324]	; (8002558 <HAL_GPIO_Init+0x308>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d01f      	beq.n	8002458 <HAL_GPIO_Init+0x208>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a50      	ldr	r2, [pc, #320]	; (800255c <HAL_GPIO_Init+0x30c>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d019      	beq.n	8002454 <HAL_GPIO_Init+0x204>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a4f      	ldr	r2, [pc, #316]	; (8002560 <HAL_GPIO_Init+0x310>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d013      	beq.n	8002450 <HAL_GPIO_Init+0x200>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a4e      	ldr	r2, [pc, #312]	; (8002564 <HAL_GPIO_Init+0x314>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d00d      	beq.n	800244c <HAL_GPIO_Init+0x1fc>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a4d      	ldr	r2, [pc, #308]	; (8002568 <HAL_GPIO_Init+0x318>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d007      	beq.n	8002448 <HAL_GPIO_Init+0x1f8>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a4c      	ldr	r2, [pc, #304]	; (800256c <HAL_GPIO_Init+0x31c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d101      	bne.n	8002444 <HAL_GPIO_Init+0x1f4>
 8002440:	2307      	movs	r3, #7
 8002442:	e00e      	b.n	8002462 <HAL_GPIO_Init+0x212>
 8002444:	2308      	movs	r3, #8
 8002446:	e00c      	b.n	8002462 <HAL_GPIO_Init+0x212>
 8002448:	2306      	movs	r3, #6
 800244a:	e00a      	b.n	8002462 <HAL_GPIO_Init+0x212>
 800244c:	2305      	movs	r3, #5
 800244e:	e008      	b.n	8002462 <HAL_GPIO_Init+0x212>
 8002450:	2304      	movs	r3, #4
 8002452:	e006      	b.n	8002462 <HAL_GPIO_Init+0x212>
 8002454:	2303      	movs	r3, #3
 8002456:	e004      	b.n	8002462 <HAL_GPIO_Init+0x212>
 8002458:	2302      	movs	r3, #2
 800245a:	e002      	b.n	8002462 <HAL_GPIO_Init+0x212>
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <HAL_GPIO_Init+0x212>
 8002460:	2300      	movs	r3, #0
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	f002 0203 	and.w	r2, r2, #3
 8002468:	0092      	lsls	r2, r2, #2
 800246a:	4093      	lsls	r3, r2
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4313      	orrs	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002472:	4937      	ldr	r1, [pc, #220]	; (8002550 <HAL_GPIO_Init+0x300>)
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	089b      	lsrs	r3, r3, #2
 8002478:	3302      	adds	r3, #2
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002480:	4b3b      	ldr	r3, [pc, #236]	; (8002570 <HAL_GPIO_Init+0x320>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	43db      	mvns	r3, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024a4:	4a32      	ldr	r2, [pc, #200]	; (8002570 <HAL_GPIO_Init+0x320>)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024aa:	4b31      	ldr	r3, [pc, #196]	; (8002570 <HAL_GPIO_Init+0x320>)
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	43db      	mvns	r3, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4013      	ands	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024ce:	4a28      	ldr	r2, [pc, #160]	; (8002570 <HAL_GPIO_Init+0x320>)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024d4:	4b26      	ldr	r3, [pc, #152]	; (8002570 <HAL_GPIO_Init+0x320>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	43db      	mvns	r3, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024f8:	4a1d      	ldr	r2, [pc, #116]	; (8002570 <HAL_GPIO_Init+0x320>)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80024fe:	4b1c      	ldr	r3, [pc, #112]	; (8002570 <HAL_GPIO_Init+0x320>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	43db      	mvns	r3, r3
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4013      	ands	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4313      	orrs	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002522:	4a13      	ldr	r2, [pc, #76]	; (8002570 <HAL_GPIO_Init+0x320>)
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	3301      	adds	r3, #1
 800252c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	fa22 f303 	lsr.w	r3, r2, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	f47f ae91 	bne.w	8002260 <HAL_GPIO_Init+0x10>
  }
}
 800253e:	bf00      	nop
 8002540:	bf00      	nop
 8002542:	371c      	adds	r7, #28
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	40021000 	.word	0x40021000
 8002550:	40010000 	.word	0x40010000
 8002554:	48000400 	.word	0x48000400
 8002558:	48000800 	.word	0x48000800
 800255c:	48000c00 	.word	0x48000c00
 8002560:	48001000 	.word	0x48001000
 8002564:	48001400 	.word	0x48001400
 8002568:	48001800 	.word	0x48001800
 800256c:	48001c00 	.word	0x48001c00
 8002570:	40010400 	.word	0x40010400

08002574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	807b      	strh	r3, [r7, #2]
 8002580:	4613      	mov	r3, r2
 8002582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002584:	787b      	ldrb	r3, [r7, #1]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800258a:	887a      	ldrh	r2, [r7, #2]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002590:	e002      	b.n	8002598 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002592:	887a      	ldrh	r2, [r7, #2]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025b6:	887a      	ldrh	r2, [r7, #2]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4013      	ands	r3, r2
 80025bc:	041a      	lsls	r2, r3, #16
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	43d9      	mvns	r1, r3
 80025c2:	887b      	ldrh	r3, [r7, #2]
 80025c4:	400b      	ands	r3, r1
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	619a      	str	r2, [r3, #24]
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80025d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025da:	b08f      	sub	sp, #60	; 0x3c
 80025dc:	af0a      	add	r7, sp, #40	; 0x28
 80025de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e054      	b.n	8002694 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d106      	bne.n	800260a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f007 feaf 	bl	800a368 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2203      	movs	r2, #3
 800260e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d102      	bne.n	8002624 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f003 fe0c 	bl	8006246 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	687e      	ldr	r6, [r7, #4]
 8002636:	466d      	mov	r5, sp
 8002638:	f106 0410 	add.w	r4, r6, #16
 800263c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800263e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002640:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002642:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002644:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002648:	e885 0003 	stmia.w	r5, {r0, r1}
 800264c:	1d33      	adds	r3, r6, #4
 800264e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002650:	6838      	ldr	r0, [r7, #0]
 8002652:	f003 fdbb 	bl	80061cc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2101      	movs	r1, #1
 800265c:	4618      	mov	r0, r3
 800265e:	f003 fe03 	bl	8006268 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	603b      	str	r3, [r7, #0]
 8002668:	687e      	ldr	r6, [r7, #4]
 800266a:	466d      	mov	r5, sp
 800266c:	f106 0410 	add.w	r4, r6, #16
 8002670:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002672:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002676:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002678:	e894 0003 	ldmia.w	r4, {r0, r1}
 800267c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002680:	1d33      	adds	r3, r6, #4
 8002682:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002684:	6838      	ldr	r0, [r7, #0]
 8002686:	f003 ff81 	bl	800658c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800269c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800269c:	b590      	push	{r4, r7, lr}
 800269e:	b089      	sub	sp, #36	; 0x24
 80026a0:	af04      	add	r7, sp, #16
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	4608      	mov	r0, r1
 80026a6:	4611      	mov	r1, r2
 80026a8:	461a      	mov	r2, r3
 80026aa:	4603      	mov	r3, r0
 80026ac:	70fb      	strb	r3, [r7, #3]
 80026ae:	460b      	mov	r3, r1
 80026b0:	70bb      	strb	r3, [r7, #2]
 80026b2:	4613      	mov	r3, r2
 80026b4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <HAL_HCD_HC_Init+0x28>
 80026c0:	2302      	movs	r3, #2
 80026c2:	e076      	b.n	80027b2 <HAL_HCD_HC_Init+0x116>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	212c      	movs	r1, #44	; 0x2c
 80026d2:	fb01 f303 	mul.w	r3, r1, r3
 80026d6:	4413      	add	r3, r2
 80026d8:	333d      	adds	r3, #61	; 0x3d
 80026da:	2200      	movs	r2, #0
 80026dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80026de:	78fb      	ldrb	r3, [r7, #3]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	212c      	movs	r1, #44	; 0x2c
 80026e4:	fb01 f303 	mul.w	r3, r1, r3
 80026e8:	4413      	add	r3, r2
 80026ea:	3338      	adds	r3, #56	; 0x38
 80026ec:	787a      	ldrb	r2, [r7, #1]
 80026ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80026f0:	78fb      	ldrb	r3, [r7, #3]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	212c      	movs	r1, #44	; 0x2c
 80026f6:	fb01 f303 	mul.w	r3, r1, r3
 80026fa:	4413      	add	r3, r2
 80026fc:	3340      	adds	r3, #64	; 0x40
 80026fe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002700:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002702:	78fb      	ldrb	r3, [r7, #3]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	212c      	movs	r1, #44	; 0x2c
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	4413      	add	r3, r2
 800270e:	3339      	adds	r3, #57	; 0x39
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	212c      	movs	r1, #44	; 0x2c
 800271a:	fb01 f303 	mul.w	r3, r1, r3
 800271e:	4413      	add	r3, r2
 8002720:	333f      	adds	r3, #63	; 0x3f
 8002722:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002726:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002728:	78fb      	ldrb	r3, [r7, #3]
 800272a:	78ba      	ldrb	r2, [r7, #2]
 800272c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002730:	b2d0      	uxtb	r0, r2
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	212c      	movs	r1, #44	; 0x2c
 8002736:	fb01 f303 	mul.w	r3, r1, r3
 800273a:	4413      	add	r3, r2
 800273c:	333a      	adds	r3, #58	; 0x3a
 800273e:	4602      	mov	r2, r0
 8002740:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002742:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002746:	2b00      	cmp	r3, #0
 8002748:	da09      	bge.n	800275e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800274a:	78fb      	ldrb	r3, [r7, #3]
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	212c      	movs	r1, #44	; 0x2c
 8002750:	fb01 f303 	mul.w	r3, r1, r3
 8002754:	4413      	add	r3, r2
 8002756:	333b      	adds	r3, #59	; 0x3b
 8002758:	2201      	movs	r2, #1
 800275a:	701a      	strb	r2, [r3, #0]
 800275c:	e008      	b.n	8002770 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800275e:	78fb      	ldrb	r3, [r7, #3]
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	212c      	movs	r1, #44	; 0x2c
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	4413      	add	r3, r2
 800276a:	333b      	adds	r3, #59	; 0x3b
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002770:	78fb      	ldrb	r3, [r7, #3]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	212c      	movs	r1, #44	; 0x2c
 8002776:	fb01 f303 	mul.w	r3, r1, r3
 800277a:	4413      	add	r3, r2
 800277c:	333c      	adds	r3, #60	; 0x3c
 800277e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002782:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	787c      	ldrb	r4, [r7, #1]
 800278a:	78ba      	ldrb	r2, [r7, #2]
 800278c:	78f9      	ldrb	r1, [r7, #3]
 800278e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002790:	9302      	str	r3, [sp, #8]
 8002792:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002796:	9301      	str	r3, [sp, #4]
 8002798:	f897 3020 	ldrb.w	r3, [r7, #32]
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	4623      	mov	r3, r4
 80027a0:	f004 f83c 	bl	800681c <USB_HC_Init>
 80027a4:	4603      	mov	r3, r0
 80027a6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd90      	pop	{r4, r7, pc}

080027ba <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b084      	sub	sp, #16
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	460b      	mov	r3, r1
 80027c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <HAL_HCD_HC_Halt+0x1e>
 80027d4:	2302      	movs	r3, #2
 80027d6:	e00f      	b.n	80027f8 <HAL_HCD_HC_Halt+0x3e>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	78fa      	ldrb	r2, [r7, #3]
 80027e6:	4611      	mov	r1, r2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f004 fa28 	bl	8006c3e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	4608      	mov	r0, r1
 800280a:	4611      	mov	r1, r2
 800280c:	461a      	mov	r2, r3
 800280e:	4603      	mov	r3, r0
 8002810:	70fb      	strb	r3, [r7, #3]
 8002812:	460b      	mov	r3, r1
 8002814:	70bb      	strb	r3, [r7, #2]
 8002816:	4613      	mov	r3, r2
 8002818:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800281a:	78fb      	ldrb	r3, [r7, #3]
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	212c      	movs	r1, #44	; 0x2c
 8002820:	fb01 f303 	mul.w	r3, r1, r3
 8002824:	4413      	add	r3, r2
 8002826:	333b      	adds	r3, #59	; 0x3b
 8002828:	78ba      	ldrb	r2, [r7, #2]
 800282a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800282c:	78fb      	ldrb	r3, [r7, #3]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	212c      	movs	r1, #44	; 0x2c
 8002832:	fb01 f303 	mul.w	r3, r1, r3
 8002836:	4413      	add	r3, r2
 8002838:	333f      	adds	r3, #63	; 0x3f
 800283a:	787a      	ldrb	r2, [r7, #1]
 800283c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800283e:	7c3b      	ldrb	r3, [r7, #16]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d112      	bne.n	800286a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002844:	78fb      	ldrb	r3, [r7, #3]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	212c      	movs	r1, #44	; 0x2c
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	4413      	add	r3, r2
 8002850:	3342      	adds	r3, #66	; 0x42
 8002852:	2203      	movs	r2, #3
 8002854:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002856:	78fb      	ldrb	r3, [r7, #3]
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	212c      	movs	r1, #44	; 0x2c
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	4413      	add	r3, r2
 8002862:	333d      	adds	r3, #61	; 0x3d
 8002864:	7f3a      	ldrb	r2, [r7, #28]
 8002866:	701a      	strb	r2, [r3, #0]
 8002868:	e008      	b.n	800287c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800286a:	78fb      	ldrb	r3, [r7, #3]
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	212c      	movs	r1, #44	; 0x2c
 8002870:	fb01 f303 	mul.w	r3, r1, r3
 8002874:	4413      	add	r3, r2
 8002876:	3342      	adds	r3, #66	; 0x42
 8002878:	2202      	movs	r2, #2
 800287a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800287c:	787b      	ldrb	r3, [r7, #1]
 800287e:	2b03      	cmp	r3, #3
 8002880:	f200 80c6 	bhi.w	8002a10 <HAL_HCD_HC_SubmitRequest+0x210>
 8002884:	a201      	add	r2, pc, #4	; (adr r2, 800288c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800288a:	bf00      	nop
 800288c:	0800289d 	.word	0x0800289d
 8002890:	080029fd 	.word	0x080029fd
 8002894:	08002901 	.word	0x08002901
 8002898:	0800297f 	.word	0x0800297f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800289c:	7c3b      	ldrb	r3, [r7, #16]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	f040 80b8 	bne.w	8002a14 <HAL_HCD_HC_SubmitRequest+0x214>
 80028a4:	78bb      	ldrb	r3, [r7, #2]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f040 80b4 	bne.w	8002a14 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80028ac:	8b3b      	ldrh	r3, [r7, #24]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d108      	bne.n	80028c4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80028b2:	78fb      	ldrb	r3, [r7, #3]
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	212c      	movs	r1, #44	; 0x2c
 80028b8:	fb01 f303 	mul.w	r3, r1, r3
 80028bc:	4413      	add	r3, r2
 80028be:	3355      	adds	r3, #85	; 0x55
 80028c0:	2201      	movs	r2, #1
 80028c2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80028c4:	78fb      	ldrb	r3, [r7, #3]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	212c      	movs	r1, #44	; 0x2c
 80028ca:	fb01 f303 	mul.w	r3, r1, r3
 80028ce:	4413      	add	r3, r2
 80028d0:	3355      	adds	r3, #85	; 0x55
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d109      	bne.n	80028ec <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028d8:	78fb      	ldrb	r3, [r7, #3]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	212c      	movs	r1, #44	; 0x2c
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	3342      	adds	r3, #66	; 0x42
 80028e6:	2200      	movs	r2, #0
 80028e8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80028ea:	e093      	b.n	8002a14 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028ec:	78fb      	ldrb	r3, [r7, #3]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	212c      	movs	r1, #44	; 0x2c
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	3342      	adds	r3, #66	; 0x42
 80028fa:	2202      	movs	r2, #2
 80028fc:	701a      	strb	r2, [r3, #0]
      break;
 80028fe:	e089      	b.n	8002a14 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002900:	78bb      	ldrb	r3, [r7, #2]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d11d      	bne.n	8002942 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002906:	78fb      	ldrb	r3, [r7, #3]
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	212c      	movs	r1, #44	; 0x2c
 800290c:	fb01 f303 	mul.w	r3, r1, r3
 8002910:	4413      	add	r3, r2
 8002912:	3355      	adds	r3, #85	; 0x55
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d109      	bne.n	800292e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800291a:	78fb      	ldrb	r3, [r7, #3]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	212c      	movs	r1, #44	; 0x2c
 8002920:	fb01 f303 	mul.w	r3, r1, r3
 8002924:	4413      	add	r3, r2
 8002926:	3342      	adds	r3, #66	; 0x42
 8002928:	2200      	movs	r2, #0
 800292a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800292c:	e073      	b.n	8002a16 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800292e:	78fb      	ldrb	r3, [r7, #3]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	212c      	movs	r1, #44	; 0x2c
 8002934:	fb01 f303 	mul.w	r3, r1, r3
 8002938:	4413      	add	r3, r2
 800293a:	3342      	adds	r3, #66	; 0x42
 800293c:	2202      	movs	r2, #2
 800293e:	701a      	strb	r2, [r3, #0]
      break;
 8002940:	e069      	b.n	8002a16 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002942:	78fb      	ldrb	r3, [r7, #3]
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	212c      	movs	r1, #44	; 0x2c
 8002948:	fb01 f303 	mul.w	r3, r1, r3
 800294c:	4413      	add	r3, r2
 800294e:	3354      	adds	r3, #84	; 0x54
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d109      	bne.n	800296a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002956:	78fb      	ldrb	r3, [r7, #3]
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	212c      	movs	r1, #44	; 0x2c
 800295c:	fb01 f303 	mul.w	r3, r1, r3
 8002960:	4413      	add	r3, r2
 8002962:	3342      	adds	r3, #66	; 0x42
 8002964:	2200      	movs	r2, #0
 8002966:	701a      	strb	r2, [r3, #0]
      break;
 8002968:	e055      	b.n	8002a16 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	212c      	movs	r1, #44	; 0x2c
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	4413      	add	r3, r2
 8002976:	3342      	adds	r3, #66	; 0x42
 8002978:	2202      	movs	r2, #2
 800297a:	701a      	strb	r2, [r3, #0]
      break;
 800297c:	e04b      	b.n	8002a16 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800297e:	78bb      	ldrb	r3, [r7, #2]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d11d      	bne.n	80029c0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002984:	78fb      	ldrb	r3, [r7, #3]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	212c      	movs	r1, #44	; 0x2c
 800298a:	fb01 f303 	mul.w	r3, r1, r3
 800298e:	4413      	add	r3, r2
 8002990:	3355      	adds	r3, #85	; 0x55
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d109      	bne.n	80029ac <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002998:	78fb      	ldrb	r3, [r7, #3]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	212c      	movs	r1, #44	; 0x2c
 800299e:	fb01 f303 	mul.w	r3, r1, r3
 80029a2:	4413      	add	r3, r2
 80029a4:	3342      	adds	r3, #66	; 0x42
 80029a6:	2200      	movs	r2, #0
 80029a8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80029aa:	e034      	b.n	8002a16 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029ac:	78fb      	ldrb	r3, [r7, #3]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	212c      	movs	r1, #44	; 0x2c
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	3342      	adds	r3, #66	; 0x42
 80029ba:	2202      	movs	r2, #2
 80029bc:	701a      	strb	r2, [r3, #0]
      break;
 80029be:	e02a      	b.n	8002a16 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80029c0:	78fb      	ldrb	r3, [r7, #3]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	212c      	movs	r1, #44	; 0x2c
 80029c6:	fb01 f303 	mul.w	r3, r1, r3
 80029ca:	4413      	add	r3, r2
 80029cc:	3354      	adds	r3, #84	; 0x54
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d109      	bne.n	80029e8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029d4:	78fb      	ldrb	r3, [r7, #3]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	212c      	movs	r1, #44	; 0x2c
 80029da:	fb01 f303 	mul.w	r3, r1, r3
 80029de:	4413      	add	r3, r2
 80029e0:	3342      	adds	r3, #66	; 0x42
 80029e2:	2200      	movs	r2, #0
 80029e4:	701a      	strb	r2, [r3, #0]
      break;
 80029e6:	e016      	b.n	8002a16 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029e8:	78fb      	ldrb	r3, [r7, #3]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	212c      	movs	r1, #44	; 0x2c
 80029ee:	fb01 f303 	mul.w	r3, r1, r3
 80029f2:	4413      	add	r3, r2
 80029f4:	3342      	adds	r3, #66	; 0x42
 80029f6:	2202      	movs	r2, #2
 80029f8:	701a      	strb	r2, [r3, #0]
      break;
 80029fa:	e00c      	b.n	8002a16 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029fc:	78fb      	ldrb	r3, [r7, #3]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	212c      	movs	r1, #44	; 0x2c
 8002a02:	fb01 f303 	mul.w	r3, r1, r3
 8002a06:	4413      	add	r3, r2
 8002a08:	3342      	adds	r3, #66	; 0x42
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	701a      	strb	r2, [r3, #0]
      break;
 8002a0e:	e002      	b.n	8002a16 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002a10:	bf00      	nop
 8002a12:	e000      	b.n	8002a16 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002a14:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002a16:	78fb      	ldrb	r3, [r7, #3]
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	212c      	movs	r1, #44	; 0x2c
 8002a1c:	fb01 f303 	mul.w	r3, r1, r3
 8002a20:	4413      	add	r3, r2
 8002a22:	3344      	adds	r3, #68	; 0x44
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002a28:	78fb      	ldrb	r3, [r7, #3]
 8002a2a:	8b3a      	ldrh	r2, [r7, #24]
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	202c      	movs	r0, #44	; 0x2c
 8002a30:	fb00 f303 	mul.w	r3, r0, r3
 8002a34:	440b      	add	r3, r1
 8002a36:	334c      	adds	r3, #76	; 0x4c
 8002a38:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002a3a:	78fb      	ldrb	r3, [r7, #3]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	212c      	movs	r1, #44	; 0x2c
 8002a40:	fb01 f303 	mul.w	r3, r1, r3
 8002a44:	4413      	add	r3, r2
 8002a46:	3360      	adds	r3, #96	; 0x60
 8002a48:	2200      	movs	r2, #0
 8002a4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002a4c:	78fb      	ldrb	r3, [r7, #3]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	212c      	movs	r1, #44	; 0x2c
 8002a52:	fb01 f303 	mul.w	r3, r1, r3
 8002a56:	4413      	add	r3, r2
 8002a58:	3350      	adds	r3, #80	; 0x50
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002a5e:	78fb      	ldrb	r3, [r7, #3]
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	212c      	movs	r1, #44	; 0x2c
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	4413      	add	r3, r2
 8002a6a:	3339      	adds	r3, #57	; 0x39
 8002a6c:	78fa      	ldrb	r2, [r7, #3]
 8002a6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002a70:	78fb      	ldrb	r3, [r7, #3]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	212c      	movs	r1, #44	; 0x2c
 8002a76:	fb01 f303 	mul.w	r3, r1, r3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3361      	adds	r3, #97	; 0x61
 8002a7e:	2200      	movs	r2, #0
 8002a80:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6818      	ldr	r0, [r3, #0]
 8002a86:	78fb      	ldrb	r3, [r7, #3]
 8002a88:	222c      	movs	r2, #44	; 0x2c
 8002a8a:	fb02 f303 	mul.w	r3, r2, r3
 8002a8e:	3338      	adds	r3, #56	; 0x38
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	4413      	add	r3, r2
 8002a94:	4619      	mov	r1, r3
 8002a96:	f003 ffc9 	bl	8006a2c <USB_HC_StartXfer>
 8002a9a:	4603      	mov	r3, r0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f003 fd25 	bl	800650a <USB_GetMode>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	f040 80f6 	bne.w	8002cb4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f003 fd09 	bl	80064e4 <USB_ReadInterrupts>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 80ec 	beq.w	8002cb2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f003 fd00 	bl	80064e4 <USB_ReadInterrupts>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002aee:	d104      	bne.n	8002afa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002af8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f003 fcf0 	bl	80064e4 <USB_ReadInterrupts>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b0e:	d104      	bne.n	8002b1a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f003 fce0 	bl	80064e4 <USB_ReadInterrupts>
 8002b24:	4603      	mov	r3, r0
 8002b26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b2e:	d104      	bne.n	8002b3a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002b38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f003 fcd0 	bl	80064e4 <USB_ReadInterrupts>
 8002b44:	4603      	mov	r3, r0
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d103      	bne.n	8002b56 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2202      	movs	r2, #2
 8002b54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f003 fcc2 	bl	80064e4 <USB_ReadInterrupts>
 8002b60:	4603      	mov	r3, r0
 8002b62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b6a:	d11c      	bne.n	8002ba6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002b74:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10f      	bne.n	8002ba6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002b86:	2110      	movs	r1, #16
 8002b88:	6938      	ldr	r0, [r7, #16]
 8002b8a:	f003 fbb9 	bl	8006300 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002b8e:	6938      	ldr	r0, [r7, #16]
 8002b90:	f003 fbe8 	bl	8006364 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2101      	movs	r1, #1
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f003 fd78 	bl	8006690 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f007 fc63 	bl	800a46c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f003 fc9a 	bl	80064e4 <USB_ReadInterrupts>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bb6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bba:	d102      	bne.n	8002bc2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f001 f841 	bl	8003c44 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f003 fc8c 	bl	80064e4 <USB_ReadInterrupts>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d106      	bne.n	8002be4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f007 fc2c 	bl	800a434 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2208      	movs	r2, #8
 8002be2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f003 fc7b 	bl	80064e4 <USB_ReadInterrupts>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	2b10      	cmp	r3, #16
 8002bf6:	d101      	bne.n	8002bfc <HAL_HCD_IRQHandler+0x158>
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e000      	b.n	8002bfe <HAL_HCD_IRQHandler+0x15a>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d012      	beq.n	8002c28 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	699a      	ldr	r2, [r3, #24]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0210 	bic.w	r2, r2, #16
 8002c10:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 ff44 	bl	8003aa0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	699a      	ldr	r2, [r3, #24]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0210 	orr.w	r2, r2, #16
 8002c26:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f003 fc59 	bl	80064e4 <USB_ReadInterrupts>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c3c:	d13a      	bne.n	8002cb4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f003 ffea 	bl	8006c1c <USB_HC_ReadInterrupt>
 8002c48:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	e025      	b.n	8002c9c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	fa22 f303 	lsr.w	r3, r2, r3
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d018      	beq.n	8002c96 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	015a      	lsls	r2, r3, #5
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c7a:	d106      	bne.n	8002c8a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	4619      	mov	r1, r3
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f8ab 	bl	8002dde <HCD_HC_IN_IRQHandler>
 8002c88:	e005      	b.n	8002c96 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	4619      	mov	r1, r3
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 fc03 	bl	800349c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d3d4      	bcc.n	8002c50 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cae:	615a      	str	r2, [r3, #20]
 8002cb0:	e000      	b.n	8002cb4 <HAL_HCD_IRQHandler+0x210>
      return;
 8002cb2:	bf00      	nop
    }
  }
}
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b082      	sub	sp, #8
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_HCD_Start+0x16>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e013      	b.n	8002cf8 <HAL_HCD_Start+0x3e>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2101      	movs	r1, #1
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f003 fd3a 	bl	8006758 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f003 fa9b 	bl	8006224 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d101      	bne.n	8002d16 <HAL_HCD_Stop+0x16>
 8002d12:	2302      	movs	r3, #2
 8002d14:	e00d      	b.n	8002d32 <HAL_HCD_Stop+0x32>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f004 f885 	bl	8006e32 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f003 fcdc 	bl	8006704 <USB_ResetPort>
 8002d4c:	4603      	mov	r3, r0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
 8002d5e:	460b      	mov	r3, r1
 8002d60:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002d62:	78fb      	ldrb	r3, [r7, #3]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	212c      	movs	r1, #44	; 0x2c
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3360      	adds	r3, #96	; 0x60
 8002d70:	781b      	ldrb	r3, [r3, #0]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	460b      	mov	r3, r1
 8002d88:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002d8a:	78fb      	ldrb	r3, [r7, #3]
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	212c      	movs	r1, #44	; 0x2c
 8002d90:	fb01 f303 	mul.w	r3, r1, r3
 8002d94:	4413      	add	r3, r2
 8002d96:	3350      	adds	r3, #80	; 0x50
 8002d98:	681b      	ldr	r3, [r3, #0]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b082      	sub	sp, #8
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f003 fd20 	bl	80067f8 <USB_GetCurrentFrame>
 8002db8:	4603      	mov	r3, r0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f003 fcfb 	bl	80067ca <USB_GetHostSpeed>
 8002dd4:	4603      	mov	r3, r0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b086      	sub	sp, #24
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
 8002de6:	460b      	mov	r3, r1
 8002de8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002df4:	78fb      	ldrb	r3, [r7, #3]
 8002df6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	015a      	lsls	r2, r3, #5
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	4413      	add	r3, r2
 8002e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d11a      	bne.n	8002e44 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	015a      	lsls	r2, r3, #5
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	4413      	add	r3, r2
 8002e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	2304      	movs	r3, #4
 8002e1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	212c      	movs	r1, #44	; 0x2c
 8002e26:	fb01 f303 	mul.w	r3, r1, r3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	3361      	adds	r3, #97	; 0x61
 8002e2e:	2206      	movs	r2, #6
 8002e30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f003 fefe 	bl	8006c3e <USB_HC_Halt>
 8002e42:	e0af      	b.n	8002fa4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	015a      	lsls	r2, r3, #5
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e5a:	d11b      	bne.n	8002e94 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	015a      	lsls	r2, r3, #5
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4413      	add	r3, r2
 8002e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e68:	461a      	mov	r2, r3
 8002e6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e6e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	212c      	movs	r1, #44	; 0x2c
 8002e76:	fb01 f303 	mul.w	r3, r1, r3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	3361      	adds	r3, #97	; 0x61
 8002e7e:	2207      	movs	r2, #7
 8002e80:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f003 fed6 	bl	8006c3e <USB_HC_Halt>
 8002e92:	e087      	b.n	8002fa4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	015a      	lsls	r2, r3, #5
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 0320 	and.w	r3, r3, #32
 8002ea6:	2b20      	cmp	r3, #32
 8002ea8:	d109      	bne.n	8002ebe <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	015a      	lsls	r2, r3, #5
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	2320      	movs	r3, #32
 8002eba:	6093      	str	r3, [r2, #8]
 8002ebc:	e072      	b.n	8002fa4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	015a      	lsls	r2, r3, #5
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d11a      	bne.n	8002f0a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	015a      	lsls	r2, r3, #5
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	4413      	add	r3, r2
 8002edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	2308      	movs	r3, #8
 8002ee4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	212c      	movs	r1, #44	; 0x2c
 8002eec:	fb01 f303 	mul.w	r3, r1, r3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3361      	adds	r3, #97	; 0x61
 8002ef4:	2205      	movs	r2, #5
 8002ef6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	4611      	mov	r1, r2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f003 fe9b 	bl	8006c3e <USB_HC_Halt>
 8002f08:	e04c      	b.n	8002fa4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	015a      	lsls	r2, r3, #5
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	4413      	add	r3, r2
 8002f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f20:	d11b      	bne.n	8002f5a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	015a      	lsls	r2, r3, #5
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	4413      	add	r3, r2
 8002f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2e:	461a      	mov	r2, r3
 8002f30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f34:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	212c      	movs	r1, #44	; 0x2c
 8002f3c:	fb01 f303 	mul.w	r3, r1, r3
 8002f40:	4413      	add	r3, r2
 8002f42:	3361      	adds	r3, #97	; 0x61
 8002f44:	2208      	movs	r2, #8
 8002f46:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	4611      	mov	r1, r2
 8002f52:	4618      	mov	r0, r3
 8002f54:	f003 fe73 	bl	8006c3e <USB_HC_Halt>
 8002f58:	e024      	b.n	8002fa4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	015a      	lsls	r2, r3, #5
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6c:	2b80      	cmp	r3, #128	; 0x80
 8002f6e:	d119      	bne.n	8002fa4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	015a      	lsls	r2, r3, #5
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4413      	add	r3, r2
 8002f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	2380      	movs	r3, #128	; 0x80
 8002f80:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	212c      	movs	r1, #44	; 0x2c
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3361      	adds	r3, #97	; 0x61
 8002f90:	2206      	movs	r2, #6
 8002f92:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f003 fe4d 	bl	8006c3e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	015a      	lsls	r2, r3, #5
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	4413      	add	r3, r2
 8002fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fba:	d112      	bne.n	8002fe2 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	4611      	mov	r1, r2
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f003 fe39 	bl	8006c3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	015a      	lsls	r2, r3, #5
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd8:	461a      	mov	r2, r3
 8002fda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fde:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002fe0:	e258      	b.n	8003494 <HCD_HC_IN_IRQHandler+0x6b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	015a      	lsls	r2, r3, #5
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	f040 80ed 	bne.w	80031d4 <HCD_HC_IN_IRQHandler+0x3f6>
    hhcd->hc[ch_num].state = HC_XFRC;
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	212c      	movs	r1, #44	; 0x2c
 8003000:	fb01 f303 	mul.w	r3, r1, r3
 8003004:	4413      	add	r3, r2
 8003006:	3361      	adds	r3, #97	; 0x61
 8003008:	2201      	movs	r2, #1
 800300a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	212c      	movs	r1, #44	; 0x2c
 8003012:	fb01 f303 	mul.w	r3, r1, r3
 8003016:	4413      	add	r3, r2
 8003018:	335c      	adds	r3, #92	; 0x5c
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4413      	add	r3, r2
 8003026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302a:	461a      	mov	r2, r3
 800302c:	2301      	movs	r3, #1
 800302e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	212c      	movs	r1, #44	; 0x2c
 8003036:	fb01 f303 	mul.w	r3, r1, r3
 800303a:	4413      	add	r3, r2
 800303c:	333f      	adds	r3, #63	; 0x3f
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d009      	beq.n	8003058 <HCD_HC_IN_IRQHandler+0x27a>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	212c      	movs	r1, #44	; 0x2c
 800304a:	fb01 f303 	mul.w	r3, r1, r3
 800304e:	4413      	add	r3, r2
 8003050:	333f      	adds	r3, #63	; 0x3f
 8003052:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003054:	2b02      	cmp	r3, #2
 8003056:	d111      	bne.n	800307c <HCD_HC_IN_IRQHandler+0x29e>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	4611      	mov	r1, r2
 8003062:	4618      	mov	r0, r3
 8003064:	f003 fdeb 	bl	8006c3e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	4413      	add	r3, r2
 8003070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003074:	461a      	mov	r2, r3
 8003076:	2310      	movs	r3, #16
 8003078:	6093      	str	r3, [r2, #8]
 800307a:	e066      	b.n	800314a <HCD_HC_IN_IRQHandler+0x36c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	212c      	movs	r1, #44	; 0x2c
 8003082:	fb01 f303 	mul.w	r3, r1, r3
 8003086:	4413      	add	r3, r2
 8003088:	333f      	adds	r3, #63	; 0x3f
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b03      	cmp	r3, #3
 800308e:	d127      	bne.n	80030e0 <HCD_HC_IN_IRQHandler+0x302>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	015a      	lsls	r2, r3, #5
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	4413      	add	r3, r2
 8003098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	0151      	lsls	r1, r2, #5
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	440a      	add	r2, r1
 80030a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80030ae:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	212c      	movs	r1, #44	; 0x2c
 80030b6:	fb01 f303 	mul.w	r3, r1, r3
 80030ba:	4413      	add	r3, r2
 80030bc:	3360      	adds	r3, #96	; 0x60
 80030be:	2201      	movs	r2, #1
 80030c0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	b2d9      	uxtb	r1, r3
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	202c      	movs	r0, #44	; 0x2c
 80030cc:	fb00 f303 	mul.w	r3, r0, r3
 80030d0:	4413      	add	r3, r2
 80030d2:	3360      	adds	r3, #96	; 0x60
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	461a      	mov	r2, r3
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f007 f9d5 	bl	800a488 <HAL_HCD_HC_NotifyURBChange_Callback>
 80030de:	e034      	b.n	800314a <HCD_HC_IN_IRQHandler+0x36c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	212c      	movs	r1, #44	; 0x2c
 80030e6:	fb01 f303 	mul.w	r3, r1, r3
 80030ea:	4413      	add	r3, r2
 80030ec:	333f      	adds	r3, #63	; 0x3f
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d12a      	bne.n	800314a <HCD_HC_IN_IRQHandler+0x36c>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	212c      	movs	r1, #44	; 0x2c
 80030fa:	fb01 f303 	mul.w	r3, r1, r3
 80030fe:	4413      	add	r3, r2
 8003100:	3360      	adds	r3, #96	; 0x60
 8003102:	2201      	movs	r2, #1
 8003104:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	212c      	movs	r1, #44	; 0x2c
 800310c:	fb01 f303 	mul.w	r3, r1, r3
 8003110:	4413      	add	r3, r2
 8003112:	3354      	adds	r3, #84	; 0x54
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	f083 0301 	eor.w	r3, r3, #1
 800311a:	b2d8      	uxtb	r0, r3
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	212c      	movs	r1, #44	; 0x2c
 8003122:	fb01 f303 	mul.w	r3, r1, r3
 8003126:	4413      	add	r3, r2
 8003128:	3354      	adds	r3, #84	; 0x54
 800312a:	4602      	mov	r2, r0
 800312c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	b2d9      	uxtb	r1, r3
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	202c      	movs	r0, #44	; 0x2c
 8003138:	fb00 f303 	mul.w	r3, r0, r3
 800313c:	4413      	add	r3, r2
 800313e:	3360      	adds	r3, #96	; 0x60
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	461a      	mov	r2, r3
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f007 f99f 	bl	800a488 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d12b      	bne.n	80031aa <HCD_HC_IN_IRQHandler+0x3cc>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	212c      	movs	r1, #44	; 0x2c
 8003158:	fb01 f303 	mul.w	r3, r1, r3
 800315c:	4413      	add	r3, r2
 800315e:	3348      	adds	r3, #72	; 0x48
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	202c      	movs	r0, #44	; 0x2c
 8003168:	fb00 f202 	mul.w	r2, r0, r2
 800316c:	440a      	add	r2, r1
 800316e:	3240      	adds	r2, #64	; 0x40
 8003170:	8812      	ldrh	r2, [r2, #0]
 8003172:	fbb3 f3f2 	udiv	r3, r3, r2
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 818a 	beq.w	8003494 <HCD_HC_IN_IRQHandler+0x6b6>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	212c      	movs	r1, #44	; 0x2c
 8003186:	fb01 f303 	mul.w	r3, r1, r3
 800318a:	4413      	add	r3, r2
 800318c:	3354      	adds	r3, #84	; 0x54
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	f083 0301 	eor.w	r3, r3, #1
 8003194:	b2d8      	uxtb	r0, r3
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	212c      	movs	r1, #44	; 0x2c
 800319c:	fb01 f303 	mul.w	r3, r1, r3
 80031a0:	4413      	add	r3, r2
 80031a2:	3354      	adds	r3, #84	; 0x54
 80031a4:	4602      	mov	r2, r0
 80031a6:	701a      	strb	r2, [r3, #0]
}
 80031a8:	e174      	b.n	8003494 <HCD_HC_IN_IRQHandler+0x6b6>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	212c      	movs	r1, #44	; 0x2c
 80031b0:	fb01 f303 	mul.w	r3, r1, r3
 80031b4:	4413      	add	r3, r2
 80031b6:	3354      	adds	r3, #84	; 0x54
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	f083 0301 	eor.w	r3, r3, #1
 80031be:	b2d8      	uxtb	r0, r3
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	212c      	movs	r1, #44	; 0x2c
 80031c6:	fb01 f303 	mul.w	r3, r1, r3
 80031ca:	4413      	add	r3, r2
 80031cc:	3354      	adds	r3, #84	; 0x54
 80031ce:	4602      	mov	r2, r0
 80031d0:	701a      	strb	r2, [r3, #0]
}
 80031d2:	e15f      	b.n	8003494 <HCD_HC_IN_IRQHandler+0x6b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	f040 80f6 	bne.w	80033d8 <HCD_HC_IN_IRQHandler+0x5fa>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	212c      	movs	r1, #44	; 0x2c
 80031f2:	fb01 f303 	mul.w	r3, r1, r3
 80031f6:	4413      	add	r3, r2
 80031f8:	3361      	adds	r3, #97	; 0x61
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d109      	bne.n	8003214 <HCD_HC_IN_IRQHandler+0x436>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	212c      	movs	r1, #44	; 0x2c
 8003206:	fb01 f303 	mul.w	r3, r1, r3
 800320a:	4413      	add	r3, r2
 800320c:	3360      	adds	r3, #96	; 0x60
 800320e:	2201      	movs	r2, #1
 8003210:	701a      	strb	r2, [r3, #0]
 8003212:	e0c9      	b.n	80033a8 <HCD_HC_IN_IRQHandler+0x5ca>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	212c      	movs	r1, #44	; 0x2c
 800321a:	fb01 f303 	mul.w	r3, r1, r3
 800321e:	4413      	add	r3, r2
 8003220:	3361      	adds	r3, #97	; 0x61
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b05      	cmp	r3, #5
 8003226:	d109      	bne.n	800323c <HCD_HC_IN_IRQHandler+0x45e>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	212c      	movs	r1, #44	; 0x2c
 800322e:	fb01 f303 	mul.w	r3, r1, r3
 8003232:	4413      	add	r3, r2
 8003234:	3360      	adds	r3, #96	; 0x60
 8003236:	2205      	movs	r2, #5
 8003238:	701a      	strb	r2, [r3, #0]
 800323a:	e0b5      	b.n	80033a8 <HCD_HC_IN_IRQHandler+0x5ca>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	212c      	movs	r1, #44	; 0x2c
 8003242:	fb01 f303 	mul.w	r3, r1, r3
 8003246:	4413      	add	r3, r2
 8003248:	3361      	adds	r3, #97	; 0x61
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b06      	cmp	r3, #6
 800324e:	d009      	beq.n	8003264 <HCD_HC_IN_IRQHandler+0x486>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	212c      	movs	r1, #44	; 0x2c
 8003256:	fb01 f303 	mul.w	r3, r1, r3
 800325a:	4413      	add	r3, r2
 800325c:	3361      	adds	r3, #97	; 0x61
 800325e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003260:	2b08      	cmp	r3, #8
 8003262:	d150      	bne.n	8003306 <HCD_HC_IN_IRQHandler+0x528>
      hhcd->hc[ch_num].ErrCnt++;
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	212c      	movs	r1, #44	; 0x2c
 800326a:	fb01 f303 	mul.w	r3, r1, r3
 800326e:	4413      	add	r3, r2
 8003270:	335c      	adds	r3, #92	; 0x5c
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	1c5a      	adds	r2, r3, #1
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	202c      	movs	r0, #44	; 0x2c
 800327c:	fb00 f303 	mul.w	r3, r0, r3
 8003280:	440b      	add	r3, r1
 8003282:	335c      	adds	r3, #92	; 0x5c
 8003284:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	212c      	movs	r1, #44	; 0x2c
 800328c:	fb01 f303 	mul.w	r3, r1, r3
 8003290:	4413      	add	r3, r2
 8003292:	335c      	adds	r3, #92	; 0x5c
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d912      	bls.n	80032c0 <HCD_HC_IN_IRQHandler+0x4e2>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	212c      	movs	r1, #44	; 0x2c
 80032a0:	fb01 f303 	mul.w	r3, r1, r3
 80032a4:	4413      	add	r3, r2
 80032a6:	335c      	adds	r3, #92	; 0x5c
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	212c      	movs	r1, #44	; 0x2c
 80032b2:	fb01 f303 	mul.w	r3, r1, r3
 80032b6:	4413      	add	r3, r2
 80032b8:	3360      	adds	r3, #96	; 0x60
 80032ba:	2204      	movs	r2, #4
 80032bc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80032be:	e073      	b.n	80033a8 <HCD_HC_IN_IRQHandler+0x5ca>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	212c      	movs	r1, #44	; 0x2c
 80032c6:	fb01 f303 	mul.w	r3, r1, r3
 80032ca:	4413      	add	r3, r2
 80032cc:	3360      	adds	r3, #96	; 0x60
 80032ce:	2202      	movs	r2, #2
 80032d0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	015a      	lsls	r2, r3, #5
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	4413      	add	r3, r2
 80032da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032e8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032f0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	015a      	lsls	r2, r3, #5
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032fe:	461a      	mov	r2, r3
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003304:	e050      	b.n	80033a8 <HCD_HC_IN_IRQHandler+0x5ca>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	212c      	movs	r1, #44	; 0x2c
 800330c:	fb01 f303 	mul.w	r3, r1, r3
 8003310:	4413      	add	r3, r2
 8003312:	3361      	adds	r3, #97	; 0x61
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2b03      	cmp	r3, #3
 8003318:	d122      	bne.n	8003360 <HCD_HC_IN_IRQHandler+0x582>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	212c      	movs	r1, #44	; 0x2c
 8003320:	fb01 f303 	mul.w	r3, r1, r3
 8003324:	4413      	add	r3, r2
 8003326:	3360      	adds	r3, #96	; 0x60
 8003328:	2202      	movs	r2, #2
 800332a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	4413      	add	r3, r2
 8003334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003342:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800334a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	4413      	add	r3, r2
 8003354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003358:	461a      	mov	r2, r3
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	e023      	b.n	80033a8 <HCD_HC_IN_IRQHandler+0x5ca>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	212c      	movs	r1, #44	; 0x2c
 8003366:	fb01 f303 	mul.w	r3, r1, r3
 800336a:	4413      	add	r3, r2
 800336c:	3361      	adds	r3, #97	; 0x61
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b07      	cmp	r3, #7
 8003372:	d119      	bne.n	80033a8 <HCD_HC_IN_IRQHandler+0x5ca>
      hhcd->hc[ch_num].ErrCnt++;
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	212c      	movs	r1, #44	; 0x2c
 800337a:	fb01 f303 	mul.w	r3, r1, r3
 800337e:	4413      	add	r3, r2
 8003380:	335c      	adds	r3, #92	; 0x5c
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	202c      	movs	r0, #44	; 0x2c
 800338c:	fb00 f303 	mul.w	r3, r0, r3
 8003390:	440b      	add	r3, r1
 8003392:	335c      	adds	r3, #92	; 0x5c
 8003394:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	212c      	movs	r1, #44	; 0x2c
 800339c:	fb01 f303 	mul.w	r3, r1, r3
 80033a0:	4413      	add	r3, r2
 80033a2:	3360      	adds	r3, #96	; 0x60
 80033a4:	2204      	movs	r2, #4
 80033a6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	015a      	lsls	r2, r3, #5
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	4413      	add	r3, r2
 80033b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b4:	461a      	mov	r2, r3
 80033b6:	2302      	movs	r3, #2
 80033b8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	b2d9      	uxtb	r1, r3
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	202c      	movs	r0, #44	; 0x2c
 80033c4:	fb00 f303 	mul.w	r3, r0, r3
 80033c8:	4413      	add	r3, r2
 80033ca:	3360      	adds	r3, #96	; 0x60
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	461a      	mov	r2, r3
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f007 f859 	bl	800a488 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80033d6:	e05d      	b.n	8003494 <HCD_HC_IN_IRQHandler+0x6b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 0310 	and.w	r3, r3, #16
 80033ea:	2b10      	cmp	r3, #16
 80033ec:	d152      	bne.n	8003494 <HCD_HC_IN_IRQHandler+0x6b6>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	212c      	movs	r1, #44	; 0x2c
 80033f4:	fb01 f303 	mul.w	r3, r1, r3
 80033f8:	4413      	add	r3, r2
 80033fa:	333f      	adds	r3, #63	; 0x3f
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b03      	cmp	r3, #3
 8003400:	d111      	bne.n	8003426 <HCD_HC_IN_IRQHandler+0x648>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	212c      	movs	r1, #44	; 0x2c
 8003408:	fb01 f303 	mul.w	r3, r1, r3
 800340c:	4413      	add	r3, r2
 800340e:	335c      	adds	r3, #92	; 0x5c
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	4611      	mov	r1, r2
 800341e:	4618      	mov	r0, r3
 8003420:	f003 fc0d 	bl	8006c3e <USB_HC_Halt>
 8003424:	e02d      	b.n	8003482 <HCD_HC_IN_IRQHandler+0x6a4>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	212c      	movs	r1, #44	; 0x2c
 800342c:	fb01 f303 	mul.w	r3, r1, r3
 8003430:	4413      	add	r3, r2
 8003432:	333f      	adds	r3, #63	; 0x3f
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d009      	beq.n	800344e <HCD_HC_IN_IRQHandler+0x670>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	212c      	movs	r1, #44	; 0x2c
 8003440:	fb01 f303 	mul.w	r3, r1, r3
 8003444:	4413      	add	r3, r2
 8003446:	333f      	adds	r3, #63	; 0x3f
 8003448:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800344a:	2b02      	cmp	r3, #2
 800344c:	d119      	bne.n	8003482 <HCD_HC_IN_IRQHandler+0x6a4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	212c      	movs	r1, #44	; 0x2c
 8003454:	fb01 f303 	mul.w	r3, r1, r3
 8003458:	4413      	add	r3, r2
 800345a:	335c      	adds	r3, #92	; 0x5c
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	212c      	movs	r1, #44	; 0x2c
 8003466:	fb01 f303 	mul.w	r3, r1, r3
 800346a:	4413      	add	r3, r2
 800346c:	3361      	adds	r3, #97	; 0x61
 800346e:	2203      	movs	r2, #3
 8003470:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	4611      	mov	r1, r2
 800347c:	4618      	mov	r0, r3
 800347e:	f003 fbde 	bl	8006c3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	015a      	lsls	r2, r3, #5
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4413      	add	r3, r2
 800348a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800348e:	461a      	mov	r2, r3
 8003490:	2310      	movs	r3, #16
 8003492:	6093      	str	r3, [r2, #8]
}
 8003494:	bf00      	nop
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80034b2:	78fb      	ldrb	r3, [r7, #3]
 80034b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	015a      	lsls	r2, r3, #5
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	4413      	add	r3, r2
 80034be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	d11a      	bne.n	8003502 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	015a      	lsls	r2, r3, #5
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	4413      	add	r3, r2
 80034d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d8:	461a      	mov	r2, r3
 80034da:	2304      	movs	r3, #4
 80034dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	212c      	movs	r1, #44	; 0x2c
 80034e4:	fb01 f303 	mul.w	r3, r1, r3
 80034e8:	4413      	add	r3, r2
 80034ea:	3361      	adds	r3, #97	; 0x61
 80034ec:	2206      	movs	r2, #6
 80034ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	4611      	mov	r1, r2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f003 fb9f 	bl	8006c3e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003500:	e2ca      	b.n	8003a98 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	4413      	add	r3, r2
 800350a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 0320 	and.w	r3, r3, #32
 8003514:	2b20      	cmp	r3, #32
 8003516:	d12e      	bne.n	8003576 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	4413      	add	r3, r2
 8003520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003524:	461a      	mov	r2, r3
 8003526:	2320      	movs	r3, #32
 8003528:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	212c      	movs	r1, #44	; 0x2c
 8003530:	fb01 f303 	mul.w	r3, r1, r3
 8003534:	4413      	add	r3, r2
 8003536:	333d      	adds	r3, #61	; 0x3d
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b01      	cmp	r3, #1
 800353c:	f040 82ac 	bne.w	8003a98 <HCD_HC_OUT_IRQHandler+0x5fc>
      hhcd->hc[ch_num].do_ping = 0U;
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	212c      	movs	r1, #44	; 0x2c
 8003546:	fb01 f303 	mul.w	r3, r1, r3
 800354a:	4413      	add	r3, r2
 800354c:	333d      	adds	r3, #61	; 0x3d
 800354e:	2200      	movs	r2, #0
 8003550:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	212c      	movs	r1, #44	; 0x2c
 8003558:	fb01 f303 	mul.w	r3, r1, r3
 800355c:	4413      	add	r3, r2
 800355e:	3360      	adds	r3, #96	; 0x60
 8003560:	2202      	movs	r2, #2
 8003562:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	4611      	mov	r1, r2
 800356e:	4618      	mov	r0, r3
 8003570:	f003 fb65 	bl	8006c3e <USB_HC_Halt>
}
 8003574:	e290      	b.n	8003a98 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	4413      	add	r3, r2
 800357e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800358c:	d112      	bne.n	80035b4 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	015a      	lsls	r2, r3, #5
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	4413      	add	r3, r2
 8003596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800359a:	461a      	mov	r2, r3
 800359c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035a0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	4611      	mov	r1, r2
 80035ac:	4618      	mov	r0, r3
 80035ae:	f003 fb46 	bl	8006c3e <USB_HC_Halt>
}
 80035b2:	e271      	b.n	8003a98 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d140      	bne.n	800364c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	212c      	movs	r1, #44	; 0x2c
 80035d0:	fb01 f303 	mul.w	r3, r1, r3
 80035d4:	4413      	add	r3, r2
 80035d6:	335c      	adds	r3, #92	; 0x5c
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ee:	2b40      	cmp	r3, #64	; 0x40
 80035f0:	d111      	bne.n	8003616 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	212c      	movs	r1, #44	; 0x2c
 80035f8:	fb01 f303 	mul.w	r3, r1, r3
 80035fc:	4413      	add	r3, r2
 80035fe:	333d      	adds	r3, #61	; 0x3d
 8003600:	2201      	movs	r2, #1
 8003602:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	4413      	add	r3, r2
 800360c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003610:	461a      	mov	r2, r3
 8003612:	2340      	movs	r3, #64	; 0x40
 8003614:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	4413      	add	r3, r2
 800361e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003622:	461a      	mov	r2, r3
 8003624:	2301      	movs	r3, #1
 8003626:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	212c      	movs	r1, #44	; 0x2c
 800362e:	fb01 f303 	mul.w	r3, r1, r3
 8003632:	4413      	add	r3, r2
 8003634:	3361      	adds	r3, #97	; 0x61
 8003636:	2201      	movs	r2, #1
 8003638:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	4611      	mov	r1, r2
 8003644:	4618      	mov	r0, r3
 8003646:	f003 fafa 	bl	8006c3e <USB_HC_Halt>
}
 800364a:	e225      	b.n	8003a98 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	4413      	add	r3, r2
 8003654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365e:	2b40      	cmp	r3, #64	; 0x40
 8003660:	d12c      	bne.n	80036bc <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	212c      	movs	r1, #44	; 0x2c
 8003668:	fb01 f303 	mul.w	r3, r1, r3
 800366c:	4413      	add	r3, r2
 800366e:	3361      	adds	r3, #97	; 0x61
 8003670:	2204      	movs	r2, #4
 8003672:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	212c      	movs	r1, #44	; 0x2c
 800367a:	fb01 f303 	mul.w	r3, r1, r3
 800367e:	4413      	add	r3, r2
 8003680:	333d      	adds	r3, #61	; 0x3d
 8003682:	2201      	movs	r2, #1
 8003684:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	212c      	movs	r1, #44	; 0x2c
 800368c:	fb01 f303 	mul.w	r3, r1, r3
 8003690:	4413      	add	r3, r2
 8003692:	335c      	adds	r3, #92	; 0x5c
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	4611      	mov	r1, r2
 80036a2:	4618      	mov	r0, r3
 80036a4:	f003 facb 	bl	8006c3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	015a      	lsls	r2, r3, #5
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	4413      	add	r3, r2
 80036b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b4:	461a      	mov	r2, r3
 80036b6:	2340      	movs	r3, #64	; 0x40
 80036b8:	6093      	str	r3, [r2, #8]
}
 80036ba:	e1ed      	b.n	8003a98 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b08      	cmp	r3, #8
 80036d0:	d11a      	bne.n	8003708 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	015a      	lsls	r2, r3, #5
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036de:	461a      	mov	r2, r3
 80036e0:	2308      	movs	r3, #8
 80036e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	212c      	movs	r1, #44	; 0x2c
 80036ea:	fb01 f303 	mul.w	r3, r1, r3
 80036ee:	4413      	add	r3, r2
 80036f0:	3361      	adds	r3, #97	; 0x61
 80036f2:	2205      	movs	r2, #5
 80036f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	4611      	mov	r1, r2
 8003700:	4618      	mov	r0, r3
 8003702:	f003 fa9c 	bl	8006c3e <USB_HC_Halt>
}
 8003706:	e1c7      	b.n	8003a98 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	015a      	lsls	r2, r3, #5
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	4413      	add	r3, r2
 8003710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 0310 	and.w	r3, r3, #16
 800371a:	2b10      	cmp	r3, #16
 800371c:	d123      	bne.n	8003766 <HCD_HC_OUT_IRQHandler+0x2ca>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	212c      	movs	r1, #44	; 0x2c
 8003724:	fb01 f303 	mul.w	r3, r1, r3
 8003728:	4413      	add	r3, r2
 800372a:	335c      	adds	r3, #92	; 0x5c
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	212c      	movs	r1, #44	; 0x2c
 8003736:	fb01 f303 	mul.w	r3, r1, r3
 800373a:	4413      	add	r3, r2
 800373c:	3361      	adds	r3, #97	; 0x61
 800373e:	2203      	movs	r2, #3
 8003740:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	4611      	mov	r1, r2
 800374c:	4618      	mov	r0, r3
 800374e:	f003 fa76 	bl	8006c3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	4413      	add	r3, r2
 800375a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375e:	461a      	mov	r2, r3
 8003760:	2310      	movs	r3, #16
 8003762:	6093      	str	r3, [r2, #8]
}
 8003764:	e198      	b.n	8003a98 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	015a      	lsls	r2, r3, #5
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	4413      	add	r3, r2
 800376e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003778:	2b80      	cmp	r3, #128	; 0x80
 800377a:	d11a      	bne.n	80037b2 <HCD_HC_OUT_IRQHandler+0x316>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	212c      	movs	r1, #44	; 0x2c
 8003782:	fb01 f303 	mul.w	r3, r1, r3
 8003786:	4413      	add	r3, r2
 8003788:	3361      	adds	r3, #97	; 0x61
 800378a:	2206      	movs	r2, #6
 800378c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	4611      	mov	r1, r2
 8003798:	4618      	mov	r0, r3
 800379a:	f003 fa50 	bl	8006c3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	015a      	lsls	r2, r3, #5
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	4413      	add	r3, r2
 80037a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037aa:	461a      	mov	r2, r3
 80037ac:	2380      	movs	r3, #128	; 0x80
 80037ae:	6093      	str	r3, [r2, #8]
}
 80037b0:	e172      	b.n	8003a98 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	015a      	lsls	r2, r3, #5
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	4413      	add	r3, r2
 80037ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c8:	d11b      	bne.n	8003802 <HCD_HC_OUT_IRQHandler+0x366>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	212c      	movs	r1, #44	; 0x2c
 80037d0:	fb01 f303 	mul.w	r3, r1, r3
 80037d4:	4413      	add	r3, r2
 80037d6:	3361      	adds	r3, #97	; 0x61
 80037d8:	2208      	movs	r2, #8
 80037da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	4611      	mov	r1, r2
 80037e6:	4618      	mov	r0, r3
 80037e8:	f003 fa29 	bl	8006c3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f8:	461a      	mov	r2, r3
 80037fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037fe:	6093      	str	r3, [r2, #8]
}
 8003800:	e14a      	b.n	8003a98 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	015a      	lsls	r2, r3, #5
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	4413      	add	r3, r2
 800380a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b02      	cmp	r3, #2
 8003816:	f040 813f 	bne.w	8003a98 <HCD_HC_OUT_IRQHandler+0x5fc>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	212c      	movs	r1, #44	; 0x2c
 8003820:	fb01 f303 	mul.w	r3, r1, r3
 8003824:	4413      	add	r3, r2
 8003826:	3361      	adds	r3, #97	; 0x61
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d17d      	bne.n	800392a <HCD_HC_OUT_IRQHandler+0x48e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	212c      	movs	r1, #44	; 0x2c
 8003834:	fb01 f303 	mul.w	r3, r1, r3
 8003838:	4413      	add	r3, r2
 800383a:	3360      	adds	r3, #96	; 0x60
 800383c:	2201      	movs	r2, #1
 800383e:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	212c      	movs	r1, #44	; 0x2c
 8003846:	fb01 f303 	mul.w	r3, r1, r3
 800384a:	4413      	add	r3, r2
 800384c:	333f      	adds	r3, #63	; 0x3f
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	2b02      	cmp	r3, #2
 8003852:	d00a      	beq.n	800386a <HCD_HC_OUT_IRQHandler+0x3ce>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	212c      	movs	r1, #44	; 0x2c
 800385a:	fb01 f303 	mul.w	r3, r1, r3
 800385e:	4413      	add	r3, r2
 8003860:	333f      	adds	r3, #63	; 0x3f
 8003862:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003864:	2b03      	cmp	r3, #3
 8003866:	f040 8100 	bne.w	8003a6a <HCD_HC_OUT_IRQHandler+0x5ce>
        if (hhcd->Init.dma_enable == 0U)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d113      	bne.n	800389a <HCD_HC_OUT_IRQHandler+0x3fe>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	212c      	movs	r1, #44	; 0x2c
 8003878:	fb01 f303 	mul.w	r3, r1, r3
 800387c:	4413      	add	r3, r2
 800387e:	3355      	adds	r3, #85	; 0x55
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	f083 0301 	eor.w	r3, r3, #1
 8003886:	b2d8      	uxtb	r0, r3
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	212c      	movs	r1, #44	; 0x2c
 800388e:	fb01 f303 	mul.w	r3, r1, r3
 8003892:	4413      	add	r3, r2
 8003894:	3355      	adds	r3, #85	; 0x55
 8003896:	4602      	mov	r2, r0
 8003898:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	f040 80e3 	bne.w	8003a6a <HCD_HC_OUT_IRQHandler+0x5ce>
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	212c      	movs	r1, #44	; 0x2c
 80038aa:	fb01 f303 	mul.w	r3, r1, r3
 80038ae:	4413      	add	r3, r2
 80038b0:	334c      	adds	r3, #76	; 0x4c
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 80d8 	beq.w	8003a6a <HCD_HC_OUT_IRQHandler+0x5ce>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	212c      	movs	r1, #44	; 0x2c
 80038c0:	fb01 f303 	mul.w	r3, r1, r3
 80038c4:	4413      	add	r3, r2
 80038c6:	334c      	adds	r3, #76	; 0x4c
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	202c      	movs	r0, #44	; 0x2c
 80038d0:	fb00 f202 	mul.w	r2, r0, r2
 80038d4:	440a      	add	r2, r1
 80038d6:	3240      	adds	r2, #64	; 0x40
 80038d8:	8812      	ldrh	r2, [r2, #0]
 80038da:	4413      	add	r3, r2
 80038dc:	3b01      	subs	r3, #1
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	202c      	movs	r0, #44	; 0x2c
 80038e4:	fb00 f202 	mul.w	r2, r0, r2
 80038e8:	440a      	add	r2, r1
 80038ea:	3240      	adds	r2, #64	; 0x40
 80038ec:	8812      	ldrh	r2, [r2, #0]
 80038ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 80b5 	beq.w	8003a6a <HCD_HC_OUT_IRQHandler+0x5ce>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	212c      	movs	r1, #44	; 0x2c
 8003906:	fb01 f303 	mul.w	r3, r1, r3
 800390a:	4413      	add	r3, r2
 800390c:	3355      	adds	r3, #85	; 0x55
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	f083 0301 	eor.w	r3, r3, #1
 8003914:	b2d8      	uxtb	r0, r3
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	212c      	movs	r1, #44	; 0x2c
 800391c:	fb01 f303 	mul.w	r3, r1, r3
 8003920:	4413      	add	r3, r2
 8003922:	3355      	adds	r3, #85	; 0x55
 8003924:	4602      	mov	r2, r0
 8003926:	701a      	strb	r2, [r3, #0]
 8003928:	e09f      	b.n	8003a6a <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	212c      	movs	r1, #44	; 0x2c
 8003930:	fb01 f303 	mul.w	r3, r1, r3
 8003934:	4413      	add	r3, r2
 8003936:	3361      	adds	r3, #97	; 0x61
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	2b03      	cmp	r3, #3
 800393c:	d109      	bne.n	8003952 <HCD_HC_OUT_IRQHandler+0x4b6>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	212c      	movs	r1, #44	; 0x2c
 8003944:	fb01 f303 	mul.w	r3, r1, r3
 8003948:	4413      	add	r3, r2
 800394a:	3360      	adds	r3, #96	; 0x60
 800394c:	2202      	movs	r2, #2
 800394e:	701a      	strb	r2, [r3, #0]
 8003950:	e08b      	b.n	8003a6a <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	212c      	movs	r1, #44	; 0x2c
 8003958:	fb01 f303 	mul.w	r3, r1, r3
 800395c:	4413      	add	r3, r2
 800395e:	3361      	adds	r3, #97	; 0x61
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	2b04      	cmp	r3, #4
 8003964:	d109      	bne.n	800397a <HCD_HC_OUT_IRQHandler+0x4de>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	212c      	movs	r1, #44	; 0x2c
 800396c:	fb01 f303 	mul.w	r3, r1, r3
 8003970:	4413      	add	r3, r2
 8003972:	3360      	adds	r3, #96	; 0x60
 8003974:	2202      	movs	r2, #2
 8003976:	701a      	strb	r2, [r3, #0]
 8003978:	e077      	b.n	8003a6a <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	212c      	movs	r1, #44	; 0x2c
 8003980:	fb01 f303 	mul.w	r3, r1, r3
 8003984:	4413      	add	r3, r2
 8003986:	3361      	adds	r3, #97	; 0x61
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	2b05      	cmp	r3, #5
 800398c:	d109      	bne.n	80039a2 <HCD_HC_OUT_IRQHandler+0x506>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	212c      	movs	r1, #44	; 0x2c
 8003994:	fb01 f303 	mul.w	r3, r1, r3
 8003998:	4413      	add	r3, r2
 800399a:	3360      	adds	r3, #96	; 0x60
 800399c:	2205      	movs	r2, #5
 800399e:	701a      	strb	r2, [r3, #0]
 80039a0:	e063      	b.n	8003a6a <HCD_HC_OUT_IRQHandler+0x5ce>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	212c      	movs	r1, #44	; 0x2c
 80039a8:	fb01 f303 	mul.w	r3, r1, r3
 80039ac:	4413      	add	r3, r2
 80039ae:	3361      	adds	r3, #97	; 0x61
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	2b06      	cmp	r3, #6
 80039b4:	d009      	beq.n	80039ca <HCD_HC_OUT_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	212c      	movs	r1, #44	; 0x2c
 80039bc:	fb01 f303 	mul.w	r3, r1, r3
 80039c0:	4413      	add	r3, r2
 80039c2:	3361      	adds	r3, #97	; 0x61
 80039c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80039c6:	2b08      	cmp	r3, #8
 80039c8:	d14f      	bne.n	8003a6a <HCD_HC_OUT_IRQHandler+0x5ce>
      hhcd->hc[ch_num].ErrCnt++;
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	212c      	movs	r1, #44	; 0x2c
 80039d0:	fb01 f303 	mul.w	r3, r1, r3
 80039d4:	4413      	add	r3, r2
 80039d6:	335c      	adds	r3, #92	; 0x5c
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	202c      	movs	r0, #44	; 0x2c
 80039e2:	fb00 f303 	mul.w	r3, r0, r3
 80039e6:	440b      	add	r3, r1
 80039e8:	335c      	adds	r3, #92	; 0x5c
 80039ea:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	212c      	movs	r1, #44	; 0x2c
 80039f2:	fb01 f303 	mul.w	r3, r1, r3
 80039f6:	4413      	add	r3, r2
 80039f8:	335c      	adds	r3, #92	; 0x5c
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d912      	bls.n	8003a26 <HCD_HC_OUT_IRQHandler+0x58a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	212c      	movs	r1, #44	; 0x2c
 8003a06:	fb01 f303 	mul.w	r3, r1, r3
 8003a0a:	4413      	add	r3, r2
 8003a0c:	335c      	adds	r3, #92	; 0x5c
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	212c      	movs	r1, #44	; 0x2c
 8003a18:	fb01 f303 	mul.w	r3, r1, r3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	3360      	adds	r3, #96	; 0x60
 8003a20:	2204      	movs	r2, #4
 8003a22:	701a      	strb	r2, [r3, #0]
 8003a24:	e021      	b.n	8003a6a <HCD_HC_OUT_IRQHandler+0x5ce>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	212c      	movs	r1, #44	; 0x2c
 8003a2c:	fb01 f303 	mul.w	r3, r1, r3
 8003a30:	4413      	add	r3, r2
 8003a32:	3360      	adds	r3, #96	; 0x60
 8003a34:	2202      	movs	r2, #2
 8003a36:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	015a      	lsls	r2, r3, #5
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a4e:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a56:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a64:	461a      	mov	r2, r3
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	015a      	lsls	r2, r3, #5
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	4413      	add	r3, r2
 8003a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a76:	461a      	mov	r2, r3
 8003a78:	2302      	movs	r3, #2
 8003a7a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	b2d9      	uxtb	r1, r3
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	202c      	movs	r0, #44	; 0x2c
 8003a86:	fb00 f303 	mul.w	r3, r0, r3
 8003a8a:	4413      	add	r3, r2
 8003a8c:	3360      	adds	r3, #96	; 0x60
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	461a      	mov	r2, r3
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f006 fcf8 	bl	800a488 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003a98:	bf00      	nop
 8003a9a:	3720      	adds	r7, #32
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08a      	sub	sp, #40	; 0x28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	f003 030f 	and.w	r3, r3, #15
 8003ac0:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	0c5b      	lsrs	r3, r3, #17
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	091b      	lsrs	r3, r3, #4
 8003ad0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ad4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d004      	beq.n	8003ae6 <HCD_RXQLVL_IRQHandler+0x46>
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	2b05      	cmp	r3, #5
 8003ae0:	f000 80a9 	beq.w	8003c36 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003ae4:	e0aa      	b.n	8003c3c <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 80a6 	beq.w	8003c3a <HCD_RXQLVL_IRQHandler+0x19a>
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	212c      	movs	r1, #44	; 0x2c
 8003af4:	fb01 f303 	mul.w	r3, r1, r3
 8003af8:	4413      	add	r3, r2
 8003afa:	3344      	adds	r3, #68	; 0x44
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 809b 	beq.w	8003c3a <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	212c      	movs	r1, #44	; 0x2c
 8003b0a:	fb01 f303 	mul.w	r3, r1, r3
 8003b0e:	4413      	add	r3, r2
 8003b10:	3350      	adds	r3, #80	; 0x50
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	441a      	add	r2, r3
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	202c      	movs	r0, #44	; 0x2c
 8003b1e:	fb00 f303 	mul.w	r3, r0, r3
 8003b22:	440b      	add	r3, r1
 8003b24:	334c      	adds	r3, #76	; 0x4c
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d87a      	bhi.n	8003c22 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6818      	ldr	r0, [r3, #0]
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	212c      	movs	r1, #44	; 0x2c
 8003b36:	fb01 f303 	mul.w	r3, r1, r3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	3344      	adds	r3, #68	; 0x44
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	b292      	uxth	r2, r2
 8003b44:	4619      	mov	r1, r3
 8003b46:	f002 fc75 	bl	8006434 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	212c      	movs	r1, #44	; 0x2c
 8003b50:	fb01 f303 	mul.w	r3, r1, r3
 8003b54:	4413      	add	r3, r2
 8003b56:	3344      	adds	r3, #68	; 0x44
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	441a      	add	r2, r3
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	202c      	movs	r0, #44	; 0x2c
 8003b64:	fb00 f303 	mul.w	r3, r0, r3
 8003b68:	440b      	add	r3, r1
 8003b6a:	3344      	adds	r3, #68	; 0x44
 8003b6c:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	212c      	movs	r1, #44	; 0x2c
 8003b74:	fb01 f303 	mul.w	r3, r1, r3
 8003b78:	4413      	add	r3, r2
 8003b7a:	3350      	adds	r3, #80	; 0x50
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	441a      	add	r2, r3
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	202c      	movs	r0, #44	; 0x2c
 8003b88:	fb00 f303 	mul.w	r3, r0, r3
 8003b8c:	440b      	add	r3, r1
 8003b8e:	3350      	adds	r3, #80	; 0x50
 8003b90:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	0cdb      	lsrs	r3, r3, #19
 8003ba2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ba6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	212c      	movs	r1, #44	; 0x2c
 8003bae:	fb01 f303 	mul.w	r3, r1, r3
 8003bb2:	4413      	add	r3, r2
 8003bb4:	3340      	adds	r3, #64	; 0x40
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d13c      	bne.n	8003c3a <HCD_RXQLVL_IRQHandler+0x19a>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d039      	beq.n	8003c3a <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003bdc:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003be4:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	212c      	movs	r1, #44	; 0x2c
 8003bfe:	fb01 f303 	mul.w	r3, r1, r3
 8003c02:	4413      	add	r3, r2
 8003c04:	3354      	adds	r3, #84	; 0x54
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	f083 0301 	eor.w	r3, r3, #1
 8003c0c:	b2d8      	uxtb	r0, r3
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	212c      	movs	r1, #44	; 0x2c
 8003c14:	fb01 f303 	mul.w	r3, r1, r3
 8003c18:	4413      	add	r3, r2
 8003c1a:	3354      	adds	r3, #84	; 0x54
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	701a      	strb	r2, [r3, #0]
      break;
 8003c20:	e00b      	b.n	8003c3a <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	212c      	movs	r1, #44	; 0x2c
 8003c28:	fb01 f303 	mul.w	r3, r1, r3
 8003c2c:	4413      	add	r3, r2
 8003c2e:	3360      	adds	r3, #96	; 0x60
 8003c30:	2204      	movs	r2, #4
 8003c32:	701a      	strb	r2, [r3, #0]
      break;
 8003c34:	e001      	b.n	8003c3a <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003c36:	bf00      	nop
 8003c38:	e000      	b.n	8003c3c <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003c3a:	bf00      	nop
  }
}
 8003c3c:	bf00      	nop
 8003c3e:	3728      	adds	r7, #40	; 0x28
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003c70:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d10b      	bne.n	8003c94 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d102      	bne.n	8003c8c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f006 fbe2 	bl	800a450 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	f043 0302 	orr.w	r3, r3, #2
 8003c92:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f003 0308 	and.w	r3, r3, #8
 8003c9a:	2b08      	cmp	r3, #8
 8003c9c:	d132      	bne.n	8003d04 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	f043 0308 	orr.w	r3, r3, #8
 8003ca4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	d126      	bne.n	8003cfe <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d113      	bne.n	8003ce0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003cbe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cc2:	d106      	bne.n	8003cd2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2102      	movs	r1, #2
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f002 fce0 	bl	8006690 <USB_InitFSLSPClkSel>
 8003cd0:	e011      	b.n	8003cf6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f002 fcd9 	bl	8006690 <USB_InitFSLSPClkSel>
 8003cde:	e00a      	b.n	8003cf6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d106      	bne.n	8003cf6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cee:	461a      	mov	r2, r3
 8003cf0:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003cf4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f006 fbd4 	bl	800a4a4 <HAL_HCD_PortEnabled_Callback>
 8003cfc:	e002      	b.n	8003d04 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f006 fbde 	bl	800a4c0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f003 0320 	and.w	r3, r3, #32
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	d103      	bne.n	8003d16 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f043 0320 	orr.w	r3, r3, #32
 8003d14:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	6013      	str	r3, [r2, #0]
}
 8003d22:	bf00      	nop
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
	...

08003d2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d30:	4b0d      	ldr	r3, [pc, #52]	; (8003d68 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d3c:	d102      	bne.n	8003d44 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d42:	e00b      	b.n	8003d5c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003d44:	4b08      	ldr	r3, [pc, #32]	; (8003d68 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d52:	d102      	bne.n	8003d5a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003d54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d58:	e000      	b.n	8003d5c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003d5a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	40007000 	.word	0x40007000

08003d6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d141      	bne.n	8003dfe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d7a:	4b4b      	ldr	r3, [pc, #300]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d86:	d131      	bne.n	8003dec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d88:	4b47      	ldr	r3, [pc, #284]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d8e:	4a46      	ldr	r2, [pc, #280]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d98:	4b43      	ldr	r3, [pc, #268]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003da0:	4a41      	ldr	r2, [pc, #260]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003da6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003da8:	4b40      	ldr	r3, [pc, #256]	; (8003eac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2232      	movs	r2, #50	; 0x32
 8003dae:	fb02 f303 	mul.w	r3, r2, r3
 8003db2:	4a3f      	ldr	r2, [pc, #252]	; (8003eb0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003db4:	fba2 2303 	umull	r2, r3, r2, r3
 8003db8:	0c9b      	lsrs	r3, r3, #18
 8003dba:	3301      	adds	r3, #1
 8003dbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dbe:	e002      	b.n	8003dc6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dc6:	4b38      	ldr	r3, [pc, #224]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd2:	d102      	bne.n	8003dda <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1f2      	bne.n	8003dc0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dda:	4b33      	ldr	r3, [pc, #204]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de6:	d158      	bne.n	8003e9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e057      	b.n	8003e9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dec:	4b2e      	ldr	r3, [pc, #184]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003df2:	4a2d      	ldr	r2, [pc, #180]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003df8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003dfc:	e04d      	b.n	8003e9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e04:	d141      	bne.n	8003e8a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e06:	4b28      	ldr	r3, [pc, #160]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e12:	d131      	bne.n	8003e78 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e14:	4b24      	ldr	r3, [pc, #144]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e1a:	4a23      	ldr	r2, [pc, #140]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e24:	4b20      	ldr	r3, [pc, #128]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e2c:	4a1e      	ldr	r2, [pc, #120]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003e34:	4b1d      	ldr	r3, [pc, #116]	; (8003eac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2232      	movs	r2, #50	; 0x32
 8003e3a:	fb02 f303 	mul.w	r3, r2, r3
 8003e3e:	4a1c      	ldr	r2, [pc, #112]	; (8003eb0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e40:	fba2 2303 	umull	r2, r3, r2, r3
 8003e44:	0c9b      	lsrs	r3, r3, #18
 8003e46:	3301      	adds	r3, #1
 8003e48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e4a:	e002      	b.n	8003e52 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e52:	4b15      	ldr	r3, [pc, #84]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e5e:	d102      	bne.n	8003e66 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f2      	bne.n	8003e4c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e66:	4b10      	ldr	r3, [pc, #64]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e72:	d112      	bne.n	8003e9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e011      	b.n	8003e9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e78:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e7e:	4a0a      	ldr	r2, [pc, #40]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e88:	e007      	b.n	8003e9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e8a:	4b07      	ldr	r3, [pc, #28]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e92:	4a05      	ldr	r2, [pc, #20]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e98:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	40007000 	.word	0x40007000
 8003eac:	20000000 	.word	0x20000000
 8003eb0:	431bde83 	.word	0x431bde83

08003eb4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003eb8:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	4a04      	ldr	r2, [pc, #16]	; (8003ed0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003ebe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ec2:	6053      	str	r3, [r2, #4]
}
 8003ec4:	bf00      	nop
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	40007000 	.word	0x40007000

08003ed4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b08a      	sub	sp, #40	; 0x28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d102      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	f000 bc76 	b.w	80047d4 <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ee8:	4ba1      	ldr	r3, [pc, #644]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f003 030c 	and.w	r3, r3, #12
 8003ef0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ef2:	4b9f      	ldr	r3, [pc, #636]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f003 0303 	and.w	r3, r3, #3
 8003efa:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0310 	and.w	r3, r3, #16
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 80e6 	beq.w	80040d6 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f0a:	6a3b      	ldr	r3, [r7, #32]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d007      	beq.n	8003f20 <HAL_RCC_OscConfig+0x4c>
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	2b0c      	cmp	r3, #12
 8003f14:	f040 808d 	bne.w	8004032 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	f040 8089 	bne.w	8004032 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f20:	4b93      	ldr	r3, [pc, #588]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d006      	beq.n	8003f3a <HAL_RCC_OscConfig+0x66>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d102      	bne.n	8003f3a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	f000 bc4d 	b.w	80047d4 <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f3e:	4b8c      	ldr	r3, [pc, #560]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d004      	beq.n	8003f54 <HAL_RCC_OscConfig+0x80>
 8003f4a:	4b89      	ldr	r3, [pc, #548]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f52:	e005      	b.n	8003f60 <HAL_RCC_OscConfig+0x8c>
 8003f54:	4b86      	ldr	r3, [pc, #536]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 8003f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f5a:	091b      	lsrs	r3, r3, #4
 8003f5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d224      	bcs.n	8003fae <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 fe5f 	bl	8004c2c <RCC_SetFlashLatencyFromMSIRange>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	f000 bc2d 	b.w	80047d4 <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f7a:	4b7d      	ldr	r3, [pc, #500]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a7c      	ldr	r2, [pc, #496]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 8003f80:	f043 0308 	orr.w	r3, r3, #8
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	4b7a      	ldr	r3, [pc, #488]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	4977      	ldr	r1, [pc, #476]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f98:	4b75      	ldr	r3, [pc, #468]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	021b      	lsls	r3, r3, #8
 8003fa6:	4972      	ldr	r1, [pc, #456]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	604b      	str	r3, [r1, #4]
 8003fac:	e025      	b.n	8003ffa <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fae:	4b70      	ldr	r3, [pc, #448]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a6f      	ldr	r2, [pc, #444]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 8003fb4:	f043 0308 	orr.w	r3, r3, #8
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	4b6d      	ldr	r3, [pc, #436]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	496a      	ldr	r1, [pc, #424]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fcc:	4b68      	ldr	r3, [pc, #416]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	021b      	lsls	r3, r3, #8
 8003fda:	4965      	ldr	r1, [pc, #404]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d109      	bne.n	8003ffa <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fe1e 	bl	8004c2c <RCC_SetFlashLatencyFromMSIRange>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e3ec      	b.n	80047d4 <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ffa:	f000 fd53 	bl	8004aa4 <HAL_RCC_GetSysClockFreq>
 8003ffe:	4602      	mov	r2, r0
 8004000:	4b5b      	ldr	r3, [pc, #364]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	091b      	lsrs	r3, r3, #4
 8004006:	f003 030f 	and.w	r3, r3, #15
 800400a:	495a      	ldr	r1, [pc, #360]	; (8004174 <HAL_RCC_OscConfig+0x2a0>)
 800400c:	5ccb      	ldrb	r3, [r1, r3]
 800400e:	f003 031f 	and.w	r3, r3, #31
 8004012:	fa22 f303 	lsr.w	r3, r2, r3
 8004016:	4a58      	ldr	r2, [pc, #352]	; (8004178 <HAL_RCC_OscConfig+0x2a4>)
 8004018:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800401a:	4b58      	ldr	r3, [pc, #352]	; (800417c <HAL_RCC_OscConfig+0x2a8>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f7fc fd74 	bl	8000b0c <HAL_InitTick>
 8004024:	4603      	mov	r3, r0
 8004026:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8004028:	7dfb      	ldrb	r3, [r7, #23]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d052      	beq.n	80040d4 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800402e:	7dfb      	ldrb	r3, [r7, #23]
 8004030:	e3d0      	b.n	80047d4 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d032      	beq.n	80040a0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800403a:	4b4d      	ldr	r3, [pc, #308]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a4c      	ldr	r2, [pc, #304]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 8004040:	f043 0301 	orr.w	r3, r3, #1
 8004044:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004046:	f7fc fdb1 	bl	8000bac <HAL_GetTick>
 800404a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800404c:	e008      	b.n	8004060 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800404e:	f7fc fdad 	bl	8000bac <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e3b9      	b.n	80047d4 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004060:	4b43      	ldr	r3, [pc, #268]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0f0      	beq.n	800404e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800406c:	4b40      	ldr	r3, [pc, #256]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a3f      	ldr	r2, [pc, #252]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 8004072:	f043 0308 	orr.w	r3, r3, #8
 8004076:	6013      	str	r3, [r2, #0]
 8004078:	4b3d      	ldr	r3, [pc, #244]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	493a      	ldr	r1, [pc, #232]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 8004086:	4313      	orrs	r3, r2
 8004088:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800408a:	4b39      	ldr	r3, [pc, #228]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	021b      	lsls	r3, r3, #8
 8004098:	4935      	ldr	r1, [pc, #212]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 800409a:	4313      	orrs	r3, r2
 800409c:	604b      	str	r3, [r1, #4]
 800409e:	e01a      	b.n	80040d6 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80040a0:	4b33      	ldr	r3, [pc, #204]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a32      	ldr	r2, [pc, #200]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 80040a6:	f023 0301 	bic.w	r3, r3, #1
 80040aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040ac:	f7fc fd7e 	bl	8000bac <HAL_GetTick>
 80040b0:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040b4:	f7fc fd7a 	bl	8000bac <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e386      	b.n	80047d4 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040c6:	4b2a      	ldr	r3, [pc, #168]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1f0      	bne.n	80040b4 <HAL_RCC_OscConfig+0x1e0>
 80040d2:	e000      	b.n	80040d6 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d073      	beq.n	80041ca <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d005      	beq.n	80040f4 <HAL_RCC_OscConfig+0x220>
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	2b0c      	cmp	r3, #12
 80040ec:	d10e      	bne.n	800410c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	d10b      	bne.n	800410c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f4:	4b1e      	ldr	r3, [pc, #120]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d063      	beq.n	80041c8 <HAL_RCC_OscConfig+0x2f4>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d15f      	bne.n	80041c8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e363      	b.n	80047d4 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004114:	d106      	bne.n	8004124 <HAL_RCC_OscConfig+0x250>
 8004116:	4b16      	ldr	r3, [pc, #88]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a15      	ldr	r2, [pc, #84]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 800411c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	e01d      	b.n	8004160 <HAL_RCC_OscConfig+0x28c>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800412c:	d10c      	bne.n	8004148 <HAL_RCC_OscConfig+0x274>
 800412e:	4b10      	ldr	r3, [pc, #64]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a0f      	ldr	r2, [pc, #60]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 8004134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	4b0d      	ldr	r3, [pc, #52]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a0c      	ldr	r2, [pc, #48]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 8004140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	e00b      	b.n	8004160 <HAL_RCC_OscConfig+0x28c>
 8004148:	4b09      	ldr	r3, [pc, #36]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a08      	ldr	r2, [pc, #32]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 800414e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004152:	6013      	str	r3, [r2, #0]
 8004154:	4b06      	ldr	r3, [pc, #24]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a05      	ldr	r2, [pc, #20]	; (8004170 <HAL_RCC_OscConfig+0x29c>)
 800415a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800415e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d01b      	beq.n	80041a0 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004168:	f7fc fd20 	bl	8000bac <HAL_GetTick>
 800416c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800416e:	e010      	b.n	8004192 <HAL_RCC_OscConfig+0x2be>
 8004170:	40021000 	.word	0x40021000
 8004174:	0800b7f8 	.word	0x0800b7f8
 8004178:	20000000 	.word	0x20000000
 800417c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004180:	f7fc fd14 	bl	8000bac <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b64      	cmp	r3, #100	; 0x64
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e320      	b.n	80047d4 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004192:	4ba0      	ldr	r3, [pc, #640]	; (8004414 <HAL_RCC_OscConfig+0x540>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0f0      	beq.n	8004180 <HAL_RCC_OscConfig+0x2ac>
 800419e:	e014      	b.n	80041ca <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a0:	f7fc fd04 	bl	8000bac <HAL_GetTick>
 80041a4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041a8:	f7fc fd00 	bl	8000bac <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b64      	cmp	r3, #100	; 0x64
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e30c      	b.n	80047d4 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041ba:	4b96      	ldr	r3, [pc, #600]	; (8004414 <HAL_RCC_OscConfig+0x540>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1f0      	bne.n	80041a8 <HAL_RCC_OscConfig+0x2d4>
 80041c6:	e000      	b.n	80041ca <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d060      	beq.n	8004298 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	2b04      	cmp	r3, #4
 80041da:	d005      	beq.n	80041e8 <HAL_RCC_OscConfig+0x314>
 80041dc:	6a3b      	ldr	r3, [r7, #32]
 80041de:	2b0c      	cmp	r3, #12
 80041e0:	d119      	bne.n	8004216 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d116      	bne.n	8004216 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041e8:	4b8a      	ldr	r3, [pc, #552]	; (8004414 <HAL_RCC_OscConfig+0x540>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d005      	beq.n	8004200 <HAL_RCC_OscConfig+0x32c>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e2e9      	b.n	80047d4 <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004200:	4b84      	ldr	r3, [pc, #528]	; (8004414 <HAL_RCC_OscConfig+0x540>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	061b      	lsls	r3, r3, #24
 800420e:	4981      	ldr	r1, [pc, #516]	; (8004414 <HAL_RCC_OscConfig+0x540>)
 8004210:	4313      	orrs	r3, r2
 8004212:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004214:	e040      	b.n	8004298 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d023      	beq.n	8004266 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800421e:	4b7d      	ldr	r3, [pc, #500]	; (8004414 <HAL_RCC_OscConfig+0x540>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a7c      	ldr	r2, [pc, #496]	; (8004414 <HAL_RCC_OscConfig+0x540>)
 8004224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422a:	f7fc fcbf 	bl	8000bac <HAL_GetTick>
 800422e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004230:	e008      	b.n	8004244 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004232:	f7fc fcbb 	bl	8000bac <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d901      	bls.n	8004244 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e2c7      	b.n	80047d4 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004244:	4b73      	ldr	r3, [pc, #460]	; (8004414 <HAL_RCC_OscConfig+0x540>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0f0      	beq.n	8004232 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004250:	4b70      	ldr	r3, [pc, #448]	; (8004414 <HAL_RCC_OscConfig+0x540>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	061b      	lsls	r3, r3, #24
 800425e:	496d      	ldr	r1, [pc, #436]	; (8004414 <HAL_RCC_OscConfig+0x540>)
 8004260:	4313      	orrs	r3, r2
 8004262:	604b      	str	r3, [r1, #4]
 8004264:	e018      	b.n	8004298 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004266:	4b6b      	ldr	r3, [pc, #428]	; (8004414 <HAL_RCC_OscConfig+0x540>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a6a      	ldr	r2, [pc, #424]	; (8004414 <HAL_RCC_OscConfig+0x540>)
 800426c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004272:	f7fc fc9b 	bl	8000bac <HAL_GetTick>
 8004276:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004278:	e008      	b.n	800428c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800427a:	f7fc fc97 	bl	8000bac <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d901      	bls.n	800428c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e2a3      	b.n	80047d4 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800428c:	4b61      	ldr	r3, [pc, #388]	; (8004414 <HAL_RCC_OscConfig+0x540>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1f0      	bne.n	800427a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0308 	and.w	r3, r3, #8
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d07f      	beq.n	80043a4 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d05f      	beq.n	800436c <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80042ac:	4b59      	ldr	r3, [pc, #356]	; (8004414 <HAL_RCC_OscConfig+0x540>)
 80042ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042b2:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	699a      	ldr	r2, [r3, #24]
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f003 0310 	and.w	r3, r3, #16
 80042be:	429a      	cmp	r2, r3
 80042c0:	d037      	beq.n	8004332 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d006      	beq.n	80042da <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e27c      	b.n	80047d4 <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d01b      	beq.n	800431c <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 80042e4:	4b4b      	ldr	r3, [pc, #300]	; (8004414 <HAL_RCC_OscConfig+0x540>)
 80042e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ea:	4a4a      	ldr	r2, [pc, #296]	; (8004414 <HAL_RCC_OscConfig+0x540>)
 80042ec:	f023 0301 	bic.w	r3, r3, #1
 80042f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042f4:	f7fc fc5a 	bl	8000bac <HAL_GetTick>
 80042f8:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042fa:	e008      	b.n	800430e <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042fc:	f7fc fc56 	bl	8000bac <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b11      	cmp	r3, #17
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e262      	b.n	80047d4 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800430e:	4b41      	ldr	r3, [pc, #260]	; (8004414 <HAL_RCC_OscConfig+0x540>)
 8004310:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1ef      	bne.n	80042fc <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800431c:	4b3d      	ldr	r3, [pc, #244]	; (8004414 <HAL_RCC_OscConfig+0x540>)
 800431e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004322:	f023 0210 	bic.w	r2, r3, #16
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	493a      	ldr	r1, [pc, #232]	; (8004414 <HAL_RCC_OscConfig+0x540>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004332:	4b38      	ldr	r3, [pc, #224]	; (8004414 <HAL_RCC_OscConfig+0x540>)
 8004334:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004338:	4a36      	ldr	r2, [pc, #216]	; (8004414 <HAL_RCC_OscConfig+0x540>)
 800433a:	f043 0301 	orr.w	r3, r3, #1
 800433e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004342:	f7fc fc33 	bl	8000bac <HAL_GetTick>
 8004346:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004348:	e008      	b.n	800435c <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800434a:	f7fc fc2f 	bl	8000bac <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b11      	cmp	r3, #17
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e23b      	b.n	80047d4 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800435c:	4b2d      	ldr	r3, [pc, #180]	; (8004414 <HAL_RCC_OscConfig+0x540>)
 800435e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0ef      	beq.n	800434a <HAL_RCC_OscConfig+0x476>
 800436a:	e01b      	b.n	80043a4 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800436c:	4b29      	ldr	r3, [pc, #164]	; (8004414 <HAL_RCC_OscConfig+0x540>)
 800436e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004372:	4a28      	ldr	r2, [pc, #160]	; (8004414 <HAL_RCC_OscConfig+0x540>)
 8004374:	f023 0301 	bic.w	r3, r3, #1
 8004378:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437c:	f7fc fc16 	bl	8000bac <HAL_GetTick>
 8004380:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004384:	f7fc fc12 	bl	8000bac <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b11      	cmp	r3, #17
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e21e      	b.n	80047d4 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004396:	4b1f      	ldr	r3, [pc, #124]	; (8004414 <HAL_RCC_OscConfig+0x540>)
 8004398:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1ef      	bne.n	8004384 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 80c1 	beq.w	8004534 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043b2:	2300      	movs	r3, #0
 80043b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80043b8:	4b16      	ldr	r3, [pc, #88]	; (8004414 <HAL_RCC_OscConfig+0x540>)
 80043ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10e      	bne.n	80043e2 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043c4:	4b13      	ldr	r3, [pc, #76]	; (8004414 <HAL_RCC_OscConfig+0x540>)
 80043c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c8:	4a12      	ldr	r2, [pc, #72]	; (8004414 <HAL_RCC_OscConfig+0x540>)
 80043ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ce:	6593      	str	r3, [r2, #88]	; 0x58
 80043d0:	4b10      	ldr	r3, [pc, #64]	; (8004414 <HAL_RCC_OscConfig+0x540>)
 80043d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d8:	60fb      	str	r3, [r7, #12]
 80043da:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80043dc:	2301      	movs	r3, #1
 80043de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043e2:	4b0d      	ldr	r3, [pc, #52]	; (8004418 <HAL_RCC_OscConfig+0x544>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d11c      	bne.n	8004428 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043ee:	4b0a      	ldr	r3, [pc, #40]	; (8004418 <HAL_RCC_OscConfig+0x544>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a09      	ldr	r2, [pc, #36]	; (8004418 <HAL_RCC_OscConfig+0x544>)
 80043f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043fa:	f7fc fbd7 	bl	8000bac <HAL_GetTick>
 80043fe:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004400:	e00c      	b.n	800441c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004402:	f7fc fbd3 	bl	8000bac <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d905      	bls.n	800441c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e1df      	b.n	80047d4 <HAL_RCC_OscConfig+0x900>
 8004414:	40021000 	.word	0x40021000
 8004418:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800441c:	4b99      	ldr	r3, [pc, #612]	; (8004684 <HAL_RCC_OscConfig+0x7b0>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0ec      	beq.n	8004402 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	d02c      	beq.n	800448e <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8004434:	4b94      	ldr	r3, [pc, #592]	; (8004688 <HAL_RCC_OscConfig+0x7b4>)
 8004436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004446:	4990      	ldr	r1, [pc, #576]	; (8004688 <HAL_RCC_OscConfig+0x7b4>)
 8004448:	4313      	orrs	r3, r2
 800444a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 0304 	and.w	r3, r3, #4
 8004456:	2b00      	cmp	r3, #0
 8004458:	d010      	beq.n	800447c <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800445a:	4b8b      	ldr	r3, [pc, #556]	; (8004688 <HAL_RCC_OscConfig+0x7b4>)
 800445c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004460:	4a89      	ldr	r2, [pc, #548]	; (8004688 <HAL_RCC_OscConfig+0x7b4>)
 8004462:	f043 0304 	orr.w	r3, r3, #4
 8004466:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800446a:	4b87      	ldr	r3, [pc, #540]	; (8004688 <HAL_RCC_OscConfig+0x7b4>)
 800446c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004470:	4a85      	ldr	r2, [pc, #532]	; (8004688 <HAL_RCC_OscConfig+0x7b4>)
 8004472:	f043 0301 	orr.w	r3, r3, #1
 8004476:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800447a:	e018      	b.n	80044ae <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800447c:	4b82      	ldr	r3, [pc, #520]	; (8004688 <HAL_RCC_OscConfig+0x7b4>)
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004482:	4a81      	ldr	r2, [pc, #516]	; (8004688 <HAL_RCC_OscConfig+0x7b4>)
 8004484:	f043 0301 	orr.w	r3, r3, #1
 8004488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800448c:	e00f      	b.n	80044ae <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800448e:	4b7e      	ldr	r3, [pc, #504]	; (8004688 <HAL_RCC_OscConfig+0x7b4>)
 8004490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004494:	4a7c      	ldr	r2, [pc, #496]	; (8004688 <HAL_RCC_OscConfig+0x7b4>)
 8004496:	f023 0301 	bic.w	r3, r3, #1
 800449a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800449e:	4b7a      	ldr	r3, [pc, #488]	; (8004688 <HAL_RCC_OscConfig+0x7b4>)
 80044a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a4:	4a78      	ldr	r2, [pc, #480]	; (8004688 <HAL_RCC_OscConfig+0x7b4>)
 80044a6:	f023 0304 	bic.w	r3, r3, #4
 80044aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d016      	beq.n	80044e4 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b6:	f7fc fb79 	bl	8000bac <HAL_GetTick>
 80044ba:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044bc:	e00a      	b.n	80044d4 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044be:	f7fc fb75 	bl	8000bac <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e17f      	b.n	80047d4 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044d4:	4b6c      	ldr	r3, [pc, #432]	; (8004688 <HAL_RCC_OscConfig+0x7b4>)
 80044d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0ed      	beq.n	80044be <HAL_RCC_OscConfig+0x5ea>
 80044e2:	e01d      	b.n	8004520 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e4:	f7fc fb62 	bl	8000bac <HAL_GetTick>
 80044e8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044ea:	e00a      	b.n	8004502 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ec:	f7fc fb5e 	bl	8000bac <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e168      	b.n	80047d4 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004502:	4b61      	ldr	r3, [pc, #388]	; (8004688 <HAL_RCC_OscConfig+0x7b4>)
 8004504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1ed      	bne.n	80044ec <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8004510:	4b5d      	ldr	r3, [pc, #372]	; (8004688 <HAL_RCC_OscConfig+0x7b4>)
 8004512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004516:	4a5c      	ldr	r2, [pc, #368]	; (8004688 <HAL_RCC_OscConfig+0x7b4>)
 8004518:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800451c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004524:	2b01      	cmp	r3, #1
 8004526:	d105      	bne.n	8004534 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004528:	4b57      	ldr	r3, [pc, #348]	; (8004688 <HAL_RCC_OscConfig+0x7b4>)
 800452a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452c:	4a56      	ldr	r2, [pc, #344]	; (8004688 <HAL_RCC_OscConfig+0x7b4>)
 800452e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004532:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0320 	and.w	r3, r3, #32
 800453c:	2b00      	cmp	r3, #0
 800453e:	d03c      	beq.n	80045ba <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004544:	2b00      	cmp	r3, #0
 8004546:	d01c      	beq.n	8004582 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004548:	4b4f      	ldr	r3, [pc, #316]	; (8004688 <HAL_RCC_OscConfig+0x7b4>)
 800454a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800454e:	4a4e      	ldr	r2, [pc, #312]	; (8004688 <HAL_RCC_OscConfig+0x7b4>)
 8004550:	f043 0301 	orr.w	r3, r3, #1
 8004554:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004558:	f7fc fb28 	bl	8000bac <HAL_GetTick>
 800455c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004560:	f7fc fb24 	bl	8000bac <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e130      	b.n	80047d4 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004572:	4b45      	ldr	r3, [pc, #276]	; (8004688 <HAL_RCC_OscConfig+0x7b4>)
 8004574:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0ef      	beq.n	8004560 <HAL_RCC_OscConfig+0x68c>
 8004580:	e01b      	b.n	80045ba <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004582:	4b41      	ldr	r3, [pc, #260]	; (8004688 <HAL_RCC_OscConfig+0x7b4>)
 8004584:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004588:	4a3f      	ldr	r2, [pc, #252]	; (8004688 <HAL_RCC_OscConfig+0x7b4>)
 800458a:	f023 0301 	bic.w	r3, r3, #1
 800458e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004592:	f7fc fb0b 	bl	8000bac <HAL_GetTick>
 8004596:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800459a:	f7fc fb07 	bl	8000bac <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e113      	b.n	80047d4 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045ac:	4b36      	ldr	r3, [pc, #216]	; (8004688 <HAL_RCC_OscConfig+0x7b4>)
 80045ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1ef      	bne.n	800459a <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 8107 	beq.w	80047d2 <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	f040 80cf 	bne.w	800476c <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80045ce:	4b2e      	ldr	r3, [pc, #184]	; (8004688 <HAL_RCC_OscConfig+0x7b4>)
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	f003 0203 	and.w	r2, r3, #3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	429a      	cmp	r2, r3
 80045e0:	d12c      	bne.n	800463c <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ec:	3b01      	subs	r3, #1
 80045ee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d123      	bne.n	800463c <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004600:	429a      	cmp	r2, r3
 8004602:	d11b      	bne.n	800463c <HAL_RCC_OscConfig+0x768>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004610:	429a      	cmp	r2, r3
 8004612:	d113      	bne.n	800463c <HAL_RCC_OscConfig+0x768>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	085b      	lsrs	r3, r3, #1
 8004620:	3b01      	subs	r3, #1
 8004622:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004624:	429a      	cmp	r2, r3
 8004626:	d109      	bne.n	800463c <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004632:	085b      	lsrs	r3, r3, #1
 8004634:	3b01      	subs	r3, #1
 8004636:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004638:	429a      	cmp	r2, r3
 800463a:	d071      	beq.n	8004720 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	2b0c      	cmp	r3, #12
 8004640:	d06c      	beq.n	800471c <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004642:	4b11      	ldr	r3, [pc, #68]	; (8004688 <HAL_RCC_OscConfig+0x7b4>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d105      	bne.n	800465a <HAL_RCC_OscConfig+0x786>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800464e:	4b0e      	ldr	r3, [pc, #56]	; (8004688 <HAL_RCC_OscConfig+0x7b4>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <HAL_RCC_OscConfig+0x78a>
#endif
            )
          {
            return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e0ba      	b.n	80047d4 <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800465e:	4b0a      	ldr	r3, [pc, #40]	; (8004688 <HAL_RCC_OscConfig+0x7b4>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a09      	ldr	r2, [pc, #36]	; (8004688 <HAL_RCC_OscConfig+0x7b4>)
 8004664:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004668:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800466a:	f7fc fa9f 	bl	8000bac <HAL_GetTick>
 800466e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004670:	e00c      	b.n	800468c <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004672:	f7fc fa9b 	bl	8000bac <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d905      	bls.n	800468c <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e0a7      	b.n	80047d4 <HAL_RCC_OscConfig+0x900>
 8004684:	40007000 	.word	0x40007000
 8004688:	40021000 	.word	0x40021000
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800468c:	4b53      	ldr	r3, [pc, #332]	; (80047dc <HAL_RCC_OscConfig+0x908>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1ec      	bne.n	8004672 <HAL_RCC_OscConfig+0x79e>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004698:	4b50      	ldr	r3, [pc, #320]	; (80047dc <HAL_RCC_OscConfig+0x908>)
 800469a:	68da      	ldr	r2, [r3, #12]
 800469c:	4b50      	ldr	r3, [pc, #320]	; (80047e0 <HAL_RCC_OscConfig+0x90c>)
 800469e:	4013      	ands	r3, r2
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046a8:	3a01      	subs	r2, #1
 80046aa:	0112      	lsls	r2, r2, #4
 80046ac:	4311      	orrs	r1, r2
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046b2:	0212      	lsls	r2, r2, #8
 80046b4:	4311      	orrs	r1, r2
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80046ba:	0852      	lsrs	r2, r2, #1
 80046bc:	3a01      	subs	r2, #1
 80046be:	0552      	lsls	r2, r2, #21
 80046c0:	4311      	orrs	r1, r2
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80046c6:	0852      	lsrs	r2, r2, #1
 80046c8:	3a01      	subs	r2, #1
 80046ca:	0652      	lsls	r2, r2, #25
 80046cc:	4311      	orrs	r1, r2
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80046d2:	06d2      	lsls	r2, r2, #27
 80046d4:	430a      	orrs	r2, r1
 80046d6:	4941      	ldr	r1, [pc, #260]	; (80047dc <HAL_RCC_OscConfig+0x908>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80046dc:	4b3f      	ldr	r3, [pc, #252]	; (80047dc <HAL_RCC_OscConfig+0x908>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a3e      	ldr	r2, [pc, #248]	; (80047dc <HAL_RCC_OscConfig+0x908>)
 80046e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046e8:	4b3c      	ldr	r3, [pc, #240]	; (80047dc <HAL_RCC_OscConfig+0x908>)
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	4a3b      	ldr	r2, [pc, #236]	; (80047dc <HAL_RCC_OscConfig+0x908>)
 80046ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046f4:	f7fc fa5a 	bl	8000bac <HAL_GetTick>
 80046f8:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046fc:	f7fc fa56 	bl	8000bac <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e062      	b.n	80047d4 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800470e:	4b33      	ldr	r3, [pc, #204]	; (80047dc <HAL_RCC_OscConfig+0x908>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0f0      	beq.n	80046fc <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800471a:	e05a      	b.n	80047d2 <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e059      	b.n	80047d4 <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004720:	4b2e      	ldr	r3, [pc, #184]	; (80047dc <HAL_RCC_OscConfig+0x908>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d152      	bne.n	80047d2 <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800472c:	4b2b      	ldr	r3, [pc, #172]	; (80047dc <HAL_RCC_OscConfig+0x908>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a2a      	ldr	r2, [pc, #168]	; (80047dc <HAL_RCC_OscConfig+0x908>)
 8004732:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004736:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004738:	4b28      	ldr	r3, [pc, #160]	; (80047dc <HAL_RCC_OscConfig+0x908>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	4a27      	ldr	r2, [pc, #156]	; (80047dc <HAL_RCC_OscConfig+0x908>)
 800473e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004742:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004744:	f7fc fa32 	bl	8000bac <HAL_GetTick>
 8004748:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800474c:	f7fc fa2e 	bl	8000bac <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e03a      	b.n	80047d4 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800475e:	4b1f      	ldr	r3, [pc, #124]	; (80047dc <HAL_RCC_OscConfig+0x908>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0f0      	beq.n	800474c <HAL_RCC_OscConfig+0x878>
 800476a:	e032      	b.n	80047d2 <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800476c:	6a3b      	ldr	r3, [r7, #32]
 800476e:	2b0c      	cmp	r3, #12
 8004770:	d02d      	beq.n	80047ce <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004772:	4b1a      	ldr	r3, [pc, #104]	; (80047dc <HAL_RCC_OscConfig+0x908>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a19      	ldr	r2, [pc, #100]	; (80047dc <HAL_RCC_OscConfig+0x908>)
 8004778:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800477c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800477e:	4b17      	ldr	r3, [pc, #92]	; (80047dc <HAL_RCC_OscConfig+0x908>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d105      	bne.n	8004796 <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800478a:	4b14      	ldr	r3, [pc, #80]	; (80047dc <HAL_RCC_OscConfig+0x908>)
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	4a13      	ldr	r2, [pc, #76]	; (80047dc <HAL_RCC_OscConfig+0x908>)
 8004790:	f023 0303 	bic.w	r3, r3, #3
 8004794:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004796:	4b11      	ldr	r3, [pc, #68]	; (80047dc <HAL_RCC_OscConfig+0x908>)
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	4a10      	ldr	r2, [pc, #64]	; (80047dc <HAL_RCC_OscConfig+0x908>)
 800479c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80047a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047a4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a6:	f7fc fa01 	bl	8000bac <HAL_GetTick>
 80047aa:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047ac:	e008      	b.n	80047c0 <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ae:	f7fc f9fd 	bl	8000bac <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e009      	b.n	80047d4 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047c0:	4b06      	ldr	r3, [pc, #24]	; (80047dc <HAL_RCC_OscConfig+0x908>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1f0      	bne.n	80047ae <HAL_RCC_OscConfig+0x8da>
 80047cc:	e001      	b.n	80047d2 <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e000      	b.n	80047d4 <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3728      	adds	r7, #40	; 0x28
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	40021000 	.word	0x40021000
 80047e0:	019d800c 	.word	0x019d800c

080047e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80047ee:	2300      	movs	r3, #0
 80047f0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e10f      	b.n	8004a1c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047fc:	4b89      	ldr	r3, [pc, #548]	; (8004a24 <HAL_RCC_ClockConfig+0x240>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 030f 	and.w	r3, r3, #15
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	d910      	bls.n	800482c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800480a:	4b86      	ldr	r3, [pc, #536]	; (8004a24 <HAL_RCC_ClockConfig+0x240>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f023 020f 	bic.w	r2, r3, #15
 8004812:	4984      	ldr	r1, [pc, #528]	; (8004a24 <HAL_RCC_ClockConfig+0x240>)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	4313      	orrs	r3, r2
 8004818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800481a:	4b82      	ldr	r3, [pc, #520]	; (8004a24 <HAL_RCC_ClockConfig+0x240>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d001      	beq.n	800482c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e0f7      	b.n	8004a1c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 8089 	beq.w	800494c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2b03      	cmp	r3, #3
 8004840:	d133      	bne.n	80048aa <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004842:	4b79      	ldr	r3, [pc, #484]	; (8004a28 <HAL_RCC_ClockConfig+0x244>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e0e4      	b.n	8004a1c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004852:	f000 fa45 	bl	8004ce0 <RCC_GetSysClockFreqFromPLLSource>
 8004856:	4603      	mov	r3, r0
 8004858:	4a74      	ldr	r2, [pc, #464]	; (8004a2c <HAL_RCC_ClockConfig+0x248>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d955      	bls.n	800490a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800485e:	4b72      	ldr	r3, [pc, #456]	; (8004a28 <HAL_RCC_ClockConfig+0x244>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10a      	bne.n	8004880 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800486a:	4b6f      	ldr	r3, [pc, #444]	; (8004a28 <HAL_RCC_ClockConfig+0x244>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004872:	4a6d      	ldr	r2, [pc, #436]	; (8004a28 <HAL_RCC_ClockConfig+0x244>)
 8004874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004878:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800487a:	2380      	movs	r3, #128	; 0x80
 800487c:	617b      	str	r3, [r7, #20]
 800487e:	e044      	b.n	800490a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d03e      	beq.n	800490a <HAL_RCC_ClockConfig+0x126>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d13a      	bne.n	800490a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004894:	4b64      	ldr	r3, [pc, #400]	; (8004a28 <HAL_RCC_ClockConfig+0x244>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800489c:	4a62      	ldr	r2, [pc, #392]	; (8004a28 <HAL_RCC_ClockConfig+0x244>)
 800489e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80048a4:	2380      	movs	r3, #128	; 0x80
 80048a6:	617b      	str	r3, [r7, #20]
 80048a8:	e02f      	b.n	800490a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d107      	bne.n	80048c2 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048b2:	4b5d      	ldr	r3, [pc, #372]	; (8004a28 <HAL_RCC_ClockConfig+0x244>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d115      	bne.n	80048ea <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e0ac      	b.n	8004a1c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d107      	bne.n	80048da <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048ca:	4b57      	ldr	r3, [pc, #348]	; (8004a28 <HAL_RCC_ClockConfig+0x244>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d109      	bne.n	80048ea <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e0a0      	b.n	8004a1c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048da:	4b53      	ldr	r3, [pc, #332]	; (8004a28 <HAL_RCC_ClockConfig+0x244>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e098      	b.n	8004a1c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80048ea:	f000 f8db 	bl	8004aa4 <HAL_RCC_GetSysClockFreq>
 80048ee:	4603      	mov	r3, r0
 80048f0:	4a4e      	ldr	r2, [pc, #312]	; (8004a2c <HAL_RCC_ClockConfig+0x248>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d909      	bls.n	800490a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048f6:	4b4c      	ldr	r3, [pc, #304]	; (8004a28 <HAL_RCC_ClockConfig+0x244>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048fe:	4a4a      	ldr	r2, [pc, #296]	; (8004a28 <HAL_RCC_ClockConfig+0x244>)
 8004900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004904:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004906:	2380      	movs	r3, #128	; 0x80
 8004908:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800490a:	4b47      	ldr	r3, [pc, #284]	; (8004a28 <HAL_RCC_ClockConfig+0x244>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f023 0203 	bic.w	r2, r3, #3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	4944      	ldr	r1, [pc, #272]	; (8004a28 <HAL_RCC_ClockConfig+0x244>)
 8004918:	4313      	orrs	r3, r2
 800491a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800491c:	f7fc f946 	bl	8000bac <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004922:	e00a      	b.n	800493a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004924:	f7fc f942 	bl	8000bac <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004932:	4293      	cmp	r3, r2
 8004934:	d901      	bls.n	800493a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e070      	b.n	8004a1c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800493a:	4b3b      	ldr	r3, [pc, #236]	; (8004a28 <HAL_RCC_ClockConfig+0x244>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f003 020c 	and.w	r2, r3, #12
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	429a      	cmp	r2, r3
 800494a:	d1eb      	bne.n	8004924 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d009      	beq.n	800496c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004958:	4b33      	ldr	r3, [pc, #204]	; (8004a28 <HAL_RCC_ClockConfig+0x244>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	4930      	ldr	r1, [pc, #192]	; (8004a28 <HAL_RCC_ClockConfig+0x244>)
 8004966:	4313      	orrs	r3, r2
 8004968:	608b      	str	r3, [r1, #8]
 800496a:	e008      	b.n	800497e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	2b80      	cmp	r3, #128	; 0x80
 8004970:	d105      	bne.n	800497e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004972:	4b2d      	ldr	r3, [pc, #180]	; (8004a28 <HAL_RCC_ClockConfig+0x244>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	4a2c      	ldr	r2, [pc, #176]	; (8004a28 <HAL_RCC_ClockConfig+0x244>)
 8004978:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800497c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800497e:	4b29      	ldr	r3, [pc, #164]	; (8004a24 <HAL_RCC_ClockConfig+0x240>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	d210      	bcs.n	80049ae <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800498c:	4b25      	ldr	r3, [pc, #148]	; (8004a24 <HAL_RCC_ClockConfig+0x240>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f023 020f 	bic.w	r2, r3, #15
 8004994:	4923      	ldr	r1, [pc, #140]	; (8004a24 <HAL_RCC_ClockConfig+0x240>)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	4313      	orrs	r3, r2
 800499a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800499c:	4b21      	ldr	r3, [pc, #132]	; (8004a24 <HAL_RCC_ClockConfig+0x240>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 030f 	and.w	r3, r3, #15
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d001      	beq.n	80049ae <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e036      	b.n	8004a1c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0304 	and.w	r3, r3, #4
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d008      	beq.n	80049cc <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049ba:	4b1b      	ldr	r3, [pc, #108]	; (8004a28 <HAL_RCC_ClockConfig+0x244>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	4918      	ldr	r1, [pc, #96]	; (8004a28 <HAL_RCC_ClockConfig+0x244>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0308 	and.w	r3, r3, #8
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d009      	beq.n	80049ec <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049d8:	4b13      	ldr	r3, [pc, #76]	; (8004a28 <HAL_RCC_ClockConfig+0x244>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	4910      	ldr	r1, [pc, #64]	; (8004a28 <HAL_RCC_ClockConfig+0x244>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049ec:	f000 f85a 	bl	8004aa4 <HAL_RCC_GetSysClockFreq>
 80049f0:	4602      	mov	r2, r0
 80049f2:	4b0d      	ldr	r3, [pc, #52]	; (8004a28 <HAL_RCC_ClockConfig+0x244>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	091b      	lsrs	r3, r3, #4
 80049f8:	f003 030f 	and.w	r3, r3, #15
 80049fc:	490c      	ldr	r1, [pc, #48]	; (8004a30 <HAL_RCC_ClockConfig+0x24c>)
 80049fe:	5ccb      	ldrb	r3, [r1, r3]
 8004a00:	f003 031f 	and.w	r3, r3, #31
 8004a04:	fa22 f303 	lsr.w	r3, r2, r3
 8004a08:	4a0a      	ldr	r2, [pc, #40]	; (8004a34 <HAL_RCC_ClockConfig+0x250>)
 8004a0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a0c:	4b0a      	ldr	r3, [pc, #40]	; (8004a38 <HAL_RCC_ClockConfig+0x254>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fc f87b 	bl	8000b0c <HAL_InitTick>
 8004a16:	4603      	mov	r3, r0
 8004a18:	73fb      	strb	r3, [r7, #15]

  return status;
 8004a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3718      	adds	r7, #24
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	40022000 	.word	0x40022000
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	04c4b400 	.word	0x04c4b400
 8004a30:	0800b7f8 	.word	0x0800b7f8
 8004a34:	20000000 	.word	0x20000000
 8004a38:	20000004 	.word	0x20000004

08004a3c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b08a      	sub	sp, #40	; 0x28
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8004a48:	4b15      	ldr	r3, [pc, #84]	; (8004aa0 <HAL_RCC_MCOConfig+0x64>)
 8004a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a4c:	4a14      	ldr	r2, [pc, #80]	; (8004aa0 <HAL_RCC_MCOConfig+0x64>)
 8004a4e:	f043 0301 	orr.w	r3, r3, #1
 8004a52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a54:	4b12      	ldr	r3, [pc, #72]	; (8004aa0 <HAL_RCC_MCOConfig+0x64>)
 8004a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	613b      	str	r3, [r7, #16]
 8004a5e:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8004a60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a66:	2302      	movs	r3, #2
 8004a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004a72:	2300      	movs	r3, #0
 8004a74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004a76:	f107 0314 	add.w	r3, r7, #20
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a80:	f7fd fbe6 	bl	8002250 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8004a84:	4b06      	ldr	r3, [pc, #24]	; (8004aa0 <HAL_RCC_MCOConfig+0x64>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a8c:	68b9      	ldr	r1, [r7, #8]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	430b      	orrs	r3, r1
 8004a92:	4903      	ldr	r1, [pc, #12]	; (8004aa0 <HAL_RCC_MCOConfig+0x64>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	608b      	str	r3, [r1, #8]
}
 8004a98:	bf00      	nop
 8004a9a:	3728      	adds	r7, #40	; 0x28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	40021000 	.word	0x40021000

08004aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b089      	sub	sp, #36	; 0x24
 8004aa8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	61fb      	str	r3, [r7, #28]
 8004aae:	2300      	movs	r3, #0
 8004ab0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ab2:	4b3e      	ldr	r3, [pc, #248]	; (8004bac <HAL_RCC_GetSysClockFreq+0x108>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f003 030c 	and.w	r3, r3, #12
 8004aba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004abc:	4b3b      	ldr	r3, [pc, #236]	; (8004bac <HAL_RCC_GetSysClockFreq+0x108>)
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	f003 0303 	and.w	r3, r3, #3
 8004ac4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d005      	beq.n	8004ad8 <HAL_RCC_GetSysClockFreq+0x34>
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	2b0c      	cmp	r3, #12
 8004ad0:	d121      	bne.n	8004b16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d11e      	bne.n	8004b16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ad8:	4b34      	ldr	r3, [pc, #208]	; (8004bac <HAL_RCC_GetSysClockFreq+0x108>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0308 	and.w	r3, r3, #8
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d107      	bne.n	8004af4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ae4:	4b31      	ldr	r3, [pc, #196]	; (8004bac <HAL_RCC_GetSysClockFreq+0x108>)
 8004ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004aea:	0a1b      	lsrs	r3, r3, #8
 8004aec:	f003 030f 	and.w	r3, r3, #15
 8004af0:	61fb      	str	r3, [r7, #28]
 8004af2:	e005      	b.n	8004b00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004af4:	4b2d      	ldr	r3, [pc, #180]	; (8004bac <HAL_RCC_GetSysClockFreq+0x108>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	091b      	lsrs	r3, r3, #4
 8004afa:	f003 030f 	and.w	r3, r3, #15
 8004afe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b00:	4a2b      	ldr	r2, [pc, #172]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10d      	bne.n	8004b2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b14:	e00a      	b.n	8004b2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	2b04      	cmp	r3, #4
 8004b1a:	d102      	bne.n	8004b22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b1c:	4b25      	ldr	r3, [pc, #148]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b1e:	61bb      	str	r3, [r7, #24]
 8004b20:	e004      	b.n	8004b2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	2b08      	cmp	r3, #8
 8004b26:	d101      	bne.n	8004b2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b28:	4b23      	ldr	r3, [pc, #140]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	2b0c      	cmp	r3, #12
 8004b30:	d134      	bne.n	8004b9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b32:	4b1e      	ldr	r3, [pc, #120]	; (8004bac <HAL_RCC_GetSysClockFreq+0x108>)
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f003 0303 	and.w	r3, r3, #3
 8004b3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d003      	beq.n	8004b4a <HAL_RCC_GetSysClockFreq+0xa6>
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2b03      	cmp	r3, #3
 8004b46:	d003      	beq.n	8004b50 <HAL_RCC_GetSysClockFreq+0xac>
 8004b48:	e005      	b.n	8004b56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b4a:	4b1a      	ldr	r3, [pc, #104]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b4c:	617b      	str	r3, [r7, #20]
      break;
 8004b4e:	e005      	b.n	8004b5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b50:	4b19      	ldr	r3, [pc, #100]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b52:	617b      	str	r3, [r7, #20]
      break;
 8004b54:	e002      	b.n	8004b5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	617b      	str	r3, [r7, #20]
      break;
 8004b5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b5c:	4b13      	ldr	r3, [pc, #76]	; (8004bac <HAL_RCC_GetSysClockFreq+0x108>)
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	091b      	lsrs	r3, r3, #4
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	3301      	adds	r3, #1
 8004b68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b6a:	4b10      	ldr	r3, [pc, #64]	; (8004bac <HAL_RCC_GetSysClockFreq+0x108>)
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	0a1b      	lsrs	r3, r3, #8
 8004b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	fb02 f203 	mul.w	r2, r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b82:	4b0a      	ldr	r3, [pc, #40]	; (8004bac <HAL_RCC_GetSysClockFreq+0x108>)
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	0e5b      	lsrs	r3, r3, #25
 8004b88:	f003 0303 	and.w	r3, r3, #3
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b9c:	69bb      	ldr	r3, [r7, #24]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3724      	adds	r7, #36	; 0x24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	40021000 	.word	0x40021000
 8004bb0:	0800b810 	.word	0x0800b810
 8004bb4:	00f42400 	.word	0x00f42400
 8004bb8:	007a1200 	.word	0x007a1200

08004bbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bc0:	4b03      	ldr	r3, [pc, #12]	; (8004bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	20000000 	.word	0x20000000

08004bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004bd8:	f7ff fff0 	bl	8004bbc <HAL_RCC_GetHCLKFreq>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	4b06      	ldr	r3, [pc, #24]	; (8004bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	0a1b      	lsrs	r3, r3, #8
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	4904      	ldr	r1, [pc, #16]	; (8004bfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bea:	5ccb      	ldrb	r3, [r1, r3]
 8004bec:	f003 031f 	and.w	r3, r3, #31
 8004bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	0800b808 	.word	0x0800b808

08004c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c04:	f7ff ffda 	bl	8004bbc <HAL_RCC_GetHCLKFreq>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	4b06      	ldr	r3, [pc, #24]	; (8004c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	0adb      	lsrs	r3, r3, #11
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	4904      	ldr	r1, [pc, #16]	; (8004c28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c16:	5ccb      	ldrb	r3, [r1, r3]
 8004c18:	f003 031f 	and.w	r3, r3, #31
 8004c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	40021000 	.word	0x40021000
 8004c28:	0800b808 	.word	0x0800b808

08004c2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c34:	2300      	movs	r3, #0
 8004c36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c38:	4b27      	ldr	r3, [pc, #156]	; (8004cd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d003      	beq.n	8004c4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c44:	f7ff f872 	bl	8003d2c <HAL_PWREx_GetVoltageRange>
 8004c48:	6178      	str	r0, [r7, #20]
 8004c4a:	e014      	b.n	8004c76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c4c:	4b22      	ldr	r3, [pc, #136]	; (8004cd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c50:	4a21      	ldr	r2, [pc, #132]	; (8004cd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c56:	6593      	str	r3, [r2, #88]	; 0x58
 8004c58:	4b1f      	ldr	r3, [pc, #124]	; (8004cd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c60:	60fb      	str	r3, [r7, #12]
 8004c62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c64:	f7ff f862 	bl	8003d2c <HAL_PWREx_GetVoltageRange>
 8004c68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c6a:	4b1b      	ldr	r3, [pc, #108]	; (8004cd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c6e:	4a1a      	ldr	r2, [pc, #104]	; (8004cd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c74:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c7c:	d10b      	bne.n	8004c96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b80      	cmp	r3, #128	; 0x80
 8004c82:	d913      	bls.n	8004cac <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2ba0      	cmp	r3, #160	; 0xa0
 8004c88:	d902      	bls.n	8004c90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	613b      	str	r3, [r7, #16]
 8004c8e:	e00d      	b.n	8004cac <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c90:	2301      	movs	r3, #1
 8004c92:	613b      	str	r3, [r7, #16]
 8004c94:	e00a      	b.n	8004cac <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b7f      	cmp	r3, #127	; 0x7f
 8004c9a:	d902      	bls.n	8004ca2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	613b      	str	r3, [r7, #16]
 8004ca0:	e004      	b.n	8004cac <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b70      	cmp	r3, #112	; 0x70
 8004ca6:	d101      	bne.n	8004cac <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ca8:	2301      	movs	r3, #1
 8004caa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004cac:	4b0b      	ldr	r3, [pc, #44]	; (8004cdc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f023 020f 	bic.w	r2, r3, #15
 8004cb4:	4909      	ldr	r1, [pc, #36]	; (8004cdc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004cbc:	4b07      	ldr	r3, [pc, #28]	; (8004cdc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 030f 	and.w	r3, r3, #15
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d001      	beq.n	8004cce <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e000      	b.n	8004cd0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	40021000 	.word	0x40021000
 8004cdc:	40022000 	.word	0x40022000

08004ce0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8004cea:	4b2d      	ldr	r3, [pc, #180]	; (8004da0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d118      	bne.n	8004d28 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004cf6:	4b2a      	ldr	r3, [pc, #168]	; (8004da0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0308 	and.w	r3, r3, #8
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d107      	bne.n	8004d12 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d02:	4b27      	ldr	r3, [pc, #156]	; (8004da0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d08:	0a1b      	lsrs	r3, r3, #8
 8004d0a:	f003 030f 	and.w	r3, r3, #15
 8004d0e:	617b      	str	r3, [r7, #20]
 8004d10:	e005      	b.n	8004d1e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d12:	4b23      	ldr	r3, [pc, #140]	; (8004da0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	091b      	lsrs	r3, r3, #4
 8004d18:	f003 030f 	and.w	r3, r3, #15
 8004d1c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d1e:	4a21      	ldr	r2, [pc, #132]	; (8004da4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d26:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d28:	4b1d      	ldr	r3, [pc, #116]	; (8004da0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f003 0303 	and.w	r3, r3, #3
 8004d30:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d003      	beq.n	8004d40 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	d003      	beq.n	8004d46 <RCC_GetSysClockFreqFromPLLSource+0x66>
 8004d3e:	e005      	b.n	8004d4c <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004d40:	4b19      	ldr	r3, [pc, #100]	; (8004da8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004d42:	613b      	str	r3, [r7, #16]
    break;
 8004d44:	e005      	b.n	8004d52 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004d46:	4b19      	ldr	r3, [pc, #100]	; (8004dac <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004d48:	613b      	str	r3, [r7, #16]
    break;
 8004d4a:	e002      	b.n	8004d52 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	613b      	str	r3, [r7, #16]
    break;
 8004d50:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d52:	4b13      	ldr	r3, [pc, #76]	; (8004da0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	091b      	lsrs	r3, r3, #4
 8004d58:	f003 030f 	and.w	r3, r3, #15
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d60:	4b0f      	ldr	r3, [pc, #60]	; (8004da0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	0a1b      	lsrs	r3, r3, #8
 8004d66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	fb02 f203 	mul.w	r2, r2, r3
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d76:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d78:	4b09      	ldr	r3, [pc, #36]	; (8004da0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	0e5b      	lsrs	r3, r3, #25
 8004d7e:	f003 0303 	and.w	r3, r3, #3
 8004d82:	3301      	adds	r3, #1
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d90:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004d92:	683b      	ldr	r3, [r7, #0]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	371c      	adds	r7, #28
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	40021000 	.word	0x40021000
 8004da4:	0800b810 	.word	0x0800b810
 8004da8:	00f42400 	.word	0x00f42400
 8004dac:	007a1200 	.word	0x007a1200

08004db0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004db8:	2300      	movs	r3, #0
 8004dba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d040      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dd0:	2b80      	cmp	r3, #128	; 0x80
 8004dd2:	d02a      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004dd4:	2b80      	cmp	r3, #128	; 0x80
 8004dd6:	d825      	bhi.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004dd8:	2b60      	cmp	r3, #96	; 0x60
 8004dda:	d026      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004ddc:	2b60      	cmp	r3, #96	; 0x60
 8004dde:	d821      	bhi.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004de0:	2b40      	cmp	r3, #64	; 0x40
 8004de2:	d006      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004de4:	2b40      	cmp	r3, #64	; 0x40
 8004de6:	d81d      	bhi.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d009      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004dec:	2b20      	cmp	r3, #32
 8004dee:	d010      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004df0:	e018      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004df2:	4b89      	ldr	r3, [pc, #548]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	4a88      	ldr	r2, [pc, #544]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dfc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004dfe:	e015      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	3304      	adds	r3, #4
 8004e04:	2100      	movs	r1, #0
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 fb4e 	bl	80054a8 <RCCEx_PLLSAI1_Config>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e10:	e00c      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	3320      	adds	r3, #32
 8004e16:	2100      	movs	r1, #0
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 fc39 	bl	8005690 <RCCEx_PLLSAI2_Config>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e22:	e003      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	74fb      	strb	r3, [r7, #19]
      break;
 8004e28:	e000      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004e2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e2c:	7cfb      	ldrb	r3, [r7, #19]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10b      	bne.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e32:	4b79      	ldr	r3, [pc, #484]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e38:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e40:	4975      	ldr	r1, [pc, #468]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004e48:	e001      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e4a:	7cfb      	ldrb	r3, [r7, #19]
 8004e4c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d047      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e62:	d030      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e68:	d82a      	bhi.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004e6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e6e:	d02a      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004e70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e74:	d824      	bhi.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004e76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e7a:	d008      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e80:	d81e      	bhi.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e8a:	d010      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004e8c:	e018      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e8e:	4b62      	ldr	r3, [pc, #392]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	4a61      	ldr	r2, [pc, #388]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e98:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e9a:	e015      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3304      	adds	r3, #4
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 fb00 	bl	80054a8 <RCCEx_PLLSAI1_Config>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004eac:	e00c      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	3320      	adds	r3, #32
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 fbeb 	bl	8005690 <RCCEx_PLLSAI2_Config>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ebe:	e003      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	74fb      	strb	r3, [r7, #19]
      break;
 8004ec4:	e000      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004ec6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ec8:	7cfb      	ldrb	r3, [r7, #19]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10b      	bne.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ece:	4b52      	ldr	r3, [pc, #328]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ed0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ed4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004edc:	494e      	ldr	r1, [pc, #312]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004ee4:	e001      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee6:	7cfb      	ldrb	r3, [r7, #19]
 8004ee8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 809f 	beq.w	8005036 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004efc:	4b46      	ldr	r3, [pc, #280]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e000      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00d      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f12:	4b41      	ldr	r3, [pc, #260]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f16:	4a40      	ldr	r2, [pc, #256]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f1c:	6593      	str	r3, [r2, #88]	; 0x58
 8004f1e:	4b3e      	ldr	r3, [pc, #248]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f26:	60bb      	str	r3, [r7, #8]
 8004f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f2e:	4b3b      	ldr	r3, [pc, #236]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a3a      	ldr	r2, [pc, #232]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f3a:	f7fb fe37 	bl	8000bac <HAL_GetTick>
 8004f3e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f40:	e009      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f42:	f7fb fe33 	bl	8000bac <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d902      	bls.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	74fb      	strb	r3, [r7, #19]
        break;
 8004f54:	e005      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f56:	4b31      	ldr	r3, [pc, #196]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0ef      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004f62:	7cfb      	ldrb	r3, [r7, #19]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d15b      	bne.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f68:	4b2b      	ldr	r3, [pc, #172]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f72:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d01f      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d019      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f86:	4b24      	ldr	r3, [pc, #144]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f90:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f92:	4b21      	ldr	r3, [pc, #132]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f98:	4a1f      	ldr	r2, [pc, #124]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fa2:	4b1d      	ldr	r3, [pc, #116]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa8:	4a1b      	ldr	r2, [pc, #108]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004fb2:	4a19      	ldr	r2, [pc, #100]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d016      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc4:	f7fb fdf2 	bl	8000bac <HAL_GetTick>
 8004fc8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fca:	e00b      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fcc:	f7fb fdee 	bl	8000bac <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d902      	bls.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	74fb      	strb	r3, [r7, #19]
            break;
 8004fe2:	e006      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fe4:	4b0c      	ldr	r3, [pc, #48]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d0ec      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004ff2:	7cfb      	ldrb	r3, [r7, #19]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10c      	bne.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ff8:	4b07      	ldr	r3, [pc, #28]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005008:	4903      	ldr	r1, [pc, #12]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800500a:	4313      	orrs	r3, r2
 800500c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005010:	e008      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005012:	7cfb      	ldrb	r3, [r7, #19]
 8005014:	74bb      	strb	r3, [r7, #18]
 8005016:	e005      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005018:	40021000 	.word	0x40021000
 800501c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005020:	7cfb      	ldrb	r3, [r7, #19]
 8005022:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005024:	7c7b      	ldrb	r3, [r7, #17]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d105      	bne.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800502a:	4ba0      	ldr	r3, [pc, #640]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800502c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800502e:	4a9f      	ldr	r2, [pc, #636]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005030:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005034:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00a      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005042:	4b9a      	ldr	r3, [pc, #616]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005048:	f023 0203 	bic.w	r2, r3, #3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005050:	4996      	ldr	r1, [pc, #600]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005052:	4313      	orrs	r3, r2
 8005054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00a      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005064:	4b91      	ldr	r3, [pc, #580]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506a:	f023 020c 	bic.w	r2, r3, #12
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	498e      	ldr	r1, [pc, #568]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005074:	4313      	orrs	r3, r2
 8005076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0304 	and.w	r3, r3, #4
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00a      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005086:	4b89      	ldr	r3, [pc, #548]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005094:	4985      	ldr	r1, [pc, #532]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005096:	4313      	orrs	r3, r2
 8005098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0308 	and.w	r3, r3, #8
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00a      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050a8:	4b80      	ldr	r3, [pc, #512]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050b6:	497d      	ldr	r1, [pc, #500]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0310 	and.w	r3, r3, #16
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00a      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050ca:	4b78      	ldr	r3, [pc, #480]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d8:	4974      	ldr	r1, [pc, #464]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0320 	and.w	r3, r3, #32
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00a      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050ec:	4b6f      	ldr	r3, [pc, #444]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050fa:	496c      	ldr	r1, [pc, #432]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00a      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800510e:	4b67      	ldr	r3, [pc, #412]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005114:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800511c:	4963      	ldr	r1, [pc, #396]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800511e:	4313      	orrs	r3, r2
 8005120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00a      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005130:	4b5e      	ldr	r3, [pc, #376]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005136:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800513e:	495b      	ldr	r1, [pc, #364]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005140:	4313      	orrs	r3, r2
 8005142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00a      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005152:	4b56      	ldr	r3, [pc, #344]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005158:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005160:	4952      	ldr	r1, [pc, #328]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005162:	4313      	orrs	r3, r2
 8005164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00a      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005174:	4b4d      	ldr	r3, [pc, #308]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005182:	494a      	ldr	r1, [pc, #296]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005184:	4313      	orrs	r3, r2
 8005186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00a      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005196:	4b45      	ldr	r3, [pc, #276]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a4:	4941      	ldr	r1, [pc, #260]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00a      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051b8:	4b3c      	ldr	r3, [pc, #240]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051be:	f023 0203 	bic.w	r2, r3, #3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c6:	4939      	ldr	r1, [pc, #228]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d028      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051da:	4b34      	ldr	r3, [pc, #208]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051e8:	4930      	ldr	r1, [pc, #192]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051f8:	d106      	bne.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051fa:	4b2c      	ldr	r3, [pc, #176]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	4a2b      	ldr	r2, [pc, #172]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005200:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005204:	60d3      	str	r3, [r2, #12]
 8005206:	e011      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800520c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005210:	d10c      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	3304      	adds	r3, #4
 8005216:	2101      	movs	r1, #1
 8005218:	4618      	mov	r0, r3
 800521a:	f000 f945 	bl	80054a8 <RCCEx_PLLSAI1_Config>
 800521e:	4603      	mov	r3, r0
 8005220:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005222:	7cfb      	ldrb	r3, [r7, #19]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005228:	7cfb      	ldrb	r3, [r7, #19]
 800522a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d04d      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800523c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005240:	d108      	bne.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005242:	4b1a      	ldr	r3, [pc, #104]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005244:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005248:	4a18      	ldr	r2, [pc, #96]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800524a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800524e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005252:	e012      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005254:	4b15      	ldr	r3, [pc, #84]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005256:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800525a:	4a14      	ldr	r2, [pc, #80]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800525c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005260:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005264:	4b11      	ldr	r3, [pc, #68]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005272:	490e      	ldr	r1, [pc, #56]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005274:	4313      	orrs	r3, r2
 8005276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800527e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005282:	d106      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005284:	4b09      	ldr	r3, [pc, #36]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	4a08      	ldr	r2, [pc, #32]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800528a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800528e:	60d3      	str	r3, [r2, #12]
 8005290:	e020      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005296:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800529a:	d109      	bne.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800529c:	4b03      	ldr	r3, [pc, #12]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	4a02      	ldr	r2, [pc, #8]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052a6:	60d3      	str	r3, [r2, #12]
 80052a8:	e014      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80052aa:	bf00      	nop
 80052ac:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052b8:	d10c      	bne.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	3304      	adds	r3, #4
 80052be:	2101      	movs	r1, #1
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 f8f1 	bl	80054a8 <RCCEx_PLLSAI1_Config>
 80052c6:	4603      	mov	r3, r0
 80052c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052ca:	7cfb      	ldrb	r3, [r7, #19]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80052d0:	7cfb      	ldrb	r3, [r7, #19]
 80052d2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d028      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052e0:	4b68      	ldr	r3, [pc, #416]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80052e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052ee:	4965      	ldr	r1, [pc, #404]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052fe:	d106      	bne.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005300:	4b60      	ldr	r3, [pc, #384]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	4a5f      	ldr	r2, [pc, #380]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005306:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800530a:	60d3      	str	r3, [r2, #12]
 800530c:	e011      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005312:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005316:	d10c      	bne.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	3304      	adds	r3, #4
 800531c:	2101      	movs	r1, #1
 800531e:	4618      	mov	r0, r3
 8005320:	f000 f8c2 	bl	80054a8 <RCCEx_PLLSAI1_Config>
 8005324:	4603      	mov	r3, r0
 8005326:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005328:	7cfb      	ldrb	r3, [r7, #19]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800532e:	7cfb      	ldrb	r3, [r7, #19]
 8005330:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d01e      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800533e:	4b51      	ldr	r3, [pc, #324]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005344:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800534e:	494d      	ldr	r1, [pc, #308]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005350:	4313      	orrs	r3, r2
 8005352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800535c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005360:	d10c      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	3304      	adds	r3, #4
 8005366:	2102      	movs	r1, #2
 8005368:	4618      	mov	r0, r3
 800536a:	f000 f89d 	bl	80054a8 <RCCEx_PLLSAI1_Config>
 800536e:	4603      	mov	r3, r0
 8005370:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005372:	7cfb      	ldrb	r3, [r7, #19]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005378:	7cfb      	ldrb	r3, [r7, #19]
 800537a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00b      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005388:	4b3e      	ldr	r3, [pc, #248]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800538a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800538e:	f023 0204 	bic.w	r2, r3, #4
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005398:	493a      	ldr	r1, [pc, #232]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800539a:	4313      	orrs	r3, r2
 800539c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00b      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80053ac:	4b35      	ldr	r3, [pc, #212]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80053ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053b2:	f023 0218 	bic.w	r2, r3, #24
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053bc:	4931      	ldr	r1, [pc, #196]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d035      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80053d0:	4b2c      	ldr	r3, [pc, #176]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a2b      	ldr	r2, [pc, #172]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80053d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053dc:	f7fb fbe6 	bl	8000bac <HAL_GetTick>
 80053e0:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80053e2:	e009      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80053e4:	f7fb fbe2 	bl	8000bac <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d902      	bls.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	74fb      	strb	r3, [r7, #19]
        break;
 80053f6:	e005      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80053f8:	4b22      	ldr	r3, [pc, #136]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1ef      	bne.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8005404:	7cfb      	ldrb	r3, [r7, #19]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d113      	bne.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800540a:	4b1e      	ldr	r3, [pc, #120]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800540c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005410:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800541a:	491a      	ldr	r1, [pc, #104]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800541c:	4313      	orrs	r3, r2
 800541e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	3320      	adds	r3, #32
 8005426:	2102      	movs	r1, #2
 8005428:	4618      	mov	r0, r3
 800542a:	f000 f931 	bl	8005690 <RCCEx_PLLSAI2_Config>
 800542e:	4603      	mov	r3, r0
 8005430:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8005432:	7cfb      	ldrb	r3, [r7, #19]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8005438:	7cfb      	ldrb	r3, [r7, #19]
 800543a:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d017      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005448:	4b0e      	ldr	r3, [pc, #56]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800544a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800544e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005458:	490a      	ldr	r1, [pc, #40]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800545a:	4313      	orrs	r3, r2
 800545c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005466:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800546a:	d105      	bne.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800546c:	4b05      	ldr	r3, [pc, #20]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	4a04      	ldr	r2, [pc, #16]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005472:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005476:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005478:	7cbb      	ldrb	r3, [r7, #18]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	40021000 	.word	0x40021000

08005488 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005488:	b480      	push	{r7}
 800548a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800548c:	4b05      	ldr	r3, [pc, #20]	; (80054a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a04      	ldr	r2, [pc, #16]	; (80054a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005492:	f043 0304 	orr.w	r3, r3, #4
 8005496:	6013      	str	r3, [r2, #0]
}
 8005498:	bf00      	nop
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	40021000 	.word	0x40021000

080054a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054b6:	4b72      	ldr	r3, [pc, #456]	; (8005680 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00e      	beq.n	80054e0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80054c2:	4b6f      	ldr	r3, [pc, #444]	; (8005680 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f003 0203 	and.w	r2, r3, #3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d103      	bne.n	80054da <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
       ||
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d142      	bne.n	8005560 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	73fb      	strb	r3, [r7, #15]
 80054de:	e03f      	b.n	8005560 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b03      	cmp	r3, #3
 80054e6:	d018      	beq.n	800551a <RCCEx_PLLSAI1_Config+0x72>
 80054e8:	2b03      	cmp	r3, #3
 80054ea:	d825      	bhi.n	8005538 <RCCEx_PLLSAI1_Config+0x90>
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d002      	beq.n	80054f6 <RCCEx_PLLSAI1_Config+0x4e>
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d009      	beq.n	8005508 <RCCEx_PLLSAI1_Config+0x60>
 80054f4:	e020      	b.n	8005538 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054f6:	4b62      	ldr	r3, [pc, #392]	; (8005680 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d11d      	bne.n	800553e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005506:	e01a      	b.n	800553e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005508:	4b5d      	ldr	r3, [pc, #372]	; (8005680 <RCCEx_PLLSAI1_Config+0x1d8>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005510:	2b00      	cmp	r3, #0
 8005512:	d116      	bne.n	8005542 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005518:	e013      	b.n	8005542 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800551a:	4b59      	ldr	r3, [pc, #356]	; (8005680 <RCCEx_PLLSAI1_Config+0x1d8>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10f      	bne.n	8005546 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005526:	4b56      	ldr	r3, [pc, #344]	; (8005680 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d109      	bne.n	8005546 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005536:	e006      	b.n	8005546 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	73fb      	strb	r3, [r7, #15]
      break;
 800553c:	e004      	b.n	8005548 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800553e:	bf00      	nop
 8005540:	e002      	b.n	8005548 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005542:	bf00      	nop
 8005544:	e000      	b.n	8005548 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005546:	bf00      	nop
    }

    if(status == HAL_OK)
 8005548:	7bfb      	ldrb	r3, [r7, #15]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d108      	bne.n	8005560 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800554e:	4b4c      	ldr	r3, [pc, #304]	; (8005680 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f023 0203 	bic.w	r2, r3, #3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4949      	ldr	r1, [pc, #292]	; (8005680 <RCCEx_PLLSAI1_Config+0x1d8>)
 800555c:	4313      	orrs	r3, r2
 800555e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005560:	7bfb      	ldrb	r3, [r7, #15]
 8005562:	2b00      	cmp	r3, #0
 8005564:	f040 8086 	bne.w	8005674 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005568:	4b45      	ldr	r3, [pc, #276]	; (8005680 <RCCEx_PLLSAI1_Config+0x1d8>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a44      	ldr	r2, [pc, #272]	; (8005680 <RCCEx_PLLSAI1_Config+0x1d8>)
 800556e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005572:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005574:	f7fb fb1a 	bl	8000bac <HAL_GetTick>
 8005578:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800557a:	e009      	b.n	8005590 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800557c:	f7fb fb16 	bl	8000bac <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d902      	bls.n	8005590 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	73fb      	strb	r3, [r7, #15]
        break;
 800558e:	e005      	b.n	800559c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005590:	4b3b      	ldr	r3, [pc, #236]	; (8005680 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1ef      	bne.n	800557c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d168      	bne.n	8005674 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d113      	bne.n	80055d0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055a8:	4b35      	ldr	r3, [pc, #212]	; (8005680 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055aa:	691a      	ldr	r2, [r3, #16]
 80055ac:	4b35      	ldr	r3, [pc, #212]	; (8005684 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055ae:	4013      	ands	r3, r2
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6892      	ldr	r2, [r2, #8]
 80055b4:	0211      	lsls	r1, r2, #8
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	68d2      	ldr	r2, [r2, #12]
 80055ba:	06d2      	lsls	r2, r2, #27
 80055bc:	4311      	orrs	r1, r2
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	6852      	ldr	r2, [r2, #4]
 80055c2:	3a01      	subs	r2, #1
 80055c4:	0112      	lsls	r2, r2, #4
 80055c6:	430a      	orrs	r2, r1
 80055c8:	492d      	ldr	r1, [pc, #180]	; (8005680 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	610b      	str	r3, [r1, #16]
 80055ce:	e02d      	b.n	800562c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d115      	bne.n	8005602 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055d6:	4b2a      	ldr	r3, [pc, #168]	; (8005680 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055d8:	691a      	ldr	r2, [r3, #16]
 80055da:	4b2b      	ldr	r3, [pc, #172]	; (8005688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055dc:	4013      	ands	r3, r2
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	6892      	ldr	r2, [r2, #8]
 80055e2:	0211      	lsls	r1, r2, #8
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6912      	ldr	r2, [r2, #16]
 80055e8:	0852      	lsrs	r2, r2, #1
 80055ea:	3a01      	subs	r2, #1
 80055ec:	0552      	lsls	r2, r2, #21
 80055ee:	4311      	orrs	r1, r2
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	6852      	ldr	r2, [r2, #4]
 80055f4:	3a01      	subs	r2, #1
 80055f6:	0112      	lsls	r2, r2, #4
 80055f8:	430a      	orrs	r2, r1
 80055fa:	4921      	ldr	r1, [pc, #132]	; (8005680 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	610b      	str	r3, [r1, #16]
 8005600:	e014      	b.n	800562c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005602:	4b1f      	ldr	r3, [pc, #124]	; (8005680 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005604:	691a      	ldr	r2, [r3, #16]
 8005606:	4b21      	ldr	r3, [pc, #132]	; (800568c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005608:	4013      	ands	r3, r2
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	6892      	ldr	r2, [r2, #8]
 800560e:	0211      	lsls	r1, r2, #8
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	6952      	ldr	r2, [r2, #20]
 8005614:	0852      	lsrs	r2, r2, #1
 8005616:	3a01      	subs	r2, #1
 8005618:	0652      	lsls	r2, r2, #25
 800561a:	4311      	orrs	r1, r2
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6852      	ldr	r2, [r2, #4]
 8005620:	3a01      	subs	r2, #1
 8005622:	0112      	lsls	r2, r2, #4
 8005624:	430a      	orrs	r2, r1
 8005626:	4916      	ldr	r1, [pc, #88]	; (8005680 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005628:	4313      	orrs	r3, r2
 800562a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800562c:	4b14      	ldr	r3, [pc, #80]	; (8005680 <RCCEx_PLLSAI1_Config+0x1d8>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a13      	ldr	r2, [pc, #76]	; (8005680 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005632:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005636:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005638:	f7fb fab8 	bl	8000bac <HAL_GetTick>
 800563c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800563e:	e009      	b.n	8005654 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005640:	f7fb fab4 	bl	8000bac <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	2b02      	cmp	r3, #2
 800564c:	d902      	bls.n	8005654 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	73fb      	strb	r3, [r7, #15]
          break;
 8005652:	e005      	b.n	8005660 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005654:	4b0a      	ldr	r3, [pc, #40]	; (8005680 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d0ef      	beq.n	8005640 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005660:	7bfb      	ldrb	r3, [r7, #15]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d106      	bne.n	8005674 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005666:	4b06      	ldr	r3, [pc, #24]	; (8005680 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005668:	691a      	ldr	r2, [r3, #16]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	4904      	ldr	r1, [pc, #16]	; (8005680 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005670:	4313      	orrs	r3, r2
 8005672:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005674:	7bfb      	ldrb	r3, [r7, #15]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	40021000 	.word	0x40021000
 8005684:	07ff800f 	.word	0x07ff800f
 8005688:	ff9f800f 	.word	0xff9f800f
 800568c:	f9ff800f 	.word	0xf9ff800f

08005690 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800569a:	2300      	movs	r3, #0
 800569c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800569e:	4b72      	ldr	r3, [pc, #456]	; (8005868 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f003 0303 	and.w	r3, r3, #3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00e      	beq.n	80056c8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80056aa:	4b6f      	ldr	r3, [pc, #444]	; (8005868 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f003 0203 	and.w	r2, r3, #3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d103      	bne.n	80056c2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
       ||
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d142      	bne.n	8005748 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	73fb      	strb	r3, [r7, #15]
 80056c6:	e03f      	b.n	8005748 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b03      	cmp	r3, #3
 80056ce:	d018      	beq.n	8005702 <RCCEx_PLLSAI2_Config+0x72>
 80056d0:	2b03      	cmp	r3, #3
 80056d2:	d825      	bhi.n	8005720 <RCCEx_PLLSAI2_Config+0x90>
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d002      	beq.n	80056de <RCCEx_PLLSAI2_Config+0x4e>
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d009      	beq.n	80056f0 <RCCEx_PLLSAI2_Config+0x60>
 80056dc:	e020      	b.n	8005720 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056de:	4b62      	ldr	r3, [pc, #392]	; (8005868 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d11d      	bne.n	8005726 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056ee:	e01a      	b.n	8005726 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056f0:	4b5d      	ldr	r3, [pc, #372]	; (8005868 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d116      	bne.n	800572a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005700:	e013      	b.n	800572a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005702:	4b59      	ldr	r3, [pc, #356]	; (8005868 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10f      	bne.n	800572e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800570e:	4b56      	ldr	r3, [pc, #344]	; (8005868 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d109      	bne.n	800572e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800571e:	e006      	b.n	800572e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	73fb      	strb	r3, [r7, #15]
      break;
 8005724:	e004      	b.n	8005730 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005726:	bf00      	nop
 8005728:	e002      	b.n	8005730 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800572a:	bf00      	nop
 800572c:	e000      	b.n	8005730 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800572e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005730:	7bfb      	ldrb	r3, [r7, #15]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d108      	bne.n	8005748 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005736:	4b4c      	ldr	r3, [pc, #304]	; (8005868 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f023 0203 	bic.w	r2, r3, #3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4949      	ldr	r1, [pc, #292]	; (8005868 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005744:	4313      	orrs	r3, r2
 8005746:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005748:	7bfb      	ldrb	r3, [r7, #15]
 800574a:	2b00      	cmp	r3, #0
 800574c:	f040 8086 	bne.w	800585c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005750:	4b45      	ldr	r3, [pc, #276]	; (8005868 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a44      	ldr	r2, [pc, #272]	; (8005868 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005756:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800575a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800575c:	f7fb fa26 	bl	8000bac <HAL_GetTick>
 8005760:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005762:	e009      	b.n	8005778 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005764:	f7fb fa22 	bl	8000bac <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b02      	cmp	r3, #2
 8005770:	d902      	bls.n	8005778 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	73fb      	strb	r3, [r7, #15]
        break;
 8005776:	e005      	b.n	8005784 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005778:	4b3b      	ldr	r3, [pc, #236]	; (8005868 <RCCEx_PLLSAI2_Config+0x1d8>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1ef      	bne.n	8005764 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005784:	7bfb      	ldrb	r3, [r7, #15]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d168      	bne.n	800585c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d113      	bne.n	80057b8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005790:	4b35      	ldr	r3, [pc, #212]	; (8005868 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005792:	695a      	ldr	r2, [r3, #20]
 8005794:	4b35      	ldr	r3, [pc, #212]	; (800586c <RCCEx_PLLSAI2_Config+0x1dc>)
 8005796:	4013      	ands	r3, r2
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	6892      	ldr	r2, [r2, #8]
 800579c:	0211      	lsls	r1, r2, #8
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	68d2      	ldr	r2, [r2, #12]
 80057a2:	06d2      	lsls	r2, r2, #27
 80057a4:	4311      	orrs	r1, r2
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	6852      	ldr	r2, [r2, #4]
 80057aa:	3a01      	subs	r2, #1
 80057ac:	0112      	lsls	r2, r2, #4
 80057ae:	430a      	orrs	r2, r1
 80057b0:	492d      	ldr	r1, [pc, #180]	; (8005868 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	614b      	str	r3, [r1, #20]
 80057b6:	e02d      	b.n	8005814 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d115      	bne.n	80057ea <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057be:	4b2a      	ldr	r3, [pc, #168]	; (8005868 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057c0:	695a      	ldr	r2, [r3, #20]
 80057c2:	4b2b      	ldr	r3, [pc, #172]	; (8005870 <RCCEx_PLLSAI2_Config+0x1e0>)
 80057c4:	4013      	ands	r3, r2
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	6892      	ldr	r2, [r2, #8]
 80057ca:	0211      	lsls	r1, r2, #8
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	6912      	ldr	r2, [r2, #16]
 80057d0:	0852      	lsrs	r2, r2, #1
 80057d2:	3a01      	subs	r2, #1
 80057d4:	0552      	lsls	r2, r2, #21
 80057d6:	4311      	orrs	r1, r2
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6852      	ldr	r2, [r2, #4]
 80057dc:	3a01      	subs	r2, #1
 80057de:	0112      	lsls	r2, r2, #4
 80057e0:	430a      	orrs	r2, r1
 80057e2:	4921      	ldr	r1, [pc, #132]	; (8005868 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	614b      	str	r3, [r1, #20]
 80057e8:	e014      	b.n	8005814 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057ea:	4b1f      	ldr	r3, [pc, #124]	; (8005868 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057ec:	695a      	ldr	r2, [r3, #20]
 80057ee:	4b21      	ldr	r3, [pc, #132]	; (8005874 <RCCEx_PLLSAI2_Config+0x1e4>)
 80057f0:	4013      	ands	r3, r2
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	6892      	ldr	r2, [r2, #8]
 80057f6:	0211      	lsls	r1, r2, #8
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	6952      	ldr	r2, [r2, #20]
 80057fc:	0852      	lsrs	r2, r2, #1
 80057fe:	3a01      	subs	r2, #1
 8005800:	0652      	lsls	r2, r2, #25
 8005802:	4311      	orrs	r1, r2
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	6852      	ldr	r2, [r2, #4]
 8005808:	3a01      	subs	r2, #1
 800580a:	0112      	lsls	r2, r2, #4
 800580c:	430a      	orrs	r2, r1
 800580e:	4916      	ldr	r1, [pc, #88]	; (8005868 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005810:	4313      	orrs	r3, r2
 8005812:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005814:	4b14      	ldr	r3, [pc, #80]	; (8005868 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a13      	ldr	r2, [pc, #76]	; (8005868 <RCCEx_PLLSAI2_Config+0x1d8>)
 800581a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800581e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005820:	f7fb f9c4 	bl	8000bac <HAL_GetTick>
 8005824:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005826:	e009      	b.n	800583c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005828:	f7fb f9c0 	bl	8000bac <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	2b02      	cmp	r3, #2
 8005834:	d902      	bls.n	800583c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	73fb      	strb	r3, [r7, #15]
          break;
 800583a:	e005      	b.n	8005848 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800583c:	4b0a      	ldr	r3, [pc, #40]	; (8005868 <RCCEx_PLLSAI2_Config+0x1d8>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d0ef      	beq.n	8005828 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005848:	7bfb      	ldrb	r3, [r7, #15]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d106      	bne.n	800585c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800584e:	4b06      	ldr	r3, [pc, #24]	; (8005868 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005850:	695a      	ldr	r2, [r3, #20]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	4904      	ldr	r1, [pc, #16]	; (8005868 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005858:	4313      	orrs	r3, r2
 800585a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800585c:	7bfb      	ldrb	r3, [r7, #15]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	40021000 	.word	0x40021000
 800586c:	07ff800f 	.word	0x07ff800f
 8005870:	ff9f800f 	.word	0xff9f800f
 8005874:	f9ff800f 	.word	0xf9ff800f

08005878 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e03c      	b.n	8005904 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d106      	bne.n	80058a4 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7fa ff88 	bl	80007b4 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 0201 	bic.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f85b 	bl	8005978 <USART_SetConfig>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d101      	bne.n	80058cc <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e01b      	b.n	8005904 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80058da:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689a      	ldr	r2, [r3, #8]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058ea:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0201 	orr.w	r2, r2, #1
 80058fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 fb23 	bl	8005f48 <USART_CheckIdleState>
 8005902:	4603      	mov	r3, r0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	603b      	str	r3, [r7, #0]
 8005918:	4613      	mov	r3, r2
 800591a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800591c:	e018      	b.n	8005950 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005924:	d014      	beq.n	8005950 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005926:	f7fb f941 	bl	8000bac <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	429a      	cmp	r2, r3
 8005934:	d302      	bcc.n	800593c <USART_WaitOnFlagUntilTimeout+0x30>
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d109      	bne.n	8005950 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e00f      	b.n	8005970 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	69da      	ldr	r2, [r3, #28]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	4013      	ands	r3, r2
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	429a      	cmp	r2, r3
 800595e:	bf0c      	ite	eq
 8005960:	2301      	moveq	r3, #1
 8005962:	2300      	movne	r3, #0
 8005964:	b2db      	uxtb	r3, r3
 8005966:	461a      	mov	r2, r3
 8005968:	79fb      	ldrb	r3, [r7, #7]
 800596a:	429a      	cmp	r2, r3
 800596c:	d0d7      	beq.n	800591e <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b088      	sub	sp, #32
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8005980:	2300      	movs	r3, #0
 8005982:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8005984:	2300      	movs	r3, #0
 8005986:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689a      	ldr	r2, [r3, #8]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	431a      	orrs	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	4313      	orrs	r3, r2
 8005998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800599c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	4b96      	ldr	r3, [pc, #600]	; (8005c00 <USART_SetConfig+0x288>)
 80059a6:	4013      	ands	r3, r2
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	6812      	ldr	r2, [r2, #0]
 80059ac:	6979      	ldr	r1, [r7, #20]
 80059ae:	430b      	orrs	r3, r1
 80059b0:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 80059b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80059b6:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	4313      	orrs	r3, r2
 80059c0:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	699a      	ldr	r2, [r3, #24]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	4313      	orrs	r3, r2
 80059da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80059e6:	f023 0309 	bic.w	r3, r3, #9
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	6812      	ldr	r2, [r2, #0]
 80059ee:	6979      	ldr	r1, [r7, #20]
 80059f0:	430b      	orrs	r3, r1
 80059f2:	6053      	str	r3, [r2, #4]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fa:	f023 010f 	bic.w	r1, r3, #15
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a7d      	ldr	r2, [pc, #500]	; (8005c04 <USART_SetConfig+0x28c>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d120      	bne.n	8005a56 <USART_SetConfig+0xde>
 8005a14:	4b7c      	ldr	r3, [pc, #496]	; (8005c08 <USART_SetConfig+0x290>)
 8005a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a1a:	f003 0303 	and.w	r3, r3, #3
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	d816      	bhi.n	8005a50 <USART_SetConfig+0xd8>
 8005a22:	a201      	add	r2, pc, #4	; (adr r2, 8005a28 <USART_SetConfig+0xb0>)
 8005a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a28:	08005a39 	.word	0x08005a39
 8005a2c:	08005a45 	.word	0x08005a45
 8005a30:	08005a3f 	.word	0x08005a3f
 8005a34:	08005a4b 	.word	0x08005a4b
 8005a38:	2301      	movs	r3, #1
 8005a3a:	77fb      	strb	r3, [r7, #31]
 8005a3c:	e06b      	b.n	8005b16 <USART_SetConfig+0x19e>
 8005a3e:	2302      	movs	r3, #2
 8005a40:	77fb      	strb	r3, [r7, #31]
 8005a42:	e068      	b.n	8005b16 <USART_SetConfig+0x19e>
 8005a44:	2304      	movs	r3, #4
 8005a46:	77fb      	strb	r3, [r7, #31]
 8005a48:	e065      	b.n	8005b16 <USART_SetConfig+0x19e>
 8005a4a:	2308      	movs	r3, #8
 8005a4c:	77fb      	strb	r3, [r7, #31]
 8005a4e:	e062      	b.n	8005b16 <USART_SetConfig+0x19e>
 8005a50:	2310      	movs	r3, #16
 8005a52:	77fb      	strb	r3, [r7, #31]
 8005a54:	e05f      	b.n	8005b16 <USART_SetConfig+0x19e>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a6c      	ldr	r2, [pc, #432]	; (8005c0c <USART_SetConfig+0x294>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d132      	bne.n	8005ac6 <USART_SetConfig+0x14e>
 8005a60:	4b69      	ldr	r3, [pc, #420]	; (8005c08 <USART_SetConfig+0x290>)
 8005a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a66:	f003 030c 	and.w	r3, r3, #12
 8005a6a:	2b0c      	cmp	r3, #12
 8005a6c:	d828      	bhi.n	8005ac0 <USART_SetConfig+0x148>
 8005a6e:	a201      	add	r2, pc, #4	; (adr r2, 8005a74 <USART_SetConfig+0xfc>)
 8005a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a74:	08005aa9 	.word	0x08005aa9
 8005a78:	08005ac1 	.word	0x08005ac1
 8005a7c:	08005ac1 	.word	0x08005ac1
 8005a80:	08005ac1 	.word	0x08005ac1
 8005a84:	08005ab5 	.word	0x08005ab5
 8005a88:	08005ac1 	.word	0x08005ac1
 8005a8c:	08005ac1 	.word	0x08005ac1
 8005a90:	08005ac1 	.word	0x08005ac1
 8005a94:	08005aaf 	.word	0x08005aaf
 8005a98:	08005ac1 	.word	0x08005ac1
 8005a9c:	08005ac1 	.word	0x08005ac1
 8005aa0:	08005ac1 	.word	0x08005ac1
 8005aa4:	08005abb 	.word	0x08005abb
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	77fb      	strb	r3, [r7, #31]
 8005aac:	e033      	b.n	8005b16 <USART_SetConfig+0x19e>
 8005aae:	2302      	movs	r3, #2
 8005ab0:	77fb      	strb	r3, [r7, #31]
 8005ab2:	e030      	b.n	8005b16 <USART_SetConfig+0x19e>
 8005ab4:	2304      	movs	r3, #4
 8005ab6:	77fb      	strb	r3, [r7, #31]
 8005ab8:	e02d      	b.n	8005b16 <USART_SetConfig+0x19e>
 8005aba:	2308      	movs	r3, #8
 8005abc:	77fb      	strb	r3, [r7, #31]
 8005abe:	e02a      	b.n	8005b16 <USART_SetConfig+0x19e>
 8005ac0:	2310      	movs	r3, #16
 8005ac2:	77fb      	strb	r3, [r7, #31]
 8005ac4:	e027      	b.n	8005b16 <USART_SetConfig+0x19e>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a51      	ldr	r2, [pc, #324]	; (8005c10 <USART_SetConfig+0x298>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d120      	bne.n	8005b12 <USART_SetConfig+0x19a>
 8005ad0:	4b4d      	ldr	r3, [pc, #308]	; (8005c08 <USART_SetConfig+0x290>)
 8005ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ada:	2b30      	cmp	r3, #48	; 0x30
 8005adc:	d013      	beq.n	8005b06 <USART_SetConfig+0x18e>
 8005ade:	2b30      	cmp	r3, #48	; 0x30
 8005ae0:	d814      	bhi.n	8005b0c <USART_SetConfig+0x194>
 8005ae2:	2b20      	cmp	r3, #32
 8005ae4:	d009      	beq.n	8005afa <USART_SetConfig+0x182>
 8005ae6:	2b20      	cmp	r3, #32
 8005ae8:	d810      	bhi.n	8005b0c <USART_SetConfig+0x194>
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d002      	beq.n	8005af4 <USART_SetConfig+0x17c>
 8005aee:	2b10      	cmp	r3, #16
 8005af0:	d006      	beq.n	8005b00 <USART_SetConfig+0x188>
 8005af2:	e00b      	b.n	8005b0c <USART_SetConfig+0x194>
 8005af4:	2300      	movs	r3, #0
 8005af6:	77fb      	strb	r3, [r7, #31]
 8005af8:	e00d      	b.n	8005b16 <USART_SetConfig+0x19e>
 8005afa:	2302      	movs	r3, #2
 8005afc:	77fb      	strb	r3, [r7, #31]
 8005afe:	e00a      	b.n	8005b16 <USART_SetConfig+0x19e>
 8005b00:	2304      	movs	r3, #4
 8005b02:	77fb      	strb	r3, [r7, #31]
 8005b04:	e007      	b.n	8005b16 <USART_SetConfig+0x19e>
 8005b06:	2308      	movs	r3, #8
 8005b08:	77fb      	strb	r3, [r7, #31]
 8005b0a:	e004      	b.n	8005b16 <USART_SetConfig+0x19e>
 8005b0c:	2310      	movs	r3, #16
 8005b0e:	77fb      	strb	r3, [r7, #31]
 8005b10:	e001      	b.n	8005b16 <USART_SetConfig+0x19e>
 8005b12:	2310      	movs	r3, #16
 8005b14:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8005b16:	7ffb      	ldrb	r3, [r7, #31]
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	f200 81e2 	bhi.w	8005ee2 <USART_SetConfig+0x56a>
 8005b1e:	a201      	add	r2, pc, #4	; (adr r2, 8005b24 <USART_SetConfig+0x1ac>)
 8005b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b24:	08005b49 	.word	0x08005b49
 8005b28:	08005c15 	.word	0x08005c15
 8005b2c:	08005ccb 	.word	0x08005ccb
 8005b30:	08005ee3 	.word	0x08005ee3
 8005b34:	08005d7b 	.word	0x08005d7b
 8005b38:	08005ee3 	.word	0x08005ee3
 8005b3c:	08005ee3 	.word	0x08005ee3
 8005b40:	08005ee3 	.word	0x08005ee3
 8005b44:	08005e31 	.word	0x08005e31
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b48:	f7ff f844 	bl	8004bd4 <HAL_RCC_GetPCLK1Freq>
 8005b4c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d044      	beq.n	8005be0 <USART_SetConfig+0x268>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d03e      	beq.n	8005bdc <USART_SetConfig+0x264>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d038      	beq.n	8005bd8 <USART_SetConfig+0x260>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6a:	2b03      	cmp	r3, #3
 8005b6c:	d032      	beq.n	8005bd4 <USART_SetConfig+0x25c>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b72:	2b04      	cmp	r3, #4
 8005b74:	d02c      	beq.n	8005bd0 <USART_SetConfig+0x258>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7a:	2b05      	cmp	r3, #5
 8005b7c:	d026      	beq.n	8005bcc <USART_SetConfig+0x254>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b82:	2b06      	cmp	r3, #6
 8005b84:	d020      	beq.n	8005bc8 <USART_SetConfig+0x250>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8a:	2b07      	cmp	r3, #7
 8005b8c:	d01a      	beq.n	8005bc4 <USART_SetConfig+0x24c>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	2b08      	cmp	r3, #8
 8005b94:	d014      	beq.n	8005bc0 <USART_SetConfig+0x248>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	2b09      	cmp	r3, #9
 8005b9c:	d00e      	beq.n	8005bbc <USART_SetConfig+0x244>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	2b0a      	cmp	r3, #10
 8005ba4:	d008      	beq.n	8005bb8 <USART_SetConfig+0x240>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	2b0b      	cmp	r3, #11
 8005bac:	d102      	bne.n	8005bb4 <USART_SetConfig+0x23c>
 8005bae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bb2:	e016      	b.n	8005be2 <USART_SetConfig+0x26a>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e014      	b.n	8005be2 <USART_SetConfig+0x26a>
 8005bb8:	2380      	movs	r3, #128	; 0x80
 8005bba:	e012      	b.n	8005be2 <USART_SetConfig+0x26a>
 8005bbc:	2340      	movs	r3, #64	; 0x40
 8005bbe:	e010      	b.n	8005be2 <USART_SetConfig+0x26a>
 8005bc0:	2320      	movs	r3, #32
 8005bc2:	e00e      	b.n	8005be2 <USART_SetConfig+0x26a>
 8005bc4:	2310      	movs	r3, #16
 8005bc6:	e00c      	b.n	8005be2 <USART_SetConfig+0x26a>
 8005bc8:	230c      	movs	r3, #12
 8005bca:	e00a      	b.n	8005be2 <USART_SetConfig+0x26a>
 8005bcc:	230a      	movs	r3, #10
 8005bce:	e008      	b.n	8005be2 <USART_SetConfig+0x26a>
 8005bd0:	2308      	movs	r3, #8
 8005bd2:	e006      	b.n	8005be2 <USART_SetConfig+0x26a>
 8005bd4:	2306      	movs	r3, #6
 8005bd6:	e004      	b.n	8005be2 <USART_SetConfig+0x26a>
 8005bd8:	2304      	movs	r3, #4
 8005bda:	e002      	b.n	8005be2 <USART_SetConfig+0x26a>
 8005bdc:	2302      	movs	r3, #2
 8005bde:	e000      	b.n	8005be2 <USART_SetConfig+0x26a>
 8005be0:	2301      	movs	r3, #1
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be8:	005a      	lsls	r2, r3, #1
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	085b      	lsrs	r3, r3, #1
 8005bf0:	441a      	add	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bfa:	61bb      	str	r3, [r7, #24]
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      break;
 8005bfc:	e174      	b.n	8005ee8 <USART_SetConfig+0x570>
 8005bfe:	bf00      	nop
 8005c00:	cfff69f3 	.word	0xcfff69f3
 8005c04:	40013800 	.word	0x40013800
 8005c08:	40021000 	.word	0x40021000
 8005c0c:	40004400 	.word	0x40004400
 8005c10:	40004800 	.word	0x40004800
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c14:	f7fe fff4 	bl	8004c00 <HAL_RCC_GetPCLK2Freq>
 8005c18:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d044      	beq.n	8005cac <USART_SetConfig+0x334>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d03e      	beq.n	8005ca8 <USART_SetConfig+0x330>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d038      	beq.n	8005ca4 <USART_SetConfig+0x32c>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c36:	2b03      	cmp	r3, #3
 8005c38:	d032      	beq.n	8005ca0 <USART_SetConfig+0x328>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3e:	2b04      	cmp	r3, #4
 8005c40:	d02c      	beq.n	8005c9c <USART_SetConfig+0x324>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c46:	2b05      	cmp	r3, #5
 8005c48:	d026      	beq.n	8005c98 <USART_SetConfig+0x320>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4e:	2b06      	cmp	r3, #6
 8005c50:	d020      	beq.n	8005c94 <USART_SetConfig+0x31c>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	2b07      	cmp	r3, #7
 8005c58:	d01a      	beq.n	8005c90 <USART_SetConfig+0x318>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5e:	2b08      	cmp	r3, #8
 8005c60:	d014      	beq.n	8005c8c <USART_SetConfig+0x314>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c66:	2b09      	cmp	r3, #9
 8005c68:	d00e      	beq.n	8005c88 <USART_SetConfig+0x310>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	2b0a      	cmp	r3, #10
 8005c70:	d008      	beq.n	8005c84 <USART_SetConfig+0x30c>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	2b0b      	cmp	r3, #11
 8005c78:	d102      	bne.n	8005c80 <USART_SetConfig+0x308>
 8005c7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c7e:	e016      	b.n	8005cae <USART_SetConfig+0x336>
 8005c80:	2301      	movs	r3, #1
 8005c82:	e014      	b.n	8005cae <USART_SetConfig+0x336>
 8005c84:	2380      	movs	r3, #128	; 0x80
 8005c86:	e012      	b.n	8005cae <USART_SetConfig+0x336>
 8005c88:	2340      	movs	r3, #64	; 0x40
 8005c8a:	e010      	b.n	8005cae <USART_SetConfig+0x336>
 8005c8c:	2320      	movs	r3, #32
 8005c8e:	e00e      	b.n	8005cae <USART_SetConfig+0x336>
 8005c90:	2310      	movs	r3, #16
 8005c92:	e00c      	b.n	8005cae <USART_SetConfig+0x336>
 8005c94:	230c      	movs	r3, #12
 8005c96:	e00a      	b.n	8005cae <USART_SetConfig+0x336>
 8005c98:	230a      	movs	r3, #10
 8005c9a:	e008      	b.n	8005cae <USART_SetConfig+0x336>
 8005c9c:	2308      	movs	r3, #8
 8005c9e:	e006      	b.n	8005cae <USART_SetConfig+0x336>
 8005ca0:	2306      	movs	r3, #6
 8005ca2:	e004      	b.n	8005cae <USART_SetConfig+0x336>
 8005ca4:	2304      	movs	r3, #4
 8005ca6:	e002      	b.n	8005cae <USART_SetConfig+0x336>
 8005ca8:	2302      	movs	r3, #2
 8005caa:	e000      	b.n	8005cae <USART_SetConfig+0x336>
 8005cac:	2301      	movs	r3, #1
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb4:	005a      	lsls	r2, r3, #1
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	085b      	lsrs	r3, r3, #1
 8005cbc:	441a      	add	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc6:	61bb      	str	r3, [r7, #24]
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      break;
 8005cc8:	e10e      	b.n	8005ee8 <USART_SetConfig+0x570>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d044      	beq.n	8005d5c <USART_SetConfig+0x3e4>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d03e      	beq.n	8005d58 <USART_SetConfig+0x3e0>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d038      	beq.n	8005d54 <USART_SetConfig+0x3dc>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	2b03      	cmp	r3, #3
 8005ce8:	d032      	beq.n	8005d50 <USART_SetConfig+0x3d8>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	d02c      	beq.n	8005d4c <USART_SetConfig+0x3d4>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf6:	2b05      	cmp	r3, #5
 8005cf8:	d026      	beq.n	8005d48 <USART_SetConfig+0x3d0>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfe:	2b06      	cmp	r3, #6
 8005d00:	d020      	beq.n	8005d44 <USART_SetConfig+0x3cc>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d06:	2b07      	cmp	r3, #7
 8005d08:	d01a      	beq.n	8005d40 <USART_SetConfig+0x3c8>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0e:	2b08      	cmp	r3, #8
 8005d10:	d014      	beq.n	8005d3c <USART_SetConfig+0x3c4>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	2b09      	cmp	r3, #9
 8005d18:	d00e      	beq.n	8005d38 <USART_SetConfig+0x3c0>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1e:	2b0a      	cmp	r3, #10
 8005d20:	d008      	beq.n	8005d34 <USART_SetConfig+0x3bc>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d26:	2b0b      	cmp	r3, #11
 8005d28:	d102      	bne.n	8005d30 <USART_SetConfig+0x3b8>
 8005d2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d2e:	e016      	b.n	8005d5e <USART_SetConfig+0x3e6>
 8005d30:	2301      	movs	r3, #1
 8005d32:	e014      	b.n	8005d5e <USART_SetConfig+0x3e6>
 8005d34:	2380      	movs	r3, #128	; 0x80
 8005d36:	e012      	b.n	8005d5e <USART_SetConfig+0x3e6>
 8005d38:	2340      	movs	r3, #64	; 0x40
 8005d3a:	e010      	b.n	8005d5e <USART_SetConfig+0x3e6>
 8005d3c:	2320      	movs	r3, #32
 8005d3e:	e00e      	b.n	8005d5e <USART_SetConfig+0x3e6>
 8005d40:	2310      	movs	r3, #16
 8005d42:	e00c      	b.n	8005d5e <USART_SetConfig+0x3e6>
 8005d44:	230c      	movs	r3, #12
 8005d46:	e00a      	b.n	8005d5e <USART_SetConfig+0x3e6>
 8005d48:	230a      	movs	r3, #10
 8005d4a:	e008      	b.n	8005d5e <USART_SetConfig+0x3e6>
 8005d4c:	2308      	movs	r3, #8
 8005d4e:	e006      	b.n	8005d5e <USART_SetConfig+0x3e6>
 8005d50:	2306      	movs	r3, #6
 8005d52:	e004      	b.n	8005d5e <USART_SetConfig+0x3e6>
 8005d54:	2304      	movs	r3, #4
 8005d56:	e002      	b.n	8005d5e <USART_SetConfig+0x3e6>
 8005d58:	2302      	movs	r3, #2
 8005d5a:	e000      	b.n	8005d5e <USART_SetConfig+0x3e6>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	4a79      	ldr	r2, [pc, #484]	; (8005f44 <USART_SetConfig+0x5cc>)
 8005d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d64:	005a      	lsls	r2, r3, #1
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	085b      	lsrs	r3, r3, #1
 8005d6c:	441a      	add	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d76:	61bb      	str	r3, [r7, #24]
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      break;
 8005d78:	e0b6      	b.n	8005ee8 <USART_SetConfig+0x570>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8005d7a:	f7fe fe93 	bl	8004aa4 <HAL_RCC_GetSysClockFreq>
 8005d7e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d044      	beq.n	8005e12 <USART_SetConfig+0x49a>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d03e      	beq.n	8005e0e <USART_SetConfig+0x496>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d038      	beq.n	8005e0a <USART_SetConfig+0x492>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9c:	2b03      	cmp	r3, #3
 8005d9e:	d032      	beq.n	8005e06 <USART_SetConfig+0x48e>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da4:	2b04      	cmp	r3, #4
 8005da6:	d02c      	beq.n	8005e02 <USART_SetConfig+0x48a>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dac:	2b05      	cmp	r3, #5
 8005dae:	d026      	beq.n	8005dfe <USART_SetConfig+0x486>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db4:	2b06      	cmp	r3, #6
 8005db6:	d020      	beq.n	8005dfa <USART_SetConfig+0x482>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbc:	2b07      	cmp	r3, #7
 8005dbe:	d01a      	beq.n	8005df6 <USART_SetConfig+0x47e>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	2b08      	cmp	r3, #8
 8005dc6:	d014      	beq.n	8005df2 <USART_SetConfig+0x47a>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dcc:	2b09      	cmp	r3, #9
 8005dce:	d00e      	beq.n	8005dee <USART_SetConfig+0x476>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	2b0a      	cmp	r3, #10
 8005dd6:	d008      	beq.n	8005dea <USART_SetConfig+0x472>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ddc:	2b0b      	cmp	r3, #11
 8005dde:	d102      	bne.n	8005de6 <USART_SetConfig+0x46e>
 8005de0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005de4:	e016      	b.n	8005e14 <USART_SetConfig+0x49c>
 8005de6:	2301      	movs	r3, #1
 8005de8:	e014      	b.n	8005e14 <USART_SetConfig+0x49c>
 8005dea:	2380      	movs	r3, #128	; 0x80
 8005dec:	e012      	b.n	8005e14 <USART_SetConfig+0x49c>
 8005dee:	2340      	movs	r3, #64	; 0x40
 8005df0:	e010      	b.n	8005e14 <USART_SetConfig+0x49c>
 8005df2:	2320      	movs	r3, #32
 8005df4:	e00e      	b.n	8005e14 <USART_SetConfig+0x49c>
 8005df6:	2310      	movs	r3, #16
 8005df8:	e00c      	b.n	8005e14 <USART_SetConfig+0x49c>
 8005dfa:	230c      	movs	r3, #12
 8005dfc:	e00a      	b.n	8005e14 <USART_SetConfig+0x49c>
 8005dfe:	230a      	movs	r3, #10
 8005e00:	e008      	b.n	8005e14 <USART_SetConfig+0x49c>
 8005e02:	2308      	movs	r3, #8
 8005e04:	e006      	b.n	8005e14 <USART_SetConfig+0x49c>
 8005e06:	2306      	movs	r3, #6
 8005e08:	e004      	b.n	8005e14 <USART_SetConfig+0x49c>
 8005e0a:	2304      	movs	r3, #4
 8005e0c:	e002      	b.n	8005e14 <USART_SetConfig+0x49c>
 8005e0e:	2302      	movs	r3, #2
 8005e10:	e000      	b.n	8005e14 <USART_SetConfig+0x49c>
 8005e12:	2301      	movs	r3, #1
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e1a:	005a      	lsls	r2, r3, #1
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	085b      	lsrs	r3, r3, #1
 8005e22:	441a      	add	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2c:	61bb      	str	r3, [r7, #24]
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      break;
 8005e2e:	e05b      	b.n	8005ee8 <USART_SetConfig+0x570>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d044      	beq.n	8005ec2 <USART_SetConfig+0x54a>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d03e      	beq.n	8005ebe <USART_SetConfig+0x546>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d038      	beq.n	8005eba <USART_SetConfig+0x542>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4c:	2b03      	cmp	r3, #3
 8005e4e:	d032      	beq.n	8005eb6 <USART_SetConfig+0x53e>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e54:	2b04      	cmp	r3, #4
 8005e56:	d02c      	beq.n	8005eb2 <USART_SetConfig+0x53a>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5c:	2b05      	cmp	r3, #5
 8005e5e:	d026      	beq.n	8005eae <USART_SetConfig+0x536>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	2b06      	cmp	r3, #6
 8005e66:	d020      	beq.n	8005eaa <USART_SetConfig+0x532>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6c:	2b07      	cmp	r3, #7
 8005e6e:	d01a      	beq.n	8005ea6 <USART_SetConfig+0x52e>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e74:	2b08      	cmp	r3, #8
 8005e76:	d014      	beq.n	8005ea2 <USART_SetConfig+0x52a>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7c:	2b09      	cmp	r3, #9
 8005e7e:	d00e      	beq.n	8005e9e <USART_SetConfig+0x526>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e84:	2b0a      	cmp	r3, #10
 8005e86:	d008      	beq.n	8005e9a <USART_SetConfig+0x522>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8c:	2b0b      	cmp	r3, #11
 8005e8e:	d102      	bne.n	8005e96 <USART_SetConfig+0x51e>
 8005e90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e94:	e016      	b.n	8005ec4 <USART_SetConfig+0x54c>
 8005e96:	2301      	movs	r3, #1
 8005e98:	e014      	b.n	8005ec4 <USART_SetConfig+0x54c>
 8005e9a:	2380      	movs	r3, #128	; 0x80
 8005e9c:	e012      	b.n	8005ec4 <USART_SetConfig+0x54c>
 8005e9e:	2340      	movs	r3, #64	; 0x40
 8005ea0:	e010      	b.n	8005ec4 <USART_SetConfig+0x54c>
 8005ea2:	2320      	movs	r3, #32
 8005ea4:	e00e      	b.n	8005ec4 <USART_SetConfig+0x54c>
 8005ea6:	2310      	movs	r3, #16
 8005ea8:	e00c      	b.n	8005ec4 <USART_SetConfig+0x54c>
 8005eaa:	230c      	movs	r3, #12
 8005eac:	e00a      	b.n	8005ec4 <USART_SetConfig+0x54c>
 8005eae:	230a      	movs	r3, #10
 8005eb0:	e008      	b.n	8005ec4 <USART_SetConfig+0x54c>
 8005eb2:	2308      	movs	r3, #8
 8005eb4:	e006      	b.n	8005ec4 <USART_SetConfig+0x54c>
 8005eb6:	2306      	movs	r3, #6
 8005eb8:	e004      	b.n	8005ec4 <USART_SetConfig+0x54c>
 8005eba:	2304      	movs	r3, #4
 8005ebc:	e002      	b.n	8005ec4 <USART_SetConfig+0x54c>
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	e000      	b.n	8005ec4 <USART_SetConfig+0x54c>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ecc:	005a      	lsls	r2, r3, #1
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	085b      	lsrs	r3, r3, #1
 8005ed4:	441a      	add	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ede:	61bb      	str	r3, [r7, #24]
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      break;
 8005ee0:	e002      	b.n	8005ee8 <USART_SetConfig+0x570>
    default:
      ret = HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	77bb      	strb	r3, [r7, #30]
      break;
 8005ee6:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	2b0f      	cmp	r3, #15
 8005eec:	d916      	bls.n	8005f1c <USART_SetConfig+0x5a4>
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ef4:	d212      	bcs.n	8005f1c <USART_SetConfig+0x5a4>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	f023 030f 	bic.w	r3, r3, #15
 8005efe:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	085b      	lsrs	r3, r3, #1
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	f003 0307 	and.w	r3, r3, #7
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	89fb      	ldrh	r3, [r7, #14]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	89fa      	ldrh	r2, [r7, #14]
 8005f18:	60da      	str	r2, [r3, #12]
 8005f1a:	e001      	b.n	8005f20 <USART_SetConfig+0x5a8>
  }
  else
  {
    ret = HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	77bb      	strb	r3, [r7, #30]
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	875a      	strh	r2, [r3, #58]	; 0x3a
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8005f38:	7fbb      	ldrb	r3, [r7, #30]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3720      	adds	r7, #32
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	00f42400 	.word	0x00f42400

08005f48 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b086      	sub	sp, #24
 8005f4c:	af02      	add	r7, sp, #8
 8005f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f56:	f7fa fe29 	bl	8000bac <HAL_GetTick>
 8005f5a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0308 	and.w	r3, r3, #8
 8005f66:	2b08      	cmp	r3, #8
 8005f68:	d10e      	bne.n	8005f88 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8005f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f7ff fcc7 	bl	800590c <USART_WaitOnFlagUntilTimeout>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d001      	beq.n	8005f88 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e01e      	b.n	8005fc6 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0304 	and.w	r3, r3, #4
 8005f92:	2b04      	cmp	r3, #4
 8005f94:	d10e      	bne.n	8005fb4 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8005f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7ff fcb1 	bl	800590c <USART_WaitOnFlagUntilTimeout>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d001      	beq.n	8005fb4 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e008      	b.n	8005fc6 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b085      	sub	sp, #20
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d101      	bne.n	8005fe4 <HAL_USARTEx_DisableFifoMode+0x16>
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	e027      	b.n	8006034 <HAL_USARTEx_DisableFifoMode+0x66>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2202      	movs	r2, #2
 8005ff0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f022 0201 	bic.w	r2, r2, #1
 800600a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006012:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006050:	2b01      	cmp	r3, #1
 8006052:	d101      	bne.n	8006058 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 8006054:	2302      	movs	r3, #2
 8006056:	e02d      	b.n	80060b4 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2202      	movs	r2, #2
 8006064:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0201 	bic.w	r2, r2, #1
 800607e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	430a      	orrs	r2, r1
 8006092:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f84f 	bl	8006138 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d101      	bne.n	80060d4 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 80060d0:	2302      	movs	r3, #2
 80060d2:	e02d      	b.n	8006130 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2202      	movs	r2, #2
 80060e0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f022 0201 	bic.w	r2, r2, #1
 80060fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	430a      	orrs	r2, r1
 800610e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f811 	bl	8006138 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006144:	2b00      	cmp	r3, #0
 8006146:	d106      	bne.n	8006156 <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = 1U;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	875a      	strh	r2, [r3, #58]	; 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006154:	e02f      	b.n	80061b6 <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006156:	2308      	movs	r3, #8
 8006158:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800615a:	2308      	movs	r3, #8
 800615c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 8006164:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8006166:	b2db      	uxtb	r3, r3
 8006168:	f003 0307 	and.w	r3, r3, #7
 800616c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 8006174:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8006176:	b2db      	uxtb	r3, r3
 8006178:	f003 0307 	and.w	r3, r3, #7
 800617c:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800617e:	7bbb      	ldrb	r3, [r7, #14]
 8006180:	7b3a      	ldrb	r2, [r7, #12]
 8006182:	4910      	ldr	r1, [pc, #64]	; (80061c4 <USARTEx_SetNbDataToProcess+0x8c>)
 8006184:	5c8a      	ldrb	r2, [r1, r2]
 8006186:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 800618a:	7b3a      	ldrb	r2, [r7, #12]
 800618c:	490e      	ldr	r1, [pc, #56]	; (80061c8 <USARTEx_SetNbDataToProcess+0x90>)
 800618e:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006190:	fb93 f3f2 	sdiv	r3, r3, r2
 8006194:	b29a      	uxth	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800619a:	7bfb      	ldrb	r3, [r7, #15]
 800619c:	7b7a      	ldrb	r2, [r7, #13]
 800619e:	4909      	ldr	r1, [pc, #36]	; (80061c4 <USARTEx_SetNbDataToProcess+0x8c>)
 80061a0:	5c8a      	ldrb	r2, [r1, r2]
 80061a2:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 80061a6:	7b7a      	ldrb	r2, [r7, #13]
 80061a8:	4907      	ldr	r1, [pc, #28]	; (80061c8 <USARTEx_SetNbDataToProcess+0x90>)
 80061aa:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 80061b6:	bf00      	nop
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	0800b840 	.word	0x0800b840
 80061c8:	0800b848 	.word	0x0800b848

080061cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061cc:	b084      	sub	sp, #16
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b084      	sub	sp, #16
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	f107 001c 	add.w	r0, r7, #28
 80061da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f99c 	bl	8006528 <USB_CoreReset>
 80061f0:	4603      	mov	r3, r0
 80061f2:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80061f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d106      	bne.n	8006208 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	639a      	str	r2, [r3, #56]	; 0x38
 8006206:	e005      	b.n	8006214 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8006214:	7bfb      	ldrb	r3, [r7, #15]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006220:	b004      	add	sp, #16
 8006222:	4770      	bx	lr

08006224 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	f043 0201 	orr.w	r2, r3, #1
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f023 0201 	bic.w	r2, r3, #1
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	460b      	mov	r3, r1
 8006272:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006274:	2300      	movs	r3, #0
 8006276:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006284:	78fb      	ldrb	r3, [r7, #3]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d115      	bne.n	80062b6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006296:	2001      	movs	r0, #1
 8006298:	f7fa fc94 	bl	8000bc4 <HAL_Delay>
      ms++;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	3301      	adds	r3, #1
 80062a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f931 	bl	800650a <USB_GetMode>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d01e      	beq.n	80062ec <USB_SetCurrentMode+0x84>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2b31      	cmp	r3, #49	; 0x31
 80062b2:	d9f0      	bls.n	8006296 <USB_SetCurrentMode+0x2e>
 80062b4:	e01a      	b.n	80062ec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80062b6:	78fb      	ldrb	r3, [r7, #3]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d115      	bne.n	80062e8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80062c8:	2001      	movs	r0, #1
 80062ca:	f7fa fc7b 	bl	8000bc4 <HAL_Delay>
      ms++;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	3301      	adds	r3, #1
 80062d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 f918 	bl	800650a <USB_GetMode>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d005      	beq.n	80062ec <USB_SetCurrentMode+0x84>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2b31      	cmp	r3, #49	; 0x31
 80062e4:	d9f0      	bls.n	80062c8 <USB_SetCurrentMode+0x60>
 80062e6:	e001      	b.n	80062ec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e005      	b.n	80062f8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2b32      	cmp	r3, #50	; 0x32
 80062f0:	d101      	bne.n	80062f6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e000      	b.n	80062f8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800630a:	2300      	movs	r3, #0
 800630c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	3301      	adds	r3, #1
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	4a12      	ldr	r2, [pc, #72]	; (8006360 <USB_FlushTxFifo+0x60>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d901      	bls.n	800631e <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e01a      	b.n	8006354 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	daf3      	bge.n	800630e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006326:	2300      	movs	r3, #0
 8006328:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	019b      	lsls	r3, r3, #6
 800632e:	f043 0220 	orr.w	r2, r3, #32
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	3301      	adds	r3, #1
 800633a:	60fb      	str	r3, [r7, #12]
 800633c:	4a08      	ldr	r2, [pc, #32]	; (8006360 <USB_FlushTxFifo+0x60>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d901      	bls.n	8006346 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e006      	b.n	8006354 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	f003 0320 	and.w	r3, r3, #32
 800634e:	2b20      	cmp	r3, #32
 8006350:	d0f1      	beq.n	8006336 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	00030d40 	.word	0x00030d40

08006364 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800636c:	2300      	movs	r3, #0
 800636e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	3301      	adds	r3, #1
 8006374:	60fb      	str	r3, [r7, #12]
 8006376:	4a11      	ldr	r2, [pc, #68]	; (80063bc <USB_FlushRxFifo+0x58>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d901      	bls.n	8006380 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e017      	b.n	80063b0 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	daf3      	bge.n	8006370 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006388:	2300      	movs	r3, #0
 800638a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2210      	movs	r2, #16
 8006390:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	3301      	adds	r3, #1
 8006396:	60fb      	str	r3, [r7, #12]
 8006398:	4a08      	ldr	r2, [pc, #32]	; (80063bc <USB_FlushRxFifo+0x58>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d901      	bls.n	80063a2 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e006      	b.n	80063b0 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	f003 0310 	and.w	r3, r3, #16
 80063aa:	2b10      	cmp	r3, #16
 80063ac:	d0f1      	beq.n	8006392 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3714      	adds	r7, #20
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	00030d40 	.word	0x00030d40

080063c0 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b089      	sub	sp, #36	; 0x24
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	4611      	mov	r1, r2
 80063cc:	461a      	mov	r2, r3
 80063ce:	460b      	mov	r3, r1
 80063d0:	71fb      	strb	r3, [r7, #7]
 80063d2:	4613      	mov	r3, r2
 80063d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80063de:	88bb      	ldrh	r3, [r7, #4]
 80063e0:	3303      	adds	r3, #3
 80063e2:	089b      	lsrs	r3, r3, #2
 80063e4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80063e6:	2300      	movs	r3, #0
 80063e8:	61bb      	str	r3, [r7, #24]
 80063ea:	e018      	b.n	800641e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80063ec:	79fb      	ldrb	r3, [r7, #7]
 80063ee:	031a      	lsls	r2, r3, #12
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063f8:	461a      	mov	r2, r3
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6013      	str	r3, [r2, #0]
    pSrc++;
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	3301      	adds	r3, #1
 8006404:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	3301      	adds	r3, #1
 800640a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	3301      	adds	r3, #1
 8006410:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	3301      	adds	r3, #1
 8006416:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	3301      	adds	r3, #1
 800641c:	61bb      	str	r3, [r7, #24]
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	429a      	cmp	r2, r3
 8006424:	d3e2      	bcc.n	80063ec <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3724      	adds	r7, #36	; 0x24
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006434:	b480      	push	{r7}
 8006436:	b08b      	sub	sp, #44	; 0x2c
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	4613      	mov	r3, r2
 8006440:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800644a:	88fb      	ldrh	r3, [r7, #6]
 800644c:	089b      	lsrs	r3, r3, #2
 800644e:	b29b      	uxth	r3, r3
 8006450:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006452:	88fb      	ldrh	r3, [r7, #6]
 8006454:	f003 0303 	and.w	r3, r3, #3
 8006458:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800645a:	2300      	movs	r3, #0
 800645c:	623b      	str	r3, [r7, #32]
 800645e:	e014      	b.n	800648a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646a:	601a      	str	r2, [r3, #0]
    pDest++;
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	3301      	adds	r3, #1
 8006470:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006474:	3301      	adds	r3, #1
 8006476:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	3301      	adds	r3, #1
 800647c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006480:	3301      	adds	r3, #1
 8006482:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	3301      	adds	r3, #1
 8006488:	623b      	str	r3, [r7, #32]
 800648a:	6a3a      	ldr	r2, [r7, #32]
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	429a      	cmp	r2, r3
 8006490:	d3e6      	bcc.n	8006460 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006492:	8bfb      	ldrh	r3, [r7, #30]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d01e      	beq.n	80064d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006498:	2300      	movs	r3, #0
 800649a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064a2:	461a      	mov	r2, r3
 80064a4:	f107 0310 	add.w	r3, r7, #16
 80064a8:	6812      	ldr	r2, [r2, #0]
 80064aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	6a3b      	ldr	r3, [r7, #32]
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	00db      	lsls	r3, r3, #3
 80064b4:	fa22 f303 	lsr.w	r3, r2, r3
 80064b8:	b2da      	uxtb	r2, r3
 80064ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064bc:	701a      	strb	r2, [r3, #0]
      i++;
 80064be:	6a3b      	ldr	r3, [r7, #32]
 80064c0:	3301      	adds	r3, #1
 80064c2:	623b      	str	r3, [r7, #32]
      pDest++;
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	3301      	adds	r3, #1
 80064c8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80064ca:	8bfb      	ldrh	r3, [r7, #30]
 80064cc:	3b01      	subs	r3, #1
 80064ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80064d0:	8bfb      	ldrh	r3, [r7, #30]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1ea      	bne.n	80064ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064d8:	4618      	mov	r0, r3
 80064da:	372c      	adds	r7, #44	; 0x2c
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	695b      	ldr	r3, [r3, #20]
 80064f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	4013      	ands	r3, r2
 80064fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80064fc:	68fb      	ldr	r3, [r7, #12]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3714      	adds	r7, #20
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800650a:	b480      	push	{r7}
 800650c:	b083      	sub	sp, #12
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	f003 0301 	and.w	r3, r3, #1
}
 800651a:	4618      	mov	r0, r3
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
	...

08006528 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006530:	2300      	movs	r3, #0
 8006532:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	3301      	adds	r3, #1
 8006538:	60fb      	str	r3, [r7, #12]
 800653a:	4a13      	ldr	r2, [pc, #76]	; (8006588 <USB_CoreReset+0x60>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d901      	bls.n	8006544 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e01a      	b.n	800657a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	2b00      	cmp	r3, #0
 800654a:	daf3      	bge.n	8006534 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800654c:	2300      	movs	r3, #0
 800654e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	f043 0201 	orr.w	r2, r3, #1
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	3301      	adds	r3, #1
 8006560:	60fb      	str	r3, [r7, #12]
 8006562:	4a09      	ldr	r2, [pc, #36]	; (8006588 <USB_CoreReset+0x60>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d901      	bls.n	800656c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e006      	b.n	800657a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b01      	cmp	r3, #1
 8006576:	d0f1      	beq.n	800655c <USB_CoreReset+0x34>

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	00030d40 	.word	0x00030d40

0800658c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800658c:	b084      	sub	sp, #16
 800658e:	b580      	push	{r7, lr}
 8006590:	b086      	sub	sp, #24
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
 8006596:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800659a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065ac:	461a      	mov	r2, r3
 80065ae:	2300      	movs	r3, #0
 80065b0:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065d8:	f023 0304 	bic.w	r3, r3, #4
 80065dc:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065de:	2110      	movs	r1, #16
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7ff fe8d 	bl	8006300 <USB_FlushTxFifo>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d001      	beq.n	80065f0 <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7ff feb7 	bl	8006364 <USB_FlushRxFifo>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d001      	beq.n	8006600 <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006600:	2300      	movs	r3, #0
 8006602:	613b      	str	r3, [r7, #16]
 8006604:	e015      	b.n	8006632 <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	4413      	add	r3, r2
 800660e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006612:	461a      	mov	r2, r3
 8006614:	f04f 33ff 	mov.w	r3, #4294967295
 8006618:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	4413      	add	r3, r2
 8006622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006626:	461a      	mov	r2, r3
 8006628:	2300      	movs	r3, #0
 800662a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	3301      	adds	r3, #1
 8006630:	613b      	str	r3, [r7, #16]
 8006632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	429a      	cmp	r2, r3
 8006638:	d3e5      	bcc.n	8006606 <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f04f 32ff 	mov.w	r2, #4294967295
 8006646:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2280      	movs	r2, #128	; 0x80
 800664c:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a0c      	ldr	r2, [pc, #48]	; (8006684 <USB_HostInit+0xf8>)
 8006652:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a0c      	ldr	r2, [pc, #48]	; (8006688 <USB_HostInit+0xfc>)
 8006658:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	f043 0210 	orr.w	r2, r3, #16
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	699a      	ldr	r2, [r3, #24]
 800666c:	4b07      	ldr	r3, [pc, #28]	; (800668c <USB_HostInit+0x100>)
 800666e:	4313      	orrs	r3, r2
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006674:	7dfb      	ldrb	r3, [r7, #23]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3718      	adds	r7, #24
 800667a:	46bd      	mov	sp, r7
 800667c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006680:	b004      	add	sp, #16
 8006682:	4770      	bx	lr
 8006684:	00600080 	.word	0x00600080
 8006688:	004000e0 	.word	0x004000e0
 800668c:	a3200008 	.word	0xa3200008

08006690 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	460b      	mov	r3, r1
 800669a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066ae:	f023 0303 	bic.w	r3, r3, #3
 80066b2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	78fb      	ldrb	r3, [r7, #3]
 80066be:	f003 0303 	and.w	r3, r3, #3
 80066c2:	68f9      	ldr	r1, [r7, #12]
 80066c4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80066c8:	4313      	orrs	r3, r2
 80066ca:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80066cc:	78fb      	ldrb	r3, [r7, #3]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d107      	bne.n	80066e2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066d8:	461a      	mov	r2, r3
 80066da:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80066de:	6053      	str	r3, [r2, #4]
 80066e0:	e009      	b.n	80066f6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80066e2:	78fb      	ldrb	r3, [r7, #3]
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d106      	bne.n	80066f6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066ee:	461a      	mov	r2, r3
 80066f0:	f241 7370 	movw	r3, #6000	; 0x1770
 80066f4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3714      	adds	r7, #20
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006724:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800672e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006732:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006734:	2064      	movs	r0, #100	; 0x64
 8006736:	f7fa fa45 	bl	8000bc4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006742:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006746:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006748:	200a      	movs	r0, #10
 800674a:	f7fa fa3b 	bl	8000bc4 <HAL_Delay>

  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	460b      	mov	r3, r1
 8006762:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006768:	2300      	movs	r3, #0
 800676a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800677c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d109      	bne.n	800679c <USB_DriveVbus+0x44>
 8006788:	78fb      	ldrb	r3, [r7, #3]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d106      	bne.n	800679c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006796:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800679a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067a6:	d109      	bne.n	80067bc <USB_DriveVbus+0x64>
 80067a8:	78fb      	ldrb	r3, [r7, #3]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d106      	bne.n	80067bc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80067b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067ba:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3714      	adds	r7, #20
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b085      	sub	sp, #20
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80067d6:	2300      	movs	r3, #0
 80067d8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	0c5b      	lsrs	r3, r3, #17
 80067e8:	f003 0303 	and.w	r3, r3, #3
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3714      	adds	r7, #20
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	b29b      	uxth	r3, r3
}
 800680e:	4618      	mov	r0, r3
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
	...

0800681c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b088      	sub	sp, #32
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	4608      	mov	r0, r1
 8006826:	4611      	mov	r1, r2
 8006828:	461a      	mov	r2, r3
 800682a:	4603      	mov	r3, r0
 800682c:	70fb      	strb	r3, [r7, #3]
 800682e:	460b      	mov	r3, r1
 8006830:	70bb      	strb	r3, [r7, #2]
 8006832:	4613      	mov	r3, r2
 8006834:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006836:	2300      	movs	r3, #0
 8006838:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800683e:	78fb      	ldrb	r3, [r7, #3]
 8006840:	015a      	lsls	r2, r3, #5
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	4413      	add	r3, r2
 8006846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800684a:	461a      	mov	r2, r3
 800684c:	f04f 33ff 	mov.w	r3, #4294967295
 8006850:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006852:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006856:	2b03      	cmp	r3, #3
 8006858:	d867      	bhi.n	800692a <USB_HC_Init+0x10e>
 800685a:	a201      	add	r2, pc, #4	; (adr r2, 8006860 <USB_HC_Init+0x44>)
 800685c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006860:	08006871 	.word	0x08006871
 8006864:	080068ed 	.word	0x080068ed
 8006868:	08006871 	.word	0x08006871
 800686c:	080068af 	.word	0x080068af
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006870:	78fb      	ldrb	r3, [r7, #3]
 8006872:	015a      	lsls	r2, r3, #5
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	4413      	add	r3, r2
 8006878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800687c:	461a      	mov	r2, r3
 800687e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006882:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006884:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006888:	2b00      	cmp	r3, #0
 800688a:	da51      	bge.n	8006930 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800688c:	78fb      	ldrb	r3, [r7, #3]
 800688e:	015a      	lsls	r2, r3, #5
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	4413      	add	r3, r2
 8006894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	78fa      	ldrb	r2, [r7, #3]
 800689c:	0151      	lsls	r1, r2, #5
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	440a      	add	r2, r1
 80068a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068aa:	60d3      	str	r3, [r2, #12]
      }
      break;
 80068ac:	e040      	b.n	8006930 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80068ae:	78fb      	ldrb	r3, [r7, #3]
 80068b0:	015a      	lsls	r2, r3, #5
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ba:	461a      	mov	r2, r3
 80068bc:	f240 639d 	movw	r3, #1693	; 0x69d
 80068c0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80068c2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	da34      	bge.n	8006934 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80068ca:	78fb      	ldrb	r3, [r7, #3]
 80068cc:	015a      	lsls	r2, r3, #5
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	4413      	add	r3, r2
 80068d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	78fa      	ldrb	r2, [r7, #3]
 80068da:	0151      	lsls	r1, r2, #5
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	440a      	add	r2, r1
 80068e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068e8:	60d3      	str	r3, [r2, #12]
      }

      break;
 80068ea:	e023      	b.n	8006934 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80068ec:	78fb      	ldrb	r3, [r7, #3]
 80068ee:	015a      	lsls	r2, r3, #5
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068f8:	461a      	mov	r2, r3
 80068fa:	f240 2325 	movw	r3, #549	; 0x225
 80068fe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006900:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006904:	2b00      	cmp	r3, #0
 8006906:	da17      	bge.n	8006938 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006908:	78fb      	ldrb	r3, [r7, #3]
 800690a:	015a      	lsls	r2, r3, #5
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	4413      	add	r3, r2
 8006910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	78fa      	ldrb	r2, [r7, #3]
 8006918:	0151      	lsls	r1, r2, #5
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	440a      	add	r2, r1
 800691e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006922:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006926:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006928:	e006      	b.n	8006938 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	77fb      	strb	r3, [r7, #31]
      break;
 800692e:	e004      	b.n	800693a <USB_HC_Init+0x11e>
      break;
 8006930:	bf00      	nop
 8006932:	e002      	b.n	800693a <USB_HC_Init+0x11e>
      break;
 8006934:	bf00      	nop
 8006936:	e000      	b.n	800693a <USB_HC_Init+0x11e>
      break;
 8006938:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800693a:	78fb      	ldrb	r3, [r7, #3]
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	4413      	add	r3, r2
 8006942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	78fa      	ldrb	r2, [r7, #3]
 800694a:	0151      	lsls	r1, r2, #5
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	440a      	add	r2, r1
 8006950:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006954:	f043 0302 	orr.w	r3, r3, #2
 8006958:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006960:	699a      	ldr	r2, [r3, #24]
 8006962:	78fb      	ldrb	r3, [r7, #3]
 8006964:	f003 030f 	and.w	r3, r3, #15
 8006968:	2101      	movs	r1, #1
 800696a:	fa01 f303 	lsl.w	r3, r1, r3
 800696e:	6939      	ldr	r1, [r7, #16]
 8006970:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006974:	4313      	orrs	r3, r2
 8006976:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006984:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006988:	2b00      	cmp	r3, #0
 800698a:	da03      	bge.n	8006994 <USB_HC_Init+0x178>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800698c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006990:	61bb      	str	r3, [r7, #24]
 8006992:	e001      	b.n	8006998 <USB_HC_Init+0x17c>
  }
  else
  {
    HCcharEpDir = 0U;
 8006994:	2300      	movs	r3, #0
 8006996:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f7ff ff16 	bl	80067ca <USB_GetHostSpeed>
 800699e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80069a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d106      	bne.n	80069b6 <USB_HC_Init+0x19a>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d003      	beq.n	80069b6 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80069ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80069b2:	617b      	str	r3, [r7, #20]
 80069b4:	e001      	b.n	80069ba <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80069b6:	2300      	movs	r3, #0
 80069b8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069ba:	787b      	ldrb	r3, [r7, #1]
 80069bc:	059b      	lsls	r3, r3, #22
 80069be:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80069c2:	78bb      	ldrb	r3, [r7, #2]
 80069c4:	02db      	lsls	r3, r3, #11
 80069c6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069ca:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80069cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80069d0:	049b      	lsls	r3, r3, #18
 80069d2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80069d6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80069d8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80069da:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80069de:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069e4:	78fb      	ldrb	r3, [r7, #3]
 80069e6:	0159      	lsls	r1, r3, #5
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	440b      	add	r3, r1
 80069ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069f0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069f6:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80069f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80069fc:	2b03      	cmp	r3, #3
 80069fe:	d10f      	bne.n	8006a20 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006a00:	78fb      	ldrb	r3, [r7, #3]
 8006a02:	015a      	lsls	r2, r3, #5
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	4413      	add	r3, r2
 8006a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	78fa      	ldrb	r2, [r7, #3]
 8006a10:	0151      	lsls	r1, r2, #5
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	440a      	add	r2, r1
 8006a16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a1e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006a20:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3720      	adds	r7, #32
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop

08006a2c <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b088      	sub	sp, #32
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	785b      	ldrb	r3, [r3, #1]
 8006a3e:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006a40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a44:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d018      	beq.n	8006a80 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	683a      	ldr	r2, [r7, #0]
 8006a54:	8912      	ldrh	r2, [r2, #8]
 8006a56:	4413      	add	r3, r2
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	683a      	ldr	r2, [r7, #0]
 8006a5c:	8912      	ldrh	r2, [r2, #8]
 8006a5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a62:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8006a64:	8bfa      	ldrh	r2, [r7, #30]
 8006a66:	8a7b      	ldrh	r3, [r7, #18]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d90b      	bls.n	8006a84 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8006a6c:	8a7b      	ldrh	r3, [r7, #18]
 8006a6e:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a70:	8bfb      	ldrh	r3, [r7, #30]
 8006a72:	683a      	ldr	r2, [r7, #0]
 8006a74:	8912      	ldrh	r2, [r2, #8]
 8006a76:	fb02 f203 	mul.w	r2, r2, r3
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	611a      	str	r2, [r3, #16]
 8006a7e:	e001      	b.n	8006a84 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8006a80:	2301      	movs	r3, #1
 8006a82:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	78db      	ldrb	r3, [r3, #3]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d007      	beq.n	8006a9c <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a8c:	8bfb      	ldrh	r3, [r7, #30]
 8006a8e:	683a      	ldr	r2, [r7, #0]
 8006a90:	8912      	ldrh	r2, [r2, #8]
 8006a92:	fb02 f203 	mul.w	r2, r2, r3
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	611a      	str	r2, [r3, #16]
 8006a9a:	e003      	b.n	8006aa4 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	695a      	ldr	r2, [r3, #20]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006aac:	8bfb      	ldrh	r3, [r7, #30]
 8006aae:	04d9      	lsls	r1, r3, #19
 8006ab0:	4b59      	ldr	r3, [pc, #356]	; (8006c18 <USB_HC_StartXfer+0x1ec>)
 8006ab2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ab4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	7a9b      	ldrb	r3, [r3, #10]
 8006aba:	075b      	lsls	r3, r3, #29
 8006abc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ac0:	6979      	ldr	r1, [r7, #20]
 8006ac2:	0148      	lsls	r0, r1, #5
 8006ac4:	69b9      	ldr	r1, [r7, #24]
 8006ac6:	4401      	add	r1, r0
 8006ac8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006acc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ace:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	bf0c      	ite	eq
 8006ae0:	2301      	moveq	r3, #1
 8006ae2:	2300      	movne	r3, #0
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	015a      	lsls	r2, r3, #5
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	4413      	add	r3, r2
 8006af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	0151      	lsls	r1, r2, #5
 8006afa:	69ba      	ldr	r2, [r7, #24]
 8006afc:	440a      	add	r2, r1
 8006afe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b02:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006b06:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	7c7b      	ldrb	r3, [r7, #17]
 8006b18:	075b      	lsls	r3, r3, #29
 8006b1a:	6979      	ldr	r1, [r7, #20]
 8006b1c:	0148      	lsls	r0, r1, #5
 8006b1e:	69b9      	ldr	r1, [r7, #24]
 8006b20:	4401      	add	r1, r0
 8006b22:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006b26:	4313      	orrs	r3, r2
 8006b28:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	015a      	lsls	r2, r3, #5
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b40:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	78db      	ldrb	r3, [r3, #3]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d004      	beq.n	8006b54 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b50:	60bb      	str	r3, [r7, #8]
 8006b52:	e003      	b.n	8006b5c <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b5a:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b62:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b70:	461a      	mov	r2, r3
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	78db      	ldrb	r3, [r3, #3]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d147      	bne.n	8006c0e <USB_HC_StartXfer+0x1e2>
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d043      	beq.n	8006c0e <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	79db      	ldrb	r3, [r3, #7]
 8006b8a:	2b03      	cmp	r3, #3
 8006b8c:	d830      	bhi.n	8006bf0 <USB_HC_StartXfer+0x1c4>
 8006b8e:	a201      	add	r2, pc, #4	; (adr r2, 8006b94 <USB_HC_StartXfer+0x168>)
 8006b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b94:	08006ba5 	.word	0x08006ba5
 8006b98:	08006bc9 	.word	0x08006bc9
 8006b9c:	08006ba5 	.word	0x08006ba5
 8006ba0:	08006bc9 	.word	0x08006bc9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	695b      	ldr	r3, [r3, #20]
 8006ba8:	3303      	adds	r3, #3
 8006baa:	089b      	lsrs	r3, r3, #2
 8006bac:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006bae:	89fa      	ldrh	r2, [r7, #14]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d91c      	bls.n	8006bf4 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	f043 0220 	orr.w	r2, r3, #32
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	619a      	str	r2, [r3, #24]
        }
        break;
 8006bc6:	e015      	b.n	8006bf4 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	3303      	adds	r3, #3
 8006bce:	089b      	lsrs	r3, r3, #2
 8006bd0:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006bd2:	89fa      	ldrh	r2, [r7, #14]
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d90a      	bls.n	8006bf8 <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	619a      	str	r2, [r3, #24]
        }
        break;
 8006bee:	e003      	b.n	8006bf8 <USB_HC_StartXfer+0x1cc>

      default:
        break;
 8006bf0:	bf00      	nop
 8006bf2:	e002      	b.n	8006bfa <USB_HC_StartXfer+0x1ce>
        break;
 8006bf4:	bf00      	nop
 8006bf6:	e000      	b.n	8006bfa <USB_HC_StartXfer+0x1ce>
        break;
 8006bf8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	68d9      	ldr	r1, [r3, #12]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	785a      	ldrb	r2, [r3, #1]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f7ff fbd9 	bl	80063c0 <USB_WritePacket>
  }

  return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3720      	adds	r7, #32
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	1ff80000 	.word	0x1ff80000

08006c1c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c2e:	695b      	ldr	r3, [r3, #20]
 8006c30:	b29b      	uxth	r3, r3
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3714      	adds	r7, #20
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b089      	sub	sp, #36	; 0x24
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
 8006c46:	460b      	mov	r3, r1
 8006c48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006c4e:	78fb      	ldrb	r3, [r7, #3]
 8006c50:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006c52:	2300      	movs	r3, #0
 8006c54:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	015a      	lsls	r2, r3, #5
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	0c9b      	lsrs	r3, r3, #18
 8006c66:	f003 0303 	and.w	r3, r3, #3
 8006c6a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	0fdb      	lsrs	r3, r3, #31
 8006c7c:	f003 0301 	and.w	r3, r3, #1
 8006c80:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f003 0320 	and.w	r3, r3, #32
 8006c8a:	2b20      	cmp	r3, #32
 8006c8c:	d104      	bne.n	8006c98 <USB_HC_Halt+0x5a>
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d101      	bne.n	8006c98 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006c94:	2300      	movs	r3, #0
 8006c96:	e0c6      	b.n	8006e26 <USB_HC_Halt+0x1e8>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d002      	beq.n	8006ca4 <USB_HC_Halt+0x66>
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d162      	bne.n	8006d6a <USB_HC_Halt+0x12c>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	015a      	lsls	r2, r3, #5
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	4413      	add	r3, r2
 8006cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	69ba      	ldr	r2, [r7, #24]
 8006cb4:	0151      	lsls	r1, r2, #5
 8006cb6:	69fa      	ldr	r2, [r7, #28]
 8006cb8:	440a      	add	r2, r1
 8006cba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cbe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cc2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f003 0320 	and.w	r3, r3, #32
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f040 80a9 	bne.w	8006e24 <USB_HC_Halt+0x1e6>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d132      	bne.n	8006d44 <USB_HC_Halt+0x106>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	015a      	lsls	r2, r3, #5
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	69ba      	ldr	r2, [r7, #24]
 8006cee:	0151      	lsls	r1, r2, #5
 8006cf0:	69fa      	ldr	r2, [r7, #28]
 8006cf2:	440a      	add	r2, r1
 8006cf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cfc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	015a      	lsls	r2, r3, #5
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	4413      	add	r3, r2
 8006d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	69ba      	ldr	r2, [r7, #24]
 8006d0e:	0151      	lsls	r1, r2, #5
 8006d10:	69fa      	ldr	r2, [r7, #28]
 8006d12:	440a      	add	r2, r1
 8006d14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d1c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	3301      	adds	r3, #1
 8006d22:	60fb      	str	r3, [r7, #12]
 8006d24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d28:	d81d      	bhi.n	8006d66 <USB_HC_Halt+0x128>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	015a      	lsls	r2, r3, #5
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	4413      	add	r3, r2
 8006d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d40:	d0ed      	beq.n	8006d1e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d42:	e06f      	b.n	8006e24 <USB_HC_Halt+0x1e6>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	015a      	lsls	r2, r3, #5
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	69ba      	ldr	r2, [r7, #24]
 8006d54:	0151      	lsls	r1, r2, #5
 8006d56:	69fa      	ldr	r2, [r7, #28]
 8006d58:	440a      	add	r2, r1
 8006d5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d62:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d64:	e05e      	b.n	8006e24 <USB_HC_Halt+0x1e6>
            break;
 8006d66:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d68:	e05c      	b.n	8006e24 <USB_HC_Halt+0x1e6>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	015a      	lsls	r2, r3, #5
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	4413      	add	r3, r2
 8006d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	69ba      	ldr	r2, [r7, #24]
 8006d7a:	0151      	lsls	r1, r2, #5
 8006d7c:	69fa      	ldr	r2, [r7, #28]
 8006d7e:	440a      	add	r2, r1
 8006d80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d88:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d132      	bne.n	8006e00 <USB_HC_Halt+0x1c2>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	69ba      	ldr	r2, [r7, #24]
 8006daa:	0151      	lsls	r1, r2, #5
 8006dac:	69fa      	ldr	r2, [r7, #28]
 8006dae:	440a      	add	r2, r1
 8006db0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006db4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006db8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	015a      	lsls	r2, r3, #5
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	69ba      	ldr	r2, [r7, #24]
 8006dca:	0151      	lsls	r1, r2, #5
 8006dcc:	69fa      	ldr	r2, [r7, #28]
 8006dce:	440a      	add	r2, r1
 8006dd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006dd8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	60fb      	str	r3, [r7, #12]
 8006de0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006de4:	d81d      	bhi.n	8006e22 <USB_HC_Halt+0x1e4>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	015a      	lsls	r2, r3, #5
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	4413      	add	r3, r2
 8006dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006df8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dfc:	d0ed      	beq.n	8006dda <USB_HC_Halt+0x19c>
 8006dfe:	e011      	b.n	8006e24 <USB_HC_Halt+0x1e6>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	015a      	lsls	r2, r3, #5
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	4413      	add	r3, r2
 8006e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	69ba      	ldr	r2, [r7, #24]
 8006e10:	0151      	lsls	r1, r2, #5
 8006e12:	69fa      	ldr	r2, [r7, #28]
 8006e14:	440a      	add	r2, r1
 8006e16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e1e:	6013      	str	r3, [r2, #0]
 8006e20:	e000      	b.n	8006e24 <USB_HC_Halt+0x1e6>
          break;
 8006e22:	bf00      	nop
    }
  }

  return HAL_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3724      	adds	r7, #36	; 0x24
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b088      	sub	sp, #32
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006e42:	2300      	movs	r3, #0
 8006e44:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f7ff f9fd 	bl	8006246 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e4c:	2110      	movs	r1, #16
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7ff fa56 	bl	8006300 <USB_FlushTxFifo>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d001      	beq.n	8006e5e <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f7ff fa80 	bl	8006364 <USB_FlushRxFifo>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006e6e:	2300      	movs	r3, #0
 8006e70:	61bb      	str	r3, [r7, #24]
 8006e72:	e01f      	b.n	8006eb4 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	015a      	lsls	r2, r3, #5
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e8a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e92:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e9a:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	015a      	lsls	r2, r3, #5
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	61bb      	str	r3, [r7, #24]
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	2b0f      	cmp	r3, #15
 8006eb8:	d9dc      	bls.n	8006e74 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006eba:	2300      	movs	r3, #0
 8006ebc:	61bb      	str	r3, [r7, #24]
 8006ebe:	e033      	b.n	8006f28 <USB_StopHost+0xf6>
  {
    value = USBx_HC(i)->HCCHAR;
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ed6:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ede:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ee6:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	015a      	lsls	r2, r3, #5
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	3301      	adds	r3, #1
 8006efe:	60fb      	str	r3, [r7, #12]
 8006f00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f04:	d80c      	bhi.n	8006f20 <USB_StopHost+0xee>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	015a      	lsls	r2, r3, #5
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f1c:	d0ed      	beq.n	8006efa <USB_StopHost+0xc8>
 8006f1e:	e000      	b.n	8006f22 <USB_StopHost+0xf0>
        break;
 8006f20:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	3301      	adds	r3, #1
 8006f26:	61bb      	str	r3, [r7, #24]
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	2b0f      	cmp	r3, #15
 8006f2c:	d9c8      	bls.n	8006ec0 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f34:	461a      	mov	r2, r3
 8006f36:	f04f 33ff 	mov.w	r3, #4294967295
 8006f3a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f42:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f7ff f96d 	bl	8006224 <USB_EnableGlobalInt>

  return ret;
 8006f4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3720      	adds	r7, #32
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <USBH_MTP_InterfaceInit>:
  *         The function init the MTP class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006f54:	b590      	push	{r4, r7, lr}
 8006f56:	b089      	sub	sp, #36	; 0x24
 8006f58:	af04      	add	r7, sp, #16
 8006f5a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface, endpoint;
  MTP_HandleTypeDef *MTP_Handle;

  interface = USBH_FindInterface(phost, USB_MTP_CLASS, 1U, 1U);
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	2201      	movs	r2, #1
 8006f60:	2106      	movs	r1, #6
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f001 ff21 	bl	8008daa <USBH_FindInterface>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	73fb      	strb	r3, [r7, #15]
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006f6c:	7bfb      	ldrb	r3, [r7, #15]
 8006f6e:	2bff      	cmp	r3, #255	; 0xff
 8006f70:	d002      	beq.n	8006f78 <USBH_MTP_InterfaceInit+0x24>
 8006f72:	7bfb      	ldrb	r3, [r7, #15]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d901      	bls.n	8006f7c <USBH_MTP_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Still Image Class.");
    return USBH_FAIL;
 8006f78:	2302      	movs	r3, #2
 8006f7a:	e18d      	b.n	8007298 <USBH_MTP_InterfaceInit+0x344>
  }

  USBH_SelectInterface(phost, interface);
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f001 fef6 	bl	8008d72 <USBH_SelectInterface>

  status = USBH_SelectInterface(phost, interface);
 8006f86:	7bfb      	ldrb	r3, [r7, #15]
 8006f88:	4619      	mov	r1, r3
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f001 fef1 	bl	8008d72 <USBH_SelectInterface>
 8006f90:	4603      	mov	r3, r0
 8006f92:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006f94:	7bbb      	ldrb	r3, [r7, #14]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <USBH_MTP_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	e17c      	b.n	8007298 <USBH_MTP_InterfaceInit+0x344>
  }

  endpoint = MTP_FindCtlEndpoint(phost);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f97e 	bl	80072a0 <MTP_FindCtlEndpoint>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	737b      	strb	r3, [r7, #13]
  if ((endpoint == 0xFFU) || (endpoint >= USBH_MAX_NUM_ENDPOINTS))
 8006fa8:	7b7b      	ldrb	r3, [r7, #13]
 8006faa:	2bff      	cmp	r3, #255	; 0xff
 8006fac:	d002      	beq.n	8006fb4 <USBH_MTP_InterfaceInit+0x60>
 8006fae:	7b7b      	ldrb	r3, [r7, #13]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d901      	bls.n	8006fb8 <USBH_MTP_InterfaceInit+0x64>
  {
    USBH_DbgLog("Invalid Control endpoint number");
    return USBH_FAIL;
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	e16f      	b.n	8007298 <USBH_MTP_InterfaceInit+0x344>
  }

  phost->pActiveClass->pData = (MTP_HandleTypeDef *)USBH_malloc(sizeof(MTP_HandleTypeDef));
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006fbe:	f242 10d0 	movw	r0, #8656	; 0x21d0
 8006fc2:	f003 fc85 	bl	800a8d0 <malloc>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	61e3      	str	r3, [r4, #28]
  MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fd0:	69db      	ldr	r3, [r3, #28]
 8006fd2:	60bb      	str	r3, [r7, #8]

  if (MTP_Handle == NULL)
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <USBH_MTP_InterfaceInit+0x8a>
  {
    USBH_DbgLog("Cannot allocate memory for MTP Handle");
    return USBH_FAIL;
 8006fda:	2302      	movs	r3, #2
 8006fdc:	e15c      	b.n	8007298 <USBH_MTP_InterfaceInit+0x344>
  }

  /* Initialize mtp handler */
  USBH_memset(MTP_Handle, 0, sizeof(MTP_HandleTypeDef));
 8006fde:	f242 12d0 	movw	r2, #8656	; 0x21d0
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	68b8      	ldr	r0, [r7, #8]
 8006fe6:	f003 fc91 	bl	800a90c <memset>

  /*Collect the control endpoint address and length*/
  MTP_Handle->NotificationEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 8006fea:	7bfb      	ldrb	r3, [r7, #15]
 8006fec:	7b79      	ldrb	r1, [r7, #13]
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	3101      	adds	r1, #1
 8006ff2:	00c9      	lsls	r1, r1, #3
 8006ff4:	201a      	movs	r0, #26
 8006ff6:	fb00 f303 	mul.w	r3, r0, r3
 8006ffa:	440b      	add	r3, r1
 8006ffc:	4413      	add	r3, r2
 8006ffe:	f203 3346 	addw	r3, r3, #838	; 0x346
 8007002:	781a      	ldrb	r2, [r3, #0]
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800700a:	3311      	adds	r3, #17
 800700c:	701a      	strb	r2, [r3, #0]
  MTP_Handle->NotificationEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 800700e:	7bfb      	ldrb	r3, [r7, #15]
 8007010:	7b79      	ldrb	r1, [r7, #13]
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	3101      	adds	r1, #1
 8007016:	00c9      	lsls	r1, r1, #3
 8007018:	201a      	movs	r0, #26
 800701a:	fb00 f303 	mul.w	r3, r0, r3
 800701e:	440b      	add	r3, r1
 8007020:	4413      	add	r3, r2
 8007022:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8007026:	881a      	ldrh	r2, [r3, #0]
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800702e:	3316      	adds	r3, #22
 8007030:	801a      	strh	r2, [r3, #0]
  MTP_Handle->NotificationPipe = USBH_AllocPipe(phost, MTP_Handle->NotificationEp);
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007038:	3311      	adds	r3, #17
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	4619      	mov	r1, r3
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f003 f8d0 	bl	800a1e4 <USBH_AllocPipe>
 8007044:	4603      	mov	r3, r0
 8007046:	461a      	mov	r2, r3
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800704e:	330e      	adds	r3, #14
 8007050:	701a      	strb	r2, [r3, #0]
  MTP_Handle->events.poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bInterval;
 8007052:	7bfb      	ldrb	r3, [r7, #15]
 8007054:	7b79      	ldrb	r1, [r7, #13]
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	3101      	adds	r1, #1
 800705a:	00c9      	lsls	r1, r1, #3
 800705c:	201a      	movs	r0, #26
 800705e:	fb00 f303 	mul.w	r3, r0, r3
 8007062:	440b      	add	r3, r1
 8007064:	4413      	add	r3, r2
 8007066:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	b29a      	uxth	r2, r3
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	f503 53ea 	add.w	r3, r3, #7488	; 0x1d40
 8007074:	3304      	adds	r3, #4
 8007076:	801a      	strh	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, MTP_Handle->NotificationPipe,MTP_Handle->NotificationEp,
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800707e:	330e      	adds	r3, #14
 8007080:	7819      	ldrb	r1, [r3, #0]
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007088:	3311      	adds	r3, #17
 800708a:	7818      	ldrb	r0, [r3, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 231d 	ldrb.w	r2, [r3, #797]	; 0x31d
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800709e:	3316      	adds	r3, #22
 80070a0:	881b      	ldrh	r3, [r3, #0]
 80070a2:	9302      	str	r3, [sp, #8]
 80070a4:	2303      	movs	r3, #3
 80070a6:	9301      	str	r3, [sp, #4]
 80070a8:	9200      	str	r2, [sp, #0]
 80070aa:	4623      	mov	r3, r4
 80070ac:	4602      	mov	r2, r0
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f003 f869 	bl	800a186 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                MTP_Handle->NotificationEpSize);

  USBH_LL_SetToggle(phost, MTP_Handle->NotificationPipe, 0U);
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 80070ba:	330e      	adds	r3, #14
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	2200      	movs	r2, #0
 80070c0:	4619      	mov	r1, r3
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f003 fb73 	bl	800a7ae <USBH_LL_SetToggle>

  endpoint = MTP_FindDataInEndpoint(phost);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 f99d 	bl	8007408 <MTP_FindDataInEndpoint>
 80070ce:	4603      	mov	r3, r0
 80070d0:	737b      	strb	r3, [r7, #13]
  if ((endpoint == 0xFFU) || (endpoint >= USBH_MAX_NUM_ENDPOINTS))
 80070d2:	7b7b      	ldrb	r3, [r7, #13]
 80070d4:	2bff      	cmp	r3, #255	; 0xff
 80070d6:	d002      	beq.n	80070de <USBH_MTP_InterfaceInit+0x18a>
 80070d8:	7b7b      	ldrb	r3, [r7, #13]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d901      	bls.n	80070e2 <USBH_MTP_InterfaceInit+0x18e>
  {
    USBH_DbgLog("Invalid Data IN endpoint number");
    return USBH_FAIL;
 80070de:	2302      	movs	r3, #2
 80070e0:	e0da      	b.n	8007298 <USBH_MTP_InterfaceInit+0x344>
  }

  /*Collect the control endpoint address and length*/
  MTP_Handle->DataInEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 80070e2:	7bfb      	ldrb	r3, [r7, #15]
 80070e4:	7b79      	ldrb	r1, [r7, #13]
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	3101      	adds	r1, #1
 80070ea:	00c9      	lsls	r1, r1, #3
 80070ec:	201a      	movs	r0, #26
 80070ee:	fb00 f303 	mul.w	r3, r0, r3
 80070f2:	440b      	add	r3, r1
 80070f4:	4413      	add	r3, r2
 80070f6:	f203 3346 	addw	r3, r3, #838	; 0x346
 80070fa:	781a      	ldrb	r2, [r3, #0]
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007102:	3310      	adds	r3, #16
 8007104:	701a      	strb	r2, [r3, #0]
  MTP_Handle->DataInEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 8007106:	7bfb      	ldrb	r3, [r7, #15]
 8007108:	7b79      	ldrb	r1, [r7, #13]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	3101      	adds	r1, #1
 800710e:	00c9      	lsls	r1, r1, #3
 8007110:	201a      	movs	r0, #26
 8007112:	fb00 f303 	mul.w	r3, r0, r3
 8007116:	440b      	add	r3, r1
 8007118:	4413      	add	r3, r2
 800711a:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800711e:	881a      	ldrh	r2, [r3, #0]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007126:	3314      	adds	r3, #20
 8007128:	801a      	strh	r2, [r3, #0]
  MTP_Handle->DataInPipe = USBH_AllocPipe(phost, MTP_Handle->DataInEp);
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007130:	3310      	adds	r3, #16
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	4619      	mov	r1, r3
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f003 f854 	bl	800a1e4 <USBH_AllocPipe>
 800713c:	4603      	mov	r3, r0
 800713e:	461a      	mov	r2, r3
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007146:	330c      	adds	r3, #12
 8007148:	701a      	strb	r2, [r3, #0]

  /* Open pipe for DATA IN endpoint */
  USBH_OpenPipe(phost, MTP_Handle->DataInPipe, MTP_Handle->DataInEp,
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007150:	330c      	adds	r3, #12
 8007152:	7819      	ldrb	r1, [r3, #0]
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800715a:	3310      	adds	r3, #16
 800715c:	7818      	ldrb	r0, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 231d 	ldrb.w	r2, [r3, #797]	; 0x31d
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007170:	3314      	adds	r3, #20
 8007172:	881b      	ldrh	r3, [r3, #0]
 8007174:	9302      	str	r3, [sp, #8]
 8007176:	2302      	movs	r3, #2
 8007178:	9301      	str	r3, [sp, #4]
 800717a:	9200      	str	r2, [sp, #0]
 800717c:	4623      	mov	r3, r4
 800717e:	4602      	mov	r2, r0
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f003 f800 	bl	800a186 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MTP_Handle->DataInEpSize);

  USBH_LL_SetToggle(phost, MTP_Handle->DataInPipe, 0U);
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800718c:	330c      	adds	r3, #12
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	2200      	movs	r2, #0
 8007192:	4619      	mov	r1, r3
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f003 fb0a 	bl	800a7ae <USBH_LL_SetToggle>

  endpoint = MTP_FindDataOutEndpoint(phost);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f8da 	bl	8007354 <MTP_FindDataOutEndpoint>
 80071a0:	4603      	mov	r3, r0
 80071a2:	737b      	strb	r3, [r7, #13]
  if ((endpoint == 0xFFU) || (endpoint >= USBH_MAX_NUM_ENDPOINTS))
 80071a4:	7b7b      	ldrb	r3, [r7, #13]
 80071a6:	2bff      	cmp	r3, #255	; 0xff
 80071a8:	d002      	beq.n	80071b0 <USBH_MTP_InterfaceInit+0x25c>
 80071aa:	7b7b      	ldrb	r3, [r7, #13]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d901      	bls.n	80071b4 <USBH_MTP_InterfaceInit+0x260>
  {
    USBH_DbgLog("Invalid Data OUT endpoint number");
    return USBH_FAIL;
 80071b0:	2302      	movs	r3, #2
 80071b2:	e071      	b.n	8007298 <USBH_MTP_InterfaceInit+0x344>
  }

  /*Collect the DATA OUT endpoint address and length*/
  MTP_Handle->DataOutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 80071b4:	7bfb      	ldrb	r3, [r7, #15]
 80071b6:	7b79      	ldrb	r1, [r7, #13]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	3101      	adds	r1, #1
 80071bc:	00c9      	lsls	r1, r1, #3
 80071be:	201a      	movs	r0, #26
 80071c0:	fb00 f303 	mul.w	r3, r0, r3
 80071c4:	440b      	add	r3, r1
 80071c6:	4413      	add	r3, r2
 80071c8:	f203 3346 	addw	r3, r3, #838	; 0x346
 80071cc:	781a      	ldrb	r2, [r3, #0]
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 80071d4:	330f      	adds	r3, #15
 80071d6:	701a      	strb	r2, [r3, #0]
  MTP_Handle->DataOutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
 80071da:	7b79      	ldrb	r1, [r7, #13]
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	3101      	adds	r1, #1
 80071e0:	00c9      	lsls	r1, r1, #3
 80071e2:	201a      	movs	r0, #26
 80071e4:	fb00 f303 	mul.w	r3, r0, r3
 80071e8:	440b      	add	r3, r1
 80071ea:	4413      	add	r3, r2
 80071ec:	f503 7352 	add.w	r3, r3, #840	; 0x348
 80071f0:	881a      	ldrh	r2, [r3, #0]
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 80071f8:	3312      	adds	r3, #18
 80071fa:	801a      	strh	r2, [r3, #0]
  MTP_Handle->DataOutPipe = USBH_AllocPipe(phost, MTP_Handle->DataOutEp);
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007202:	330f      	adds	r3, #15
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	4619      	mov	r1, r3
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f002 ffeb 	bl	800a1e4 <USBH_AllocPipe>
 800720e:	4603      	mov	r3, r0
 8007210:	461a      	mov	r2, r3
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007218:	330d      	adds	r3, #13
 800721a:	701a      	strb	r2, [r3, #0]

  /* Open pipe for DATA OUT endpoint */
  USBH_OpenPipe(phost, MTP_Handle->DataOutPipe, MTP_Handle->DataOutEp,
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007222:	330d      	adds	r3, #13
 8007224:	7819      	ldrb	r1, [r3, #0]
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800722c:	330f      	adds	r3, #15
 800722e:	7818      	ldrb	r0, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 231d 	ldrb.w	r2, [r3, #797]	; 0x31d
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007242:	3312      	adds	r3, #18
 8007244:	881b      	ldrh	r3, [r3, #0]
 8007246:	9302      	str	r3, [sp, #8]
 8007248:	2302      	movs	r3, #2
 800724a:	9301      	str	r3, [sp, #4]
 800724c:	9200      	str	r2, [sp, #0]
 800724e:	4623      	mov	r3, r4
 8007250:	4602      	mov	r2, r0
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f002 ff97 	bl	800a186 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MTP_Handle->DataOutEpSize);

  USBH_LL_SetToggle(phost, MTP_Handle->DataOutPipe, 0U);
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800725e:	330d      	adds	r3, #13
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	2200      	movs	r2, #0
 8007264:	4619      	mov	r1, r3
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f003 faa1 	bl	800a7ae <USBH_LL_SetToggle>

  MTP_Handle->state = MTP_OPENSESSION;
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007272:	3318      	adds	r3, #24
 8007274:	2202      	movs	r2, #2
 8007276:	701a      	strb	r2, [r3, #0]
  MTP_Handle->is_ready = 0U;
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 800727e:	330c      	adds	r3, #12
 8007280:	2200      	movs	r2, #0
 8007282:	601a      	str	r2, [r3, #0]
  MTP_Handle->events.state = MTP_EVENTS_INIT;
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800728a:	331c      	adds	r3, #28
 800728c:	2200      	movs	r2, #0
 800728e:	701a      	strb	r2, [r3, #0]

  return USBH_PTP_Init(phost);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 fb4f 	bl	8007934 <USBH_PTP_Init>
 8007296:	4603      	mov	r3, r0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3714      	adds	r7, #20
 800729c:	46bd      	mov	sp, r7
 800729e:	bd90      	pop	{r4, r7, pc}

080072a0 <MTP_FindCtlEndpoint>:
  * @brief  Find MTP Ctl interface
  * @param  phost: Host handle
  * @retval USBH Status
  */
static uint8_t MTP_FindCtlEndpoint(USBH_HandleTypeDef *phost)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  uint8_t interface, endpoint;

  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES ; interface ++)
 80072a8:	2300      	movs	r3, #0
 80072aa:	73fb      	strb	r3, [r7, #15]
 80072ac:	e048      	b.n	8007340 <MTP_FindCtlEndpoint+0xa0>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 80072ae:	7bfb      	ldrb	r3, [r7, #15]
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	211a      	movs	r1, #26
 80072b4:	fb01 f303 	mul.w	r3, r1, r3
 80072b8:	4413      	add	r3, r2
 80072ba:	f203 3347 	addw	r3, r3, #839	; 0x347
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	2b06      	cmp	r3, #6
 80072c2:	d13a      	bne.n	800733a <MTP_FindCtlEndpoint+0x9a>
    {
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 80072c4:	2300      	movs	r3, #0
 80072c6:	73bb      	strb	r3, [r7, #14]
 80072c8:	e034      	b.n	8007334 <MTP_FindCtlEndpoint+0x94>
      {
        if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) &&
 80072ca:	7bfb      	ldrb	r3, [r7, #15]
 80072cc:	7bb9      	ldrb	r1, [r7, #14]
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	3101      	adds	r1, #1
 80072d2:	00c9      	lsls	r1, r1, #3
 80072d4:	201a      	movs	r0, #26
 80072d6:	fb00 f303 	mul.w	r3, r0, r3
 80072da:	440b      	add	r3, r1
 80072dc:	4413      	add	r3, r2
 80072de:	f203 3346 	addw	r3, r3, #838	; 0x346
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	b25b      	sxtb	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	da21      	bge.n	800732e <MTP_FindCtlEndpoint+0x8e>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 80072ea:	7bfb      	ldrb	r3, [r7, #15]
 80072ec:	7bb9      	ldrb	r1, [r7, #14]
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	3101      	adds	r1, #1
 80072f2:	00c9      	lsls	r1, r1, #3
 80072f4:	201a      	movs	r0, #26
 80072f6:	fb00 f303 	mul.w	r3, r0, r3
 80072fa:	440b      	add	r3, r1
 80072fc:	4413      	add	r3, r2
 80072fe:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8007302:	881b      	ldrh	r3, [r3, #0]
        if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) &&
 8007304:	2b00      	cmp	r3, #0
 8007306:	d012      	beq.n	800732e <MTP_FindCtlEndpoint+0x8e>
            ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bmAttributes & USBH_EP_INTERRUPT) == USBH_EP_INTERRUPT))
 8007308:	7bfb      	ldrb	r3, [r7, #15]
 800730a:	7bb9      	ldrb	r1, [r7, #14]
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	3101      	adds	r1, #1
 8007310:	00c9      	lsls	r1, r1, #3
 8007312:	201a      	movs	r0, #26
 8007314:	fb00 f303 	mul.w	r3, r0, r3
 8007318:	440b      	add	r3, r1
 800731a:	4413      	add	r3, r2
 800731c:	f203 3347 	addw	r3, r3, #839	; 0x347
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	f003 0303 	and.w	r3, r3, #3
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8007326:	2b03      	cmp	r3, #3
 8007328:	d101      	bne.n	800732e <MTP_FindCtlEndpoint+0x8e>
        {
          return endpoint;
 800732a:	7bbb      	ldrb	r3, [r7, #14]
 800732c:	e00c      	b.n	8007348 <MTP_FindCtlEndpoint+0xa8>
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 800732e:	7bbb      	ldrb	r3, [r7, #14]
 8007330:	3301      	adds	r3, #1
 8007332:	73bb      	strb	r3, [r7, #14]
 8007334:	7bbb      	ldrb	r3, [r7, #14]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d9c7      	bls.n	80072ca <MTP_FindCtlEndpoint+0x2a>
  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES ; interface ++)
 800733a:	7bfb      	ldrb	r3, [r7, #15]
 800733c:	3301      	adds	r3, #1
 800733e:	73fb      	strb	r3, [r7, #15]
 8007340:	7bfb      	ldrb	r3, [r7, #15]
 8007342:	2b01      	cmp	r3, #1
 8007344:	d9b3      	bls.n	80072ae <MTP_FindCtlEndpoint+0xe>
        }
      }
    }
  }

  return 0xFFU; /* Invalid Endpoint */
 8007346:	23ff      	movs	r3, #255	; 0xff
}
 8007348:	4618      	mov	r0, r3
 800734a:	3714      	adds	r7, #20
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <MTP_FindDataOutEndpoint>:
  * @brief  Find MTP DATA OUT interface
  * @param  phost: Host handle
  * @retval USBH Status
  */
static uint8_t MTP_FindDataOutEndpoint(USBH_HandleTypeDef *phost)
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  uint8_t interface, endpoint;

  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES ; interface ++)
 800735c:	2300      	movs	r3, #0
 800735e:	73fb      	strb	r3, [r7, #15]
 8007360:	e048      	b.n	80073f4 <MTP_FindDataOutEndpoint+0xa0>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 8007362:	7bfb      	ldrb	r3, [r7, #15]
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	211a      	movs	r1, #26
 8007368:	fb01 f303 	mul.w	r3, r1, r3
 800736c:	4413      	add	r3, r2
 800736e:	f203 3347 	addw	r3, r3, #839	; 0x347
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	2b06      	cmp	r3, #6
 8007376:	d13a      	bne.n	80073ee <MTP_FindDataOutEndpoint+0x9a>
    {
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 8007378:	2300      	movs	r3, #0
 800737a:	73bb      	strb	r3, [r7, #14]
 800737c:	e034      	b.n	80073e8 <MTP_FindDataOutEndpoint+0x94>
      {

        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) == 0U) &&
 800737e:	7bfb      	ldrb	r3, [r7, #15]
 8007380:	7bb9      	ldrb	r1, [r7, #14]
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	3101      	adds	r1, #1
 8007386:	00c9      	lsls	r1, r1, #3
 8007388:	201a      	movs	r0, #26
 800738a:	fb00 f303 	mul.w	r3, r0, r3
 800738e:	440b      	add	r3, r1
 8007390:	4413      	add	r3, r2
 8007392:	f203 3346 	addw	r3, r3, #838	; 0x346
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	b25b      	sxtb	r3, r3
 800739a:	2b00      	cmp	r3, #0
 800739c:	db21      	blt.n	80073e2 <MTP_FindDataOutEndpoint+0x8e>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 800739e:	7bfb      	ldrb	r3, [r7, #15]
 80073a0:	7bb9      	ldrb	r1, [r7, #14]
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	3101      	adds	r1, #1
 80073a6:	00c9      	lsls	r1, r1, #3
 80073a8:	201a      	movs	r0, #26
 80073aa:	fb00 f303 	mul.w	r3, r0, r3
 80073ae:	440b      	add	r3, r1
 80073b0:	4413      	add	r3, r2
 80073b2:	f503 7352 	add.w	r3, r3, #840	; 0x348
 80073b6:	881b      	ldrh	r3, [r3, #0]
        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) == 0U) &&
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d012      	beq.n	80073e2 <MTP_FindDataOutEndpoint+0x8e>
            ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bmAttributes & USBH_EP_BULK) == USBH_EP_BULK))
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
 80073be:	7bb9      	ldrb	r1, [r7, #14]
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	3101      	adds	r1, #1
 80073c4:	00c9      	lsls	r1, r1, #3
 80073c6:	201a      	movs	r0, #26
 80073c8:	fb00 f303 	mul.w	r3, r0, r3
 80073cc:	440b      	add	r3, r1
 80073ce:	4413      	add	r3, r2
 80073d0:	f203 3347 	addw	r3, r3, #839	; 0x347
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	f003 0302 	and.w	r3, r3, #2
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d001      	beq.n	80073e2 <MTP_FindDataOutEndpoint+0x8e>
        {
          return endpoint;
 80073de:	7bbb      	ldrb	r3, [r7, #14]
 80073e0:	e00c      	b.n	80073fc <MTP_FindDataOutEndpoint+0xa8>
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 80073e2:	7bbb      	ldrb	r3, [r7, #14]
 80073e4:	3301      	adds	r3, #1
 80073e6:	73bb      	strb	r3, [r7, #14]
 80073e8:	7bbb      	ldrb	r3, [r7, #14]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d9c7      	bls.n	800737e <MTP_FindDataOutEndpoint+0x2a>
  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES ; interface ++)
 80073ee:	7bfb      	ldrb	r3, [r7, #15]
 80073f0:	3301      	adds	r3, #1
 80073f2:	73fb      	strb	r3, [r7, #15]
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d9b3      	bls.n	8007362 <MTP_FindDataOutEndpoint+0xe>
        }
      }
    }
  }

  return 0xFFU; /* Invalid Endpoint */
 80073fa:	23ff      	movs	r3, #255	; 0xff
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3714      	adds	r7, #20
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <MTP_FindDataInEndpoint>:
  * @brief  Find MTP DATA IN interface
  * @param  phost: Host handle
  * @retval USBH Status
  */
static uint8_t MTP_FindDataInEndpoint(USBH_HandleTypeDef *phost)
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  uint8_t interface, endpoint;

  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES; interface ++)
 8007410:	2300      	movs	r3, #0
 8007412:	73fb      	strb	r3, [r7, #15]
 8007414:	e048      	b.n	80074a8 <MTP_FindDataInEndpoint+0xa0>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 8007416:	7bfb      	ldrb	r3, [r7, #15]
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	211a      	movs	r1, #26
 800741c:	fb01 f303 	mul.w	r3, r1, r3
 8007420:	4413      	add	r3, r2
 8007422:	f203 3347 	addw	r3, r3, #839	; 0x347
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	2b06      	cmp	r3, #6
 800742a:	d13a      	bne.n	80074a2 <MTP_FindDataInEndpoint+0x9a>
    {
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 800742c:	2300      	movs	r3, #0
 800742e:	73bb      	strb	r3, [r7, #14]
 8007430:	e034      	b.n	800749c <MTP_FindDataInEndpoint+0x94>
      {

        if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) &&
 8007432:	7bfb      	ldrb	r3, [r7, #15]
 8007434:	7bb9      	ldrb	r1, [r7, #14]
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	3101      	adds	r1, #1
 800743a:	00c9      	lsls	r1, r1, #3
 800743c:	201a      	movs	r0, #26
 800743e:	fb00 f303 	mul.w	r3, r0, r3
 8007442:	440b      	add	r3, r1
 8007444:	4413      	add	r3, r2
 8007446:	f203 3346 	addw	r3, r3, #838	; 0x346
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	b25b      	sxtb	r3, r3
 800744e:	2b00      	cmp	r3, #0
 8007450:	da21      	bge.n	8007496 <MTP_FindDataInEndpoint+0x8e>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8007452:	7bfb      	ldrb	r3, [r7, #15]
 8007454:	7bb9      	ldrb	r1, [r7, #14]
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	3101      	adds	r1, #1
 800745a:	00c9      	lsls	r1, r1, #3
 800745c:	201a      	movs	r0, #26
 800745e:	fb00 f303 	mul.w	r3, r0, r3
 8007462:	440b      	add	r3, r1
 8007464:	4413      	add	r3, r2
 8007466:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800746a:	881b      	ldrh	r3, [r3, #0]
        if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) &&
 800746c:	2b00      	cmp	r3, #0
 800746e:	d012      	beq.n	8007496 <MTP_FindDataInEndpoint+0x8e>
            ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bmAttributes & USBH_EP_BULK) == USBH_EP_BULK))
 8007470:	7bfb      	ldrb	r3, [r7, #15]
 8007472:	7bb9      	ldrb	r1, [r7, #14]
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	3101      	adds	r1, #1
 8007478:	00c9      	lsls	r1, r1, #3
 800747a:	201a      	movs	r0, #26
 800747c:	fb00 f303 	mul.w	r3, r0, r3
 8007480:	440b      	add	r3, r1
 8007482:	4413      	add	r3, r2
 8007484:	f203 3347 	addw	r3, r3, #839	; 0x347
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	f003 0302 	and.w	r3, r3, #2
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <MTP_FindDataInEndpoint+0x8e>
        {
          return endpoint;
 8007492:	7bbb      	ldrb	r3, [r7, #14]
 8007494:	e00c      	b.n	80074b0 <MTP_FindDataInEndpoint+0xa8>
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 8007496:	7bbb      	ldrb	r3, [r7, #14]
 8007498:	3301      	adds	r3, #1
 800749a:	73bb      	strb	r3, [r7, #14]
 800749c:	7bbb      	ldrb	r3, [r7, #14]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d9c7      	bls.n	8007432 <MTP_FindDataInEndpoint+0x2a>
  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES; interface ++)
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
 80074a4:	3301      	adds	r3, #1
 80074a6:	73fb      	strb	r3, [r7, #15]
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d9b3      	bls.n	8007416 <MTP_FindDataInEndpoint+0xe>
        }
      }
    }
  }

  return 0xFFU; /* Invalid Endpoint */
 80074ae:	23ff      	movs	r3, #255	; 0xff
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3714      	adds	r7, #20
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <USBH_MTP_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MTP class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074ca:	69db      	ldr	r3, [r3, #28]
 80074cc:	60fb      	str	r3, [r7, #12]

  if (MTP_Handle->DataOutPipe != 0U)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 80074d4:	330d      	adds	r3, #13
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d017      	beq.n	800750c <USBH_MTP_InterfaceDeInit+0x50>
  {
    USBH_ClosePipe(phost, MTP_Handle->DataOutPipe);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 80074e2:	330d      	adds	r3, #13
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	4619      	mov	r1, r3
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f002 fe6b 	bl	800a1c4 <USBH_ClosePipe>
    USBH_FreePipe(phost, MTP_Handle->DataOutPipe);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 80074f4:	330d      	adds	r3, #13
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	4619      	mov	r1, r3
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f002 fe93 	bl	800a226 <USBH_FreePipe>
    MTP_Handle->DataOutPipe = 0U;     /* Reset the Channel as Free */
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007506:	330d      	adds	r3, #13
 8007508:	2200      	movs	r2, #0
 800750a:	701a      	strb	r2, [r3, #0]
  }

  if (MTP_Handle->DataInPipe != 0U)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007512:	330c      	adds	r3, #12
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d017      	beq.n	800754a <USBH_MTP_InterfaceDeInit+0x8e>
  {
    USBH_ClosePipe(phost, MTP_Handle->DataInPipe);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007520:	330c      	adds	r3, #12
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	4619      	mov	r1, r3
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f002 fe4c 	bl	800a1c4 <USBH_ClosePipe>
    USBH_FreePipe(phost, MTP_Handle->DataInPipe);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007532:	330c      	adds	r3, #12
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	4619      	mov	r1, r3
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f002 fe74 	bl	800a226 <USBH_FreePipe>
    MTP_Handle->DataInPipe = 0U;     /* Reset the Channel as Free */
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007544:	330c      	adds	r3, #12
 8007546:	2200      	movs	r2, #0
 8007548:	701a      	strb	r2, [r3, #0]
  }

  if (MTP_Handle->NotificationPipe != 0U)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007550:	330e      	adds	r3, #14
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d017      	beq.n	8007588 <USBH_MTP_InterfaceDeInit+0xcc>
  {
    USBH_ClosePipe(phost, MTP_Handle->NotificationPipe);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800755e:	330e      	adds	r3, #14
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	4619      	mov	r1, r3
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f002 fe2d 	bl	800a1c4 <USBH_ClosePipe>
    USBH_FreePipe(phost, MTP_Handle->NotificationPipe);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007570:	330e      	adds	r3, #14
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	4619      	mov	r1, r3
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f002 fe55 	bl	800a226 <USBH_FreePipe>
    MTP_Handle->NotificationPipe = 0U;     /* Reset the Channel as Free */
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007582:	330e      	adds	r3, #14
 8007584:	2200      	movs	r2, #0
 8007586:	701a      	strb	r2, [r3, #0]
  }

  if (phost->pActiveClass->pData != NULL)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800758e:	69db      	ldr	r3, [r3, #28]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00b      	beq.n	80075ac <USBH_MTP_InterfaceDeInit+0xf0>
  {
    USBH_free(phost->pActiveClass->pData);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800759a:	69db      	ldr	r3, [r3, #28]
 800759c:	4618      	mov	r0, r3
 800759e:	f003 f99f 	bl	800a8e0 <free>
    phost->pActiveClass->pData = 0U;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075a8:	2200      	movs	r2, #0
 80075aa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <USBH_MTP_ClassRequest>:
  *         for MTP class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_ClassRequest(USBH_HandleTypeDef *phost)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b083      	sub	sp, #12
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
#else
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
#endif

  return USBH_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <USBH_MTP_Process>:
  *         The function is for managing state machine for MTP data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_Process(USBH_HandleTypeDef *phost)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80075d4:	2301      	movs	r3, #1
 80075d6:	75fb      	strb	r3, [r7, #23]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075de:	69db      	ldr	r3, [r3, #28]
 80075e0:	60fb      	str	r3, [r7, #12]
  uint32_t idx = 0U;
 80075e2:	2300      	movs	r3, #0
 80075e4:	613b      	str	r3, [r7, #16]

  switch (MTP_Handle->state)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 80075ec:	3318      	adds	r3, #24
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	2b05      	cmp	r3, #5
 80075f2:	f200 80b4 	bhi.w	800775e <USBH_MTP_Process+0x192>
 80075f6:	a201      	add	r2, pc, #4	; (adr r2, 80075fc <USBH_MTP_Process+0x30>)
 80075f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fc:	08007753 	.word	0x08007753
 8007600:	08007637 	.word	0x08007637
 8007604:	08007615 	.word	0x08007615
 8007608:	0800775f 	.word	0x0800775f
 800760c:	0800765b 	.word	0x0800765b
 8007610:	080076a5 	.word	0x080076a5
  {
    case  MTP_OPENSESSION:
      status = USBH_PTP_OpenSession(phost, 1U);  /* Session '0' is not valid */
 8007614:	2101      	movs	r1, #1
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f001 f923 	bl	8008862 <USBH_PTP_OpenSession>
 800761c:	4603      	mov	r3, r0
 800761e:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 8007620:	7dfb      	ldrb	r3, [r7, #23]
 8007622:	2b00      	cmp	r3, #0
 8007624:	f040 809d 	bne.w	8007762 <USBH_MTP_Process+0x196>
      {
        USBH_UsrLog("MTP Session #0 Opened");
        MTP_Handle->state = MTP_GETDEVICEINFO;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800762e:	3318      	adds	r3, #24
 8007630:	2201      	movs	r2, #1
 8007632:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007634:	e095      	b.n	8007762 <USBH_MTP_Process+0x196>

    case MTP_GETDEVICEINFO:
      status = USBH_PTP_GetDeviceInfo(phost, &(MTP_Handle->info.devinfo));
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	4619      	mov	r1, r3
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f001 f972 	bl	8008924 <USBH_PTP_GetDeviceInfo>
 8007640:	4603      	mov	r3, r0
 8007642:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 8007644:	7dfb      	ldrb	r3, [r7, #23]
 8007646:	2b00      	cmp	r3, #0
 8007648:	f040 808d 	bne.w	8007766 <USBH_MTP_Process+0x19a>
        USBH_DbgLog("Manufacturer : %s", MTP_Handle->info.devinfo.Manufacturer);
        USBH_DbgLog("Model : %s", MTP_Handle->info.devinfo.Model);
        USBH_DbgLog("Device version : %s", MTP_Handle->info.devinfo.DeviceVersion);
        USBH_DbgLog("Serial number : %s", MTP_Handle->info.devinfo.SerialNumber);

        MTP_Handle->state = MTP_GETSTORAGEIDS;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007652:	3318      	adds	r3, #24
 8007654:	2204      	movs	r2, #4
 8007656:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007658:	e085      	b.n	8007766 <USBH_MTP_Process+0x19a>

    case MTP_GETSTORAGEIDS:
      status = USBH_PTP_GetStorageIds(phost, &(MTP_Handle->info.storids));
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f603 1304 	addw	r3, r3, #2308	; 0x904
 8007660:	4619      	mov	r1, r3
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f001 f9d7 	bl	8008a16 <USBH_PTP_GetStorageIds>
 8007668:	4603      	mov	r3, r0
 800766a:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800766c:	7dfb      	ldrb	r3, [r7, #23]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d17b      	bne.n	800776a <USBH_MTP_Process+0x19e>
      {
        USBH_DbgLog("Number of storage ID items : %d", MTP_Handle->info.storids.n);
        for (idx  = 0U; idx < MTP_Handle->info.storids.n; idx ++)
 8007672:	2300      	movs	r3, #0
 8007674:	613b      	str	r3, [r7, #16]
 8007676:	e002      	b.n	800767e <USBH_MTP_Process+0xb2>
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	3301      	adds	r3, #1
 800767c:	613b      	str	r3, [r7, #16]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	429a      	cmp	r2, r3
 8007688:	d3f6      	bcc.n	8007678 <USBH_MTP_Process+0xac>
        {
          USBH_DbgLog("storage#%d ID : %x", idx, MTP_Handle->info.storids.Storage[idx]);
        }

        MTP_Handle->current_storage_unit = 0U;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 8007690:	3308      	adds	r3, #8
 8007692:	2200      	movs	r2, #0
 8007694:	601a      	str	r2, [r3, #0]
        MTP_Handle->state = MTP_GETSTORAGEINFO;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800769c:	3318      	adds	r3, #24
 800769e:	2205      	movs	r2, #5
 80076a0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80076a2:	e062      	b.n	800776a <USBH_MTP_Process+0x19e>

    case MTP_GETSTORAGEINFO:
      status = USBH_PTP_GetStorageInfo(phost,
                                       MTP_Handle->info.storids.Storage[MTP_Handle->current_storage_unit],
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 80076aa:	3308      	adds	r3, #8
 80076ac:	681b      	ldr	r3, [r3, #0]
      status = USBH_PTP_GetStorageInfo(phost,
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4413      	add	r3, r2
 80076b8:	6899      	ldr	r1, [r3, #8]
                                       &((MTP_Handle->info.storinfo)[MTP_Handle->current_storage_unit]));
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 80076c0:	3308      	adds	r3, #8
 80076c2:	681a      	ldr	r2, [r3, #0]
      status = USBH_PTP_GetStorageInfo(phost,
 80076c4:	4613      	mov	r3, r2
 80076c6:	011b      	lsls	r3, r3, #4
 80076c8:	4413      	add	r3, r2
 80076ca:	015b      	lsls	r3, r3, #5
 80076cc:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	4413      	add	r3, r2
 80076d4:	461a      	mov	r2, r3
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f001 fa16 	bl	8008b08 <USBH_PTP_GetStorageInfo>
 80076dc:	4603      	mov	r3, r0
 80076de:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 80076e0:	7dfb      	ldrb	r3, [r7, #23]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d143      	bne.n	800776e <USBH_MTP_Process+0x1a2>
      {
        USBH_UsrLog("Volume#%lu: %s   [%s]", MTP_Handle->current_storage_unit,
                    MTP_Handle->info.storinfo[MTP_Handle->current_storage_unit].StorageDescription,
                    MTP_Handle->info.storinfo[MTP_Handle->current_storage_unit].VolumeLabel);
        if (++MTP_Handle->current_storage_unit >= MTP_Handle->info.storids.n)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 80076ec:	3308      	adds	r3, #8
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	1c5a      	adds	r2, r3, #1
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 80076f8:	3308      	adds	r3, #8
 80076fa:	601a      	str	r2, [r3, #0]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 8007702:	3308      	adds	r3, #8
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 800770c:	429a      	cmp	r2, r3
 800770e:	d32e      	bcc.n	800776e <USBH_MTP_Process+0x1a2>
        {
          MTP_Handle->state = MTP_IDLE;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007716:	3318      	adds	r3, #24
 8007718:	2200      	movs	r2, #0
 800771a:	701a      	strb	r2, [r3, #0]
          MTP_Handle->is_ready = 1U;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 8007722:	330c      	adds	r3, #12
 8007724:	2201      	movs	r2, #1
 8007726:	601a      	str	r2, [r3, #0]
          MTP_Handle->current_storage_unit = 0U;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 800772e:	3308      	adds	r3, #8
 8007730:	2200      	movs	r2, #0
 8007732:	601a      	str	r2, [r3, #0]
          MTP_Handle->params.CurrentStorageId = MTP_Handle->info.storids.Storage[0];
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f8d3 2908 	ldr.w	r2, [r3, #2312]	; 0x908
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 8007740:	3318      	adds	r3, #24
 8007742:	601a      	str	r2, [r3, #0]

          USBH_UsrLog("MTP Class initialized.");
          USBH_UsrLog("%s is default storage unit", MTP_Handle->info.storinfo[0].StorageDescription);
          phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800774a:	2102      	movs	r1, #2
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	4798      	blx	r3
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007750:	e00d      	b.n	800776e <USBH_MTP_Process+0x1a2>

    case  MTP_IDLE:
      USBH_MTP_Events(phost);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f81d 	bl	8007792 <USBH_MTP_Events>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

      status = USBH_OK;
 8007758:	2300      	movs	r3, #0
 800775a:	75fb      	strb	r3, [r7, #23]
      break;
 800775c:	e008      	b.n	8007770 <USBH_MTP_Process+0x1a4>

    default:
      break;
 800775e:	bf00      	nop
 8007760:	e006      	b.n	8007770 <USBH_MTP_Process+0x1a4>
      break;
 8007762:	bf00      	nop
 8007764:	e004      	b.n	8007770 <USBH_MTP_Process+0x1a4>
      break;
 8007766:	bf00      	nop
 8007768:	e002      	b.n	8007770 <USBH_MTP_Process+0x1a4>
      break;
 800776a:	bf00      	nop
 800776c:	e000      	b.n	8007770 <USBH_MTP_Process+0x1a4>
      break;
 800776e:	bf00      	nop
  }

  return status;
 8007770:	7dfb      	ldrb	r3, [r7, #23]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3718      	adds	r7, #24
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop

0800777c <USBH_MTP_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_SOFProcess(USBH_HandleTypeDef *phost)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <USBH_MTP_Events>:
 * @brief  Handle HID Control process
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MTP_Events(USBH_HandleTypeDef *phost)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b084      	sub	sp, #16
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800779a:	2301      	movs	r3, #1
 800779c:	73fb      	strb	r3, [r7, #15]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077a4:	69db      	ldr	r3, [r3, #28]
 80077a6:	60bb      	str	r3, [r7, #8]

  switch (MTP_Handle->events.state)
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 80077ae:	331c      	adds	r3, #28
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d002      	beq.n	80077bc <USBH_MTP_Events+0x2a>
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d027      	beq.n	800780a <USBH_MTP_Events+0x78>

      }
      break;

    default:
      break;
 80077ba:	e061      	b.n	8007880 <USBH_MTP_Events+0xee>
      if ((phost->Timer & 1U) == 0U)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80077c2:	f003 0301 	and.w	r3, r3, #1
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d157      	bne.n	800787a <USBH_MTP_Events+0xe8>
        MTP_Handle->events.timer = phost->Timer;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	f503 53ea 	add.w	r3, r3, #7488	; 0x1d40
 80077d6:	601a      	str	r2, [r3, #0]
                                  (uint8_t *)(void *) & (MTP_Handle->events.container),
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	f503 51ea 	add.w	r1, r3, #7488	; 0x1d40
 80077de:	3108      	adds	r1, #8
                                  (uint8_t)MTP_Handle->NotificationEpSize,
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 80077e6:	3316      	adds	r3, #22
 80077e8:	881b      	ldrh	r3, [r3, #0]
        USBH_InterruptReceiveData(phost,
 80077ea:	b2da      	uxtb	r2, r3
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 80077f2:	330e      	adds	r3, #14
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f002 fca6 	bl	800a148 <USBH_InterruptReceiveData>
        MTP_Handle->events.state = MTP_EVENTS_GETDATA;
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007802:	331c      	adds	r3, #28
 8007804:	2201      	movs	r2, #1
 8007806:	701a      	strb	r2, [r3, #0]
      break;
 8007808:	e037      	b.n	800787a <USBH_MTP_Events+0xe8>
      if (USBH_LL_GetURBState(phost, MTP_Handle->NotificationPipe) == USBH_URB_DONE)
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007810:	330e      	adds	r3, #14
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	4619      	mov	r1, r3
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f002 ffa8 	bl	800a76c <USBH_LL_GetURBState>
 800781c:	4603      	mov	r3, r0
 800781e:	2b01      	cmp	r3, #1
 8007820:	d102      	bne.n	8007828 <USBH_MTP_Events+0x96>
        MTP_DecodeEvent(phost);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f832 	bl	800788c <MTP_DecodeEvent>
      if ((phost->Timer - MTP_Handle->events.timer) >= MTP_Handle->events.poll)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	f503 53ea 	add.w	r3, r3, #7488	; 0x1d40
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	1ad2      	subs	r2, r2, r3
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	f503 53ea 	add.w	r3, r3, #7488	; 0x1d40
 800783e:	3304      	adds	r3, #4
 8007840:	881b      	ldrh	r3, [r3, #0]
 8007842:	429a      	cmp	r2, r3
 8007844:	d31b      	bcc.n	800787e <USBH_MTP_Events+0xec>
        MTP_Handle->events.timer = phost->Timer;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	f503 53ea 	add.w	r3, r3, #7488	; 0x1d40
 8007852:	601a      	str	r2, [r3, #0]
                                  (uint8_t *)(void *) & (MTP_Handle->events.container),
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	f503 51ea 	add.w	r1, r3, #7488	; 0x1d40
 800785a:	3108      	adds	r1, #8
                                  (uint8_t)MTP_Handle->NotificationEpSize,
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007862:	3316      	adds	r3, #22
 8007864:	881b      	ldrh	r3, [r3, #0]
        USBH_InterruptReceiveData(phost,
 8007866:	b2da      	uxtb	r2, r3
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800786e:	330e      	adds	r3, #14
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f002 fc68 	bl	800a148 <USBH_InterruptReceiveData>
      break;
 8007878:	e001      	b.n	800787e <USBH_MTP_Events+0xec>
      break;
 800787a:	bf00      	nop
 800787c:	e000      	b.n	8007880 <USBH_MTP_Events+0xee>
      break;
 800787e:	bf00      	nop
  }

  return status;
 8007880:	7bfb      	ldrb	r3, [r7, #15]
}
 8007882:	4618      	mov	r0, r3
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
	...

0800788c <MTP_DecodeEvent>:
  *         Decode device event sent by responder
  * @param  phost: Host handle
  * @retval None
  */
static void MTP_DecodeEvent(USBH_HandleTypeDef *phost)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b086      	sub	sp, #24
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800789a:	69db      	ldr	r3, [r3, #28]
 800789c:	617b      	str	r3, [r7, #20]

  uint16_t code;
  uint32_t param1;

  /* Process the event */
  code = MTP_Handle->events.container.code;
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	f503 53ea 	add.w	r3, r3, #7488	; 0x1d40
 80078a4:	330e      	adds	r3, #14
 80078a6:	881b      	ldrh	r3, [r3, #0]
 80078a8:	827b      	strh	r3, [r7, #18]
  param1 = MTP_Handle->events.container.param1;
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	f503 53ea 	add.w	r3, r3, #7488	; 0x1d40
 80078b0:	3314      	adds	r3, #20
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	60fb      	str	r3, [r7, #12]

  switch (code)
 80078b6:	8a7b      	ldrh	r3, [r7, #18]
 80078b8:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80078bc:	2b0e      	cmp	r3, #14
 80078be:	d821      	bhi.n	8007904 <MTP_DecodeEvent+0x78>
 80078c0:	a201      	add	r2, pc, #4	; (adr r2, 80078c8 <MTP_DecodeEvent+0x3c>)
 80078c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c6:	bf00      	nop
 80078c8:	08007905 	.word	0x08007905
 80078cc:	08007905 	.word	0x08007905
 80078d0:	08007905 	.word	0x08007905
 80078d4:	08007905 	.word	0x08007905
 80078d8:	08007905 	.word	0x08007905
 80078dc:	08007905 	.word	0x08007905
 80078e0:	08007905 	.word	0x08007905
 80078e4:	08007905 	.word	0x08007905
 80078e8:	08007905 	.word	0x08007905
 80078ec:	08007905 	.word	0x08007905
 80078f0:	08007905 	.word	0x08007905
 80078f4:	08007905 	.word	0x08007905
 80078f8:	08007905 	.word	0x08007905
 80078fc:	08007905 	.word	0x08007905
 8007900:	08007905 	.word	0x08007905
      USBH_DbgLog("EVT: PTP_EC_UnreportedStatus in session %u", MTP_Handle->ptp.session_id);
      break;

    default :
      USBH_DbgLog("Received unknown event in session %u", MTP_Handle->ptp.session_id);
      break;
 8007904:	bf00      	nop
  }

  USBH_MTP_EventsCallback(phost, (uint32_t)code, param1);
 8007906:	8a7b      	ldrh	r3, [r7, #18]
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	4619      	mov	r1, r3
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 f805 	bl	800791c <USBH_MTP_EventsCallback>
}
 8007912:	bf00      	nop
 8007914:	3718      	adds	r7, #24
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop

0800791c <USBH_MTP_EventsCallback>:
  * @brief  The function informs that host has received an event
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_MTP_EventsCallback(USBH_HandleTypeDef *phost, uint32_t event, uint32_t param)
{
 800791c:	b480      	push	{r7}
 800791e:	b085      	sub	sp, #20
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	607a      	str	r2, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
  UNUSED(event);
  UNUSED(param);
}
 8007928:	bf00      	nop
 800792a:	3714      	adds	r7, #20
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <USBH_PTP_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_Init(USBH_HandleTypeDef *phost)
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007942:	69db      	ldr	r3, [r3, #28]
 8007944:	60fb      	str	r3, [r7, #12]

  /* Set state to idle to be ready for operations */
  MTP_Handle->ptp.state = PTP_IDLE;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 800794c:	2200      	movs	r2, #0
 800794e:	701a      	strb	r2, [r3, #0]
  MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8007956:	3301      	adds	r3, #1
 8007958:	2201      	movs	r2, #1
 800795a:	701a      	strb	r2, [r3, #0]

  return USBH_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3714      	adds	r7, #20
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
	...

0800796c <USBH_PTP_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_Process(USBH_HandleTypeDef *phost)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b090      	sub	sp, #64	; 0x40
 8007970:	af02      	add	r7, sp, #8
 8007972:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007974:	2301      	movs	r3, #1
 8007976:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800797a:	2300      	movs	r3, #0
 800797c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007986:	69db      	ldr	r3, [r3, #28]
 8007988:	633b      	str	r3, [r7, #48]	; 0x30
  PTP_ContainerTypedef  ptp_container;
  uint32_t  len;

  switch (MTP_Handle->ptp.state)
 800798a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798c:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	2b09      	cmp	r3, #9
 8007994:	f200 825b 	bhi.w	8007e4e <USBH_PTP_Process+0x4e2>
 8007998:	a201      	add	r2, pc, #4	; (adr r2, 80079a0 <USBH_PTP_Process+0x34>)
 800799a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799e:	bf00      	nop
 80079a0:	08007e4f 	.word	0x08007e4f
 80079a4:	080079c9 	.word	0x080079c9
 80079a8:	080079fd 	.word	0x080079fd
 80079ac:	08007a97 	.word	0x08007a97
 80079b0:	08007acb 	.word	0x08007acb
 80079b4:	08007c19 	.word	0x08007c19
 80079b8:	08007c49 	.word	0x08007c49
 80079bc:	08007db5 	.word	0x08007db5
 80079c0:	08007ddb 	.word	0x08007ddb
 80079c4:	08007e41 	.word	0x08007e41
      /*Do Nothing */
      break;

    case PTP_OP_REQUEST_STATE:
      USBH_BulkSendData(phost,
                        (uint8_t *)(void *) & (MTP_Handle->ptp.op_container),
 80079c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ca:	f503 51eb 	add.w	r1, r3, #7520	; 0x1d60
 80079ce:	3104      	adds	r1, #4
                        (uint16_t)MTP_Handle->ptp.op_container.length,
 80079d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d2:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 80079d6:	3304      	adds	r3, #4
 80079d8:	681b      	ldr	r3, [r3, #0]
      USBH_BulkSendData(phost,
 80079da:	b29a      	uxth	r2, r3
 80079dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079de:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 80079e2:	330d      	adds	r3, #13
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	2001      	movs	r0, #1
 80079e8:	9000      	str	r0, [sp, #0]
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f002 fb69 	bl	800a0c2 <USBH_BulkSendData>
                        MTP_Handle->DataOutPipe,
                        1U);
      MTP_Handle->ptp.state = PTP_OP_REQUEST_WAIT_STATE;
 80079f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f2:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 80079f6:	2202      	movs	r2, #2
 80079f8:	701a      	strb	r2, [r3, #0]
      break;
 80079fa:	e231      	b.n	8007e60 <USBH_PTP_Process+0x4f4>

    case PTP_OP_REQUEST_WAIT_STATE:
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataOutPipe);
 80079fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fe:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007a02:	330d      	adds	r3, #13
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	4619      	mov	r1, r3
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f002 feaf 	bl	800a76c <USBH_LL_GetURBState>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

      if (URB_Status == USBH_URB_DONE)
 8007a14:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d127      	bne.n	8007a6c <USBH_PTP_Process+0x100>
      {
        if (MTP_Handle->ptp.flags == PTP_DP_NODATA)
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1e:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007a22:	332c      	adds	r3, #44	; 0x2c
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d105      	bne.n	8007a36 <USBH_PTP_Process+0xca>
        {
          MTP_Handle->ptp.state = PTP_RESPONSE_STATE;
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2c:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8007a30:	2207      	movs	r2, #7
 8007a32:	701a      	strb	r2, [r3, #0]
#endif
      }
      else
      {
      }
      break;
 8007a34:	e20d      	b.n	8007e52 <USBH_PTP_Process+0x4e6>
        else  if (MTP_Handle->ptp.flags == PTP_DP_SENDDATA)
 8007a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a38:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007a3c:	332c      	adds	r3, #44	; 0x2c
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d105      	bne.n	8007a50 <USBH_PTP_Process+0xe4>
          MTP_Handle->ptp.state = PTP_DATA_OUT_PHASE_STATE;
 8007a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a46:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8007a4a:	2203      	movs	r2, #3
 8007a4c:	701a      	strb	r2, [r3, #0]
      break;
 8007a4e:	e200      	b.n	8007e52 <USBH_PTP_Process+0x4e6>
        else  if (MTP_Handle->ptp.flags == PTP_DP_GETDATA)
 8007a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a52:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007a56:	332c      	adds	r3, #44	; 0x2c
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	f040 81f9 	bne.w	8007e52 <USBH_PTP_Process+0x4e6>
          MTP_Handle->ptp.state = PTP_DATA_IN_PHASE_STATE;
 8007a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a62:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8007a66:	2205      	movs	r2, #5
 8007a68:	701a      	strb	r2, [r3, #0]
      break;
 8007a6a:	e1f2      	b.n	8007e52 <USBH_PTP_Process+0x4e6>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a6c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d105      	bne.n	8007a80 <USBH_PTP_Process+0x114>
        MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 8007a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a76:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	701a      	strb	r2, [r3, #0]
      break;
 8007a7e:	e1e8      	b.n	8007e52 <USBH_PTP_Process+0x4e6>
      else if (URB_Status == USBH_URB_STALL)
 8007a80:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8007a84:	2b05      	cmp	r3, #5
 8007a86:	f040 81e4 	bne.w	8007e52 <USBH_PTP_Process+0x4e6>
        MTP_Handle->ptp.state  = PTP_ERROR;
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8c:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8007a90:	2209      	movs	r2, #9
 8007a92:	701a      	strb	r2, [r3, #0]
      break;
 8007a94:	e1dd      	b.n	8007e52 <USBH_PTP_Process+0x4e6>

    case PTP_DATA_OUT_PHASE_STATE:

      USBH_BulkSendData(phost,
 8007a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a98:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007a9c:	3330      	adds	r3, #48	; 0x30
 8007a9e:	6819      	ldr	r1, [r3, #0]
 8007aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa2:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007aa6:	3312      	adds	r3, #18
 8007aa8:	881a      	ldrh	r2, [r3, #0]
 8007aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aac:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007ab0:	330d      	adds	r3, #13
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	2001      	movs	r0, #1
 8007ab6:	9000      	str	r0, [sp, #0]
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f002 fb02 	bl	800a0c2 <USBH_BulkSendData>
                        MTP_Handle->DataOutEpSize,
                        MTP_Handle->DataOutPipe,
                        1U);


      MTP_Handle->ptp.state  = PTP_DATA_OUT_PHASE_WAIT_STATE;
 8007abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac0:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8007ac4:	2204      	movs	r2, #4
 8007ac6:	701a      	strb	r2, [r3, #0]
      break;
 8007ac8:	e1ca      	b.n	8007e60 <USBH_PTP_Process+0x4f4>

    case PTP_DATA_OUT_PHASE_WAIT_STATE:
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataOutPipe);
 8007aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007acc:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007ad0:	330d      	adds	r3, #13
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f002 fe48 	bl	800a76c <USBH_LL_GetURBState>
 8007adc:	4603      	mov	r3, r0
 8007ade:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

      if (URB_Status == USBH_URB_DONE)
 8007ae2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	f040 8081 	bne.w	8007bee <USBH_PTP_Process+0x282>
      {
        /* Adjust Data pointer and data length */
        if (MTP_Handle->ptp.data_length > MTP_Handle->DataOutEpSize)
 8007aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aee:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007af2:	3334      	adds	r3, #52	; 0x34
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af8:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007afc:	3312      	adds	r3, #18
 8007afe:	881b      	ldrh	r3, [r3, #0]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d94c      	bls.n	8007b9e <USBH_PTP_Process+0x232>
        {
          MTP_Handle->ptp.data_ptr += MTP_Handle->DataOutEpSize;
 8007b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b06:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007b0a:	3330      	adds	r3, #48	; 0x30
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b10:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007b14:	3312      	adds	r3, #18
 8007b16:	881b      	ldrh	r3, [r3, #0]
 8007b18:	441a      	add	r2, r3
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1c:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007b20:	3330      	adds	r3, #48	; 0x30
 8007b22:	601a      	str	r2, [r3, #0]
          MTP_Handle->ptp.data_length -= MTP_Handle->DataOutEpSize;
 8007b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b26:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007b2a:	3334      	adds	r3, #52	; 0x34
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b30:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007b34:	3312      	adds	r3, #18
 8007b36:	881b      	ldrh	r3, [r3, #0]
 8007b38:	1ad2      	subs	r2, r2, r3
 8007b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3c:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007b40:	3334      	adds	r3, #52	; 0x34
 8007b42:	601a      	str	r2, [r3, #0]
          MTP_Handle->ptp.data_packet += MTP_Handle->DataOutEpSize;
 8007b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b46:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007b4a:	3338      	adds	r3, #56	; 0x38
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b50:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007b54:	3312      	adds	r3, #18
 8007b56:	881b      	ldrh	r3, [r3, #0]
 8007b58:	441a      	add	r2, r3
 8007b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5c:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007b60:	3338      	adds	r3, #56	; 0x38
 8007b62:	601a      	str	r2, [r3, #0]

          if (MTP_Handle->ptp.data_packet >= PTP_USB_BULK_PAYLOAD_LEN_READ)
 8007b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b66:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007b6a:	3338      	adds	r3, #56	; 0x38
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8007b72:	d31a      	bcc.n	8007baa <USBH_PTP_Process+0x23e>
          {
            PTP_BufferFullCallback(phost);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fa1f 	bl	8007fb8 <PTP_BufferFullCallback>
            MTP_Handle->ptp.data_packet = 0U;
 8007b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7c:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007b80:	3338      	adds	r3, #56	; 0x38
 8007b82:	2200      	movs	r2, #0
 8007b84:	601a      	str	r2, [r3, #0]
            MTP_Handle->ptp.iteration++;
 8007b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b88:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007b8c:	333c      	adds	r3, #60	; 0x3c
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	1c5a      	adds	r2, r3, #1
 8007b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b94:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007b98:	333c      	adds	r3, #60	; 0x3c
 8007b9a:	601a      	str	r2, [r3, #0]
 8007b9c:	e005      	b.n	8007baa <USBH_PTP_Process+0x23e>
          }
        }
        else
        {
          MTP_Handle->ptp.data_length = 0U;
 8007b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba0:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007ba4:	3334      	adds	r3, #52	; 0x34
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	601a      	str	r2, [r3, #0]
        }

        /* More Data To be Sent */
        if (MTP_Handle->ptp.data_length > 0U)
 8007baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bac:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007bb0:	3334      	adds	r3, #52	; 0x34
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d014      	beq.n	8007be2 <USBH_PTP_Process+0x276>
        {
          USBH_BulkSendData(phost,
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bba:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007bbe:	3330      	adds	r3, #48	; 0x30
 8007bc0:	6819      	ldr	r1, [r3, #0]
 8007bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc4:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007bc8:	3312      	adds	r3, #18
 8007bca:	881a      	ldrh	r2, [r3, #0]
 8007bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bce:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007bd2:	330d      	adds	r3, #13
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	2001      	movs	r0, #1
 8007bd8:	9000      	str	r0, [sp, #0]
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f002 fa71 	bl	800a0c2 <USBH_BulkSendData>
      }
      else
      {
        /* .. */
      }
      break;
 8007be0:	e139      	b.n	8007e56 <USBH_PTP_Process+0x4ea>
          MTP_Handle->ptp.state  = PTP_RESPONSE_STATE;
 8007be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be4:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8007be8:	2207      	movs	r2, #7
 8007bea:	701a      	strb	r2, [r3, #0]
      break;
 8007bec:	e133      	b.n	8007e56 <USBH_PTP_Process+0x4ea>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007bee:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d105      	bne.n	8007c02 <USBH_PTP_Process+0x296>
        MTP_Handle->ptp.state = PTP_DATA_OUT_PHASE_STATE;
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf8:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8007bfc:	2203      	movs	r2, #3
 8007bfe:	701a      	strb	r2, [r3, #0]
      break;
 8007c00:	e129      	b.n	8007e56 <USBH_PTP_Process+0x4ea>
      else if (URB_Status == USBH_URB_STALL)
 8007c02:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8007c06:	2b05      	cmp	r3, #5
 8007c08:	f040 8125 	bne.w	8007e56 <USBH_PTP_Process+0x4ea>
        MTP_Handle->ptp.state  = PTP_ERROR;
 8007c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0e:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8007c12:	2209      	movs	r2, #9
 8007c14:	701a      	strb	r2, [r3, #0]
      break;
 8007c16:	e11e      	b.n	8007e56 <USBH_PTP_Process+0x4ea>

    case PTP_DATA_IN_PHASE_STATE:
      /* Send first packet */
      USBH_BulkReceiveData(phost,
 8007c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1a:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007c1e:	3330      	adds	r3, #48	; 0x30
 8007c20:	6819      	ldr	r1, [r3, #0]
 8007c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c24:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007c28:	3314      	adds	r3, #20
 8007c2a:	881a      	ldrh	r2, [r3, #0]
 8007c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2e:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007c32:	330c      	adds	r3, #12
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f002 fa68 	bl	800a10c <USBH_BulkReceiveData>
                           MTP_Handle->ptp.data_ptr,
                           MTP_Handle->DataInEpSize,
                           MTP_Handle->DataInPipe);

      MTP_Handle->ptp.state  = PTP_DATA_IN_PHASE_WAIT_STATE;
 8007c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3e:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8007c42:	2206      	movs	r2, #6
 8007c44:	701a      	strb	r2, [r3, #0]
      break;
 8007c46:	e10b      	b.n	8007e60 <USBH_PTP_Process+0x4f4>

    case PTP_DATA_IN_PHASE_WAIT_STATE:
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataInPipe);
 8007c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4a:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007c4e:	330c      	adds	r3, #12
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	4619      	mov	r1, r3
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f002 fd89 	bl	800a76c <USBH_LL_GetURBState>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

      if (URB_Status == USBH_URB_DONE)
 8007c60:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	f040 809b 	bne.w	8007da0 <USBH_PTP_Process+0x434>
      {
        len = USBH_LL_GetLastXferSize(phost, MTP_Handle->DataInPipe);
 8007c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6c:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007c70:	330c      	adds	r3, #12
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	4619      	mov	r1, r3
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f002 fce6 	bl	800a648 <USBH_LL_GetLastXferSize>
 8007c7c:	62f8      	str	r0, [r7, #44]	; 0x2c

        if (MTP_Handle->ptp.data_packet_counter++ == 0U)
 8007c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c80:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	1c59      	adds	r1, r3, #1
 8007c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c8a:	f502 5207 	add.w	r2, r2, #8640	; 0x21c0
 8007c8e:	6011      	str	r1, [r2, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d110      	bne.n	8007cb6 <USBH_PTP_Process+0x34a>
        {
          /* This is the first packet; so retrieve exact data length from payload */
          MTP_Handle->ptp.data_length = *(uint32_t *)(void *)(MTP_Handle->ptp.data_ptr);
 8007c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c96:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007c9a:	3330      	adds	r3, #48	; 0x30
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca2:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007ca6:	3334      	adds	r3, #52	; 0x34
 8007ca8:	601a      	str	r2, [r3, #0]
          MTP_Handle->ptp.iteration = 0U;
 8007caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cac:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007cb0:	333c      	adds	r3, #60	; 0x3c
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	601a      	str	r2, [r3, #0]
        }

        if ((len >=  MTP_Handle->DataInEpSize) && (MTP_Handle->ptp.data_length > 0U))
 8007cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb8:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007cbc:	3314      	adds	r3, #20
 8007cbe:	881b      	ldrh	r3, [r3, #0]
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d359      	bcc.n	8007d7c <USBH_PTP_Process+0x410>
 8007cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cca:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007cce:	3334      	adds	r3, #52	; 0x34
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d052      	beq.n	8007d7c <USBH_PTP_Process+0x410>
        {
          MTP_Handle->ptp.data_ptr += len;
 8007cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd8:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007cdc:	3330      	adds	r3, #48	; 0x30
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce2:	441a      	add	r2, r3
 8007ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce6:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007cea:	3330      	adds	r3, #48	; 0x30
 8007cec:	601a      	str	r2, [r3, #0]
          MTP_Handle->ptp.data_length -= len;
 8007cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf0:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007cf4:	3334      	adds	r3, #52	; 0x34
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfa:	1ad2      	subs	r2, r2, r3
 8007cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfe:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007d02:	3334      	adds	r3, #52	; 0x34
 8007d04:	601a      	str	r2, [r3, #0]
          MTP_Handle->ptp.data_packet += len;
 8007d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d08:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007d0c:	3338      	adds	r3, #56	; 0x38
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d12:	441a      	add	r2, r3
 8007d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d16:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007d1a:	3338      	adds	r3, #56	; 0x38
 8007d1c:	601a      	str	r2, [r3, #0]

          if (MTP_Handle->ptp.data_packet >= PTP_USB_BULK_PAYLOAD_LEN_READ)
 8007d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d20:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007d24:	3338      	adds	r3, #56	; 0x38
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8007d2c:	d313      	bcc.n	8007d56 <USBH_PTP_Process+0x3ea>
          {
            PTP_BufferFullCallback(phost);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f942 	bl	8007fb8 <PTP_BufferFullCallback>
            MTP_Handle->ptp.data_packet = 0U;
 8007d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d36:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007d3a:	3338      	adds	r3, #56	; 0x38
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	601a      	str	r2, [r3, #0]
            MTP_Handle->ptp.iteration++;
 8007d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d42:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007d46:	333c      	adds	r3, #60	; 0x3c
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	1c5a      	adds	r2, r3, #1
 8007d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4e:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007d52:	333c      	adds	r3, #60	; 0x3c
 8007d54:	601a      	str	r2, [r3, #0]
          }

          /* Continue receiving data*/
          USBH_BulkReceiveData(phost,
 8007d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d58:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007d5c:	3330      	adds	r3, #48	; 0x30
 8007d5e:	6819      	ldr	r1, [r3, #0]
 8007d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d62:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007d66:	3314      	adds	r3, #20
 8007d68:	881a      	ldrh	r2, [r3, #0]
 8007d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6c:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007d70:	330c      	adds	r3, #12
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f002 f9c9 	bl	800a10c <USBH_BulkReceiveData>
      }
      else
      {
        /* .. */
      }
      break;
 8007d7a:	e06e      	b.n	8007e5a <USBH_PTP_Process+0x4ee>
          MTP_Handle->ptp.data_length -= len;
 8007d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7e:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007d82:	3334      	adds	r3, #52	; 0x34
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d88:	1ad2      	subs	r2, r2, r3
 8007d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8c:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007d90:	3334      	adds	r3, #52	; 0x34
 8007d92:	601a      	str	r2, [r3, #0]
          MTP_Handle->ptp.state = PTP_RESPONSE_STATE;
 8007d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d96:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8007d9a:	2207      	movs	r2, #7
 8007d9c:	701a      	strb	r2, [r3, #0]
      break;
 8007d9e:	e05c      	b.n	8007e5a <USBH_PTP_Process+0x4ee>
      else if (URB_Status == USBH_URB_STALL)
 8007da0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8007da4:	2b05      	cmp	r3, #5
 8007da6:	d158      	bne.n	8007e5a <USBH_PTP_Process+0x4ee>
        MTP_Handle->ptp.state  = PTP_ERROR;
 8007da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007daa:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8007dae:	2209      	movs	r2, #9
 8007db0:	701a      	strb	r2, [r3, #0]
      break;
 8007db2:	e052      	b.n	8007e5a <USBH_PTP_Process+0x4ee>

    case PTP_RESPONSE_STATE:
      USBH_BulkReceiveData(phost,
                           (uint8_t *)(void *) & (MTP_Handle->ptp.resp_container),
 8007db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db6:	f503 5106 	add.w	r1, r3, #8576	; 0x2180
 8007dba:	3104      	adds	r1, #4
      USBH_BulkReceiveData(phost,
 8007dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbe:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007dc2:	330c      	adds	r3, #12
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	223f      	movs	r2, #63	; 0x3f
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f002 f99f 	bl	800a10c <USBH_BulkReceiveData>
                           PTP_USB_BULK_REQ_RESP_MAX_LEN,
                           MTP_Handle->DataInPipe);

      MTP_Handle->ptp.state  = PTP_RESPONSE_WAIT_STATE;
 8007dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd0:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8007dd4:	2208      	movs	r2, #8
 8007dd6:	701a      	strb	r2, [r3, #0]
      break;
 8007dd8:	e042      	b.n	8007e60 <USBH_PTP_Process+0x4f4>

    case PTP_RESPONSE_WAIT_STATE:
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataInPipe);
 8007dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ddc:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8007de0:	330c      	adds	r3, #12
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	4619      	mov	r1, r3
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f002 fcc0 	bl	800a76c <USBH_LL_GetURBState>
 8007dec:	4603      	mov	r3, r0
 8007dee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

      if (URB_Status == USBH_URB_DONE)
 8007df2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d118      	bne.n	8007e2c <USBH_PTP_Process+0x4c0>
      {
        USBH_PTP_GetResponse(phost, &ptp_container);
 8007dfa:	f107 0308 	add.w	r3, r7, #8
 8007dfe:	4619      	mov	r1, r3
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 f88d 	bl	8007f20 <USBH_PTP_GetResponse>

        if (ptp_container.Code == PTP_RC_OK)
 8007e06:	893b      	ldrh	r3, [r7, #8]
 8007e08:	f242 0201 	movw	r2, #8193	; 0x2001
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d103      	bne.n	8007e18 <USBH_PTP_Process+0x4ac>
        {
          status = USBH_OK;
 8007e10:	2300      	movs	r3, #0
 8007e12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007e16:	e002      	b.n	8007e1e <USBH_PTP_Process+0x4b2>
        }
        else
        {
          status = USBH_FAIL;
 8007e18:	2302      	movs	r3, #2
 8007e1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 8007e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e20:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8007e24:	3301      	adds	r3, #1
 8007e26:	2201      	movs	r2, #1
 8007e28:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        /* .. */
      }
      break;
 8007e2a:	e018      	b.n	8007e5e <USBH_PTP_Process+0x4f2>
      else if (URB_Status == USBH_URB_STALL)
 8007e2c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8007e30:	2b05      	cmp	r3, #5
 8007e32:	d114      	bne.n	8007e5e <USBH_PTP_Process+0x4f2>
        MTP_Handle->ptp.state  = PTP_ERROR;
 8007e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e36:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8007e3a:	2209      	movs	r2, #9
 8007e3c:	701a      	strb	r2, [r3, #0]
      break;
 8007e3e:	e00e      	b.n	8007e5e <USBH_PTP_Process+0x4f2>

    case PTP_ERROR:
      MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 8007e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e42:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8007e46:	3301      	adds	r3, #1
 8007e48:	2201      	movs	r2, #1
 8007e4a:	701a      	strb	r2, [r3, #0]
      break;
 8007e4c:	e008      	b.n	8007e60 <USBH_PTP_Process+0x4f4>

    default:
      break;
 8007e4e:	bf00      	nop
 8007e50:	e006      	b.n	8007e60 <USBH_PTP_Process+0x4f4>
      break;
 8007e52:	bf00      	nop
 8007e54:	e004      	b.n	8007e60 <USBH_PTP_Process+0x4f4>
      break;
 8007e56:	bf00      	nop
 8007e58:	e002      	b.n	8007e60 <USBH_PTP_Process+0x4f4>
      break;
 8007e5a:	bf00      	nop
 8007e5c:	e000      	b.n	8007e60 <USBH_PTP_Process+0x4f4>
      break;
 8007e5e:	bf00      	nop
  }
  return status;
 8007e60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3738      	adds	r7, #56	; 0x38
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <USBH_PTP_SendRequest>:
  *         Open a new session
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_SendRequest(USBH_HandleTypeDef *phost, PTP_ContainerTypedef  *req)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007e76:	2300      	movs	r3, #0
 8007e78:	73fb      	strb	r3, [r7, #15]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e80:	69db      	ldr	r3, [r3, #28]
 8007e82:	60bb      	str	r3, [r7, #8]

  /* Clear PTP Data container*/
  USBH_memset(&(MTP_Handle->ptp.op_container), 0, sizeof(PTP_OpContainerTypedef));
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	2220      	movs	r2, #32
 8007e8e:	2100      	movs	r1, #0
 8007e90:	4618      	mov	r0, r3
 8007e92:	f002 fd3b 	bl	800a90c <memset>

  /* build appropriate USB container */
  MTP_Handle->ptp.op_container.length = PTP_USB_BULK_REQ_LEN - (sizeof(uint32_t) * (5U - req->Nparam));
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e9c:	3303      	adds	r3, #3
 8007e9e:	009a      	lsls	r2, r3, #2
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8007ea6:	3304      	adds	r3, #4
 8007ea8:	601a      	str	r2, [r3, #0]
  MTP_Handle->ptp.op_container.type = PTP_USB_CONTAINER_COMMAND;
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8007eb0:	3308      	adds	r3, #8
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	801a      	strh	r2, [r3, #0]
  MTP_Handle->ptp.op_container.code = req->Code;
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	881a      	ldrh	r2, [r3, #0]
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8007ec0:	330a      	adds	r3, #10
 8007ec2:	801a      	strh	r2, [r3, #0]
  MTP_Handle->ptp.op_container.trans_id = req->Transaction_ID;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	689a      	ldr	r2, [r3, #8]
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8007ece:	330c      	adds	r3, #12
 8007ed0:	601a      	str	r2, [r3, #0]
  MTP_Handle->ptp.op_container.param1 = req->Param1;
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	68da      	ldr	r2, [r3, #12]
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8007edc:	3310      	adds	r3, #16
 8007ede:	601a      	str	r2, [r3, #0]
  MTP_Handle->ptp.op_container.param2 = req->Param2;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	691a      	ldr	r2, [r3, #16]
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8007eea:	3314      	adds	r3, #20
 8007eec:	601a      	str	r2, [r3, #0]
  MTP_Handle->ptp.op_container.param3 = req->Param3;
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	695a      	ldr	r2, [r3, #20]
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8007ef8:	3318      	adds	r3, #24
 8007efa:	601a      	str	r2, [r3, #0]
  MTP_Handle->ptp.op_container.param4 = req->Param4;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	699a      	ldr	r2, [r3, #24]
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8007f06:	331c      	adds	r3, #28
 8007f08:	601a      	str	r2, [r3, #0]
  MTP_Handle->ptp.op_container.param5 = req->Param5;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	69da      	ldr	r2, [r3, #28]
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 8007f14:	601a      	str	r2, [r3, #0]

  return status;
 8007f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3710      	adds	r7, #16
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <USBH_PTP_GetResponse>:
  *         Open a new session
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetResponse(USBH_HandleTypeDef *phost, PTP_ContainerTypedef  *resp)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b085      	sub	sp, #20
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	73fb      	strb	r3, [r7, #15]
  MTP_HandleTypeDef  *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f34:	69db      	ldr	r3, [r3, #28]
 8007f36:	60bb      	str	r3, [r7, #8]

  /* build an appropriate PTPContainer */
  resp->Code = MTP_Handle->ptp.resp_container.code;
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007f3e:	330a      	adds	r3, #10
 8007f40:	881a      	ldrh	r2, [r3, #0]
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	801a      	strh	r2, [r3, #0]
  resp->SessionID = MTP_Handle->ptp.session_id;
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007f4c:	3328      	adds	r3, #40	; 0x28
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	605a      	str	r2, [r3, #4]
  resp->Transaction_ID = MTP_Handle->ptp.resp_container.trans_id;
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007f5a:	330c      	adds	r3, #12
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	609a      	str	r2, [r3, #8]
  resp->Param1 = MTP_Handle->ptp.resp_container.param1;
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007f68:	3310      	adds	r3, #16
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	60da      	str	r2, [r3, #12]
  resp->Param2 = MTP_Handle->ptp.resp_container.param2;
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007f76:	3314      	adds	r3, #20
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	611a      	str	r2, [r3, #16]
  resp->Param3 = MTP_Handle->ptp.resp_container.param3;
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007f84:	3318      	adds	r3, #24
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	615a      	str	r2, [r3, #20]
  resp->Param4 = MTP_Handle->ptp.resp_container.param4;
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007f92:	331c      	adds	r3, #28
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	619a      	str	r2, [r3, #24]
  resp->Param5 = MTP_Handle->ptp.resp_container.param5;
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8007fa0:	3320      	adds	r3, #32
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	61da      	str	r2, [r3, #28]

  return status;
 8007fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3714      	adds	r7, #20
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
	...

08007fb8 <PTP_BufferFullCallback>:
  * @brief  The function informs user that data buffer is full
  *  @param  phost: host handle
  * @retval None
  */
static void PTP_BufferFullCallback(USBH_HandleTypeDef *phost)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fc6:	69db      	ldr	r3, [r3, #28]
 8007fc8:	60fb      	str	r3, [r7, #12]

  switch (MTP_Handle->ptp.data_container.code)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 8007fd0:	330a      	adds	r3, #10
 8007fd2:	881b      	ldrh	r3, [r3, #0]
 8007fd4:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	2b1a      	cmp	r3, #26
 8007fdc:	d874      	bhi.n	80080c8 <PTP_BufferFullCallback+0x110>
 8007fde:	a201      	add	r2, pc, #4	; (adr r2, 8007fe4 <PTP_BufferFullCallback+0x2c>)
 8007fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe4:	08008051 	.word	0x08008051
 8007fe8:	080080c9 	.word	0x080080c9
 8007fec:	080080c9 	.word	0x080080c9
 8007ff0:	080080c9 	.word	0x080080c9
 8007ff4:	080080c9 	.word	0x080080c9
 8007ff8:	080080c9 	.word	0x080080c9
 8007ffc:	080080c9 	.word	0x080080c9
 8008000:	080080c9 	.word	0x080080c9
 8008004:	0800805d 	.word	0x0800805d
 8008008:	080080c9 	.word	0x080080c9
 800800c:	080080c9 	.word	0x080080c9
 8008010:	080080c9 	.word	0x080080c9
 8008014:	080080a1 	.word	0x080080a1
 8008018:	080080c9 	.word	0x080080c9
 800801c:	080080c9 	.word	0x080080c9
 8008020:	080080c9 	.word	0x080080c9
 8008024:	080080c9 	.word	0x080080c9
 8008028:	080080c9 	.word	0x080080c9
 800802c:	080080c9 	.word	0x080080c9
 8008030:	080080c9 	.word	0x080080c9
 8008034:	080080c9 	.word	0x080080c9
 8008038:	080080c9 	.word	0x080080c9
 800803c:	080080c9 	.word	0x080080c9
 8008040:	080080c9 	.word	0x080080c9
 8008044:	080080c9 	.word	0x080080c9
 8008048:	080080c9 	.word	0x080080c9
 800804c:	0800805d 	.word	0x0800805d
  {
    case PTP_OC_GetDeviceInfo:
      PTP_DecodeDeviceInfo(phost, &(MTP_Handle->info.devinfo));
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	4619      	mov	r1, r3
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 f841 	bl	80080dc <PTP_DecodeDeviceInfo>
      break;
 800805a:	e03a      	b.n	80080d2 <PTP_BufferFullCallback+0x11a>

    case PTP_OC_GetPartialObject:
    case PTP_OC_GetObject:

      /* first packet is in the PTP data payload buffer */
      if (MTP_Handle->ptp.iteration == 0U)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8008062:	333c      	adds	r3, #60	; 0x3c
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d130      	bne.n	80080cc <PTP_BufferFullCallback+0x114>
      {
        /* copy it to object */
        USBH_memcpy(MTP_Handle->ptp.object_ptr, MTP_Handle->ptp.data_container.payload.data, PTP_USB_BULK_PAYLOAD_LEN_READ);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 8008070:	3304      	adds	r3, #4
 8008072:	6818      	ldr	r0, [r3, #0]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 800807a:	3310      	adds	r3, #16
 800807c:	f44f 727d 	mov.w	r2, #1012	; 0x3f4
 8008080:	4619      	mov	r1, r3
 8008082:	f002 fc35 	bl	800a8f0 <memcpy>

        /* next packet should be directly copied to object */
        MTP_Handle->ptp.data_ptr = (MTP_Handle->ptp.object_ptr + PTP_USB_BULK_PAYLOAD_LEN_READ);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 800808c:	3304      	adds	r3, #4
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f503 727d 	add.w	r2, r3, #1012	; 0x3f4
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 800809a:	3330      	adds	r3, #48	; 0x30
 800809c:	601a      	str	r2, [r3, #0]
      }
      break;
 800809e:	e015      	b.n	80080cc <PTP_BufferFullCallback+0x114>

    case PTP_OC_SendObject:
      /* first packet is in the PTP data payload buffer */
      if (MTP_Handle->ptp.iteration == 0U)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 80080a6:	333c      	adds	r3, #60	; 0x3c
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d110      	bne.n	80080d0 <PTP_BufferFullCallback+0x118>
      {
        /* next packet should be directly copied to object */
        MTP_Handle->ptp.data_ptr = (MTP_Handle->ptp.object_ptr + PTP_USB_BULK_PAYLOAD_LEN_READ);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 80080b4:	3304      	adds	r3, #4
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f503 727d 	add.w	r2, r3, #1012	; 0x3f4
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 80080c2:	3330      	adds	r3, #48	; 0x30
 80080c4:	601a      	str	r2, [r3, #0]
      }
      break;
 80080c6:	e003      	b.n	80080d0 <PTP_BufferFullCallback+0x118>

    default:
      break;
 80080c8:	bf00      	nop
 80080ca:	e002      	b.n	80080d2 <PTP_BufferFullCallback+0x11a>
      break;
 80080cc:	bf00      	nop
 80080ce:	e000      	b.n	80080d2 <PTP_BufferFullCallback+0x11a>
      break;
 80080d0:	bf00      	nop


  }
}
 80080d2:	bf00      	nop
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop

080080dc <PTP_DecodeDeviceInfo>:
  * @param  phost: Host handle
  * @param  dev_info: Device info structure
  * @retval None
  */
static void PTP_DecodeDeviceInfo(USBH_HandleTypeDef *phost, PTP_DeviceInfoTypedef *dev_info)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b086      	sub	sp, #24
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080ec:	69db      	ldr	r3, [r3, #28]
 80080ee:	617b      	str	r3, [r7, #20]
  uint8_t *data = MTP_Handle->ptp.data_container.payload.data;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 80080f6:	3310      	adds	r3, #16
 80080f8:	613b      	str	r3, [r7, #16]

  /* Max device info is PTP_USB_BULK_HS_MAX_PACKET_LEN_READ */
  USBH_DbgLog(" MTP device info size exceeds internal buffer size.\
               only available data are decoded.");

  if (MTP_Handle->ptp.iteration == 0U)
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8008100:	333c      	adds	r3, #60	; 0x3c
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	f040 80fc 	bne.w	8008302 <PTP_DecodeDeviceInfo+0x226>
  {
    dev_info->StandardVersion = LE16(&data[PTP_di_StandardVersion]);
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	b29a      	uxth	r2, r3
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	3301      	adds	r3, #1
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	b29b      	uxth	r3, r3
 8008118:	021b      	lsls	r3, r3, #8
 800811a:	b29b      	uxth	r3, r3
 800811c:	4313      	orrs	r3, r2
 800811e:	b29a      	uxth	r2, r3
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	801a      	strh	r2, [r3, #0]
    dev_info->VendorExtensionID = LE32(&data[PTP_di_VendorExtensionID]);
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	3302      	adds	r3, #2
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	461a      	mov	r2, r3
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	3303      	adds	r3, #3
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	021b      	lsls	r3, r3, #8
 8008134:	431a      	orrs	r2, r3
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	3304      	adds	r3, #4
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	041b      	lsls	r3, r3, #16
 800813e:	431a      	orrs	r2, r3
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	3305      	adds	r3, #5
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	061b      	lsls	r3, r3, #24
 8008148:	431a      	orrs	r2, r3
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	605a      	str	r2, [r3, #4]
    dev_info->VendorExtensionVersion = LE16(&data[PTP_di_VendorExtensionVersion]);
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	3306      	adds	r3, #6
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	b29a      	uxth	r2, r3
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	3307      	adds	r3, #7
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	b29b      	uxth	r3, r3
 800815e:	021b      	lsls	r3, r3, #8
 8008160:	b29b      	uxth	r3, r3
 8008162:	4313      	orrs	r3, r2
 8008164:	b29a      	uxth	r2, r3
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	811a      	strh	r2, [r3, #8]
    PTP_GetString(dev_info->VendorExtensionDesc, &data[PTP_di_VendorExtensionDesc], &len);
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	f103 000a 	add.w	r0, r3, #10
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	3308      	adds	r3, #8
 8008174:	f107 020a 	add.w	r2, r7, #10
 8008178:	4619      	mov	r1, r3
 800817a:	f000 fa9e 	bl	80086ba <PTP_GetString>

    totallen = len * 2U + 1U;
 800817e:	897b      	ldrh	r3, [r7, #10]
 8008180:	005b      	lsls	r3, r3, #1
 8008182:	3301      	adds	r3, #1
 8008184:	60fb      	str	r3, [r7, #12]
    dev_info->FunctionalMode = LE16(&data[PTP_di_FunctionalMode + totallen]);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	3308      	adds	r3, #8
 800818a:	693a      	ldr	r2, [r7, #16]
 800818c:	4413      	add	r3, r2
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	b29a      	uxth	r2, r3
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	3309      	adds	r3, #9
 8008196:	6939      	ldr	r1, [r7, #16]
 8008198:	440b      	add	r3, r1
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	b29b      	uxth	r3, r3
 800819e:	021b      	lsls	r3, r3, #8
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	4313      	orrs	r3, r2
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
    dev_info->OperationsSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->OperationsSupported,
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	f503 7088 	add.w	r0, r3, #272	; 0x110
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	330a      	adds	r3, #10
 80081b6:	461a      	mov	r2, r3
 80081b8:	6939      	ldr	r1, [r7, #16]
 80081ba:	f000 faad 	bl	8008718 <PTP_GetArray16>
 80081be:	4602      	mov	r2, r0
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                       data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + dev_info->OperationsSupported_len * sizeof(uint16_t) + sizeof(uint32_t);
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80081cc:	005a      	lsls	r2, r3, #1
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	4413      	add	r3, r2
 80081d2:	3304      	adds	r3, #4
 80081d4:	60fb      	str	r3, [r7, #12]
    dev_info->EventsSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->EventsSupported,
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	f503 70ee 	add.w	r0, r3, #476	; 0x1dc
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	330a      	adds	r3, #10
 80081e0:	461a      	mov	r2, r3
 80081e2:	6939      	ldr	r1, [r7, #16]
 80081e4:	f000 fa98 	bl	8008718 <PTP_GetArray16>
 80081e8:	4602      	mov	r2, r0
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
                                                   data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + dev_info->EventsSupported_len * sizeof(uint16_t) + sizeof(uint32_t);
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 80081f6:	005a      	lsls	r2, r3, #1
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	4413      	add	r3, r2
 80081fc:	3304      	adds	r3, #4
 80081fe:	60fb      	str	r3, [r7, #12]
    dev_info->DevicePropertiesSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->DevicePropertiesSupported,
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	f503 702a 	add.w	r0, r3, #680	; 0x2a8
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	330a      	adds	r3, #10
 800820a:	461a      	mov	r2, r3
 800820c:	6939      	ldr	r1, [r7, #16]
 800820e:	f000 fa83 	bl	8008718 <PTP_GetArray16>
 8008212:	4602      	mov	r2, r0
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
                                                             data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + dev_info->DevicePropertiesSupported_len * sizeof(uint16_t) + sizeof(uint32_t);
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008220:	005a      	lsls	r2, r3, #1
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	4413      	add	r3, r2
 8008226:	3304      	adds	r3, #4
 8008228:	60fb      	str	r3, [r7, #12]

    dev_info->CaptureFormats_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->CaptureFormats,
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	f503 705d 	add.w	r0, r3, #884	; 0x374
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	330a      	adds	r3, #10
 8008234:	461a      	mov	r2, r3
 8008236:	6939      	ldr	r1, [r7, #16]
 8008238:	f000 fa6e 	bl	8008718 <PTP_GetArray16>
 800823c:	4602      	mov	r2, r0
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
                                                  data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + dev_info->CaptureFormats_len * sizeof(uint16_t) + sizeof(uint32_t);
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
 800824a:	005a      	lsls	r2, r3, #1
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	4413      	add	r3, r2
 8008250:	3304      	adds	r3, #4
 8008252:	60fb      	str	r3, [r7, #12]
    dev_info->ImageFormats_len =  PTP_GetArray16((uint16_t *)(void *)&dev_info->ImageFormats,
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	f503 6088 	add.w	r0, r3, #1088	; 0x440
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	330a      	adds	r3, #10
 800825e:	461a      	mov	r2, r3
 8008260:	6939      	ldr	r1, [r7, #16]
 8008262:	f000 fa59 	bl	8008718 <PTP_GetArray16>
 8008266:	4602      	mov	r2, r0
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
                                                 data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + dev_info->ImageFormats_len * sizeof(uint16_t) + sizeof(uint32_t);
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 8008274:	005a      	lsls	r2, r3, #1
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	4413      	add	r3, r2
 800827a:	3304      	adds	r3, #4
 800827c:	60fb      	str	r3, [r7, #12]
    PTP_GetString(dev_info->Manufacturer, &data[PTP_di_OperationsSupported + totallen], &len);
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	f503 60a1 	add.w	r0, r3, #1288	; 0x508
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	330a      	adds	r3, #10
 8008288:	693a      	ldr	r2, [r7, #16]
 800828a:	4413      	add	r3, r2
 800828c:	f107 020a 	add.w	r2, r7, #10
 8008290:	4619      	mov	r1, r3
 8008292:	f000 fa12 	bl	80086ba <PTP_GetString>

    totallen += len * 2U + 1U;
 8008296:	897b      	ldrh	r3, [r7, #10]
 8008298:	005a      	lsls	r2, r3, #1
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	4413      	add	r3, r2
 800829e:	3301      	adds	r3, #1
 80082a0:	60fb      	str	r3, [r7, #12]
    PTP_GetString(dev_info->Model, &data[PTP_di_OperationsSupported + totallen], &len);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	f203 6007 	addw	r0, r3, #1543	; 0x607
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	330a      	adds	r3, #10
 80082ac:	693a      	ldr	r2, [r7, #16]
 80082ae:	4413      	add	r3, r2
 80082b0:	f107 020a 	add.w	r2, r7, #10
 80082b4:	4619      	mov	r1, r3
 80082b6:	f000 fa00 	bl	80086ba <PTP_GetString>

    totallen += len * 2U + 1U;
 80082ba:	897b      	ldrh	r3, [r7, #10]
 80082bc:	005a      	lsls	r2, r3, #1
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	4413      	add	r3, r2
 80082c2:	3301      	adds	r3, #1
 80082c4:	60fb      	str	r3, [r7, #12]
    PTP_GetString(dev_info->DeviceVersion, &data[PTP_di_OperationsSupported + totallen], &len);
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	f203 7006 	addw	r0, r3, #1798	; 0x706
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	330a      	adds	r3, #10
 80082d0:	693a      	ldr	r2, [r7, #16]
 80082d2:	4413      	add	r3, r2
 80082d4:	f107 020a 	add.w	r2, r7, #10
 80082d8:	4619      	mov	r1, r3
 80082da:	f000 f9ee 	bl	80086ba <PTP_GetString>

    totallen += len * 2U + 1U;
 80082de:	897b      	ldrh	r3, [r7, #10]
 80082e0:	005a      	lsls	r2, r3, #1
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	4413      	add	r3, r2
 80082e6:	3301      	adds	r3, #1
 80082e8:	60fb      	str	r3, [r7, #12]
    PTP_GetString(dev_info->SerialNumber, &data[PTP_di_OperationsSupported + totallen], &len);
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	f603 0005 	addw	r0, r3, #2053	; 0x805
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	330a      	adds	r3, #10
 80082f4:	693a      	ldr	r2, [r7, #16]
 80082f6:	4413      	add	r3, r2
 80082f8:	f107 020a 	add.w	r2, r7, #10
 80082fc:	4619      	mov	r1, r3
 80082fe:	f000 f9dc 	bl	80086ba <PTP_GetString>
  }
}
 8008302:	bf00      	nop
 8008304:	3718      	adds	r7, #24
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <PTP_GetStorageIDs>:
  * @param  phost: Host handle
  * @param  stor_ids: Storage IDsstructure
  * @retval None
  */
static void PTP_GetStorageIDs(USBH_HandleTypeDef *phost, PTP_StorageIDsTypedef *stor_ids)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b084      	sub	sp, #16
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
 8008312:	6039      	str	r1, [r7, #0]
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800831a:	69db      	ldr	r3, [r3, #28]
 800831c:	60fb      	str	r3, [r7, #12]
  uint8_t *data = MTP_Handle->ptp.data_container.payload.data;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 8008324:	3310      	adds	r3, #16
 8008326:	60bb      	str	r3, [r7, #8]

  stor_ids->n = PTP_GetArray32(stor_ids->Storage, data, 0U);
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	3304      	adds	r3, #4
 800832c:	2200      	movs	r2, #0
 800832e:	68b9      	ldr	r1, [r7, #8]
 8008330:	4618      	mov	r0, r3
 8008332:	f000 fa32 	bl	800879a <PTP_GetArray32>
 8008336:	4602      	mov	r2, r0
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	601a      	str	r2, [r3, #0]
}
 800833c:	bf00      	nop
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <PTP_GetStorageInfo>:
  * @param  phost: Host handle
  * @param  stor_ids: Storage IDsstructure
  * @retval None
  */
static void PTP_GetStorageInfo(USBH_HandleTypeDef *phost, uint32_t storage_id, PTP_StorageInfoTypedef *stor_info)
{
 8008344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008348:	b0a4      	sub	sp, #144	; 0x90
 800834a:	af00      	add	r7, sp, #0
 800834c:	67f8      	str	r0, [r7, #124]	; 0x7c
 800834e:	67b9      	str	r1, [r7, #120]	; 0x78
 8008350:	677a      	str	r2, [r7, #116]	; 0x74
  /* Prevent unused argument(s) compilation warning */
  UNUSED(storage_id);

  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8008352:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008354:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008358:	69db      	ldr	r3, [r3, #28]
 800835a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint8_t *data = MTP_Handle->ptp.data_container.payload.data;
 800835e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008362:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 8008366:	3310      	adds	r3, #16
 8008368:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint16_t len;

  stor_info->StorageType = LE16(&data[PTP_si_StorageType]);
 800836c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	b29a      	uxth	r2, r3
 8008374:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008378:	3301      	adds	r3, #1
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	b29b      	uxth	r3, r3
 800837e:	021b      	lsls	r3, r3, #8
 8008380:	b29b      	uxth	r3, r3
 8008382:	4313      	orrs	r3, r2
 8008384:	b29b      	uxth	r3, r3
 8008386:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008388:	8013      	strh	r3, [r2, #0]
  stor_info->FilesystemType = LE16(&data[PTP_si_FilesystemType]);
 800838a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800838e:	3302      	adds	r3, #2
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	b29a      	uxth	r2, r3
 8008394:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008398:	3303      	adds	r3, #3
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	b29b      	uxth	r3, r3
 800839e:	021b      	lsls	r3, r3, #8
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	4313      	orrs	r3, r2
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80083a8:	8053      	strh	r3, [r2, #2]
  stor_info->AccessCapability = LE16(&data[PTP_si_AccessCapability]);
 80083aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80083ae:	3304      	adds	r3, #4
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80083b8:	3305      	adds	r3, #5
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	b29b      	uxth	r3, r3
 80083be:	021b      	lsls	r3, r3, #8
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	4313      	orrs	r3, r2
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80083c8:	8093      	strh	r3, [r2, #4]
  stor_info->MaxCapability = LE64(&data[PTP_si_MaxCapability]);
 80083ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80083ce:	3306      	adds	r3, #6
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	b2dc      	uxtb	r4, r3
 80083d4:	f04f 0500 	mov.w	r5, #0
 80083d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80083dc:	3307      	adds	r3, #7
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	b2da      	uxtb	r2, r3
 80083e2:	f04f 0300 	mov.w	r3, #0
 80083e6:	f04f 0000 	mov.w	r0, #0
 80083ea:	f04f 0100 	mov.w	r1, #0
 80083ee:	0219      	lsls	r1, r3, #8
 80083f0:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80083f4:	0210      	lsls	r0, r2, #8
 80083f6:	ea44 0a00 	orr.w	sl, r4, r0
 80083fa:	ea45 0b01 	orr.w	fp, r5, r1
 80083fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008402:	3308      	adds	r3, #8
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	b2da      	uxtb	r2, r3
 8008408:	f04f 0300 	mov.w	r3, #0
 800840c:	f04f 0000 	mov.w	r0, #0
 8008410:	f04f 0100 	mov.w	r1, #0
 8008414:	0419      	lsls	r1, r3, #16
 8008416:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 800841a:	0410      	lsls	r0, r2, #16
 800841c:	ea4a 0300 	orr.w	r3, sl, r0
 8008420:	66bb      	str	r3, [r7, #104]	; 0x68
 8008422:	ea4b 0301 	orr.w	r3, fp, r1
 8008426:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008428:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800842c:	3309      	adds	r3, #9
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	b2da      	uxtb	r2, r3
 8008432:	f04f 0300 	mov.w	r3, #0
 8008436:	ea4f 2912 	mov.w	r9, r2, lsr #8
 800843a:	ea4f 6802 	mov.w	r8, r2, lsl #24
 800843e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8008442:	460b      	mov	r3, r1
 8008444:	ea43 0308 	orr.w	r3, r3, r8
 8008448:	663b      	str	r3, [r7, #96]	; 0x60
 800844a:	4613      	mov	r3, r2
 800844c:	ea43 0309 	orr.w	r3, r3, r9
 8008450:	667b      	str	r3, [r7, #100]	; 0x64
 8008452:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008456:	330a      	adds	r3, #10
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	b2da      	uxtb	r2, r3
 800845c:	f04f 0300 	mov.w	r3, #0
 8008460:	f04f 0000 	mov.w	r0, #0
 8008464:	f04f 0100 	mov.w	r1, #0
 8008468:	0011      	movs	r1, r2
 800846a:	2000      	movs	r0, #0
 800846c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8008470:	4623      	mov	r3, r4
 8008472:	4303      	orrs	r3, r0
 8008474:	65bb      	str	r3, [r7, #88]	; 0x58
 8008476:	462b      	mov	r3, r5
 8008478:	430b      	orrs	r3, r1
 800847a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800847c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008480:	330b      	adds	r3, #11
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	b2da      	uxtb	r2, r3
 8008486:	f04f 0300 	mov.w	r3, #0
 800848a:	f04f 0000 	mov.w	r0, #0
 800848e:	f04f 0100 	mov.w	r1, #0
 8008492:	0211      	lsls	r1, r2, #8
 8008494:	2000      	movs	r0, #0
 8008496:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800849a:	4623      	mov	r3, r4
 800849c:	4303      	orrs	r3, r0
 800849e:	653b      	str	r3, [r7, #80]	; 0x50
 80084a0:	462b      	mov	r3, r5
 80084a2:	430b      	orrs	r3, r1
 80084a4:	657b      	str	r3, [r7, #84]	; 0x54
 80084a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084aa:	330c      	adds	r3, #12
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	b2da      	uxtb	r2, r3
 80084b0:	f04f 0300 	mov.w	r3, #0
 80084b4:	f04f 0000 	mov.w	r0, #0
 80084b8:	f04f 0100 	mov.w	r1, #0
 80084bc:	0411      	lsls	r1, r2, #16
 80084be:	2000      	movs	r0, #0
 80084c0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80084c4:	4623      	mov	r3, r4
 80084c6:	4303      	orrs	r3, r0
 80084c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80084ca:	462b      	mov	r3, r5
 80084cc:	430b      	orrs	r3, r1
 80084ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084d4:	330d      	adds	r3, #13
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	b2da      	uxtb	r2, r3
 80084da:	f04f 0300 	mov.w	r3, #0
 80084de:	f04f 0000 	mov.w	r0, #0
 80084e2:	f04f 0100 	mov.w	r1, #0
 80084e6:	0611      	lsls	r1, r2, #24
 80084e8:	2000      	movs	r0, #0
 80084ea:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80084ee:	4623      	mov	r3, r4
 80084f0:	4303      	orrs	r3, r0
 80084f2:	643b      	str	r3, [r7, #64]	; 0x40
 80084f4:	462b      	mov	r3, r5
 80084f6:	430b      	orrs	r3, r1
 80084f8:	647b      	str	r3, [r7, #68]	; 0x44
 80084fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084fc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008500:	e9c3 1202 	strd	r1, r2, [r3, #8]
  stor_info->FreeSpaceInBytes = LE64(&data[PTP_si_FreeSpaceInBytes]);
 8008504:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008508:	330e      	adds	r3, #14
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	b2dc      	uxtb	r4, r3
 800850e:	f04f 0500 	mov.w	r5, #0
 8008512:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008516:	330f      	adds	r3, #15
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	b2da      	uxtb	r2, r3
 800851c:	f04f 0300 	mov.w	r3, #0
 8008520:	f04f 0000 	mov.w	r0, #0
 8008524:	f04f 0100 	mov.w	r1, #0
 8008528:	0219      	lsls	r1, r3, #8
 800852a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800852e:	0210      	lsls	r0, r2, #8
 8008530:	ea44 0300 	orr.w	r3, r4, r0
 8008534:	63bb      	str	r3, [r7, #56]	; 0x38
 8008536:	ea45 0301 	orr.w	r3, r5, r1
 800853a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800853c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008540:	3310      	adds	r3, #16
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	b2da      	uxtb	r2, r3
 8008546:	f04f 0300 	mov.w	r3, #0
 800854a:	f04f 0000 	mov.w	r0, #0
 800854e:	f04f 0100 	mov.w	r1, #0
 8008552:	0419      	lsls	r1, r3, #16
 8008554:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8008558:	0410      	lsls	r0, r2, #16
 800855a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800855e:	4623      	mov	r3, r4
 8008560:	4303      	orrs	r3, r0
 8008562:	633b      	str	r3, [r7, #48]	; 0x30
 8008564:	462b      	mov	r3, r5
 8008566:	430b      	orrs	r3, r1
 8008568:	637b      	str	r3, [r7, #52]	; 0x34
 800856a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800856e:	3311      	adds	r3, #17
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	b2da      	uxtb	r2, r3
 8008574:	f04f 0300 	mov.w	r3, #0
 8008578:	0a11      	lsrs	r1, r2, #8
 800857a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800857c:	0613      	lsls	r3, r2, #24
 800857e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008580:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008584:	4623      	mov	r3, r4
 8008586:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800858a:	4602      	mov	r2, r0
 800858c:	4313      	orrs	r3, r2
 800858e:	623b      	str	r3, [r7, #32]
 8008590:	462b      	mov	r3, r5
 8008592:	460a      	mov	r2, r1
 8008594:	4313      	orrs	r3, r2
 8008596:	627b      	str	r3, [r7, #36]	; 0x24
 8008598:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800859c:	3312      	adds	r3, #18
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	b2d8      	uxtb	r0, r3
 80085a2:	f04f 0100 	mov.w	r1, #0
 80085a6:	f04f 0200 	mov.w	r2, #0
 80085aa:	f04f 0300 	mov.w	r3, #0
 80085ae:	0003      	movs	r3, r0
 80085b0:	2200      	movs	r2, #0
 80085b2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80085b6:	4621      	mov	r1, r4
 80085b8:	4311      	orrs	r1, r2
 80085ba:	61b9      	str	r1, [r7, #24]
 80085bc:	4629      	mov	r1, r5
 80085be:	4319      	orrs	r1, r3
 80085c0:	61f9      	str	r1, [r7, #28]
 80085c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80085c6:	3313      	adds	r3, #19
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	b2d8      	uxtb	r0, r3
 80085cc:	f04f 0100 	mov.w	r1, #0
 80085d0:	f04f 0200 	mov.w	r2, #0
 80085d4:	f04f 0300 	mov.w	r3, #0
 80085d8:	0203      	lsls	r3, r0, #8
 80085da:	2200      	movs	r2, #0
 80085dc:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80085e0:	4621      	mov	r1, r4
 80085e2:	4311      	orrs	r1, r2
 80085e4:	6139      	str	r1, [r7, #16]
 80085e6:	4629      	mov	r1, r5
 80085e8:	4319      	orrs	r1, r3
 80085ea:	6179      	str	r1, [r7, #20]
 80085ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80085f0:	3314      	adds	r3, #20
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	b2d8      	uxtb	r0, r3
 80085f6:	f04f 0100 	mov.w	r1, #0
 80085fa:	f04f 0200 	mov.w	r2, #0
 80085fe:	f04f 0300 	mov.w	r3, #0
 8008602:	0403      	lsls	r3, r0, #16
 8008604:	2200      	movs	r2, #0
 8008606:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800860a:	4621      	mov	r1, r4
 800860c:	4311      	orrs	r1, r2
 800860e:	60b9      	str	r1, [r7, #8]
 8008610:	4629      	mov	r1, r5
 8008612:	4319      	orrs	r1, r3
 8008614:	60f9      	str	r1, [r7, #12]
 8008616:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800861a:	3315      	adds	r3, #21
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	b2d8      	uxtb	r0, r3
 8008620:	f04f 0100 	mov.w	r1, #0
 8008624:	f04f 0200 	mov.w	r2, #0
 8008628:	f04f 0300 	mov.w	r3, #0
 800862c:	0603      	lsls	r3, r0, #24
 800862e:	2200      	movs	r2, #0
 8008630:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008634:	4621      	mov	r1, r4
 8008636:	4311      	orrs	r1, r2
 8008638:	6039      	str	r1, [r7, #0]
 800863a:	4629      	mov	r1, r5
 800863c:	4319      	orrs	r1, r3
 800863e:	6079      	str	r1, [r7, #4]
 8008640:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008642:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008646:	e9c3 1204 	strd	r1, r2, [r3, #16]
  stor_info->FreeSpaceInImages = LE32(&data[PTP_si_FreeSpaceInImages]);
 800864a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800864e:	3316      	adds	r3, #22
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	461a      	mov	r2, r3
 8008654:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008658:	3317      	adds	r3, #23
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	021b      	lsls	r3, r3, #8
 800865e:	431a      	orrs	r2, r3
 8008660:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008664:	3318      	adds	r3, #24
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	041b      	lsls	r3, r3, #16
 800866a:	431a      	orrs	r2, r3
 800866c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008670:	3319      	adds	r3, #25
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	061b      	lsls	r3, r3, #24
 8008676:	431a      	orrs	r2, r3
 8008678:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800867a:	619a      	str	r2, [r3, #24]

  PTP_GetString(stor_info->StorageDescription, &data[PTP_si_StorageDescription], &len);
 800867c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800867e:	f103 001c 	add.w	r0, r3, #28
 8008682:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008686:	331a      	adds	r3, #26
 8008688:	f107 0286 	add.w	r2, r7, #134	; 0x86
 800868c:	4619      	mov	r1, r3
 800868e:	f000 f814 	bl	80086ba <PTP_GetString>
  PTP_GetString(stor_info->VolumeLabel, &data[PTP_si_StorageDescription + len * 2U + 1U], &len);
 8008692:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008694:	f203 101b 	addw	r0, r3, #283	; 0x11b
 8008698:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800869c:	005b      	lsls	r3, r3, #1
 800869e:	331b      	adds	r3, #27
 80086a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80086a4:	4413      	add	r3, r2
 80086a6:	f107 0286 	add.w	r2, r7, #134	; 0x86
 80086aa:	4619      	mov	r1, r3
 80086ac:	f000 f805 	bl	80086ba <PTP_GetString>
}
 80086b0:	bf00      	nop
 80086b2:	3790      	adds	r7, #144	; 0x90
 80086b4:	46bd      	mov	sp, r7
 80086b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080086ba <PTP_GetString>:
  * @param  str: ascii string
  * @param  data: Device info structure
  * @retval None
  */
static void PTP_GetString(uint8_t *str, uint8_t *data, uint16_t *len)
{
 80086ba:	b480      	push	{r7}
 80086bc:	b087      	sub	sp, #28
 80086be:	af00      	add	r7, sp, #0
 80086c0:	60f8      	str	r0, [r7, #12]
 80086c2:	60b9      	str	r1, [r7, #8]
 80086c4:	607a      	str	r2, [r7, #4]
  uint16_t strlength;
  uint16_t idx;

  *len = data[0];
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	801a      	strh	r2, [r3, #0]
  strlength = (uint16_t)(2U * (uint32_t)data[0]);
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	005b      	lsls	r3, r3, #1
 80086d8:	82bb      	strh	r3, [r7, #20]
  data ++; /* Adjust the offset ignoring the String Len */
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	3301      	adds	r3, #1
 80086de:	60bb      	str	r3, [r7, #8]

  for (idx = 0U; idx < strlength; idx += 2U)
 80086e0:	2300      	movs	r3, #0
 80086e2:	82fb      	strh	r3, [r7, #22]
 80086e4:	e00b      	b.n	80086fe <PTP_GetString+0x44>
  {
    /* Copy Only the string and ignore the UNICODE ID, hence add the src */
    *str = data[idx];
 80086e6:	8afb      	ldrh	r3, [r7, #22]
 80086e8:	68ba      	ldr	r2, [r7, #8]
 80086ea:	4413      	add	r3, r2
 80086ec:	781a      	ldrb	r2, [r3, #0]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	701a      	strb	r2, [r3, #0]
    str++;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	3301      	adds	r3, #1
 80086f6:	60fb      	str	r3, [r7, #12]
  for (idx = 0U; idx < strlength; idx += 2U)
 80086f8:	8afb      	ldrh	r3, [r7, #22]
 80086fa:	3302      	adds	r3, #2
 80086fc:	82fb      	strh	r3, [r7, #22]
 80086fe:	8afa      	ldrh	r2, [r7, #22]
 8008700:	8abb      	ldrh	r3, [r7, #20]
 8008702:	429a      	cmp	r2, r3
 8008704:	d3ef      	bcc.n	80086e6 <PTP_GetString+0x2c>
  }
  *str = 0U; /* mark end of string */
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2200      	movs	r2, #0
 800870a:	701a      	strb	r2, [r3, #0]
}
 800870c:	bf00      	nop
 800870e:	371c      	adds	r7, #28
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <PTP_GetArray16>:
  * @param  data: Device info structure
  * @retval None
  */

static uint32_t PTP_GetArray16(uint16_t *array, uint8_t *data, uint32_t offset)
{
 8008718:	b480      	push	{r7}
 800871a:	b087      	sub	sp, #28
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
  uint32_t size, idx = 0U;
 8008724:	2300      	movs	r3, #0
 8008726:	617b      	str	r3, [r7, #20]

  size = LE32(&data[offset]);
 8008728:	68ba      	ldr	r2, [r7, #8]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4413      	add	r3, r2
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	4619      	mov	r1, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	3301      	adds	r3, #1
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	4413      	add	r3, r2
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	021b      	lsls	r3, r3, #8
 800873e:	ea41 0203 	orr.w	r2, r1, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	3302      	adds	r3, #2
 8008746:	68b9      	ldr	r1, [r7, #8]
 8008748:	440b      	add	r3, r1
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	041b      	lsls	r3, r3, #16
 800874e:	431a      	orrs	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	3303      	adds	r3, #3
 8008754:	68b9      	ldr	r1, [r7, #8]
 8008756:	440b      	add	r3, r1
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	061b      	lsls	r3, r3, #24
 800875c:	4313      	orrs	r3, r2
 800875e:	613b      	str	r3, [r7, #16]
  while (size > idx)
 8008760:	e010      	b.n	8008784 <PTP_GetArray16+0x6c>
  {
    array[idx] = (uint16_t)data[offset + (sizeof(uint16_t) * (idx + 2U))];
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	3302      	adds	r3, #2
 8008766:	005a      	lsls	r2, r3, #1
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4413      	add	r3, r2
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	4413      	add	r3, r2
 8008770:	7819      	ldrb	r1, [r3, #0]
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	005b      	lsls	r3, r3, #1
 8008776:	68fa      	ldr	r2, [r7, #12]
 8008778:	4413      	add	r3, r2
 800877a:	b28a      	uxth	r2, r1
 800877c:	801a      	strh	r2, [r3, #0]
    idx++;
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	3301      	adds	r3, #1
 8008782:	617b      	str	r3, [r7, #20]
  while (size > idx)
 8008784:	693a      	ldr	r2, [r7, #16]
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	429a      	cmp	r2, r3
 800878a:	d8ea      	bhi.n	8008762 <PTP_GetArray16+0x4a>
  }
  return size;
 800878c:	693b      	ldr	r3, [r7, #16]
}
 800878e:	4618      	mov	r0, r3
 8008790:	371c      	adds	r7, #28
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <PTP_GetArray32>:
  * @param  data: Device info structure
  * @retval None
  */

static uint32_t PTP_GetArray32(uint32_t *array, uint8_t *data, uint32_t offset)
{
 800879a:	b480      	push	{r7}
 800879c:	b087      	sub	sp, #28
 800879e:	af00      	add	r7, sp, #0
 80087a0:	60f8      	str	r0, [r7, #12]
 80087a2:	60b9      	str	r1, [r7, #8]
 80087a4:	607a      	str	r2, [r7, #4]
  uint32_t size, idx = 0U;
 80087a6:	2300      	movs	r3, #0
 80087a8:	617b      	str	r3, [r7, #20]

  size = LE32(&data[offset]);
 80087aa:	68ba      	ldr	r2, [r7, #8]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4413      	add	r3, r2
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	4619      	mov	r1, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	3301      	adds	r3, #1
 80087b8:	68ba      	ldr	r2, [r7, #8]
 80087ba:	4413      	add	r3, r2
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	021b      	lsls	r3, r3, #8
 80087c0:	ea41 0203 	orr.w	r2, r1, r3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	3302      	adds	r3, #2
 80087c8:	68b9      	ldr	r1, [r7, #8]
 80087ca:	440b      	add	r3, r1
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	041b      	lsls	r3, r3, #16
 80087d0:	431a      	orrs	r2, r3
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	3303      	adds	r3, #3
 80087d6:	68b9      	ldr	r1, [r7, #8]
 80087d8:	440b      	add	r3, r1
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	061b      	lsls	r3, r3, #24
 80087de:	4313      	orrs	r3, r2
 80087e0:	613b      	str	r3, [r7, #16]
  while (size > idx)
 80087e2:	e033      	b.n	800884c <PTP_GetArray32+0xb2>
  {
    array[idx] = LE32(&data[offset + (sizeof(uint32_t) * (idx + 1U))]);
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	3301      	adds	r3, #1
 80087e8:	009a      	lsls	r2, r3, #2
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4413      	add	r3, r2
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	4413      	add	r3, r2
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	4619      	mov	r1, r3
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	3301      	adds	r3, #1
 80087fa:	009a      	lsls	r2, r3, #2
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4413      	add	r3, r2
 8008800:	3301      	adds	r3, #1
 8008802:	68ba      	ldr	r2, [r7, #8]
 8008804:	4413      	add	r3, r2
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	021b      	lsls	r3, r3, #8
 800880a:	ea41 0203 	orr.w	r2, r1, r3
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	3301      	adds	r3, #1
 8008812:	0099      	lsls	r1, r3, #2
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	440b      	add	r3, r1
 8008818:	3302      	adds	r3, #2
 800881a:	68b9      	ldr	r1, [r7, #8]
 800881c:	440b      	add	r3, r1
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	041b      	lsls	r3, r3, #16
 8008822:	ea42 0103 	orr.w	r1, r2, r3
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	3301      	adds	r3, #1
 800882a:	009a      	lsls	r2, r3, #2
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4413      	add	r3, r2
 8008830:	3303      	adds	r3, #3
 8008832:	68ba      	ldr	r2, [r7, #8]
 8008834:	4413      	add	r3, r2
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	061a      	lsls	r2, r3, #24
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	4403      	add	r3, r0
 8008842:	430a      	orrs	r2, r1
 8008844:	601a      	str	r2, [r3, #0]
    idx++;
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	3301      	adds	r3, #1
 800884a:	617b      	str	r3, [r7, #20]
  while (size > idx)
 800884c:	693a      	ldr	r2, [r7, #16]
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	429a      	cmp	r2, r3
 8008852:	d8c7      	bhi.n	80087e4 <PTP_GetArray32+0x4a>
  }
  return size;
 8008854:	693b      	ldr	r3, [r7, #16]
}
 8008856:	4618      	mov	r0, r3
 8008858:	371c      	adds	r7, #28
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <USBH_PTP_OpenSession>:
  * @param  phost: Host handle
  * @param  session: Session ID (MUST BE > 0U)
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_OpenSession(USBH_HandleTypeDef *phost, uint32_t session)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b08e      	sub	sp, #56	; 0x38
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
 800886a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800886c:	2301      	movs	r3, #1
 800886e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008878:	69db      	ldr	r3, [r3, #28]
 800887a:	633b      	str	r3, [r7, #48]	; 0x30
  PTP_ContainerTypedef  ptp_container;

  switch (MTP_Handle->ptp.req_state)
 800887c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887e:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8008882:	3301      	adds	r3, #1
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	2b01      	cmp	r3, #1
 8008888:	d002      	beq.n	8008890 <USBH_PTP_OpenSession+0x2e>
 800888a:	2b02      	cmp	r3, #2
 800888c:	d03d      	beq.n	800890a <USBH_PTP_OpenSession+0xa8>
    case PTP_REQ_WAIT:
      status = USBH_PTP_Process(phost);
      break;

    default:
      break;
 800888e:	e043      	b.n	8008918 <USBH_PTP_OpenSession+0xb6>
      MTP_Handle->ptp.transaction_id = 0x00000000U;
 8008890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008892:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8008896:	3324      	adds	r3, #36	; 0x24
 8008898:	2200      	movs	r2, #0
 800889a:	601a      	str	r2, [r3, #0]
      MTP_Handle->ptp.session_id = session;
 800889c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889e:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 80088a2:	3328      	adds	r3, #40	; 0x28
 80088a4:	683a      	ldr	r2, [r7, #0]
 80088a6:	601a      	str	r2, [r3, #0]
      MTP_Handle->ptp.flags = PTP_DP_NODATA;
 80088a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088aa:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 80088ae:	332c      	adds	r3, #44	; 0x2c
 80088b0:	2200      	movs	r2, #0
 80088b2:	601a      	str	r2, [r3, #0]
      ptp_container.Code = PTP_OC_OpenSession;
 80088b4:	f241 0302 	movw	r3, #4098	; 0x1002
 80088b8:	81bb      	strh	r3, [r7, #12]
      ptp_container.SessionID = session;
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	613b      	str	r3, [r7, #16]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id ++;
 80088be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c0:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 80088c4:	3324      	adds	r3, #36	; 0x24
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	1c51      	adds	r1, r2, #1
 80088ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088cc:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 80088d0:	3324      	adds	r3, #36	; 0x24
 80088d2:	6019      	str	r1, [r3, #0]
 80088d4:	617a      	str	r2, [r7, #20]
      ptp_container.Param1 = session;
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	61bb      	str	r3, [r7, #24]
      ptp_container.Nparam = 1U;
 80088da:	2301      	movs	r3, #1
 80088dc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
      USBH_PTP_SendRequest(phost, &ptp_container);
 80088e0:	f107 030c 	add.w	r3, r7, #12
 80088e4:	4619      	mov	r1, r3
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f7ff fac0 	bl	8007e6c <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 80088ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ee:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 80088f2:	2201      	movs	r2, #1
 80088f4:	701a      	strb	r2, [r3, #0]
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 80088f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f8:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 80088fc:	3301      	adds	r3, #1
 80088fe:	2202      	movs	r2, #2
 8008900:	701a      	strb	r2, [r3, #0]
      status = USBH_BUSY;
 8008902:	2301      	movs	r3, #1
 8008904:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      break;
 8008908:	e006      	b.n	8008918 <USBH_PTP_OpenSession+0xb6>
      status = USBH_PTP_Process(phost);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f7ff f82e 	bl	800796c <USBH_PTP_Process>
 8008910:	4603      	mov	r3, r0
 8008912:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      break;
 8008916:	bf00      	nop
  }
  return status;
 8008918:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800891c:	4618      	mov	r0, r3
 800891e:	3738      	adds	r7, #56	; 0x38
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <USBH_PTP_GetDeviceInfo>:
  * @param  phost: Host handle
  * @param  dev_info: Device info structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetDeviceInfo(USBH_HandleTypeDef *phost, PTP_DeviceInfoTypedef *dev_info)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b08e      	sub	sp, #56	; 0x38
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY;
 800892e:	2301      	movs	r3, #1
 8008930:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800893a:	69db      	ldr	r3, [r3, #28]
 800893c:	633b      	str	r3, [r7, #48]	; 0x30
  PTP_ContainerTypedef ptp_container;

  switch (MTP_Handle->ptp.req_state)
 800893e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008940:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8008944:	3301      	adds	r3, #1
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	2b01      	cmp	r3, #1
 800894a:	d002      	beq.n	8008952 <USBH_PTP_GetDeviceInfo+0x2e>
 800894c:	2b02      	cmp	r3, #2
 800894e:	d04d      	beq.n	80089ec <USBH_PTP_GetDeviceInfo+0xc8>
        PTP_DecodeDeviceInfo(phost, dev_info);
      }
      break;

    default:
      break;
 8008950:	e05b      	b.n	8008a0a <USBH_PTP_GetDeviceInfo+0xe6>
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 8008952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008954:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8008958:	332c      	adds	r3, #44	; 0x2c
 800895a:	2202      	movs	r2, #2
 800895c:	601a      	str	r2, [r3, #0]
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) &(MTP_Handle->ptp.data_container);
 800895e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008960:	f503 52ec 	add.w	r2, r3, #7552	; 0x1d80
 8008964:	3204      	adds	r2, #4
 8008966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008968:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 800896c:	3330      	adds	r3, #48	; 0x30
 800896e:	601a      	str	r2, [r3, #0]
      MTP_Handle->ptp.data_length = 0U;
 8008970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008972:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8008976:	3334      	adds	r3, #52	; 0x34
 8008978:	2200      	movs	r2, #0
 800897a:	601a      	str	r2, [r3, #0]
      MTP_Handle->ptp.data_packet_counter = 0U;
 800897c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897e:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 8008982:	2200      	movs	r2, #0
 8008984:	601a      	str	r2, [r3, #0]
      MTP_Handle->ptp.data_packet = 0U;
 8008986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008988:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 800898c:	3338      	adds	r3, #56	; 0x38
 800898e:	2200      	movs	r2, #0
 8008990:	601a      	str	r2, [r3, #0]
      ptp_container.Code = PTP_OC_GetDeviceInfo;
 8008992:	f241 0301 	movw	r3, #4097	; 0x1001
 8008996:	81bb      	strh	r3, [r7, #12]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 8008998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899a:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 800899e:	3328      	adds	r3, #40	; 0x28
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	613b      	str	r3, [r7, #16]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 80089a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a6:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 80089aa:	3324      	adds	r3, #36	; 0x24
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	1c51      	adds	r1, r2, #1
 80089b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b2:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 80089b6:	3324      	adds	r3, #36	; 0x24
 80089b8:	6019      	str	r1, [r3, #0]
 80089ba:	617a      	str	r2, [r7, #20]
      ptp_container.Nparam = 0U;
 80089bc:	2300      	movs	r3, #0
 80089be:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
      USBH_PTP_SendRequest(phost, &ptp_container);
 80089c2:	f107 030c 	add.w	r3, r7, #12
 80089c6:	4619      	mov	r1, r3
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f7ff fa4f 	bl	8007e6c <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 80089ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d0:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 80089d4:	2201      	movs	r2, #1
 80089d6:	701a      	strb	r2, [r3, #0]
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 80089d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089da:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 80089de:	3301      	adds	r3, #1
 80089e0:	2202      	movs	r2, #2
 80089e2:	701a      	strb	r2, [r3, #0]
      status = USBH_BUSY;
 80089e4:	2301      	movs	r3, #1
 80089e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      break;
 80089ea:	e00e      	b.n	8008a0a <USBH_PTP_GetDeviceInfo+0xe6>
      status = USBH_PTP_Process(phost);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f7fe ffbd 	bl	800796c <USBH_PTP_Process>
 80089f2:	4603      	mov	r3, r0
 80089f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (status == USBH_OK)
 80089f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d103      	bne.n	8008a08 <USBH_PTP_GetDeviceInfo+0xe4>
        PTP_DecodeDeviceInfo(phost, dev_info);
 8008a00:	6839      	ldr	r1, [r7, #0]
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f7ff fb6a 	bl	80080dc <PTP_DecodeDeviceInfo>
      break;
 8008a08:	bf00      	nop
  }
  return status;
 8008a0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3738      	adds	r7, #56	; 0x38
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <USBH_PTP_GetStorageIds>:
  * @param  phost: Host handle
  * @param  dev_info: Device info structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetStorageIds(USBH_HandleTypeDef *phost, PTP_StorageIDsTypedef *storage_ids)
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b08e      	sub	sp, #56	; 0x38
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
 8008a1e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008a20:	2301      	movs	r3, #1
 8008a22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a2c:	69db      	ldr	r3, [r3, #28]
 8008a2e:	633b      	str	r3, [r7, #48]	; 0x30
  PTP_ContainerTypedef ptp_container;

  switch (MTP_Handle->ptp.req_state)
 8008a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a32:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8008a36:	3301      	adds	r3, #1
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d002      	beq.n	8008a44 <USBH_PTP_GetStorageIds+0x2e>
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d04d      	beq.n	8008ade <USBH_PTP_GetStorageIds+0xc8>
        PTP_GetStorageIDs(phost, storage_ids);
      }
      break;

    default:
      break;
 8008a42:	e05b      	b.n	8008afc <USBH_PTP_GetStorageIds+0xe6>
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 8008a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a46:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8008a4a:	332c      	adds	r3, #44	; 0x2c
 8008a4c:	2202      	movs	r2, #2
 8008a4e:	601a      	str	r2, [r3, #0]
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) &(MTP_Handle->ptp.data_container);
 8008a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a52:	f503 52ec 	add.w	r2, r3, #7552	; 0x1d80
 8008a56:	3204      	adds	r2, #4
 8008a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5a:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8008a5e:	3330      	adds	r3, #48	; 0x30
 8008a60:	601a      	str	r2, [r3, #0]
      MTP_Handle->ptp.data_length = 0U;
 8008a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a64:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8008a68:	3334      	adds	r3, #52	; 0x34
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	601a      	str	r2, [r3, #0]
      MTP_Handle->ptp.data_packet_counter = 0U;
 8008a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a70:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 8008a74:	2200      	movs	r2, #0
 8008a76:	601a      	str	r2, [r3, #0]
      MTP_Handle->ptp.data_packet = 0U;
 8008a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7a:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8008a7e:	3338      	adds	r3, #56	; 0x38
 8008a80:	2200      	movs	r2, #0
 8008a82:	601a      	str	r2, [r3, #0]
      ptp_container.Code = PTP_OC_GetStorageIDs;
 8008a84:	f241 0304 	movw	r3, #4100	; 0x1004
 8008a88:	81bb      	strh	r3, [r7, #12]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 8008a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8c:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8008a90:	3328      	adds	r3, #40	; 0x28
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	613b      	str	r3, [r7, #16]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 8008a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a98:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8008a9c:	3324      	adds	r3, #36	; 0x24
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	1c51      	adds	r1, r2, #1
 8008aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa4:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8008aa8:	3324      	adds	r3, #36	; 0x24
 8008aaa:	6019      	str	r1, [r3, #0]
 8008aac:	617a      	str	r2, [r7, #20]
      ptp_container.Nparam = 0U;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
      USBH_PTP_SendRequest(phost, &ptp_container);
 8008ab4:	f107 030c 	add.w	r3, r7, #12
 8008ab8:	4619      	mov	r1, r3
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f7ff f9d6 	bl	8007e6c <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 8008ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac2:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	701a      	strb	r2, [r3, #0]
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 8008aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008acc:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	2202      	movs	r2, #2
 8008ad4:	701a      	strb	r2, [r3, #0]
      status = USBH_BUSY;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      break;
 8008adc:	e00e      	b.n	8008afc <USBH_PTP_GetStorageIds+0xe6>
      status = USBH_PTP_Process(phost);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f7fe ff44 	bl	800796c <USBH_PTP_Process>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (status == USBH_OK)
 8008aea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d103      	bne.n	8008afa <USBH_PTP_GetStorageIds+0xe4>
        PTP_GetStorageIDs(phost, storage_ids);
 8008af2:	6839      	ldr	r1, [r7, #0]
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f7ff fc08 	bl	800830a <PTP_GetStorageIDs>
      break;
 8008afa:	bf00      	nop
  }
  return status;
 8008afc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3738      	adds	r7, #56	; 0x38
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <USBH_PTP_GetStorageInfo>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetStorageInfo(USBH_HandleTypeDef *phost,
                                           uint32_t storage_id,
                                           PTP_StorageInfoTypedef *storage_info)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b090      	sub	sp, #64	; 0x40
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8008b14:	2301      	movs	r3, #1
 8008b16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b20:	69db      	ldr	r3, [r3, #28]
 8008b22:	63bb      	str	r3, [r7, #56]	; 0x38
  PTP_ContainerTypedef  ptp_container;

  switch (MTP_Handle->ptp.req_state)
 8008b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b26:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d002      	beq.n	8008b38 <USBH_PTP_GetStorageInfo+0x30>
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d04f      	beq.n	8008bd6 <USBH_PTP_GetStorageInfo+0xce>
        PTP_GetStorageInfo(phost, storage_id, storage_info);
      }
      break;

    default:
      break;
 8008b36:	e05e      	b.n	8008bf6 <USBH_PTP_GetStorageInfo+0xee>
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 8008b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3a:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8008b3e:	332c      	adds	r3, #44	; 0x2c
 8008b40:	2202      	movs	r2, #2
 8008b42:	601a      	str	r2, [r3, #0]
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) &(MTP_Handle->ptp.data_container);
 8008b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b46:	f503 52ec 	add.w	r2, r3, #7552	; 0x1d80
 8008b4a:	3204      	adds	r2, #4
 8008b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4e:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8008b52:	3330      	adds	r3, #48	; 0x30
 8008b54:	601a      	str	r2, [r3, #0]
      MTP_Handle->ptp.data_length = 0U;
 8008b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b58:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8008b5c:	3334      	adds	r3, #52	; 0x34
 8008b5e:	2200      	movs	r2, #0
 8008b60:	601a      	str	r2, [r3, #0]
      MTP_Handle->ptp.data_packet_counter = 0U;
 8008b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b64:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 8008b68:	2200      	movs	r2, #0
 8008b6a:	601a      	str	r2, [r3, #0]
      MTP_Handle->ptp.data_packet = 0U;
 8008b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b6e:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8008b72:	3338      	adds	r3, #56	; 0x38
 8008b74:	2200      	movs	r2, #0
 8008b76:	601a      	str	r2, [r3, #0]
      ptp_container.Code = PTP_OC_GetStorageInfo;
 8008b78:	f241 0305 	movw	r3, #4101	; 0x1005
 8008b7c:	82bb      	strh	r3, [r7, #20]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 8008b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b80:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8008b84:	3328      	adds	r3, #40	; 0x28
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	61bb      	str	r3, [r7, #24]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 8008b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8c:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8008b90:	3324      	adds	r3, #36	; 0x24
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	1c51      	adds	r1, r2, #1
 8008b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b98:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8008b9c:	3324      	adds	r3, #36	; 0x24
 8008b9e:	6019      	str	r1, [r3, #0]
 8008ba0:	61fa      	str	r2, [r7, #28]
      ptp_container.Param1 = storage_id;
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	623b      	str	r3, [r7, #32]
      ptp_container.Nparam = 1U;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
      USBH_PTP_SendRequest(phost, &ptp_container);
 8008bac:	f107 0314 	add.w	r3, r7, #20
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	f7ff f95a 	bl	8007e6c <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 8008bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bba:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	701a      	strb	r2, [r3, #0]
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 8008bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc4:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8008bc8:	3301      	adds	r3, #1
 8008bca:	2202      	movs	r2, #2
 8008bcc:	701a      	strb	r2, [r3, #0]
      status = USBH_BUSY;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8008bd4:	e00f      	b.n	8008bf6 <USBH_PTP_GetStorageInfo+0xee>
      status = USBH_PTP_Process(phost);
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f7fe fec8 	bl	800796c <USBH_PTP_Process>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      if (status == USBH_OK)
 8008be2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d104      	bne.n	8008bf4 <USBH_PTP_GetStorageInfo+0xec>
        PTP_GetStorageInfo(phost, storage_id, storage_info);
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	68b9      	ldr	r1, [r7, #8]
 8008bee:	68f8      	ldr	r0, [r7, #12]
 8008bf0:	f7ff fba8 	bl	8008344 <PTP_GetStorageInfo>
      break;
 8008bf4:	bf00      	nop
  }
  return status;
 8008bf6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3740      	adds	r7, #64	; 0x40
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b084      	sub	sp, #16
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	60f8      	str	r0, [r7, #12]
 8008c0a:	60b9      	str	r1, [r7, #8]
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d101      	bne.n	8008c1a <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008c16:	2302      	movs	r3, #2
 8008c18:	e029      	b.n	8008c6e <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	79fa      	ldrb	r2, [r7, #7]
 8008c1e:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f000 f81f 	bl	8008c76 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d003      	beq.n	8008c66 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	68ba      	ldr	r2, [r7, #8]
 8008c62:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	f001 fc38 	bl	800a4dc <USBH_LL_Init>

  return USBH_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008c76:	b480      	push	{r7}
 8008c78:	b085      	sub	sp, #20
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008c82:	2300      	movs	r3, #0
 8008c84:	60fb      	str	r3, [r7, #12]
 8008c86:	e009      	b.n	8008c9c <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	33e0      	adds	r3, #224	; 0xe0
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	4413      	add	r3, r2
 8008c92:	2200      	movs	r2, #0
 8008c94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	3301      	adds	r3, #1
 8008c9a:	60fb      	str	r3, [r7, #12]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2b0e      	cmp	r3, #14
 8008ca0:	d9f2      	bls.n	8008c88 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	60fb      	str	r3, [r7, #12]
 8008ca6:	e009      	b.n	8008cbc <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	4413      	add	r3, r2
 8008cae:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	60fb      	str	r3, [r7, #12]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cc2:	d3f1      	bcc.n	8008ca8 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2240      	movs	r2, #64	; 0x40
 8008ce8:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3714      	adds	r7, #20
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr

08008d1e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008d1e:	b480      	push	{r7}
 8008d20:	b085      	sub	sp, #20
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
 8008d26:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d016      	beq.n	8008d60 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d10e      	bne.n	8008d5a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008d42:	1c59      	adds	r1, r3, #1
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	33de      	adds	r3, #222	; 0xde
 8008d4e:	6839      	ldr	r1, [r7, #0]
 8008d50:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008d54:	2300      	movs	r3, #0
 8008d56:	73fb      	strb	r3, [r7, #15]
 8008d58:	e004      	b.n	8008d64 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008d5a:	2302      	movs	r3, #2
 8008d5c:	73fb      	strb	r3, [r7, #15]
 8008d5e:	e001      	b.n	8008d64 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008d60:	2302      	movs	r3, #2
 8008d62:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3714      	adds	r7, #20
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr

08008d72 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008d72:	b480      	push	{r7}
 8008d74:	b085      	sub	sp, #20
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008d88:	78fa      	ldrb	r2, [r7, #3]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d204      	bcs.n	8008d98 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	78fa      	ldrb	r2, [r7, #3]
 8008d92:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008d96:	e001      	b.n	8008d9c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008d98:	2302      	movs	r3, #2
 8008d9a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3714      	adds	r7, #20
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr

08008daa <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008daa:	b480      	push	{r7}
 8008dac:	b087      	sub	sp, #28
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
 8008db2:	4608      	mov	r0, r1
 8008db4:	4611      	mov	r1, r2
 8008db6:	461a      	mov	r2, r3
 8008db8:	4603      	mov	r3, r0
 8008dba:	70fb      	strb	r3, [r7, #3]
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	70bb      	strb	r3, [r7, #2]
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008dd2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008dd4:	e025      	b.n	8008e22 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008dd6:	7dfb      	ldrb	r3, [r7, #23]
 8008dd8:	221a      	movs	r2, #26
 8008dda:	fb02 f303 	mul.w	r3, r2, r3
 8008dde:	3308      	adds	r3, #8
 8008de0:	68fa      	ldr	r2, [r7, #12]
 8008de2:	4413      	add	r3, r2
 8008de4:	3302      	adds	r3, #2
 8008de6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	795b      	ldrb	r3, [r3, #5]
 8008dec:	78fa      	ldrb	r2, [r7, #3]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d002      	beq.n	8008df8 <USBH_FindInterface+0x4e>
 8008df2:	78fb      	ldrb	r3, [r7, #3]
 8008df4:	2bff      	cmp	r3, #255	; 0xff
 8008df6:	d111      	bne.n	8008e1c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008dfc:	78ba      	ldrb	r2, [r7, #2]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d002      	beq.n	8008e08 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008e02:	78bb      	ldrb	r3, [r7, #2]
 8008e04:	2bff      	cmp	r3, #255	; 0xff
 8008e06:	d109      	bne.n	8008e1c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008e0c:	787a      	ldrb	r2, [r7, #1]
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d002      	beq.n	8008e18 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008e12:	787b      	ldrb	r3, [r7, #1]
 8008e14:	2bff      	cmp	r3, #255	; 0xff
 8008e16:	d101      	bne.n	8008e1c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008e18:	7dfb      	ldrb	r3, [r7, #23]
 8008e1a:	e006      	b.n	8008e2a <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008e1c:	7dfb      	ldrb	r3, [r7, #23]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008e22:	7dfb      	ldrb	r3, [r7, #23]
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d9d6      	bls.n	8008dd6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008e28:	23ff      	movs	r3, #255	; 0xff
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	371c      	adds	r7, #28
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr

08008e36 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b082      	sub	sp, #8
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f001 fb8a 	bl	800a558 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8008e44:	2101      	movs	r1, #1
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f001 fca3 	bl	800a792 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3708      	adds	r7, #8
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
	...

08008e58 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b088      	sub	sp, #32
 8008e5c:	af04      	add	r7, sp, #16
 8008e5e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008e60:	2302      	movs	r3, #2
 8008e62:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008e64:	2300      	movs	r3, #0
 8008e66:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d102      	bne.n	8008e7a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2203      	movs	r2, #3
 8008e78:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	2b0b      	cmp	r3, #11
 8008e82:	f200 81b3 	bhi.w	80091ec <USBH_Process+0x394>
 8008e86:	a201      	add	r2, pc, #4	; (adr r2, 8008e8c <USBH_Process+0x34>)
 8008e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e8c:	08008ebd 	.word	0x08008ebd
 8008e90:	08008eef 	.word	0x08008eef
 8008e94:	08008f57 	.word	0x08008f57
 8008e98:	08009187 	.word	0x08009187
 8008e9c:	080091ed 	.word	0x080091ed
 8008ea0:	08008ffb 	.word	0x08008ffb
 8008ea4:	0800912d 	.word	0x0800912d
 8008ea8:	08009031 	.word	0x08009031
 8008eac:	08009051 	.word	0x08009051
 8008eb0:	08009071 	.word	0x08009071
 8008eb4:	0800909f 	.word	0x0800909f
 8008eb8:	0800916f 	.word	0x0800916f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f000 8193 	beq.w	80091f0 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008ed0:	20c8      	movs	r0, #200	; 0xc8
 8008ed2:	f001 fc9c 	bl	800a80e <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f001 fb9b 	bl	800a612 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008eec:	e180      	b.n	80091f0 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d107      	bne.n	8008f08 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2202      	movs	r2, #2
 8008f04:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008f06:	e182      	b.n	800920e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008f0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f12:	d914      	bls.n	8008f3e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	b2da      	uxtb	r2, r3
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008f2a:	2b03      	cmp	r3, #3
 8008f2c:	d903      	bls.n	8008f36 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	220d      	movs	r2, #13
 8008f32:	701a      	strb	r2, [r3, #0]
      break;
 8008f34:	e16b      	b.n	800920e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	701a      	strb	r2, [r3, #0]
      break;
 8008f3c:	e167      	b.n	800920e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008f44:	f103 020a 	add.w	r2, r3, #10
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008f4e:	200a      	movs	r0, #10
 8008f50:	f001 fc5d 	bl	800a80e <USBH_Delay>
      break;
 8008f54:	e15b      	b.n	800920e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d005      	beq.n	8008f6c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f66:	2104      	movs	r1, #4
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008f6c:	2064      	movs	r0, #100	; 0x64
 8008f6e:	f001 fc4e 	bl	800a80e <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f001 fb26 	bl	800a5c4 <USBH_LL_GetSpeed>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2205      	movs	r2, #5
 8008f86:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008f88:	2100      	movs	r1, #0
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f001 f92a 	bl	800a1e4 <USBH_AllocPipe>
 8008f90:	4603      	mov	r3, r0
 8008f92:	461a      	mov	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008f98:	2180      	movs	r1, #128	; 0x80
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f001 f922 	bl	800a1e4 <USBH_AllocPipe>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	7919      	ldrb	r1, [r3, #4]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008fbc:	b292      	uxth	r2, r2
 8008fbe:	9202      	str	r2, [sp, #8]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	9201      	str	r2, [sp, #4]
 8008fc4:	9300      	str	r3, [sp, #0]
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2280      	movs	r2, #128	; 0x80
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f001 f8db 	bl	800a186 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	7959      	ldrb	r1, [r3, #5]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008fe4:	b292      	uxth	r2, r2
 8008fe6:	9202      	str	r2, [sp, #8]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	9201      	str	r2, [sp, #4]
 8008fec:	9300      	str	r3, [sp, #0]
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f001 f8c7 	bl	800a186 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008ff8:	e109      	b.n	800920e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f90c 	bl	8009218 <USBH_HandleEnum>
 8009000:	4603      	mov	r3, r0
 8009002:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009004:	7bbb      	ldrb	r3, [r7, #14]
 8009006:	b2db      	uxtb	r3, r3
 8009008:	2b00      	cmp	r3, #0
 800900a:	f040 80f3 	bne.w	80091f4 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800901c:	2b01      	cmp	r3, #1
 800901e:	d103      	bne.n	8009028 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2208      	movs	r2, #8
 8009024:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009026:	e0e5      	b.n	80091f4 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2207      	movs	r2, #7
 800902c:	701a      	strb	r2, [r3, #0]
      break;
 800902e:	e0e1      	b.n	80091f4 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009036:	2b00      	cmp	r3, #0
 8009038:	f000 80de 	beq.w	80091f8 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009042:	2101      	movs	r1, #1
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2208      	movs	r2, #8
 800904c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800904e:	e0d3      	b.n	80091f8 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009056:	b29b      	uxth	r3, r3
 8009058:	4619      	mov	r1, r3
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 fc20 	bl	80098a0 <USBH_SetCfg>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	f040 80ca 	bne.w	80091fc <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2209      	movs	r2, #9
 800906c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800906e:	e0c5      	b.n	80091fc <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009076:	f003 0320 	and.w	r3, r3, #32
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00b      	beq.n	8009096 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800907e:	2101      	movs	r1, #1
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 fc30 	bl	80098e6 <USBH_SetFeature>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	f040 80b9 	bne.w	8009200 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	220a      	movs	r2, #10
 8009092:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009094:	e0b4      	b.n	8009200 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	220a      	movs	r2, #10
 800909a:	701a      	strb	r2, [r3, #0]
      break;
 800909c:	e0b0      	b.n	8009200 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	f000 80ad 	beq.w	8009204 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80090b2:	2300      	movs	r3, #0
 80090b4:	73fb      	strb	r3, [r7, #15]
 80090b6:	e016      	b.n	80090e6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80090b8:	7bfa      	ldrb	r2, [r7, #15]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	32de      	adds	r2, #222	; 0xde
 80090be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090c2:	791a      	ldrb	r2, [r3, #4]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d108      	bne.n	80090e0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80090ce:	7bfa      	ldrb	r2, [r7, #15]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	32de      	adds	r2, #222	; 0xde
 80090d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80090de:	e005      	b.n	80090ec <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80090e0:	7bfb      	ldrb	r3, [r7, #15]
 80090e2:	3301      	adds	r3, #1
 80090e4:	73fb      	strb	r3, [r7, #15]
 80090e6:	7bfb      	ldrb	r3, [r7, #15]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d0e5      	beq.n	80090b8 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d016      	beq.n	8009124 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090fc:	689b      	ldr	r3, [r3, #8]
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	4798      	blx	r3
 8009102:	4603      	mov	r3, r0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d109      	bne.n	800911c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2206      	movs	r2, #6
 800910c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009114:	2103      	movs	r1, #3
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800911a:	e073      	b.n	8009204 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	220d      	movs	r2, #13
 8009120:	701a      	strb	r2, [r3, #0]
      break;
 8009122:	e06f      	b.n	8009204 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	220d      	movs	r2, #13
 8009128:	701a      	strb	r2, [r3, #0]
      break;
 800912a:	e06b      	b.n	8009204 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009132:	2b00      	cmp	r3, #0
 8009134:	d017      	beq.n	8009166 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800913c:	691b      	ldr	r3, [r3, #16]
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	4798      	blx	r3
 8009142:	4603      	mov	r3, r0
 8009144:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009146:	7bbb      	ldrb	r3, [r7, #14]
 8009148:	b2db      	uxtb	r3, r3
 800914a:	2b00      	cmp	r3, #0
 800914c:	d103      	bne.n	8009156 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	220b      	movs	r2, #11
 8009152:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009154:	e058      	b.n	8009208 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8009156:	7bbb      	ldrb	r3, [r7, #14]
 8009158:	b2db      	uxtb	r3, r3
 800915a:	2b02      	cmp	r3, #2
 800915c:	d154      	bne.n	8009208 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	220d      	movs	r2, #13
 8009162:	701a      	strb	r2, [r3, #0]
      break;
 8009164:	e050      	b.n	8009208 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	220d      	movs	r2, #13
 800916a:	701a      	strb	r2, [r3, #0]
      break;
 800916c:	e04c      	b.n	8009208 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009174:	2b00      	cmp	r3, #0
 8009176:	d049      	beq.n	800920c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800917e:	695b      	ldr	r3, [r3, #20]
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	4798      	blx	r3
      }
      break;
 8009184:	e042      	b.n	800920c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f7ff fd71 	bl	8008c76 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800919a:	2b00      	cmp	r3, #0
 800919c:	d009      	beq.n	80091b2 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d005      	beq.n	80091c8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80091c2:	2105      	movs	r1, #5
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d107      	bne.n	80091e4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f7ff fe2a 	bl	8008e36 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80091e2:	e014      	b.n	800920e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f001 f9b7 	bl	800a558 <USBH_LL_Start>
      break;
 80091ea:	e010      	b.n	800920e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80091ec:	bf00      	nop
 80091ee:	e00e      	b.n	800920e <USBH_Process+0x3b6>
      break;
 80091f0:	bf00      	nop
 80091f2:	e00c      	b.n	800920e <USBH_Process+0x3b6>
      break;
 80091f4:	bf00      	nop
 80091f6:	e00a      	b.n	800920e <USBH_Process+0x3b6>
    break;
 80091f8:	bf00      	nop
 80091fa:	e008      	b.n	800920e <USBH_Process+0x3b6>
      break;
 80091fc:	bf00      	nop
 80091fe:	e006      	b.n	800920e <USBH_Process+0x3b6>
      break;
 8009200:	bf00      	nop
 8009202:	e004      	b.n	800920e <USBH_Process+0x3b6>
      break;
 8009204:	bf00      	nop
 8009206:	e002      	b.n	800920e <USBH_Process+0x3b6>
      break;
 8009208:	bf00      	nop
 800920a:	e000      	b.n	800920e <USBH_Process+0x3b6>
      break;
 800920c:	bf00      	nop
  }
  return USBH_OK;
 800920e:	2300      	movs	r3, #0
}
 8009210:	4618      	mov	r0, r3
 8009212:	3710      	adds	r7, #16
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b088      	sub	sp, #32
 800921c:	af04      	add	r7, sp, #16
 800921e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009220:	2301      	movs	r3, #1
 8009222:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009224:	2301      	movs	r3, #1
 8009226:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	785b      	ldrb	r3, [r3, #1]
 800922c:	2b07      	cmp	r3, #7
 800922e:	f200 81c1 	bhi.w	80095b4 <USBH_HandleEnum+0x39c>
 8009232:	a201      	add	r2, pc, #4	; (adr r2, 8009238 <USBH_HandleEnum+0x20>)
 8009234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009238:	08009259 	.word	0x08009259
 800923c:	08009317 	.word	0x08009317
 8009240:	08009381 	.word	0x08009381
 8009244:	0800940f 	.word	0x0800940f
 8009248:	08009479 	.word	0x08009479
 800924c:	080094e9 	.word	0x080094e9
 8009250:	0800952f 	.word	0x0800952f
 8009254:	08009575 	.word	0x08009575
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009258:	2108      	movs	r1, #8
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 fa50 	bl	8009700 <USBH_Get_DevDesc>
 8009260:	4603      	mov	r3, r0
 8009262:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009264:	7bbb      	ldrb	r3, [r7, #14]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d130      	bne.n	80092cc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2201      	movs	r2, #1
 8009278:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	7919      	ldrb	r1, [r3, #4]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800928e:	b292      	uxth	r2, r2
 8009290:	9202      	str	r2, [sp, #8]
 8009292:	2200      	movs	r2, #0
 8009294:	9201      	str	r2, [sp, #4]
 8009296:	9300      	str	r3, [sp, #0]
 8009298:	4603      	mov	r3, r0
 800929a:	2280      	movs	r2, #128	; 0x80
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 ff72 	bl	800a186 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	7959      	ldrb	r1, [r3, #5]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80092b6:	b292      	uxth	r2, r2
 80092b8:	9202      	str	r2, [sp, #8]
 80092ba:	2200      	movs	r2, #0
 80092bc:	9201      	str	r2, [sp, #4]
 80092be:	9300      	str	r3, [sp, #0]
 80092c0:	4603      	mov	r3, r0
 80092c2:	2200      	movs	r2, #0
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 ff5e 	bl	800a186 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80092ca:	e175      	b.n	80095b8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80092cc:	7bbb      	ldrb	r3, [r7, #14]
 80092ce:	2b03      	cmp	r3, #3
 80092d0:	f040 8172 	bne.w	80095b8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80092da:	3301      	adds	r3, #1
 80092dc:	b2da      	uxtb	r2, r3
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80092ea:	2b03      	cmp	r3, #3
 80092ec:	d903      	bls.n	80092f6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	220d      	movs	r2, #13
 80092f2:	701a      	strb	r2, [r3, #0]
      break;
 80092f4:	e160      	b.n	80095b8 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	795b      	ldrb	r3, [r3, #5]
 80092fa:	4619      	mov	r1, r3
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 ff92 	bl	800a226 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	791b      	ldrb	r3, [r3, #4]
 8009306:	4619      	mov	r1, r3
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 ff8c 	bl	800a226 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	701a      	strb	r2, [r3, #0]
      break;
 8009314:	e150      	b.n	80095b8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009316:	2112      	movs	r1, #18
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 f9f1 	bl	8009700 <USBH_Get_DevDesc>
 800931e:	4603      	mov	r3, r0
 8009320:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009322:	7bbb      	ldrb	r3, [r7, #14]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d103      	bne.n	8009330 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2202      	movs	r2, #2
 800932c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800932e:	e145      	b.n	80095bc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009330:	7bbb      	ldrb	r3, [r7, #14]
 8009332:	2b03      	cmp	r3, #3
 8009334:	f040 8142 	bne.w	80095bc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800933e:	3301      	adds	r3, #1
 8009340:	b2da      	uxtb	r2, r3
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800934e:	2b03      	cmp	r3, #3
 8009350:	d903      	bls.n	800935a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	220d      	movs	r2, #13
 8009356:	701a      	strb	r2, [r3, #0]
      break;
 8009358:	e130      	b.n	80095bc <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	795b      	ldrb	r3, [r3, #5]
 800935e:	4619      	mov	r1, r3
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 ff60 	bl	800a226 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	791b      	ldrb	r3, [r3, #4]
 800936a:	4619      	mov	r1, r3
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 ff5a 	bl	800a226 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	701a      	strb	r2, [r3, #0]
      break;
 800937e:	e11d      	b.n	80095bc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009380:	2101      	movs	r1, #1
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 fa68 	bl	8009858 <USBH_SetAddress>
 8009388:	4603      	mov	r3, r0
 800938a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800938c:	7bbb      	ldrb	r3, [r7, #14]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d132      	bne.n	80093f8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009392:	2002      	movs	r0, #2
 8009394:	f001 fa3b 	bl	800a80e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2203      	movs	r2, #3
 80093a4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	7919      	ldrb	r1, [r3, #4]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80093ba:	b292      	uxth	r2, r2
 80093bc:	9202      	str	r2, [sp, #8]
 80093be:	2200      	movs	r2, #0
 80093c0:	9201      	str	r2, [sp, #4]
 80093c2:	9300      	str	r3, [sp, #0]
 80093c4:	4603      	mov	r3, r0
 80093c6:	2280      	movs	r2, #128	; 0x80
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 fedc 	bl	800a186 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	7959      	ldrb	r1, [r3, #5]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80093e2:	b292      	uxth	r2, r2
 80093e4:	9202      	str	r2, [sp, #8]
 80093e6:	2200      	movs	r2, #0
 80093e8:	9201      	str	r2, [sp, #4]
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	4603      	mov	r3, r0
 80093ee:	2200      	movs	r2, #0
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 fec8 	bl	800a186 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80093f6:	e0e3      	b.n	80095c0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093f8:	7bbb      	ldrb	r3, [r7, #14]
 80093fa:	2b03      	cmp	r3, #3
 80093fc:	f040 80e0 	bne.w	80095c0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	220d      	movs	r2, #13
 8009404:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	705a      	strb	r2, [r3, #1]
      break;
 800940c:	e0d8      	b.n	80095c0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800940e:	2109      	movs	r1, #9
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 f99d 	bl	8009750 <USBH_Get_CfgDesc>
 8009416:	4603      	mov	r3, r0
 8009418:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800941a:	7bbb      	ldrb	r3, [r7, #14]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d103      	bne.n	8009428 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2204      	movs	r2, #4
 8009424:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009426:	e0cd      	b.n	80095c4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009428:	7bbb      	ldrb	r3, [r7, #14]
 800942a:	2b03      	cmp	r3, #3
 800942c:	f040 80ca 	bne.w	80095c4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009436:	3301      	adds	r3, #1
 8009438:	b2da      	uxtb	r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009446:	2b03      	cmp	r3, #3
 8009448:	d903      	bls.n	8009452 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	220d      	movs	r2, #13
 800944e:	701a      	strb	r2, [r3, #0]
      break;
 8009450:	e0b8      	b.n	80095c4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	795b      	ldrb	r3, [r3, #5]
 8009456:	4619      	mov	r1, r3
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 fee4 	bl	800a226 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	791b      	ldrb	r3, [r3, #4]
 8009462:	4619      	mov	r1, r3
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 fede 	bl	800a226 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	701a      	strb	r2, [r3, #0]
      break;
 8009476:	e0a5      	b.n	80095c4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800947e:	4619      	mov	r1, r3
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 f965 	bl	8009750 <USBH_Get_CfgDesc>
 8009486:	4603      	mov	r3, r0
 8009488:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800948a:	7bbb      	ldrb	r3, [r7, #14]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d103      	bne.n	8009498 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2205      	movs	r2, #5
 8009494:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009496:	e097      	b.n	80095c8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009498:	7bbb      	ldrb	r3, [r7, #14]
 800949a:	2b03      	cmp	r3, #3
 800949c:	f040 8094 	bne.w	80095c8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80094a6:	3301      	adds	r3, #1
 80094a8:	b2da      	uxtb	r2, r3
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80094b6:	2b03      	cmp	r3, #3
 80094b8:	d903      	bls.n	80094c2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	220d      	movs	r2, #13
 80094be:	701a      	strb	r2, [r3, #0]
      break;
 80094c0:	e082      	b.n	80095c8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	795b      	ldrb	r3, [r3, #5]
 80094c6:	4619      	mov	r1, r3
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 feac 	bl	800a226 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	791b      	ldrb	r3, [r3, #4]
 80094d2:	4619      	mov	r1, r3
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 fea6 	bl	800a226 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	701a      	strb	r2, [r3, #0]
      break;
 80094e6:	e06f      	b.n	80095c8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d019      	beq.n	8009526 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80094fe:	23ff      	movs	r3, #255	; 0xff
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 f949 	bl	8009798 <USBH_Get_StringDesc>
 8009506:	4603      	mov	r3, r0
 8009508:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800950a:	7bbb      	ldrb	r3, [r7, #14]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d103      	bne.n	8009518 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2206      	movs	r2, #6
 8009514:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009516:	e059      	b.n	80095cc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009518:	7bbb      	ldrb	r3, [r7, #14]
 800951a:	2b03      	cmp	r3, #3
 800951c:	d156      	bne.n	80095cc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2206      	movs	r2, #6
 8009522:	705a      	strb	r2, [r3, #1]
      break;
 8009524:	e052      	b.n	80095cc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2206      	movs	r2, #6
 800952a:	705a      	strb	r2, [r3, #1]
      break;
 800952c:	e04e      	b.n	80095cc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009534:	2b00      	cmp	r3, #0
 8009536:	d019      	beq.n	800956c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009544:	23ff      	movs	r3, #255	; 0xff
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f926 	bl	8009798 <USBH_Get_StringDesc>
 800954c:	4603      	mov	r3, r0
 800954e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009550:	7bbb      	ldrb	r3, [r7, #14]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d103      	bne.n	800955e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2207      	movs	r2, #7
 800955a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800955c:	e038      	b.n	80095d0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800955e:	7bbb      	ldrb	r3, [r7, #14]
 8009560:	2b03      	cmp	r3, #3
 8009562:	d135      	bne.n	80095d0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2207      	movs	r2, #7
 8009568:	705a      	strb	r2, [r3, #1]
      break;
 800956a:	e031      	b.n	80095d0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2207      	movs	r2, #7
 8009570:	705a      	strb	r2, [r3, #1]
      break;
 8009572:	e02d      	b.n	80095d0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800957a:	2b00      	cmp	r3, #0
 800957c:	d017      	beq.n	80095ae <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800958a:	23ff      	movs	r3, #255	; 0xff
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 f903 	bl	8009798 <USBH_Get_StringDesc>
 8009592:	4603      	mov	r3, r0
 8009594:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009596:	7bbb      	ldrb	r3, [r7, #14]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d102      	bne.n	80095a2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800959c:	2300      	movs	r3, #0
 800959e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80095a0:	e018      	b.n	80095d4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80095a2:	7bbb      	ldrb	r3, [r7, #14]
 80095a4:	2b03      	cmp	r3, #3
 80095a6:	d115      	bne.n	80095d4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80095a8:	2300      	movs	r3, #0
 80095aa:	73fb      	strb	r3, [r7, #15]
      break;
 80095ac:	e012      	b.n	80095d4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80095ae:	2300      	movs	r3, #0
 80095b0:	73fb      	strb	r3, [r7, #15]
      break;
 80095b2:	e00f      	b.n	80095d4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80095b4:	bf00      	nop
 80095b6:	e00e      	b.n	80095d6 <USBH_HandleEnum+0x3be>
      break;
 80095b8:	bf00      	nop
 80095ba:	e00c      	b.n	80095d6 <USBH_HandleEnum+0x3be>
      break;
 80095bc:	bf00      	nop
 80095be:	e00a      	b.n	80095d6 <USBH_HandleEnum+0x3be>
      break;
 80095c0:	bf00      	nop
 80095c2:	e008      	b.n	80095d6 <USBH_HandleEnum+0x3be>
      break;
 80095c4:	bf00      	nop
 80095c6:	e006      	b.n	80095d6 <USBH_HandleEnum+0x3be>
      break;
 80095c8:	bf00      	nop
 80095ca:	e004      	b.n	80095d6 <USBH_HandleEnum+0x3be>
      break;
 80095cc:	bf00      	nop
 80095ce:	e002      	b.n	80095d6 <USBH_HandleEnum+0x3be>
      break;
 80095d0:	bf00      	nop
 80095d2:	e000      	b.n	80095d6 <USBH_HandleEnum+0x3be>
      break;
 80095d4:	bf00      	nop
  }
  return Status;
 80095d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3710      	adds	r7, #16
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	683a      	ldr	r2, [r7, #0]
 80095ee:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80095f2:	bf00      	nop
 80095f4:	370c      	adds	r7, #12
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr

080095fe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80095fe:	b580      	push	{r7, lr}
 8009600:	b082      	sub	sp, #8
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800960c:	1c5a      	adds	r2, r3, #1
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 f804 	bl	8009622 <USBH_HandleSof>
}
 800961a:	bf00      	nop
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b082      	sub	sp, #8
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	b2db      	uxtb	r3, r3
 8009630:	2b0b      	cmp	r3, #11
 8009632:	d10a      	bne.n	800964a <USBH_HandleSof+0x28>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800963a:	2b00      	cmp	r3, #0
 800963c:	d005      	beq.n	800964a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009644:	699b      	ldr	r3, [r3, #24]
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	4798      	blx	r3
  }
}
 800964a:	bf00      	nop
 800964c:	3708      	adds	r7, #8
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009652:	b480      	push	{r7}
 8009654:	b083      	sub	sp, #12
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2201      	movs	r2, #1
 800965e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8009662:	bf00      	nop
}
 8009664:	370c      	adds	r7, #12
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr

0800966e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800966e:	b480      	push	{r7}
 8009670:	b083      	sub	sp, #12
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800967e:	bf00      	nop
}
 8009680:	370c      	adds	r7, #12
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr

0800968a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800968a:	b480      	push	{r7}
 800968c:	b083      	sub	sp, #12
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2201      	movs	r2, #1
 8009696:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80096aa:	2300      	movs	r3, #0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2201      	movs	r2, #1
 80096c4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 ff58 	bl	800a58e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	791b      	ldrb	r3, [r3, #4]
 80096e2:	4619      	mov	r1, r3
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 fd9e 	bl	800a226 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	795b      	ldrb	r3, [r3, #5]
 80096ee:	4619      	mov	r1, r3
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 fd98 	bl	800a226 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80096f6:	2300      	movs	r3, #0
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3708      	adds	r7, #8
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b086      	sub	sp, #24
 8009704:	af02      	add	r7, sp, #8
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	460b      	mov	r3, r1
 800970a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009712:	78fb      	ldrb	r3, [r7, #3]
 8009714:	b29b      	uxth	r3, r3
 8009716:	9300      	str	r3, [sp, #0]
 8009718:	4613      	mov	r3, r2
 800971a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800971e:	2100      	movs	r1, #0
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 f864 	bl	80097ee <USBH_GetDescriptor>
 8009726:	4603      	mov	r3, r0
 8009728:	73fb      	strb	r3, [r7, #15]
 800972a:	7bfb      	ldrb	r3, [r7, #15]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d10a      	bne.n	8009746 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800973c:	78fa      	ldrb	r2, [r7, #3]
 800973e:	b292      	uxth	r2, r2
 8009740:	4619      	mov	r1, r3
 8009742:	f000 f8f4 	bl	800992e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009746:	7bfb      	ldrb	r3, [r7, #15]
}
 8009748:	4618      	mov	r0, r3
 800974a:	3710      	adds	r7, #16
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009750:	b580      	push	{r7, lr}
 8009752:	b086      	sub	sp, #24
 8009754:	af02      	add	r7, sp, #8
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	460b      	mov	r3, r1
 800975a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	331c      	adds	r3, #28
 8009760:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009762:	887b      	ldrh	r3, [r7, #2]
 8009764:	9300      	str	r3, [sp, #0]
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800976c:	2100      	movs	r1, #0
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f83d 	bl	80097ee <USBH_GetDescriptor>
 8009774:	4603      	mov	r3, r0
 8009776:	72fb      	strb	r3, [r7, #11]
 8009778:	7afb      	ldrb	r3, [r7, #11]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d107      	bne.n	800978e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009784:	887a      	ldrh	r2, [r7, #2]
 8009786:	68f9      	ldr	r1, [r7, #12]
 8009788:	4618      	mov	r0, r3
 800978a:	f000 f940 	bl	8009a0e <USBH_ParseCfgDesc>
  }

  return status;
 800978e:	7afb      	ldrb	r3, [r7, #11]
}
 8009790:	4618      	mov	r0, r3
 8009792:	3710      	adds	r7, #16
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b088      	sub	sp, #32
 800979c:	af02      	add	r7, sp, #8
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	607a      	str	r2, [r7, #4]
 80097a2:	461a      	mov	r2, r3
 80097a4:	460b      	mov	r3, r1
 80097a6:	72fb      	strb	r3, [r7, #11]
 80097a8:	4613      	mov	r3, r2
 80097aa:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80097ac:	7afb      	ldrb	r3, [r7, #11]
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80097b4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80097bc:	893b      	ldrh	r3, [r7, #8]
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	460b      	mov	r3, r1
 80097c2:	2100      	movs	r1, #0
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f000 f812 	bl	80097ee <USBH_GetDescriptor>
 80097ca:	4603      	mov	r3, r0
 80097cc:	75fb      	strb	r3, [r7, #23]
 80097ce:	7dfb      	ldrb	r3, [r7, #23]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d107      	bne.n	80097e4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80097da:	893a      	ldrh	r2, [r7, #8]
 80097dc:	6879      	ldr	r1, [r7, #4]
 80097de:	4618      	mov	r0, r3
 80097e0:	f000 fa13 	bl	8009c0a <USBH_ParseStringDesc>
  }

  return status;
 80097e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3718      	adds	r7, #24
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b084      	sub	sp, #16
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	60f8      	str	r0, [r7, #12]
 80097f6:	607b      	str	r3, [r7, #4]
 80097f8:	460b      	mov	r3, r1
 80097fa:	72fb      	strb	r3, [r7, #11]
 80097fc:	4613      	mov	r3, r2
 80097fe:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	789b      	ldrb	r3, [r3, #2]
 8009804:	2b01      	cmp	r3, #1
 8009806:	d11c      	bne.n	8009842 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009808:	7afb      	ldrb	r3, [r7, #11]
 800980a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800980e:	b2da      	uxtb	r2, r3
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2206      	movs	r2, #6
 8009818:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	893a      	ldrh	r2, [r7, #8]
 800981e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009820:	893b      	ldrh	r3, [r7, #8]
 8009822:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009826:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800982a:	d104      	bne.n	8009836 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f240 4209 	movw	r2, #1033	; 0x409
 8009832:	829a      	strh	r2, [r3, #20]
 8009834:	e002      	b.n	800983c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2200      	movs	r2, #0
 800983a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	8b3a      	ldrh	r2, [r7, #24]
 8009840:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009842:	8b3b      	ldrh	r3, [r7, #24]
 8009844:	461a      	mov	r2, r3
 8009846:	6879      	ldr	r1, [r7, #4]
 8009848:	68f8      	ldr	r0, [r7, #12]
 800984a:	f000 fa2c 	bl	8009ca6 <USBH_CtlReq>
 800984e:	4603      	mov	r3, r0
}
 8009850:	4618      	mov	r0, r3
 8009852:	3710      	adds	r7, #16
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	460b      	mov	r3, r1
 8009862:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	789b      	ldrb	r3, [r3, #2]
 8009868:	2b01      	cmp	r3, #1
 800986a:	d10f      	bne.n	800988c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2205      	movs	r2, #5
 8009876:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009878:	78fb      	ldrb	r3, [r7, #3]
 800987a:	b29a      	uxth	r2, r3
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800988c:	2200      	movs	r2, #0
 800988e:	2100      	movs	r1, #0
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 fa08 	bl	8009ca6 <USBH_CtlReq>
 8009896:	4603      	mov	r3, r0
}
 8009898:	4618      	mov	r0, r3
 800989a:	3708      	adds	r7, #8
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	460b      	mov	r3, r1
 80098aa:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	789b      	ldrb	r3, [r3, #2]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d10e      	bne.n	80098d2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2209      	movs	r2, #9
 80098be:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	887a      	ldrh	r2, [r7, #2]
 80098c4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80098d2:	2200      	movs	r2, #0
 80098d4:	2100      	movs	r1, #0
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 f9e5 	bl	8009ca6 <USBH_CtlReq>
 80098dc:	4603      	mov	r3, r0
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3708      	adds	r7, #8
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b082      	sub	sp, #8
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
 80098ee:	460b      	mov	r3, r1
 80098f0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	789b      	ldrb	r3, [r3, #2]
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d10f      	bne.n	800991a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2200      	movs	r2, #0
 80098fe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2203      	movs	r2, #3
 8009904:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009906:	78fb      	ldrb	r3, [r7, #3]
 8009908:	b29a      	uxth	r2, r3
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2200      	movs	r2, #0
 8009912:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800991a:	2200      	movs	r2, #0
 800991c:	2100      	movs	r1, #0
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 f9c1 	bl	8009ca6 <USBH_CtlReq>
 8009924:	4603      	mov	r3, r0
}
 8009926:	4618      	mov	r0, r3
 8009928:	3708      	adds	r7, #8
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800992e:	b480      	push	{r7}
 8009930:	b085      	sub	sp, #20
 8009932:	af00      	add	r7, sp, #0
 8009934:	60f8      	str	r0, [r7, #12]
 8009936:	60b9      	str	r1, [r7, #8]
 8009938:	4613      	mov	r3, r2
 800993a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	781a      	ldrb	r2, [r3, #0]
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	785a      	ldrb	r2, [r3, #1]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	3302      	adds	r3, #2
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	b29a      	uxth	r2, r3
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	3303      	adds	r3, #3
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	b29b      	uxth	r3, r3
 800995c:	021b      	lsls	r3, r3, #8
 800995e:	b29b      	uxth	r3, r3
 8009960:	4313      	orrs	r3, r2
 8009962:	b29a      	uxth	r2, r3
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	791a      	ldrb	r2, [r3, #4]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	795a      	ldrb	r2, [r3, #5]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	799a      	ldrb	r2, [r3, #6]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	79da      	ldrb	r2, [r3, #7]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009988:	88fb      	ldrh	r3, [r7, #6]
 800998a:	2b08      	cmp	r3, #8
 800998c:	d939      	bls.n	8009a02 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	3308      	adds	r3, #8
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	b29a      	uxth	r2, r3
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	3309      	adds	r3, #9
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	b29b      	uxth	r3, r3
 800999e:	021b      	lsls	r3, r3, #8
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	4313      	orrs	r3, r2
 80099a4:	b29a      	uxth	r2, r3
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	330a      	adds	r3, #10
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	b29a      	uxth	r2, r3
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	330b      	adds	r3, #11
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	021b      	lsls	r3, r3, #8
 80099bc:	b29b      	uxth	r3, r3
 80099be:	4313      	orrs	r3, r2
 80099c0:	b29a      	uxth	r2, r3
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	330c      	adds	r3, #12
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	b29a      	uxth	r2, r3
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	330d      	adds	r3, #13
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	021b      	lsls	r3, r3, #8
 80099d8:	b29b      	uxth	r3, r3
 80099da:	4313      	orrs	r3, r2
 80099dc:	b29a      	uxth	r2, r3
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	7b9a      	ldrb	r2, [r3, #14]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	7bda      	ldrb	r2, [r3, #15]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	7c1a      	ldrb	r2, [r3, #16]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	7c5a      	ldrb	r2, [r3, #17]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	745a      	strb	r2, [r3, #17]
  }
}
 8009a02:	bf00      	nop
 8009a04:	3714      	adds	r7, #20
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr

08009a0e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b08a      	sub	sp, #40	; 0x28
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	60f8      	str	r0, [r7, #12]
 8009a16:	60b9      	str	r1, [r7, #8]
 8009a18:	4613      	mov	r3, r2
 8009a1a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009a20:	2300      	movs	r3, #0
 8009a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8009a26:	2300      	movs	r3, #0
 8009a28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	781a      	ldrb	r2, [r3, #0]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	785a      	ldrb	r2, [r3, #1]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	3302      	adds	r3, #2
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	b29a      	uxth	r2, r3
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	3303      	adds	r3, #3
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	021b      	lsls	r3, r3, #8
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	4313      	orrs	r3, r2
 8009a56:	b29a      	uxth	r2, r3
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	791a      	ldrb	r2, [r3, #4]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	795a      	ldrb	r2, [r3, #5]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	799a      	ldrb	r2, [r3, #6]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	79da      	ldrb	r2, [r3, #7]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	7a1a      	ldrb	r2, [r3, #8]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009a84:	88fb      	ldrh	r3, [r7, #6]
 8009a86:	2b09      	cmp	r3, #9
 8009a88:	d95f      	bls.n	8009b4a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009a8a:	2309      	movs	r3, #9
 8009a8c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009a92:	e051      	b.n	8009b38 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009a94:	f107 0316 	add.w	r3, r7, #22
 8009a98:	4619      	mov	r1, r3
 8009a9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a9c:	f000 f8e8 	bl	8009c70 <USBH_GetNextDesc>
 8009aa0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa4:	785b      	ldrb	r3, [r3, #1]
 8009aa6:	2b04      	cmp	r3, #4
 8009aa8:	d146      	bne.n	8009b38 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009aaa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009aae:	221a      	movs	r2, #26
 8009ab0:	fb02 f303 	mul.w	r3, r2, r3
 8009ab4:	3308      	adds	r3, #8
 8009ab6:	68fa      	ldr	r2, [r7, #12]
 8009ab8:	4413      	add	r3, r2
 8009aba:	3302      	adds	r3, #2
 8009abc:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009abe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ac0:	69f8      	ldr	r0, [r7, #28]
 8009ac2:	f000 f846 	bl	8009b52 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009acc:	2300      	movs	r3, #0
 8009ace:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009ad0:	e022      	b.n	8009b18 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009ad2:	f107 0316 	add.w	r3, r7, #22
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ada:	f000 f8c9 	bl	8009c70 <USBH_GetNextDesc>
 8009ade:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae2:	785b      	ldrb	r3, [r3, #1]
 8009ae4:	2b05      	cmp	r3, #5
 8009ae6:	d117      	bne.n	8009b18 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009ae8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009aec:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009af0:	3201      	adds	r2, #1
 8009af2:	00d2      	lsls	r2, r2, #3
 8009af4:	211a      	movs	r1, #26
 8009af6:	fb01 f303 	mul.w	r3, r1, r3
 8009afa:	4413      	add	r3, r2
 8009afc:	3308      	adds	r3, #8
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	4413      	add	r3, r2
 8009b02:	3304      	adds	r3, #4
 8009b04:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8009b06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b08:	69b8      	ldr	r0, [r7, #24]
 8009b0a:	f000 f851 	bl	8009bb0 <USBH_ParseEPDesc>
            ep_ix++;
 8009b0e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009b12:	3301      	adds	r3, #1
 8009b14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	791b      	ldrb	r3, [r3, #4]
 8009b1c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d204      	bcs.n	8009b2e <USBH_ParseCfgDesc+0x120>
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	885a      	ldrh	r2, [r3, #2]
 8009b28:	8afb      	ldrh	r3, [r7, #22]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d8d1      	bhi.n	8009ad2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009b2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009b32:	3301      	adds	r3, #1
 8009b34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009b38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d804      	bhi.n	8009b4a <USBH_ParseCfgDesc+0x13c>
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	885a      	ldrh	r2, [r3, #2]
 8009b44:	8afb      	ldrh	r3, [r7, #22]
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d8a4      	bhi.n	8009a94 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009b4a:	bf00      	nop
 8009b4c:	3728      	adds	r7, #40	; 0x28
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009b52:	b480      	push	{r7}
 8009b54:	b083      	sub	sp, #12
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
 8009b5a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	781a      	ldrb	r2, [r3, #0]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	785a      	ldrb	r2, [r3, #1]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	789a      	ldrb	r2, [r3, #2]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	78da      	ldrb	r2, [r3, #3]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	791a      	ldrb	r2, [r3, #4]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	795a      	ldrb	r2, [r3, #5]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	799a      	ldrb	r2, [r3, #6]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	79da      	ldrb	r2, [r3, #7]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	7a1a      	ldrb	r2, [r3, #8]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	721a      	strb	r2, [r3, #8]
}
 8009ba4:	bf00      	nop
 8009ba6:	370c      	adds	r7, #12
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	781a      	ldrb	r2, [r3, #0]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	785a      	ldrb	r2, [r3, #1]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	789a      	ldrb	r2, [r3, #2]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	78da      	ldrb	r2, [r3, #3]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	3304      	adds	r3, #4
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	b29a      	uxth	r2, r3
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	3305      	adds	r3, #5
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	021b      	lsls	r3, r3, #8
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	b29a      	uxth	r2, r3
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	799a      	ldrb	r2, [r3, #6]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	719a      	strb	r2, [r3, #6]
}
 8009bfe:	bf00      	nop
 8009c00:	370c      	adds	r7, #12
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr

08009c0a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009c0a:	b480      	push	{r7}
 8009c0c:	b087      	sub	sp, #28
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	60f8      	str	r0, [r7, #12]
 8009c12:	60b9      	str	r1, [r7, #8]
 8009c14:	4613      	mov	r3, r2
 8009c16:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	2b03      	cmp	r3, #3
 8009c20:	d120      	bne.n	8009c64 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	1e9a      	subs	r2, r3, #2
 8009c28:	88fb      	ldrh	r3, [r7, #6]
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	bf28      	it	cs
 8009c2e:	4613      	movcs	r3, r2
 8009c30:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	3302      	adds	r3, #2
 8009c36:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009c38:	2300      	movs	r3, #0
 8009c3a:	82fb      	strh	r3, [r7, #22]
 8009c3c:	e00b      	b.n	8009c56 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009c3e:	8afb      	ldrh	r3, [r7, #22]
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	4413      	add	r3, r2
 8009c44:	781a      	ldrb	r2, [r3, #0]
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009c50:	8afb      	ldrh	r3, [r7, #22]
 8009c52:	3302      	adds	r3, #2
 8009c54:	82fb      	strh	r3, [r7, #22]
 8009c56:	8afa      	ldrh	r2, [r7, #22]
 8009c58:	8abb      	ldrh	r3, [r7, #20]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d3ef      	bcc.n	8009c3e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	2200      	movs	r2, #0
 8009c62:	701a      	strb	r2, [r3, #0]
  }
}
 8009c64:	bf00      	nop
 8009c66:	371c      	adds	r7, #28
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b085      	sub	sp, #20
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	881a      	ldrh	r2, [r3, #0]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	4413      	add	r3, r2
 8009c86:	b29a      	uxth	r2, r3
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4413      	add	r3, r2
 8009c96:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009c98:	68fb      	ldr	r3, [r7, #12]
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3714      	adds	r7, #20
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr

08009ca6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b086      	sub	sp, #24
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	60f8      	str	r0, [r7, #12]
 8009cae:	60b9      	str	r1, [r7, #8]
 8009cb0:	4613      	mov	r3, r2
 8009cb2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	789b      	ldrb	r3, [r3, #2]
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d002      	beq.n	8009cc6 <USBH_CtlReq+0x20>
 8009cc0:	2b02      	cmp	r3, #2
 8009cc2:	d00f      	beq.n	8009ce4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009cc4:	e027      	b.n	8009d16 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	68ba      	ldr	r2, [r7, #8]
 8009cca:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	88fa      	ldrh	r2, [r7, #6]
 8009cd0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2202      	movs	r2, #2
 8009cdc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ce2:	e018      	b.n	8009d16 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f000 f81b 	bl	8009d20 <USBH_HandleControl>
 8009cea:	4603      	mov	r3, r0
 8009cec:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009cee:	7dfb      	ldrb	r3, [r7, #23]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d002      	beq.n	8009cfa <USBH_CtlReq+0x54>
 8009cf4:	7dfb      	ldrb	r3, [r7, #23]
 8009cf6:	2b03      	cmp	r3, #3
 8009cf8:	d106      	bne.n	8009d08 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2200      	movs	r2, #0
 8009d04:	761a      	strb	r2, [r3, #24]
      break;
 8009d06:	e005      	b.n	8009d14 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009d08:	7dfb      	ldrb	r3, [r7, #23]
 8009d0a:	2b02      	cmp	r3, #2
 8009d0c:	d102      	bne.n	8009d14 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2201      	movs	r2, #1
 8009d12:	709a      	strb	r2, [r3, #2]
      break;
 8009d14:	bf00      	nop
  }
  return status;
 8009d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3718      	adds	r7, #24
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b086      	sub	sp, #24
 8009d24:	af02      	add	r7, sp, #8
 8009d26:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	7e1b      	ldrb	r3, [r3, #24]
 8009d34:	3b01      	subs	r3, #1
 8009d36:	2b0a      	cmp	r3, #10
 8009d38:	f200 8156 	bhi.w	8009fe8 <USBH_HandleControl+0x2c8>
 8009d3c:	a201      	add	r2, pc, #4	; (adr r2, 8009d44 <USBH_HandleControl+0x24>)
 8009d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d42:	bf00      	nop
 8009d44:	08009d71 	.word	0x08009d71
 8009d48:	08009d8b 	.word	0x08009d8b
 8009d4c:	08009df5 	.word	0x08009df5
 8009d50:	08009e1b 	.word	0x08009e1b
 8009d54:	08009e53 	.word	0x08009e53
 8009d58:	08009e7d 	.word	0x08009e7d
 8009d5c:	08009ecf 	.word	0x08009ecf
 8009d60:	08009ef1 	.word	0x08009ef1
 8009d64:	08009f2d 	.word	0x08009f2d
 8009d68:	08009f53 	.word	0x08009f53
 8009d6c:	08009f91 	.word	0x08009f91
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f103 0110 	add.w	r1, r3, #16
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	795b      	ldrb	r3, [r3, #5]
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 f943 	bl	800a008 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2202      	movs	r2, #2
 8009d86:	761a      	strb	r2, [r3, #24]
      break;
 8009d88:	e139      	b.n	8009ffe <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	795b      	ldrb	r3, [r3, #5]
 8009d8e:	4619      	mov	r1, r3
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 fceb 	bl	800a76c <USBH_LL_GetURBState>
 8009d96:	4603      	mov	r3, r0
 8009d98:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009d9a:	7bbb      	ldrb	r3, [r7, #14]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d11e      	bne.n	8009dde <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	7c1b      	ldrb	r3, [r3, #16]
 8009da4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009da8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	8adb      	ldrh	r3, [r3, #22]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d00a      	beq.n	8009dc8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009db2:	7b7b      	ldrb	r3, [r7, #13]
 8009db4:	2b80      	cmp	r3, #128	; 0x80
 8009db6:	d103      	bne.n	8009dc0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2203      	movs	r2, #3
 8009dbc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009dbe:	e115      	b.n	8009fec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2205      	movs	r2, #5
 8009dc4:	761a      	strb	r2, [r3, #24]
      break;
 8009dc6:	e111      	b.n	8009fec <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009dc8:	7b7b      	ldrb	r3, [r7, #13]
 8009dca:	2b80      	cmp	r3, #128	; 0x80
 8009dcc:	d103      	bne.n	8009dd6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2209      	movs	r2, #9
 8009dd2:	761a      	strb	r2, [r3, #24]
      break;
 8009dd4:	e10a      	b.n	8009fec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2207      	movs	r2, #7
 8009dda:	761a      	strb	r2, [r3, #24]
      break;
 8009ddc:	e106      	b.n	8009fec <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009dde:	7bbb      	ldrb	r3, [r7, #14]
 8009de0:	2b04      	cmp	r3, #4
 8009de2:	d003      	beq.n	8009dec <USBH_HandleControl+0xcc>
 8009de4:	7bbb      	ldrb	r3, [r7, #14]
 8009de6:	2b02      	cmp	r3, #2
 8009de8:	f040 8100 	bne.w	8009fec <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	220b      	movs	r2, #11
 8009df0:	761a      	strb	r2, [r3, #24]
      break;
 8009df2:	e0fb      	b.n	8009fec <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009dfa:	b29a      	uxth	r2, r3
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6899      	ldr	r1, [r3, #8]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	899a      	ldrh	r2, [r3, #12]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	791b      	ldrb	r3, [r3, #4]
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 f93a 	bl	800a086 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2204      	movs	r2, #4
 8009e16:	761a      	strb	r2, [r3, #24]
      break;
 8009e18:	e0f1      	b.n	8009ffe <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	791b      	ldrb	r3, [r3, #4]
 8009e1e:	4619      	mov	r1, r3
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 fca3 	bl	800a76c <USBH_LL_GetURBState>
 8009e26:	4603      	mov	r3, r0
 8009e28:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009e2a:	7bbb      	ldrb	r3, [r7, #14]
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d102      	bne.n	8009e36 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2209      	movs	r2, #9
 8009e34:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009e36:	7bbb      	ldrb	r3, [r7, #14]
 8009e38:	2b05      	cmp	r3, #5
 8009e3a:	d102      	bne.n	8009e42 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009e3c:	2303      	movs	r3, #3
 8009e3e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009e40:	e0d6      	b.n	8009ff0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009e42:	7bbb      	ldrb	r3, [r7, #14]
 8009e44:	2b04      	cmp	r3, #4
 8009e46:	f040 80d3 	bne.w	8009ff0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	220b      	movs	r2, #11
 8009e4e:	761a      	strb	r2, [r3, #24]
      break;
 8009e50:	e0ce      	b.n	8009ff0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6899      	ldr	r1, [r3, #8]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	899a      	ldrh	r2, [r3, #12]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	795b      	ldrb	r3, [r3, #5]
 8009e5e:	2001      	movs	r0, #1
 8009e60:	9000      	str	r0, [sp, #0]
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 f8ea 	bl	800a03c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009e6e:	b29a      	uxth	r2, r3
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2206      	movs	r2, #6
 8009e78:	761a      	strb	r2, [r3, #24]
      break;
 8009e7a:	e0c0      	b.n	8009ffe <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	795b      	ldrb	r3, [r3, #5]
 8009e80:	4619      	mov	r1, r3
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 fc72 	bl	800a76c <USBH_LL_GetURBState>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009e8c:	7bbb      	ldrb	r3, [r7, #14]
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d103      	bne.n	8009e9a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2207      	movs	r2, #7
 8009e96:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009e98:	e0ac      	b.n	8009ff4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009e9a:	7bbb      	ldrb	r3, [r7, #14]
 8009e9c:	2b05      	cmp	r3, #5
 8009e9e:	d105      	bne.n	8009eac <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	220c      	movs	r2, #12
 8009ea4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009ea6:	2303      	movs	r3, #3
 8009ea8:	73fb      	strb	r3, [r7, #15]
      break;
 8009eaa:	e0a3      	b.n	8009ff4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009eac:	7bbb      	ldrb	r3, [r7, #14]
 8009eae:	2b02      	cmp	r3, #2
 8009eb0:	d103      	bne.n	8009eba <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2205      	movs	r2, #5
 8009eb6:	761a      	strb	r2, [r3, #24]
      break;
 8009eb8:	e09c      	b.n	8009ff4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009eba:	7bbb      	ldrb	r3, [r7, #14]
 8009ebc:	2b04      	cmp	r3, #4
 8009ebe:	f040 8099 	bne.w	8009ff4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	220b      	movs	r2, #11
 8009ec6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009ec8:	2302      	movs	r3, #2
 8009eca:	73fb      	strb	r3, [r7, #15]
      break;
 8009ecc:	e092      	b.n	8009ff4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	791b      	ldrb	r3, [r3, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	2100      	movs	r1, #0
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 f8d5 	bl	800a086 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009ee2:	b29a      	uxth	r2, r3
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2208      	movs	r2, #8
 8009eec:	761a      	strb	r2, [r3, #24]

      break;
 8009eee:	e086      	b.n	8009ffe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	791b      	ldrb	r3, [r3, #4]
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 fc38 	bl	800a76c <USBH_LL_GetURBState>
 8009efc:	4603      	mov	r3, r0
 8009efe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009f00:	7bbb      	ldrb	r3, [r7, #14]
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d105      	bne.n	8009f12 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	220d      	movs	r2, #13
 8009f0a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009f10:	e072      	b.n	8009ff8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009f12:	7bbb      	ldrb	r3, [r7, #14]
 8009f14:	2b04      	cmp	r3, #4
 8009f16:	d103      	bne.n	8009f20 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	220b      	movs	r2, #11
 8009f1c:	761a      	strb	r2, [r3, #24]
      break;
 8009f1e:	e06b      	b.n	8009ff8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009f20:	7bbb      	ldrb	r3, [r7, #14]
 8009f22:	2b05      	cmp	r3, #5
 8009f24:	d168      	bne.n	8009ff8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009f26:	2303      	movs	r3, #3
 8009f28:	73fb      	strb	r3, [r7, #15]
      break;
 8009f2a:	e065      	b.n	8009ff8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	795b      	ldrb	r3, [r3, #5]
 8009f30:	2201      	movs	r2, #1
 8009f32:	9200      	str	r2, [sp, #0]
 8009f34:	2200      	movs	r2, #0
 8009f36:	2100      	movs	r1, #0
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 f87f 	bl	800a03c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009f44:	b29a      	uxth	r2, r3
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	220a      	movs	r2, #10
 8009f4e:	761a      	strb	r2, [r3, #24]
      break;
 8009f50:	e055      	b.n	8009ffe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	795b      	ldrb	r3, [r3, #5]
 8009f56:	4619      	mov	r1, r3
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 fc07 	bl	800a76c <USBH_LL_GetURBState>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009f62:	7bbb      	ldrb	r3, [r7, #14]
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d105      	bne.n	8009f74 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	220d      	movs	r2, #13
 8009f70:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009f72:	e043      	b.n	8009ffc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009f74:	7bbb      	ldrb	r3, [r7, #14]
 8009f76:	2b02      	cmp	r3, #2
 8009f78:	d103      	bne.n	8009f82 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2209      	movs	r2, #9
 8009f7e:	761a      	strb	r2, [r3, #24]
      break;
 8009f80:	e03c      	b.n	8009ffc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009f82:	7bbb      	ldrb	r3, [r7, #14]
 8009f84:	2b04      	cmp	r3, #4
 8009f86:	d139      	bne.n	8009ffc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	220b      	movs	r2, #11
 8009f8c:	761a      	strb	r2, [r3, #24]
      break;
 8009f8e:	e035      	b.n	8009ffc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	7e5b      	ldrb	r3, [r3, #25]
 8009f94:	3301      	adds	r3, #1
 8009f96:	b2da      	uxtb	r2, r3
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	765a      	strb	r2, [r3, #25]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	7e5b      	ldrb	r3, [r3, #25]
 8009fa0:	2b02      	cmp	r3, #2
 8009fa2:	d806      	bhi.n	8009fb2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2201      	movs	r2, #1
 8009fae:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009fb0:	e025      	b.n	8009ffe <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009fb8:	2106      	movs	r1, #6
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	795b      	ldrb	r3, [r3, #5]
 8009fc8:	4619      	mov	r1, r3
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 f92b 	bl	800a226 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	791b      	ldrb	r3, [r3, #4]
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 f925 	bl	800a226 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009fe2:	2302      	movs	r3, #2
 8009fe4:	73fb      	strb	r3, [r7, #15]
      break;
 8009fe6:	e00a      	b.n	8009ffe <USBH_HandleControl+0x2de>

    default:
      break;
 8009fe8:	bf00      	nop
 8009fea:	e008      	b.n	8009ffe <USBH_HandleControl+0x2de>
      break;
 8009fec:	bf00      	nop
 8009fee:	e006      	b.n	8009ffe <USBH_HandleControl+0x2de>
      break;
 8009ff0:	bf00      	nop
 8009ff2:	e004      	b.n	8009ffe <USBH_HandleControl+0x2de>
      break;
 8009ff4:	bf00      	nop
 8009ff6:	e002      	b.n	8009ffe <USBH_HandleControl+0x2de>
      break;
 8009ff8:	bf00      	nop
 8009ffa:	e000      	b.n	8009ffe <USBH_HandleControl+0x2de>
      break;
 8009ffc:	bf00      	nop
  }

  return status;
 8009ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a000:	4618      	mov	r0, r3
 800a002:	3710      	adds	r7, #16
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b088      	sub	sp, #32
 800a00c:	af04      	add	r7, sp, #16
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	4613      	mov	r3, r2
 800a014:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a016:	79f9      	ldrb	r1, [r7, #7]
 800a018:	2300      	movs	r3, #0
 800a01a:	9303      	str	r3, [sp, #12]
 800a01c:	2308      	movs	r3, #8
 800a01e:	9302      	str	r3, [sp, #8]
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	9301      	str	r3, [sp, #4]
 800a024:	2300      	movs	r3, #0
 800a026:	9300      	str	r3, [sp, #0]
 800a028:	2300      	movs	r3, #0
 800a02a:	2200      	movs	r2, #0
 800a02c:	68f8      	ldr	r0, [r7, #12]
 800a02e:	f000 fb6c 	bl	800a70a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	3710      	adds	r7, #16
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b088      	sub	sp, #32
 800a040:	af04      	add	r7, sp, #16
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	60b9      	str	r1, [r7, #8]
 800a046:	4611      	mov	r1, r2
 800a048:	461a      	mov	r2, r3
 800a04a:	460b      	mov	r3, r1
 800a04c:	80fb      	strh	r3, [r7, #6]
 800a04e:	4613      	mov	r3, r2
 800a050:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d001      	beq.n	800a060 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a05c:	2300      	movs	r3, #0
 800a05e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a060:	7979      	ldrb	r1, [r7, #5]
 800a062:	7e3b      	ldrb	r3, [r7, #24]
 800a064:	9303      	str	r3, [sp, #12]
 800a066:	88fb      	ldrh	r3, [r7, #6]
 800a068:	9302      	str	r3, [sp, #8]
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	9301      	str	r3, [sp, #4]
 800a06e:	2301      	movs	r3, #1
 800a070:	9300      	str	r3, [sp, #0]
 800a072:	2300      	movs	r3, #0
 800a074:	2200      	movs	r2, #0
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	f000 fb47 	bl	800a70a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3710      	adds	r7, #16
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a086:	b580      	push	{r7, lr}
 800a088:	b088      	sub	sp, #32
 800a08a:	af04      	add	r7, sp, #16
 800a08c:	60f8      	str	r0, [r7, #12]
 800a08e:	60b9      	str	r1, [r7, #8]
 800a090:	4611      	mov	r1, r2
 800a092:	461a      	mov	r2, r3
 800a094:	460b      	mov	r3, r1
 800a096:	80fb      	strh	r3, [r7, #6]
 800a098:	4613      	mov	r3, r2
 800a09a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a09c:	7979      	ldrb	r1, [r7, #5]
 800a09e:	2300      	movs	r3, #0
 800a0a0:	9303      	str	r3, [sp, #12]
 800a0a2:	88fb      	ldrh	r3, [r7, #6]
 800a0a4:	9302      	str	r3, [sp, #8]
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	9301      	str	r3, [sp, #4]
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	9300      	str	r3, [sp, #0]
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	68f8      	ldr	r0, [r7, #12]
 800a0b4:	f000 fb29 	bl	800a70a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a0b8:	2300      	movs	r3, #0

}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b088      	sub	sp, #32
 800a0c6:	af04      	add	r7, sp, #16
 800a0c8:	60f8      	str	r0, [r7, #12]
 800a0ca:	60b9      	str	r1, [r7, #8]
 800a0cc:	4611      	mov	r1, r2
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	80fb      	strh	r3, [r7, #6]
 800a0d4:	4613      	mov	r3, r2
 800a0d6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d001      	beq.n	800a0e6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a0e6:	7979      	ldrb	r1, [r7, #5]
 800a0e8:	7e3b      	ldrb	r3, [r7, #24]
 800a0ea:	9303      	str	r3, [sp, #12]
 800a0ec:	88fb      	ldrh	r3, [r7, #6]
 800a0ee:	9302      	str	r3, [sp, #8]
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	9301      	str	r3, [sp, #4]
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	9300      	str	r3, [sp, #0]
 800a0f8:	2302      	movs	r3, #2
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	68f8      	ldr	r0, [r7, #12]
 800a0fe:	f000 fb04 	bl	800a70a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a102:	2300      	movs	r3, #0
}
 800a104:	4618      	mov	r0, r3
 800a106:	3710      	adds	r7, #16
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b088      	sub	sp, #32
 800a110:	af04      	add	r7, sp, #16
 800a112:	60f8      	str	r0, [r7, #12]
 800a114:	60b9      	str	r1, [r7, #8]
 800a116:	4611      	mov	r1, r2
 800a118:	461a      	mov	r2, r3
 800a11a:	460b      	mov	r3, r1
 800a11c:	80fb      	strh	r3, [r7, #6]
 800a11e:	4613      	mov	r3, r2
 800a120:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a122:	7979      	ldrb	r1, [r7, #5]
 800a124:	2300      	movs	r3, #0
 800a126:	9303      	str	r3, [sp, #12]
 800a128:	88fb      	ldrh	r3, [r7, #6]
 800a12a:	9302      	str	r3, [sp, #8]
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	9301      	str	r3, [sp, #4]
 800a130:	2301      	movs	r3, #1
 800a132:	9300      	str	r3, [sp, #0]
 800a134:	2302      	movs	r3, #2
 800a136:	2201      	movs	r2, #1
 800a138:	68f8      	ldr	r0, [r7, #12]
 800a13a:	f000 fae6 	bl	800a70a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a13e:	2300      	movs	r3, #0
}
 800a140:	4618      	mov	r0, r3
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b088      	sub	sp, #32
 800a14c:	af04      	add	r7, sp, #16
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	60b9      	str	r1, [r7, #8]
 800a152:	4611      	mov	r1, r2
 800a154:	461a      	mov	r2, r3
 800a156:	460b      	mov	r3, r1
 800a158:	71fb      	strb	r3, [r7, #7]
 800a15a:	4613      	mov	r3, r2
 800a15c:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a15e:	79fb      	ldrb	r3, [r7, #7]
 800a160:	b29b      	uxth	r3, r3
 800a162:	79b9      	ldrb	r1, [r7, #6]
 800a164:	2200      	movs	r2, #0
 800a166:	9203      	str	r2, [sp, #12]
 800a168:	9302      	str	r3, [sp, #8]
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	9301      	str	r3, [sp, #4]
 800a16e:	2301      	movs	r3, #1
 800a170:	9300      	str	r3, [sp, #0]
 800a172:	2303      	movs	r3, #3
 800a174:	2201      	movs	r2, #1
 800a176:	68f8      	ldr	r0, [r7, #12]
 800a178:	f000 fac7 	bl	800a70a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 800a17c:	2300      	movs	r3, #0
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a186:	b580      	push	{r7, lr}
 800a188:	b086      	sub	sp, #24
 800a18a:	af04      	add	r7, sp, #16
 800a18c:	6078      	str	r0, [r7, #4]
 800a18e:	4608      	mov	r0, r1
 800a190:	4611      	mov	r1, r2
 800a192:	461a      	mov	r2, r3
 800a194:	4603      	mov	r3, r0
 800a196:	70fb      	strb	r3, [r7, #3]
 800a198:	460b      	mov	r3, r1
 800a19a:	70bb      	strb	r3, [r7, #2]
 800a19c:	4613      	mov	r3, r2
 800a19e:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a1a0:	7878      	ldrb	r0, [r7, #1]
 800a1a2:	78ba      	ldrb	r2, [r7, #2]
 800a1a4:	78f9      	ldrb	r1, [r7, #3]
 800a1a6:	8b3b      	ldrh	r3, [r7, #24]
 800a1a8:	9302      	str	r3, [sp, #8]
 800a1aa:	7d3b      	ldrb	r3, [r7, #20]
 800a1ac:	9301      	str	r3, [sp, #4]
 800a1ae:	7c3b      	ldrb	r3, [r7, #16]
 800a1b0:	9300      	str	r3, [sp, #0]
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 fa5a 	bl	800a66e <USBH_LL_OpenPipe>

  return USBH_OK;
 800a1ba:	2300      	movs	r3, #0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3708      	adds	r7, #8
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a1d0:	78fb      	ldrb	r3, [r7, #3]
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 fa79 	bl	800a6cc <USBH_LL_ClosePipe>

  return USBH_OK;
 800a1da:	2300      	movs	r3, #0
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3708      	adds	r7, #8
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b084      	sub	sp, #16
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 f836 	bl	800a262 <USBH_GetFreePipe>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a1fa:	89fb      	ldrh	r3, [r7, #14]
 800a1fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a200:	4293      	cmp	r3, r2
 800a202:	d00a      	beq.n	800a21a <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a204:	78fa      	ldrb	r2, [r7, #3]
 800a206:	89fb      	ldrh	r3, [r7, #14]
 800a208:	f003 030f 	and.w	r3, r3, #15
 800a20c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a210:	6879      	ldr	r1, [r7, #4]
 800a212:	33e0      	adds	r3, #224	; 0xe0
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	440b      	add	r3, r1
 800a218:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a21a:	89fb      	ldrh	r3, [r7, #14]
 800a21c:	b2db      	uxtb	r3, r3
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a226:	b480      	push	{r7}
 800a228:	b083      	sub	sp, #12
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
 800a22e:	460b      	mov	r3, r1
 800a230:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a232:	78fb      	ldrb	r3, [r7, #3]
 800a234:	2b0a      	cmp	r3, #10
 800a236:	d80d      	bhi.n	800a254 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a238:	78fb      	ldrb	r3, [r7, #3]
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	33e0      	adds	r3, #224	; 0xe0
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	4413      	add	r3, r2
 800a242:	685a      	ldr	r2, [r3, #4]
 800a244:	78fb      	ldrb	r3, [r7, #3]
 800a246:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a24a:	6879      	ldr	r1, [r7, #4]
 800a24c:	33e0      	adds	r3, #224	; 0xe0
 800a24e:	009b      	lsls	r3, r3, #2
 800a250:	440b      	add	r3, r1
 800a252:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a254:	2300      	movs	r3, #0
}
 800a256:	4618      	mov	r0, r3
 800a258:	370c      	adds	r7, #12
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr

0800a262 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a262:	b480      	push	{r7}
 800a264:	b085      	sub	sp, #20
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a26a:	2300      	movs	r3, #0
 800a26c:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a26e:	2300      	movs	r3, #0
 800a270:	73fb      	strb	r3, [r7, #15]
 800a272:	e00f      	b.n	800a294 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a274:	7bfb      	ldrb	r3, [r7, #15]
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	33e0      	adds	r3, #224	; 0xe0
 800a27a:	009b      	lsls	r3, r3, #2
 800a27c:	4413      	add	r3, r2
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a284:	2b00      	cmp	r3, #0
 800a286:	d102      	bne.n	800a28e <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a288:	7bfb      	ldrb	r3, [r7, #15]
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	e007      	b.n	800a29e <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800a28e:	7bfb      	ldrb	r3, [r7, #15]
 800a290:	3301      	adds	r3, #1
 800a292:	73fb      	strb	r3, [r7, #15]
 800a294:	7bfb      	ldrb	r3, [r7, #15]
 800a296:	2b0a      	cmp	r3, #10
 800a298:	d9ec      	bls.n	800a274 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a29a:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3714      	adds	r7, #20
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr
	...

0800a2ac <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	490e      	ldr	r1, [pc, #56]	; (800a2ec <MX_USB_HOST_Init+0x40>)
 800a2b4:	480e      	ldr	r0, [pc, #56]	; (800a2f0 <MX_USB_HOST_Init+0x44>)
 800a2b6:	f7fe fca4 	bl	8008c02 <USBH_Init>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d001      	beq.n	800a2c4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a2c0:	f7f6 f9f6 	bl	80006b0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MTP_CLASS) != USBH_OK)
 800a2c4:	490b      	ldr	r1, [pc, #44]	; (800a2f4 <MX_USB_HOST_Init+0x48>)
 800a2c6:	480a      	ldr	r0, [pc, #40]	; (800a2f0 <MX_USB_HOST_Init+0x44>)
 800a2c8:	f7fe fd29 	bl	8008d1e <USBH_RegisterClass>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d001      	beq.n	800a2d6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a2d2:	f7f6 f9ed 	bl	80006b0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a2d6:	4806      	ldr	r0, [pc, #24]	; (800a2f0 <MX_USB_HOST_Init+0x44>)
 800a2d8:	f7fe fdad 	bl	8008e36 <USBH_Start>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d001      	beq.n	800a2e6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a2e2:	f7f6 f9e5 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a2e6:	bf00      	nop
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	0800a30d 	.word	0x0800a30d
 800a2f0:	20000188 	.word	0x20000188
 800a2f4:	2000000c 	.word	0x2000000c

0800a2f8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a2fc:	4802      	ldr	r0, [pc, #8]	; (800a308 <MX_USB_HOST_Process+0x10>)
 800a2fe:	f7fe fdab 	bl	8008e58 <USBH_Process>
}
 800a302:	bf00      	nop
 800a304:	bd80      	pop	{r7, pc}
 800a306:	bf00      	nop
 800a308:	20000188 	.word	0x20000188

0800a30c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b083      	sub	sp, #12
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	460b      	mov	r3, r1
 800a316:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a318:	78fb      	ldrb	r3, [r7, #3]
 800a31a:	3b01      	subs	r3, #1
 800a31c:	2b04      	cmp	r3, #4
 800a31e:	d819      	bhi.n	800a354 <USBH_UserProcess+0x48>
 800a320:	a201      	add	r2, pc, #4	; (adr r2, 800a328 <USBH_UserProcess+0x1c>)
 800a322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a326:	bf00      	nop
 800a328:	0800a355 	.word	0x0800a355
 800a32c:	0800a345 	.word	0x0800a345
 800a330:	0800a355 	.word	0x0800a355
 800a334:	0800a34d 	.word	0x0800a34d
 800a338:	0800a33d 	.word	0x0800a33d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a33c:	4b09      	ldr	r3, [pc, #36]	; (800a364 <USBH_UserProcess+0x58>)
 800a33e:	2203      	movs	r2, #3
 800a340:	701a      	strb	r2, [r3, #0]
  break;
 800a342:	e008      	b.n	800a356 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a344:	4b07      	ldr	r3, [pc, #28]	; (800a364 <USBH_UserProcess+0x58>)
 800a346:	2202      	movs	r2, #2
 800a348:	701a      	strb	r2, [r3, #0]
  break;
 800a34a:	e004      	b.n	800a356 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a34c:	4b05      	ldr	r3, [pc, #20]	; (800a364 <USBH_UserProcess+0x58>)
 800a34e:	2201      	movs	r2, #1
 800a350:	701a      	strb	r2, [r3, #0]
  break;
 800a352:	e000      	b.n	800a356 <USBH_UserProcess+0x4a>

  default:
  break;
 800a354:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a356:	bf00      	nop
 800a358:	370c      	adds	r7, #12
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr
 800a362:	bf00      	nop
 800a364:	200000b0 	.word	0x200000b0

0800a368 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b08a      	sub	sp, #40	; 0x28
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a370:	f107 0314 	add.w	r3, r7, #20
 800a374:	2200      	movs	r2, #0
 800a376:	601a      	str	r2, [r3, #0]
 800a378:	605a      	str	r2, [r3, #4]
 800a37a:	609a      	str	r2, [r3, #8]
 800a37c:	60da      	str	r2, [r3, #12]
 800a37e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a388:	d14e      	bne.n	800a428 <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a38a:	4b29      	ldr	r3, [pc, #164]	; (800a430 <HAL_HCD_MspInit+0xc8>)
 800a38c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a38e:	4a28      	ldr	r2, [pc, #160]	; (800a430 <HAL_HCD_MspInit+0xc8>)
 800a390:	f043 0301 	orr.w	r3, r3, #1
 800a394:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a396:	4b26      	ldr	r3, [pc, #152]	; (800a430 <HAL_HCD_MspInit+0xc8>)
 800a398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a39a:	f003 0301 	and.w	r3, r3, #1
 800a39e:	613b      	str	r3, [r7, #16]
 800a3a0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a3a2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a3a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3a8:	2302      	movs	r3, #2
 800a3aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3b0:	2303      	movs	r3, #3
 800a3b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a3b4:	230a      	movs	r3, #10
 800a3b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a3b8:	f107 0314 	add.w	r3, r7, #20
 800a3bc:	4619      	mov	r1, r3
 800a3be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a3c2:	f7f7 ff45 	bl	8002250 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a3c6:	4b1a      	ldr	r3, [pc, #104]	; (800a430 <HAL_HCD_MspInit+0xc8>)
 800a3c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3ca:	4a19      	ldr	r2, [pc, #100]	; (800a430 <HAL_HCD_MspInit+0xc8>)
 800a3cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a3d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a3d2:	4b17      	ldr	r3, [pc, #92]	; (800a430 <HAL_HCD_MspInit+0xc8>)
 800a3d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a3da:	60fb      	str	r3, [r7, #12]
 800a3dc:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a3de:	4b14      	ldr	r3, [pc, #80]	; (800a430 <HAL_HCD_MspInit+0xc8>)
 800a3e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d114      	bne.n	800a414 <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a3ea:	4b11      	ldr	r3, [pc, #68]	; (800a430 <HAL_HCD_MspInit+0xc8>)
 800a3ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3ee:	4a10      	ldr	r2, [pc, #64]	; (800a430 <HAL_HCD_MspInit+0xc8>)
 800a3f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3f4:	6593      	str	r3, [r2, #88]	; 0x58
 800a3f6:	4b0e      	ldr	r3, [pc, #56]	; (800a430 <HAL_HCD_MspInit+0xc8>)
 800a3f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3fe:	60bb      	str	r3, [r7, #8]
 800a400:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800a402:	f7f9 fd57 	bl	8003eb4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a406:	4b0a      	ldr	r3, [pc, #40]	; (800a430 <HAL_HCD_MspInit+0xc8>)
 800a408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a40a:	4a09      	ldr	r2, [pc, #36]	; (800a430 <HAL_HCD_MspInit+0xc8>)
 800a40c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a410:	6593      	str	r3, [r2, #88]	; 0x58
 800a412:	e001      	b.n	800a418 <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800a414:	f7f9 fd4e 	bl	8003eb4 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a418:	2200      	movs	r2, #0
 800a41a:	2100      	movs	r1, #0
 800a41c:	2043      	movs	r0, #67	; 0x43
 800a41e:	f7f7 fee0 	bl	80021e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a422:	2043      	movs	r0, #67	; 0x43
 800a424:	f7f7 fef9 	bl	800221a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a428:	bf00      	nop
 800a42a:	3728      	adds	r7, #40	; 0x28
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	40021000 	.word	0x40021000

0800a434 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a442:	4618      	mov	r0, r3
 800a444:	f7ff f8db 	bl	80095fe <USBH_LL_IncTimer>
}
 800a448:	bf00      	nop
 800a44a:	3708      	adds	r7, #8
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a45e:	4618      	mov	r0, r3
 800a460:	f7ff f913 	bl	800968a <USBH_LL_Connect>
}
 800a464:	bf00      	nop
 800a466:	3708      	adds	r7, #8
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a47a:	4618      	mov	r0, r3
 800a47c:	f7ff f91c 	bl	80096b8 <USBH_LL_Disconnect>
}
 800a480:	bf00      	nop
 800a482:	3708      	adds	r7, #8
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	460b      	mov	r3, r1
 800a492:	70fb      	strb	r3, [r7, #3]
 800a494:	4613      	mov	r3, r2
 800a496:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a498:	bf00      	nop
 800a49a:	370c      	adds	r7, #12
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b082      	sub	sp, #8
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7ff f8cd 	bl	8009652 <USBH_LL_PortEnabled>
}
 800a4b8:	bf00      	nop
 800a4ba:	3708      	adds	r7, #8
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7ff f8cd 	bl	800966e <USBH_LL_PortDisabled>
}
 800a4d4:	bf00      	nop
 800a4d6:	3708      	adds	r7, #8
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	d12d      	bne.n	800a54a <USBH_LL_Init+0x6e>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a4ee:	4a19      	ldr	r2, [pc, #100]	; (800a554 <USBH_LL_Init+0x78>)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	4a16      	ldr	r2, [pc, #88]	; (800a554 <USBH_LL_Init+0x78>)
 800a4fa:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a4fe:	4b15      	ldr	r3, [pc, #84]	; (800a554 <USBH_LL_Init+0x78>)
 800a500:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a504:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800a506:	4b13      	ldr	r3, [pc, #76]	; (800a554 <USBH_LL_Init+0x78>)
 800a508:	220c      	movs	r2, #12
 800a50a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = USB_OTG_SPEED_FULL;
 800a50c:	4b11      	ldr	r3, [pc, #68]	; (800a554 <USBH_LL_Init+0x78>)
 800a50e:	2203      	movs	r2, #3
 800a510:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a512:	4b10      	ldr	r3, [pc, #64]	; (800a554 <USBH_LL_Init+0x78>)
 800a514:	2200      	movs	r2, #0
 800a516:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a518:	4b0e      	ldr	r3, [pc, #56]	; (800a554 <USBH_LL_Init+0x78>)
 800a51a:	2202      	movs	r2, #2
 800a51c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a51e:	4b0d      	ldr	r3, [pc, #52]	; (800a554 <USBH_LL_Init+0x78>)
 800a520:	2200      	movs	r2, #0
 800a522:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a524:	4b0b      	ldr	r3, [pc, #44]	; (800a554 <USBH_LL_Init+0x78>)
 800a526:	2200      	movs	r2, #0
 800a528:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a52a:	480a      	ldr	r0, [pc, #40]	; (800a554 <USBH_LL_Init+0x78>)
 800a52c:	f7f8 f854 	bl	80025d8 <HAL_HCD_Init>
 800a530:	4603      	mov	r3, r0
 800a532:	2b00      	cmp	r3, #0
 800a534:	d001      	beq.n	800a53a <USBH_LL_Init+0x5e>
  {
    Error_Handler( );
 800a536:	f7f6 f8bb 	bl	80006b0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a53a:	4806      	ldr	r0, [pc, #24]	; (800a554 <USBH_LL_Init+0x78>)
 800a53c:	f7f8 fc33 	bl	8002da6 <HAL_HCD_GetCurrentFrame>
 800a540:	4603      	mov	r3, r0
 800a542:	4619      	mov	r1, r3
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f7ff f84b 	bl	80095e0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3708      	adds	r7, #8
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}
 800a554:	20000560 	.word	0x20000560

0800a558 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a560:	2300      	movs	r3, #0
 800a562:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a564:	2300      	movs	r3, #0
 800a566:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a56e:	4618      	mov	r0, r3
 800a570:	f7f8 fba3 	bl	8002cba <HAL_HCD_Start>
 800a574:	4603      	mov	r3, r0
 800a576:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a578:	7bfb      	ldrb	r3, [r7, #15]
 800a57a:	4618      	mov	r0, r3
 800a57c:	f000 f952 	bl	800a824 <USBH_Get_USB_Status>
 800a580:	4603      	mov	r3, r0
 800a582:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a584:	7bbb      	ldrb	r3, [r7, #14]
}
 800a586:	4618      	mov	r0, r3
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b084      	sub	sp, #16
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a596:	2300      	movs	r3, #0
 800a598:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a59a:	2300      	movs	r3, #0
 800a59c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f7f8 fbab 	bl	8002d00 <HAL_HCD_Stop>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a5ae:	7bfb      	ldrb	r3, [r7, #15]
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f000 f937 	bl	800a824 <USBH_Get_USB_Status>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3710      	adds	r7, #16
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b084      	sub	sp, #16
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7f8 fbf3 	bl	8002dc2 <HAL_HCD_GetCurrentSpeed>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b02      	cmp	r3, #2
 800a5e0:	d00c      	beq.n	800a5fc <USBH_LL_GetSpeed+0x38>
 800a5e2:	2b02      	cmp	r3, #2
 800a5e4:	d80d      	bhi.n	800a602 <USBH_LL_GetSpeed+0x3e>
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d002      	beq.n	800a5f0 <USBH_LL_GetSpeed+0x2c>
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d003      	beq.n	800a5f6 <USBH_LL_GetSpeed+0x32>
 800a5ee:	e008      	b.n	800a602 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	73fb      	strb	r3, [r7, #15]
    break;
 800a5f4:	e008      	b.n	800a608 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	73fb      	strb	r3, [r7, #15]
    break;
 800a5fa:	e005      	b.n	800a608 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a5fc:	2302      	movs	r3, #2
 800a5fe:	73fb      	strb	r3, [r7, #15]
    break;
 800a600:	e002      	b.n	800a608 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a602:	2301      	movs	r3, #1
 800a604:	73fb      	strb	r3, [r7, #15]
    break;
 800a606:	bf00      	nop
  }
  return  speed;
 800a608:	7bfb      	ldrb	r3, [r7, #15]
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3710      	adds	r7, #16
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}

0800a612 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a612:	b580      	push	{r7, lr}
 800a614:	b084      	sub	sp, #16
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a61a:	2300      	movs	r3, #0
 800a61c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a61e:	2300      	movs	r3, #0
 800a620:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a628:	4618      	mov	r0, r3
 800a62a:	f7f8 fb86 	bl	8002d3a <HAL_HCD_ResetPort>
 800a62e:	4603      	mov	r3, r0
 800a630:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a632:	7bfb      	ldrb	r3, [r7, #15]
 800a634:	4618      	mov	r0, r3
 800a636:	f000 f8f5 	bl	800a824 <USBH_Get_USB_Status>
 800a63a:	4603      	mov	r3, r0
 800a63c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a63e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a640:	4618      	mov	r0, r3
 800a642:	3710      	adds	r7, #16
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	460b      	mov	r3, r1
 800a652:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a65a:	78fa      	ldrb	r2, [r7, #3]
 800a65c:	4611      	mov	r1, r2
 800a65e:	4618      	mov	r0, r3
 800a660:	f7f8 fb8d 	bl	8002d7e <HAL_HCD_HC_GetXferCount>
 800a664:	4603      	mov	r3, r0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3708      	adds	r7, #8
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a66e:	b590      	push	{r4, r7, lr}
 800a670:	b089      	sub	sp, #36	; 0x24
 800a672:	af04      	add	r7, sp, #16
 800a674:	6078      	str	r0, [r7, #4]
 800a676:	4608      	mov	r0, r1
 800a678:	4611      	mov	r1, r2
 800a67a:	461a      	mov	r2, r3
 800a67c:	4603      	mov	r3, r0
 800a67e:	70fb      	strb	r3, [r7, #3]
 800a680:	460b      	mov	r3, r1
 800a682:	70bb      	strb	r3, [r7, #2]
 800a684:	4613      	mov	r3, r2
 800a686:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a688:	2300      	movs	r3, #0
 800a68a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a68c:	2300      	movs	r3, #0
 800a68e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a696:	787c      	ldrb	r4, [r7, #1]
 800a698:	78ba      	ldrb	r2, [r7, #2]
 800a69a:	78f9      	ldrb	r1, [r7, #3]
 800a69c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a69e:	9302      	str	r3, [sp, #8]
 800a6a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a6a4:	9301      	str	r3, [sp, #4]
 800a6a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a6aa:	9300      	str	r3, [sp, #0]
 800a6ac:	4623      	mov	r3, r4
 800a6ae:	f7f7 fff5 	bl	800269c <HAL_HCD_HC_Init>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a6b6:	7bfb      	ldrb	r3, [r7, #15]
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f000 f8b3 	bl	800a824 <USBH_Get_USB_Status>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3714      	adds	r7, #20
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd90      	pop	{r4, r7, pc}

0800a6cc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a6e6:	78fa      	ldrb	r2, [r7, #3]
 800a6e8:	4611      	mov	r1, r2
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f7f8 f865 	bl	80027ba <HAL_HCD_HC_Halt>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a6f4:	7bfb      	ldrb	r3, [r7, #15]
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f000 f894 	bl	800a824 <USBH_Get_USB_Status>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a700:	7bbb      	ldrb	r3, [r7, #14]
}
 800a702:	4618      	mov	r0, r3
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a70a:	b590      	push	{r4, r7, lr}
 800a70c:	b089      	sub	sp, #36	; 0x24
 800a70e:	af04      	add	r7, sp, #16
 800a710:	6078      	str	r0, [r7, #4]
 800a712:	4608      	mov	r0, r1
 800a714:	4611      	mov	r1, r2
 800a716:	461a      	mov	r2, r3
 800a718:	4603      	mov	r3, r0
 800a71a:	70fb      	strb	r3, [r7, #3]
 800a71c:	460b      	mov	r3, r1
 800a71e:	70bb      	strb	r3, [r7, #2]
 800a720:	4613      	mov	r3, r2
 800a722:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a724:	2300      	movs	r3, #0
 800a726:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a728:	2300      	movs	r3, #0
 800a72a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a732:	787c      	ldrb	r4, [r7, #1]
 800a734:	78ba      	ldrb	r2, [r7, #2]
 800a736:	78f9      	ldrb	r1, [r7, #3]
 800a738:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a73c:	9303      	str	r3, [sp, #12]
 800a73e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a740:	9302      	str	r3, [sp, #8]
 800a742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a744:	9301      	str	r3, [sp, #4]
 800a746:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a74a:	9300      	str	r3, [sp, #0]
 800a74c:	4623      	mov	r3, r4
 800a74e:	f7f8 f857 	bl	8002800 <HAL_HCD_HC_SubmitRequest>
 800a752:	4603      	mov	r3, r0
 800a754:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a756:	7bfb      	ldrb	r3, [r7, #15]
 800a758:	4618      	mov	r0, r3
 800a75a:	f000 f863 	bl	800a824 <USBH_Get_USB_Status>
 800a75e:	4603      	mov	r3, r0
 800a760:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a762:	7bbb      	ldrb	r3, [r7, #14]
}
 800a764:	4618      	mov	r0, r3
 800a766:	3714      	adds	r7, #20
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd90      	pop	{r4, r7, pc}

0800a76c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b082      	sub	sp, #8
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	460b      	mov	r3, r1
 800a776:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a77e:	78fa      	ldrb	r2, [r7, #3]
 800a780:	4611      	mov	r1, r2
 800a782:	4618      	mov	r0, r3
 800a784:	f7f8 fae7 	bl	8002d56 <HAL_HCD_HC_GetURBState>
 800a788:	4603      	mov	r3, r0
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3708      	adds	r7, #8
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}

0800a792 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a792:	b580      	push	{r7, lr}
 800a794:	b082      	sub	sp, #8
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
 800a79a:	460b      	mov	r3, r1
 800a79c:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800a79e:	20c8      	movs	r0, #200	; 0xc8
 800a7a0:	f7f6 fa10 	bl	8000bc4 <HAL_Delay>
  return USBH_OK;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3708      	adds	r7, #8
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a7ae:	b480      	push	{r7}
 800a7b0:	b085      	sub	sp, #20
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
 800a7b6:	460b      	mov	r3, r1
 800a7b8:	70fb      	strb	r3, [r7, #3]
 800a7ba:	4613      	mov	r3, r2
 800a7bc:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a7c4:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a7c6:	78fb      	ldrb	r3, [r7, #3]
 800a7c8:	68fa      	ldr	r2, [r7, #12]
 800a7ca:	212c      	movs	r1, #44	; 0x2c
 800a7cc:	fb01 f303 	mul.w	r3, r1, r3
 800a7d0:	4413      	add	r3, r2
 800a7d2:	333b      	adds	r3, #59	; 0x3b
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d009      	beq.n	800a7ee <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a7da:	78fb      	ldrb	r3, [r7, #3]
 800a7dc:	68fa      	ldr	r2, [r7, #12]
 800a7de:	212c      	movs	r1, #44	; 0x2c
 800a7e0:	fb01 f303 	mul.w	r3, r1, r3
 800a7e4:	4413      	add	r3, r2
 800a7e6:	3354      	adds	r3, #84	; 0x54
 800a7e8:	78ba      	ldrb	r2, [r7, #2]
 800a7ea:	701a      	strb	r2, [r3, #0]
 800a7ec:	e008      	b.n	800a800 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a7ee:	78fb      	ldrb	r3, [r7, #3]
 800a7f0:	68fa      	ldr	r2, [r7, #12]
 800a7f2:	212c      	movs	r1, #44	; 0x2c
 800a7f4:	fb01 f303 	mul.w	r3, r1, r3
 800a7f8:	4413      	add	r3, r2
 800a7fa:	3355      	adds	r3, #85	; 0x55
 800a7fc:	78ba      	ldrb	r2, [r7, #2]
 800a7fe:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a800:	2300      	movs	r3, #0
}
 800a802:	4618      	mov	r0, r3
 800a804:	3714      	adds	r7, #20
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr

0800a80e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a80e:	b580      	push	{r7, lr}
 800a810:	b082      	sub	sp, #8
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f7f6 f9d4 	bl	8000bc4 <HAL_Delay>
}
 800a81c:	bf00      	nop
 800a81e:	3708      	adds	r7, #8
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a824:	b480      	push	{r7}
 800a826:	b085      	sub	sp, #20
 800a828:	af00      	add	r7, sp, #0
 800a82a:	4603      	mov	r3, r0
 800a82c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a82e:	2300      	movs	r3, #0
 800a830:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a832:	79fb      	ldrb	r3, [r7, #7]
 800a834:	2b03      	cmp	r3, #3
 800a836:	d817      	bhi.n	800a868 <USBH_Get_USB_Status+0x44>
 800a838:	a201      	add	r2, pc, #4	; (adr r2, 800a840 <USBH_Get_USB_Status+0x1c>)
 800a83a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a83e:	bf00      	nop
 800a840:	0800a851 	.word	0x0800a851
 800a844:	0800a857 	.word	0x0800a857
 800a848:	0800a85d 	.word	0x0800a85d
 800a84c:	0800a863 	.word	0x0800a863
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a850:	2300      	movs	r3, #0
 800a852:	73fb      	strb	r3, [r7, #15]
    break;
 800a854:	e00b      	b.n	800a86e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a856:	2302      	movs	r3, #2
 800a858:	73fb      	strb	r3, [r7, #15]
    break;
 800a85a:	e008      	b.n	800a86e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a85c:	2301      	movs	r3, #1
 800a85e:	73fb      	strb	r3, [r7, #15]
    break;
 800a860:	e005      	b.n	800a86e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a862:	2302      	movs	r3, #2
 800a864:	73fb      	strb	r3, [r7, #15]
    break;
 800a866:	e002      	b.n	800a86e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a868:	2302      	movs	r3, #2
 800a86a:	73fb      	strb	r3, [r7, #15]
    break;
 800a86c:	bf00      	nop
  }
  return usb_status;
 800a86e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a870:	4618      	mov	r0, r3
 800a872:	3714      	adds	r7, #20
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr

0800a87c <__errno>:
 800a87c:	4b01      	ldr	r3, [pc, #4]	; (800a884 <__errno+0x8>)
 800a87e:	6818      	ldr	r0, [r3, #0]
 800a880:	4770      	bx	lr
 800a882:	bf00      	nop
 800a884:	2000002c 	.word	0x2000002c

0800a888 <__libc_init_array>:
 800a888:	b570      	push	{r4, r5, r6, lr}
 800a88a:	4d0d      	ldr	r5, [pc, #52]	; (800a8c0 <__libc_init_array+0x38>)
 800a88c:	4c0d      	ldr	r4, [pc, #52]	; (800a8c4 <__libc_init_array+0x3c>)
 800a88e:	1b64      	subs	r4, r4, r5
 800a890:	10a4      	asrs	r4, r4, #2
 800a892:	2600      	movs	r6, #0
 800a894:	42a6      	cmp	r6, r4
 800a896:	d109      	bne.n	800a8ac <__libc_init_array+0x24>
 800a898:	4d0b      	ldr	r5, [pc, #44]	; (800a8c8 <__libc_init_array+0x40>)
 800a89a:	4c0c      	ldr	r4, [pc, #48]	; (800a8cc <__libc_init_array+0x44>)
 800a89c:	f000 ff94 	bl	800b7c8 <_init>
 800a8a0:	1b64      	subs	r4, r4, r5
 800a8a2:	10a4      	asrs	r4, r4, #2
 800a8a4:	2600      	movs	r6, #0
 800a8a6:	42a6      	cmp	r6, r4
 800a8a8:	d105      	bne.n	800a8b6 <__libc_init_array+0x2e>
 800a8aa:	bd70      	pop	{r4, r5, r6, pc}
 800a8ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8b0:	4798      	blx	r3
 800a8b2:	3601      	adds	r6, #1
 800a8b4:	e7ee      	b.n	800a894 <__libc_init_array+0xc>
 800a8b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8ba:	4798      	blx	r3
 800a8bc:	3601      	adds	r6, #1
 800a8be:	e7f2      	b.n	800a8a6 <__libc_init_array+0x1e>
 800a8c0:	0800b8e8 	.word	0x0800b8e8
 800a8c4:	0800b8e8 	.word	0x0800b8e8
 800a8c8:	0800b8e8 	.word	0x0800b8e8
 800a8cc:	0800b8ec 	.word	0x0800b8ec

0800a8d0 <malloc>:
 800a8d0:	4b02      	ldr	r3, [pc, #8]	; (800a8dc <malloc+0xc>)
 800a8d2:	4601      	mov	r1, r0
 800a8d4:	6818      	ldr	r0, [r3, #0]
 800a8d6:	f000 b871 	b.w	800a9bc <_malloc_r>
 800a8da:	bf00      	nop
 800a8dc:	2000002c 	.word	0x2000002c

0800a8e0 <free>:
 800a8e0:	4b02      	ldr	r3, [pc, #8]	; (800a8ec <free+0xc>)
 800a8e2:	4601      	mov	r1, r0
 800a8e4:	6818      	ldr	r0, [r3, #0]
 800a8e6:	f000 b819 	b.w	800a91c <_free_r>
 800a8ea:	bf00      	nop
 800a8ec:	2000002c 	.word	0x2000002c

0800a8f0 <memcpy>:
 800a8f0:	440a      	add	r2, r1
 800a8f2:	4291      	cmp	r1, r2
 800a8f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8f8:	d100      	bne.n	800a8fc <memcpy+0xc>
 800a8fa:	4770      	bx	lr
 800a8fc:	b510      	push	{r4, lr}
 800a8fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a902:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a906:	4291      	cmp	r1, r2
 800a908:	d1f9      	bne.n	800a8fe <memcpy+0xe>
 800a90a:	bd10      	pop	{r4, pc}

0800a90c <memset>:
 800a90c:	4402      	add	r2, r0
 800a90e:	4603      	mov	r3, r0
 800a910:	4293      	cmp	r3, r2
 800a912:	d100      	bne.n	800a916 <memset+0xa>
 800a914:	4770      	bx	lr
 800a916:	f803 1b01 	strb.w	r1, [r3], #1
 800a91a:	e7f9      	b.n	800a910 <memset+0x4>

0800a91c <_free_r>:
 800a91c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a91e:	2900      	cmp	r1, #0
 800a920:	d048      	beq.n	800a9b4 <_free_r+0x98>
 800a922:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a926:	9001      	str	r0, [sp, #4]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f1a1 0404 	sub.w	r4, r1, #4
 800a92e:	bfb8      	it	lt
 800a930:	18e4      	addlt	r4, r4, r3
 800a932:	f000 f9bd 	bl	800acb0 <__malloc_lock>
 800a936:	4a20      	ldr	r2, [pc, #128]	; (800a9b8 <_free_r+0x9c>)
 800a938:	9801      	ldr	r0, [sp, #4]
 800a93a:	6813      	ldr	r3, [r2, #0]
 800a93c:	4615      	mov	r5, r2
 800a93e:	b933      	cbnz	r3, 800a94e <_free_r+0x32>
 800a940:	6063      	str	r3, [r4, #4]
 800a942:	6014      	str	r4, [r2, #0]
 800a944:	b003      	add	sp, #12
 800a946:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a94a:	f000 b9b7 	b.w	800acbc <__malloc_unlock>
 800a94e:	42a3      	cmp	r3, r4
 800a950:	d90b      	bls.n	800a96a <_free_r+0x4e>
 800a952:	6821      	ldr	r1, [r4, #0]
 800a954:	1862      	adds	r2, r4, r1
 800a956:	4293      	cmp	r3, r2
 800a958:	bf04      	itt	eq
 800a95a:	681a      	ldreq	r2, [r3, #0]
 800a95c:	685b      	ldreq	r3, [r3, #4]
 800a95e:	6063      	str	r3, [r4, #4]
 800a960:	bf04      	itt	eq
 800a962:	1852      	addeq	r2, r2, r1
 800a964:	6022      	streq	r2, [r4, #0]
 800a966:	602c      	str	r4, [r5, #0]
 800a968:	e7ec      	b.n	800a944 <_free_r+0x28>
 800a96a:	461a      	mov	r2, r3
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	b10b      	cbz	r3, 800a974 <_free_r+0x58>
 800a970:	42a3      	cmp	r3, r4
 800a972:	d9fa      	bls.n	800a96a <_free_r+0x4e>
 800a974:	6811      	ldr	r1, [r2, #0]
 800a976:	1855      	adds	r5, r2, r1
 800a978:	42a5      	cmp	r5, r4
 800a97a:	d10b      	bne.n	800a994 <_free_r+0x78>
 800a97c:	6824      	ldr	r4, [r4, #0]
 800a97e:	4421      	add	r1, r4
 800a980:	1854      	adds	r4, r2, r1
 800a982:	42a3      	cmp	r3, r4
 800a984:	6011      	str	r1, [r2, #0]
 800a986:	d1dd      	bne.n	800a944 <_free_r+0x28>
 800a988:	681c      	ldr	r4, [r3, #0]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	6053      	str	r3, [r2, #4]
 800a98e:	4421      	add	r1, r4
 800a990:	6011      	str	r1, [r2, #0]
 800a992:	e7d7      	b.n	800a944 <_free_r+0x28>
 800a994:	d902      	bls.n	800a99c <_free_r+0x80>
 800a996:	230c      	movs	r3, #12
 800a998:	6003      	str	r3, [r0, #0]
 800a99a:	e7d3      	b.n	800a944 <_free_r+0x28>
 800a99c:	6825      	ldr	r5, [r4, #0]
 800a99e:	1961      	adds	r1, r4, r5
 800a9a0:	428b      	cmp	r3, r1
 800a9a2:	bf04      	itt	eq
 800a9a4:	6819      	ldreq	r1, [r3, #0]
 800a9a6:	685b      	ldreq	r3, [r3, #4]
 800a9a8:	6063      	str	r3, [r4, #4]
 800a9aa:	bf04      	itt	eq
 800a9ac:	1949      	addeq	r1, r1, r5
 800a9ae:	6021      	streq	r1, [r4, #0]
 800a9b0:	6054      	str	r4, [r2, #4]
 800a9b2:	e7c7      	b.n	800a944 <_free_r+0x28>
 800a9b4:	b003      	add	sp, #12
 800a9b6:	bd30      	pop	{r4, r5, pc}
 800a9b8:	200000b4 	.word	0x200000b4

0800a9bc <_malloc_r>:
 800a9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9be:	1ccd      	adds	r5, r1, #3
 800a9c0:	f025 0503 	bic.w	r5, r5, #3
 800a9c4:	3508      	adds	r5, #8
 800a9c6:	2d0c      	cmp	r5, #12
 800a9c8:	bf38      	it	cc
 800a9ca:	250c      	movcc	r5, #12
 800a9cc:	2d00      	cmp	r5, #0
 800a9ce:	4606      	mov	r6, r0
 800a9d0:	db01      	blt.n	800a9d6 <_malloc_r+0x1a>
 800a9d2:	42a9      	cmp	r1, r5
 800a9d4:	d903      	bls.n	800a9de <_malloc_r+0x22>
 800a9d6:	230c      	movs	r3, #12
 800a9d8:	6033      	str	r3, [r6, #0]
 800a9da:	2000      	movs	r0, #0
 800a9dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9de:	f000 f967 	bl	800acb0 <__malloc_lock>
 800a9e2:	4921      	ldr	r1, [pc, #132]	; (800aa68 <_malloc_r+0xac>)
 800a9e4:	680a      	ldr	r2, [r1, #0]
 800a9e6:	4614      	mov	r4, r2
 800a9e8:	b99c      	cbnz	r4, 800aa12 <_malloc_r+0x56>
 800a9ea:	4f20      	ldr	r7, [pc, #128]	; (800aa6c <_malloc_r+0xb0>)
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	b923      	cbnz	r3, 800a9fa <_malloc_r+0x3e>
 800a9f0:	4621      	mov	r1, r4
 800a9f2:	4630      	mov	r0, r6
 800a9f4:	f000 f854 	bl	800aaa0 <_sbrk_r>
 800a9f8:	6038      	str	r0, [r7, #0]
 800a9fa:	4629      	mov	r1, r5
 800a9fc:	4630      	mov	r0, r6
 800a9fe:	f000 f84f 	bl	800aaa0 <_sbrk_r>
 800aa02:	1c43      	adds	r3, r0, #1
 800aa04:	d123      	bne.n	800aa4e <_malloc_r+0x92>
 800aa06:	230c      	movs	r3, #12
 800aa08:	6033      	str	r3, [r6, #0]
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	f000 f956 	bl	800acbc <__malloc_unlock>
 800aa10:	e7e3      	b.n	800a9da <_malloc_r+0x1e>
 800aa12:	6823      	ldr	r3, [r4, #0]
 800aa14:	1b5b      	subs	r3, r3, r5
 800aa16:	d417      	bmi.n	800aa48 <_malloc_r+0x8c>
 800aa18:	2b0b      	cmp	r3, #11
 800aa1a:	d903      	bls.n	800aa24 <_malloc_r+0x68>
 800aa1c:	6023      	str	r3, [r4, #0]
 800aa1e:	441c      	add	r4, r3
 800aa20:	6025      	str	r5, [r4, #0]
 800aa22:	e004      	b.n	800aa2e <_malloc_r+0x72>
 800aa24:	6863      	ldr	r3, [r4, #4]
 800aa26:	42a2      	cmp	r2, r4
 800aa28:	bf0c      	ite	eq
 800aa2a:	600b      	streq	r3, [r1, #0]
 800aa2c:	6053      	strne	r3, [r2, #4]
 800aa2e:	4630      	mov	r0, r6
 800aa30:	f000 f944 	bl	800acbc <__malloc_unlock>
 800aa34:	f104 000b 	add.w	r0, r4, #11
 800aa38:	1d23      	adds	r3, r4, #4
 800aa3a:	f020 0007 	bic.w	r0, r0, #7
 800aa3e:	1ac2      	subs	r2, r0, r3
 800aa40:	d0cc      	beq.n	800a9dc <_malloc_r+0x20>
 800aa42:	1a1b      	subs	r3, r3, r0
 800aa44:	50a3      	str	r3, [r4, r2]
 800aa46:	e7c9      	b.n	800a9dc <_malloc_r+0x20>
 800aa48:	4622      	mov	r2, r4
 800aa4a:	6864      	ldr	r4, [r4, #4]
 800aa4c:	e7cc      	b.n	800a9e8 <_malloc_r+0x2c>
 800aa4e:	1cc4      	adds	r4, r0, #3
 800aa50:	f024 0403 	bic.w	r4, r4, #3
 800aa54:	42a0      	cmp	r0, r4
 800aa56:	d0e3      	beq.n	800aa20 <_malloc_r+0x64>
 800aa58:	1a21      	subs	r1, r4, r0
 800aa5a:	4630      	mov	r0, r6
 800aa5c:	f000 f820 	bl	800aaa0 <_sbrk_r>
 800aa60:	3001      	adds	r0, #1
 800aa62:	d1dd      	bne.n	800aa20 <_malloc_r+0x64>
 800aa64:	e7cf      	b.n	800aa06 <_malloc_r+0x4a>
 800aa66:	bf00      	nop
 800aa68:	200000b4 	.word	0x200000b4
 800aa6c:	200000b8 	.word	0x200000b8

0800aa70 <iprintf>:
 800aa70:	b40f      	push	{r0, r1, r2, r3}
 800aa72:	4b0a      	ldr	r3, [pc, #40]	; (800aa9c <iprintf+0x2c>)
 800aa74:	b513      	push	{r0, r1, r4, lr}
 800aa76:	681c      	ldr	r4, [r3, #0]
 800aa78:	b124      	cbz	r4, 800aa84 <iprintf+0x14>
 800aa7a:	69a3      	ldr	r3, [r4, #24]
 800aa7c:	b913      	cbnz	r3, 800aa84 <iprintf+0x14>
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f000 f876 	bl	800ab70 <__sinit>
 800aa84:	ab05      	add	r3, sp, #20
 800aa86:	9a04      	ldr	r2, [sp, #16]
 800aa88:	68a1      	ldr	r1, [r4, #8]
 800aa8a:	9301      	str	r3, [sp, #4]
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	f000 f945 	bl	800ad1c <_vfiprintf_r>
 800aa92:	b002      	add	sp, #8
 800aa94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa98:	b004      	add	sp, #16
 800aa9a:	4770      	bx	lr
 800aa9c:	2000002c 	.word	0x2000002c

0800aaa0 <_sbrk_r>:
 800aaa0:	b538      	push	{r3, r4, r5, lr}
 800aaa2:	4d06      	ldr	r5, [pc, #24]	; (800aabc <_sbrk_r+0x1c>)
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	4604      	mov	r4, r0
 800aaa8:	4608      	mov	r0, r1
 800aaaa:	602b      	str	r3, [r5, #0]
 800aaac:	f7f5 ffa4 	bl	80009f8 <_sbrk>
 800aab0:	1c43      	adds	r3, r0, #1
 800aab2:	d102      	bne.n	800aaba <_sbrk_r+0x1a>
 800aab4:	682b      	ldr	r3, [r5, #0]
 800aab6:	b103      	cbz	r3, 800aaba <_sbrk_r+0x1a>
 800aab8:	6023      	str	r3, [r4, #0]
 800aaba:	bd38      	pop	{r3, r4, r5, pc}
 800aabc:	20000870 	.word	0x20000870

0800aac0 <std>:
 800aac0:	2300      	movs	r3, #0
 800aac2:	b510      	push	{r4, lr}
 800aac4:	4604      	mov	r4, r0
 800aac6:	e9c0 3300 	strd	r3, r3, [r0]
 800aaca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aace:	6083      	str	r3, [r0, #8]
 800aad0:	8181      	strh	r1, [r0, #12]
 800aad2:	6643      	str	r3, [r0, #100]	; 0x64
 800aad4:	81c2      	strh	r2, [r0, #14]
 800aad6:	6183      	str	r3, [r0, #24]
 800aad8:	4619      	mov	r1, r3
 800aada:	2208      	movs	r2, #8
 800aadc:	305c      	adds	r0, #92	; 0x5c
 800aade:	f7ff ff15 	bl	800a90c <memset>
 800aae2:	4b05      	ldr	r3, [pc, #20]	; (800aaf8 <std+0x38>)
 800aae4:	6263      	str	r3, [r4, #36]	; 0x24
 800aae6:	4b05      	ldr	r3, [pc, #20]	; (800aafc <std+0x3c>)
 800aae8:	62a3      	str	r3, [r4, #40]	; 0x28
 800aaea:	4b05      	ldr	r3, [pc, #20]	; (800ab00 <std+0x40>)
 800aaec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aaee:	4b05      	ldr	r3, [pc, #20]	; (800ab04 <std+0x44>)
 800aaf0:	6224      	str	r4, [r4, #32]
 800aaf2:	6323      	str	r3, [r4, #48]	; 0x30
 800aaf4:	bd10      	pop	{r4, pc}
 800aaf6:	bf00      	nop
 800aaf8:	0800b2a5 	.word	0x0800b2a5
 800aafc:	0800b2c7 	.word	0x0800b2c7
 800ab00:	0800b2ff 	.word	0x0800b2ff
 800ab04:	0800b323 	.word	0x0800b323

0800ab08 <_cleanup_r>:
 800ab08:	4901      	ldr	r1, [pc, #4]	; (800ab10 <_cleanup_r+0x8>)
 800ab0a:	f000 b8af 	b.w	800ac6c <_fwalk_reent>
 800ab0e:	bf00      	nop
 800ab10:	0800b5fd 	.word	0x0800b5fd

0800ab14 <__sfmoreglue>:
 800ab14:	b570      	push	{r4, r5, r6, lr}
 800ab16:	1e4a      	subs	r2, r1, #1
 800ab18:	2568      	movs	r5, #104	; 0x68
 800ab1a:	4355      	muls	r5, r2
 800ab1c:	460e      	mov	r6, r1
 800ab1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ab22:	f7ff ff4b 	bl	800a9bc <_malloc_r>
 800ab26:	4604      	mov	r4, r0
 800ab28:	b140      	cbz	r0, 800ab3c <__sfmoreglue+0x28>
 800ab2a:	2100      	movs	r1, #0
 800ab2c:	e9c0 1600 	strd	r1, r6, [r0]
 800ab30:	300c      	adds	r0, #12
 800ab32:	60a0      	str	r0, [r4, #8]
 800ab34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ab38:	f7ff fee8 	bl	800a90c <memset>
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	bd70      	pop	{r4, r5, r6, pc}

0800ab40 <__sfp_lock_acquire>:
 800ab40:	4801      	ldr	r0, [pc, #4]	; (800ab48 <__sfp_lock_acquire+0x8>)
 800ab42:	f000 b8b3 	b.w	800acac <__retarget_lock_acquire_recursive>
 800ab46:	bf00      	nop
 800ab48:	2000086c 	.word	0x2000086c

0800ab4c <__sfp_lock_release>:
 800ab4c:	4801      	ldr	r0, [pc, #4]	; (800ab54 <__sfp_lock_release+0x8>)
 800ab4e:	f000 b8ae 	b.w	800acae <__retarget_lock_release_recursive>
 800ab52:	bf00      	nop
 800ab54:	2000086c 	.word	0x2000086c

0800ab58 <__sinit_lock_acquire>:
 800ab58:	4801      	ldr	r0, [pc, #4]	; (800ab60 <__sinit_lock_acquire+0x8>)
 800ab5a:	f000 b8a7 	b.w	800acac <__retarget_lock_acquire_recursive>
 800ab5e:	bf00      	nop
 800ab60:	20000867 	.word	0x20000867

0800ab64 <__sinit_lock_release>:
 800ab64:	4801      	ldr	r0, [pc, #4]	; (800ab6c <__sinit_lock_release+0x8>)
 800ab66:	f000 b8a2 	b.w	800acae <__retarget_lock_release_recursive>
 800ab6a:	bf00      	nop
 800ab6c:	20000867 	.word	0x20000867

0800ab70 <__sinit>:
 800ab70:	b510      	push	{r4, lr}
 800ab72:	4604      	mov	r4, r0
 800ab74:	f7ff fff0 	bl	800ab58 <__sinit_lock_acquire>
 800ab78:	69a3      	ldr	r3, [r4, #24]
 800ab7a:	b11b      	cbz	r3, 800ab84 <__sinit+0x14>
 800ab7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab80:	f7ff bff0 	b.w	800ab64 <__sinit_lock_release>
 800ab84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ab88:	6523      	str	r3, [r4, #80]	; 0x50
 800ab8a:	4b13      	ldr	r3, [pc, #76]	; (800abd8 <__sinit+0x68>)
 800ab8c:	4a13      	ldr	r2, [pc, #76]	; (800abdc <__sinit+0x6c>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	62a2      	str	r2, [r4, #40]	; 0x28
 800ab92:	42a3      	cmp	r3, r4
 800ab94:	bf04      	itt	eq
 800ab96:	2301      	moveq	r3, #1
 800ab98:	61a3      	streq	r3, [r4, #24]
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	f000 f820 	bl	800abe0 <__sfp>
 800aba0:	6060      	str	r0, [r4, #4]
 800aba2:	4620      	mov	r0, r4
 800aba4:	f000 f81c 	bl	800abe0 <__sfp>
 800aba8:	60a0      	str	r0, [r4, #8]
 800abaa:	4620      	mov	r0, r4
 800abac:	f000 f818 	bl	800abe0 <__sfp>
 800abb0:	2200      	movs	r2, #0
 800abb2:	60e0      	str	r0, [r4, #12]
 800abb4:	2104      	movs	r1, #4
 800abb6:	6860      	ldr	r0, [r4, #4]
 800abb8:	f7ff ff82 	bl	800aac0 <std>
 800abbc:	68a0      	ldr	r0, [r4, #8]
 800abbe:	2201      	movs	r2, #1
 800abc0:	2109      	movs	r1, #9
 800abc2:	f7ff ff7d 	bl	800aac0 <std>
 800abc6:	68e0      	ldr	r0, [r4, #12]
 800abc8:	2202      	movs	r2, #2
 800abca:	2112      	movs	r1, #18
 800abcc:	f7ff ff78 	bl	800aac0 <std>
 800abd0:	2301      	movs	r3, #1
 800abd2:	61a3      	str	r3, [r4, #24]
 800abd4:	e7d2      	b.n	800ab7c <__sinit+0xc>
 800abd6:	bf00      	nop
 800abd8:	0800b850 	.word	0x0800b850
 800abdc:	0800ab09 	.word	0x0800ab09

0800abe0 <__sfp>:
 800abe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abe2:	4607      	mov	r7, r0
 800abe4:	f7ff ffac 	bl	800ab40 <__sfp_lock_acquire>
 800abe8:	4b1e      	ldr	r3, [pc, #120]	; (800ac64 <__sfp+0x84>)
 800abea:	681e      	ldr	r6, [r3, #0]
 800abec:	69b3      	ldr	r3, [r6, #24]
 800abee:	b913      	cbnz	r3, 800abf6 <__sfp+0x16>
 800abf0:	4630      	mov	r0, r6
 800abf2:	f7ff ffbd 	bl	800ab70 <__sinit>
 800abf6:	3648      	adds	r6, #72	; 0x48
 800abf8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800abfc:	3b01      	subs	r3, #1
 800abfe:	d503      	bpl.n	800ac08 <__sfp+0x28>
 800ac00:	6833      	ldr	r3, [r6, #0]
 800ac02:	b30b      	cbz	r3, 800ac48 <__sfp+0x68>
 800ac04:	6836      	ldr	r6, [r6, #0]
 800ac06:	e7f7      	b.n	800abf8 <__sfp+0x18>
 800ac08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ac0c:	b9d5      	cbnz	r5, 800ac44 <__sfp+0x64>
 800ac0e:	4b16      	ldr	r3, [pc, #88]	; (800ac68 <__sfp+0x88>)
 800ac10:	60e3      	str	r3, [r4, #12]
 800ac12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac16:	6665      	str	r5, [r4, #100]	; 0x64
 800ac18:	f000 f847 	bl	800acaa <__retarget_lock_init_recursive>
 800ac1c:	f7ff ff96 	bl	800ab4c <__sfp_lock_release>
 800ac20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ac24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ac28:	6025      	str	r5, [r4, #0]
 800ac2a:	61a5      	str	r5, [r4, #24]
 800ac2c:	2208      	movs	r2, #8
 800ac2e:	4629      	mov	r1, r5
 800ac30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ac34:	f7ff fe6a 	bl	800a90c <memset>
 800ac38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ac3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ac40:	4620      	mov	r0, r4
 800ac42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac44:	3468      	adds	r4, #104	; 0x68
 800ac46:	e7d9      	b.n	800abfc <__sfp+0x1c>
 800ac48:	2104      	movs	r1, #4
 800ac4a:	4638      	mov	r0, r7
 800ac4c:	f7ff ff62 	bl	800ab14 <__sfmoreglue>
 800ac50:	4604      	mov	r4, r0
 800ac52:	6030      	str	r0, [r6, #0]
 800ac54:	2800      	cmp	r0, #0
 800ac56:	d1d5      	bne.n	800ac04 <__sfp+0x24>
 800ac58:	f7ff ff78 	bl	800ab4c <__sfp_lock_release>
 800ac5c:	230c      	movs	r3, #12
 800ac5e:	603b      	str	r3, [r7, #0]
 800ac60:	e7ee      	b.n	800ac40 <__sfp+0x60>
 800ac62:	bf00      	nop
 800ac64:	0800b850 	.word	0x0800b850
 800ac68:	ffff0001 	.word	0xffff0001

0800ac6c <_fwalk_reent>:
 800ac6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac70:	4606      	mov	r6, r0
 800ac72:	4688      	mov	r8, r1
 800ac74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ac78:	2700      	movs	r7, #0
 800ac7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac7e:	f1b9 0901 	subs.w	r9, r9, #1
 800ac82:	d505      	bpl.n	800ac90 <_fwalk_reent+0x24>
 800ac84:	6824      	ldr	r4, [r4, #0]
 800ac86:	2c00      	cmp	r4, #0
 800ac88:	d1f7      	bne.n	800ac7a <_fwalk_reent+0xe>
 800ac8a:	4638      	mov	r0, r7
 800ac8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac90:	89ab      	ldrh	r3, [r5, #12]
 800ac92:	2b01      	cmp	r3, #1
 800ac94:	d907      	bls.n	800aca6 <_fwalk_reent+0x3a>
 800ac96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	d003      	beq.n	800aca6 <_fwalk_reent+0x3a>
 800ac9e:	4629      	mov	r1, r5
 800aca0:	4630      	mov	r0, r6
 800aca2:	47c0      	blx	r8
 800aca4:	4307      	orrs	r7, r0
 800aca6:	3568      	adds	r5, #104	; 0x68
 800aca8:	e7e9      	b.n	800ac7e <_fwalk_reent+0x12>

0800acaa <__retarget_lock_init_recursive>:
 800acaa:	4770      	bx	lr

0800acac <__retarget_lock_acquire_recursive>:
 800acac:	4770      	bx	lr

0800acae <__retarget_lock_release_recursive>:
 800acae:	4770      	bx	lr

0800acb0 <__malloc_lock>:
 800acb0:	4801      	ldr	r0, [pc, #4]	; (800acb8 <__malloc_lock+0x8>)
 800acb2:	f7ff bffb 	b.w	800acac <__retarget_lock_acquire_recursive>
 800acb6:	bf00      	nop
 800acb8:	20000868 	.word	0x20000868

0800acbc <__malloc_unlock>:
 800acbc:	4801      	ldr	r0, [pc, #4]	; (800acc4 <__malloc_unlock+0x8>)
 800acbe:	f7ff bff6 	b.w	800acae <__retarget_lock_release_recursive>
 800acc2:	bf00      	nop
 800acc4:	20000868 	.word	0x20000868

0800acc8 <__sfputc_r>:
 800acc8:	6893      	ldr	r3, [r2, #8]
 800acca:	3b01      	subs	r3, #1
 800accc:	2b00      	cmp	r3, #0
 800acce:	b410      	push	{r4}
 800acd0:	6093      	str	r3, [r2, #8]
 800acd2:	da08      	bge.n	800ace6 <__sfputc_r+0x1e>
 800acd4:	6994      	ldr	r4, [r2, #24]
 800acd6:	42a3      	cmp	r3, r4
 800acd8:	db01      	blt.n	800acde <__sfputc_r+0x16>
 800acda:	290a      	cmp	r1, #10
 800acdc:	d103      	bne.n	800ace6 <__sfputc_r+0x1e>
 800acde:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ace2:	f000 bb23 	b.w	800b32c <__swbuf_r>
 800ace6:	6813      	ldr	r3, [r2, #0]
 800ace8:	1c58      	adds	r0, r3, #1
 800acea:	6010      	str	r0, [r2, #0]
 800acec:	7019      	strb	r1, [r3, #0]
 800acee:	4608      	mov	r0, r1
 800acf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acf4:	4770      	bx	lr

0800acf6 <__sfputs_r>:
 800acf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acf8:	4606      	mov	r6, r0
 800acfa:	460f      	mov	r7, r1
 800acfc:	4614      	mov	r4, r2
 800acfe:	18d5      	adds	r5, r2, r3
 800ad00:	42ac      	cmp	r4, r5
 800ad02:	d101      	bne.n	800ad08 <__sfputs_r+0x12>
 800ad04:	2000      	movs	r0, #0
 800ad06:	e007      	b.n	800ad18 <__sfputs_r+0x22>
 800ad08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad0c:	463a      	mov	r2, r7
 800ad0e:	4630      	mov	r0, r6
 800ad10:	f7ff ffda 	bl	800acc8 <__sfputc_r>
 800ad14:	1c43      	adds	r3, r0, #1
 800ad16:	d1f3      	bne.n	800ad00 <__sfputs_r+0xa>
 800ad18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad1c <_vfiprintf_r>:
 800ad1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad20:	460d      	mov	r5, r1
 800ad22:	b09d      	sub	sp, #116	; 0x74
 800ad24:	4614      	mov	r4, r2
 800ad26:	4698      	mov	r8, r3
 800ad28:	4606      	mov	r6, r0
 800ad2a:	b118      	cbz	r0, 800ad34 <_vfiprintf_r+0x18>
 800ad2c:	6983      	ldr	r3, [r0, #24]
 800ad2e:	b90b      	cbnz	r3, 800ad34 <_vfiprintf_r+0x18>
 800ad30:	f7ff ff1e 	bl	800ab70 <__sinit>
 800ad34:	4b89      	ldr	r3, [pc, #548]	; (800af5c <_vfiprintf_r+0x240>)
 800ad36:	429d      	cmp	r5, r3
 800ad38:	d11b      	bne.n	800ad72 <_vfiprintf_r+0x56>
 800ad3a:	6875      	ldr	r5, [r6, #4]
 800ad3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad3e:	07d9      	lsls	r1, r3, #31
 800ad40:	d405      	bmi.n	800ad4e <_vfiprintf_r+0x32>
 800ad42:	89ab      	ldrh	r3, [r5, #12]
 800ad44:	059a      	lsls	r2, r3, #22
 800ad46:	d402      	bmi.n	800ad4e <_vfiprintf_r+0x32>
 800ad48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad4a:	f7ff ffaf 	bl	800acac <__retarget_lock_acquire_recursive>
 800ad4e:	89ab      	ldrh	r3, [r5, #12]
 800ad50:	071b      	lsls	r3, r3, #28
 800ad52:	d501      	bpl.n	800ad58 <_vfiprintf_r+0x3c>
 800ad54:	692b      	ldr	r3, [r5, #16]
 800ad56:	b9eb      	cbnz	r3, 800ad94 <_vfiprintf_r+0x78>
 800ad58:	4629      	mov	r1, r5
 800ad5a:	4630      	mov	r0, r6
 800ad5c:	f000 fb4a 	bl	800b3f4 <__swsetup_r>
 800ad60:	b1c0      	cbz	r0, 800ad94 <_vfiprintf_r+0x78>
 800ad62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad64:	07dc      	lsls	r4, r3, #31
 800ad66:	d50e      	bpl.n	800ad86 <_vfiprintf_r+0x6a>
 800ad68:	f04f 30ff 	mov.w	r0, #4294967295
 800ad6c:	b01d      	add	sp, #116	; 0x74
 800ad6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad72:	4b7b      	ldr	r3, [pc, #492]	; (800af60 <_vfiprintf_r+0x244>)
 800ad74:	429d      	cmp	r5, r3
 800ad76:	d101      	bne.n	800ad7c <_vfiprintf_r+0x60>
 800ad78:	68b5      	ldr	r5, [r6, #8]
 800ad7a:	e7df      	b.n	800ad3c <_vfiprintf_r+0x20>
 800ad7c:	4b79      	ldr	r3, [pc, #484]	; (800af64 <_vfiprintf_r+0x248>)
 800ad7e:	429d      	cmp	r5, r3
 800ad80:	bf08      	it	eq
 800ad82:	68f5      	ldreq	r5, [r6, #12]
 800ad84:	e7da      	b.n	800ad3c <_vfiprintf_r+0x20>
 800ad86:	89ab      	ldrh	r3, [r5, #12]
 800ad88:	0598      	lsls	r0, r3, #22
 800ad8a:	d4ed      	bmi.n	800ad68 <_vfiprintf_r+0x4c>
 800ad8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad8e:	f7ff ff8e 	bl	800acae <__retarget_lock_release_recursive>
 800ad92:	e7e9      	b.n	800ad68 <_vfiprintf_r+0x4c>
 800ad94:	2300      	movs	r3, #0
 800ad96:	9309      	str	r3, [sp, #36]	; 0x24
 800ad98:	2320      	movs	r3, #32
 800ad9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ada2:	2330      	movs	r3, #48	; 0x30
 800ada4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800af68 <_vfiprintf_r+0x24c>
 800ada8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800adac:	f04f 0901 	mov.w	r9, #1
 800adb0:	4623      	mov	r3, r4
 800adb2:	469a      	mov	sl, r3
 800adb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adb8:	b10a      	cbz	r2, 800adbe <_vfiprintf_r+0xa2>
 800adba:	2a25      	cmp	r2, #37	; 0x25
 800adbc:	d1f9      	bne.n	800adb2 <_vfiprintf_r+0x96>
 800adbe:	ebba 0b04 	subs.w	fp, sl, r4
 800adc2:	d00b      	beq.n	800addc <_vfiprintf_r+0xc0>
 800adc4:	465b      	mov	r3, fp
 800adc6:	4622      	mov	r2, r4
 800adc8:	4629      	mov	r1, r5
 800adca:	4630      	mov	r0, r6
 800adcc:	f7ff ff93 	bl	800acf6 <__sfputs_r>
 800add0:	3001      	adds	r0, #1
 800add2:	f000 80aa 	beq.w	800af2a <_vfiprintf_r+0x20e>
 800add6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800add8:	445a      	add	r2, fp
 800adda:	9209      	str	r2, [sp, #36]	; 0x24
 800addc:	f89a 3000 	ldrb.w	r3, [sl]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	f000 80a2 	beq.w	800af2a <_vfiprintf_r+0x20e>
 800ade6:	2300      	movs	r3, #0
 800ade8:	f04f 32ff 	mov.w	r2, #4294967295
 800adec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adf0:	f10a 0a01 	add.w	sl, sl, #1
 800adf4:	9304      	str	r3, [sp, #16]
 800adf6:	9307      	str	r3, [sp, #28]
 800adf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adfc:	931a      	str	r3, [sp, #104]	; 0x68
 800adfe:	4654      	mov	r4, sl
 800ae00:	2205      	movs	r2, #5
 800ae02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae06:	4858      	ldr	r0, [pc, #352]	; (800af68 <_vfiprintf_r+0x24c>)
 800ae08:	f7f5 f9fa 	bl	8000200 <memchr>
 800ae0c:	9a04      	ldr	r2, [sp, #16]
 800ae0e:	b9d8      	cbnz	r0, 800ae48 <_vfiprintf_r+0x12c>
 800ae10:	06d1      	lsls	r1, r2, #27
 800ae12:	bf44      	itt	mi
 800ae14:	2320      	movmi	r3, #32
 800ae16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae1a:	0713      	lsls	r3, r2, #28
 800ae1c:	bf44      	itt	mi
 800ae1e:	232b      	movmi	r3, #43	; 0x2b
 800ae20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae24:	f89a 3000 	ldrb.w	r3, [sl]
 800ae28:	2b2a      	cmp	r3, #42	; 0x2a
 800ae2a:	d015      	beq.n	800ae58 <_vfiprintf_r+0x13c>
 800ae2c:	9a07      	ldr	r2, [sp, #28]
 800ae2e:	4654      	mov	r4, sl
 800ae30:	2000      	movs	r0, #0
 800ae32:	f04f 0c0a 	mov.w	ip, #10
 800ae36:	4621      	mov	r1, r4
 800ae38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae3c:	3b30      	subs	r3, #48	; 0x30
 800ae3e:	2b09      	cmp	r3, #9
 800ae40:	d94e      	bls.n	800aee0 <_vfiprintf_r+0x1c4>
 800ae42:	b1b0      	cbz	r0, 800ae72 <_vfiprintf_r+0x156>
 800ae44:	9207      	str	r2, [sp, #28]
 800ae46:	e014      	b.n	800ae72 <_vfiprintf_r+0x156>
 800ae48:	eba0 0308 	sub.w	r3, r0, r8
 800ae4c:	fa09 f303 	lsl.w	r3, r9, r3
 800ae50:	4313      	orrs	r3, r2
 800ae52:	9304      	str	r3, [sp, #16]
 800ae54:	46a2      	mov	sl, r4
 800ae56:	e7d2      	b.n	800adfe <_vfiprintf_r+0xe2>
 800ae58:	9b03      	ldr	r3, [sp, #12]
 800ae5a:	1d19      	adds	r1, r3, #4
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	9103      	str	r1, [sp, #12]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	bfbb      	ittet	lt
 800ae64:	425b      	neglt	r3, r3
 800ae66:	f042 0202 	orrlt.w	r2, r2, #2
 800ae6a:	9307      	strge	r3, [sp, #28]
 800ae6c:	9307      	strlt	r3, [sp, #28]
 800ae6e:	bfb8      	it	lt
 800ae70:	9204      	strlt	r2, [sp, #16]
 800ae72:	7823      	ldrb	r3, [r4, #0]
 800ae74:	2b2e      	cmp	r3, #46	; 0x2e
 800ae76:	d10c      	bne.n	800ae92 <_vfiprintf_r+0x176>
 800ae78:	7863      	ldrb	r3, [r4, #1]
 800ae7a:	2b2a      	cmp	r3, #42	; 0x2a
 800ae7c:	d135      	bne.n	800aeea <_vfiprintf_r+0x1ce>
 800ae7e:	9b03      	ldr	r3, [sp, #12]
 800ae80:	1d1a      	adds	r2, r3, #4
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	9203      	str	r2, [sp, #12]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	bfb8      	it	lt
 800ae8a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae8e:	3402      	adds	r4, #2
 800ae90:	9305      	str	r3, [sp, #20]
 800ae92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800af78 <_vfiprintf_r+0x25c>
 800ae96:	7821      	ldrb	r1, [r4, #0]
 800ae98:	2203      	movs	r2, #3
 800ae9a:	4650      	mov	r0, sl
 800ae9c:	f7f5 f9b0 	bl	8000200 <memchr>
 800aea0:	b140      	cbz	r0, 800aeb4 <_vfiprintf_r+0x198>
 800aea2:	2340      	movs	r3, #64	; 0x40
 800aea4:	eba0 000a 	sub.w	r0, r0, sl
 800aea8:	fa03 f000 	lsl.w	r0, r3, r0
 800aeac:	9b04      	ldr	r3, [sp, #16]
 800aeae:	4303      	orrs	r3, r0
 800aeb0:	3401      	adds	r4, #1
 800aeb2:	9304      	str	r3, [sp, #16]
 800aeb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeb8:	482c      	ldr	r0, [pc, #176]	; (800af6c <_vfiprintf_r+0x250>)
 800aeba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aebe:	2206      	movs	r2, #6
 800aec0:	f7f5 f99e 	bl	8000200 <memchr>
 800aec4:	2800      	cmp	r0, #0
 800aec6:	d03f      	beq.n	800af48 <_vfiprintf_r+0x22c>
 800aec8:	4b29      	ldr	r3, [pc, #164]	; (800af70 <_vfiprintf_r+0x254>)
 800aeca:	bb1b      	cbnz	r3, 800af14 <_vfiprintf_r+0x1f8>
 800aecc:	9b03      	ldr	r3, [sp, #12]
 800aece:	3307      	adds	r3, #7
 800aed0:	f023 0307 	bic.w	r3, r3, #7
 800aed4:	3308      	adds	r3, #8
 800aed6:	9303      	str	r3, [sp, #12]
 800aed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeda:	443b      	add	r3, r7
 800aedc:	9309      	str	r3, [sp, #36]	; 0x24
 800aede:	e767      	b.n	800adb0 <_vfiprintf_r+0x94>
 800aee0:	fb0c 3202 	mla	r2, ip, r2, r3
 800aee4:	460c      	mov	r4, r1
 800aee6:	2001      	movs	r0, #1
 800aee8:	e7a5      	b.n	800ae36 <_vfiprintf_r+0x11a>
 800aeea:	2300      	movs	r3, #0
 800aeec:	3401      	adds	r4, #1
 800aeee:	9305      	str	r3, [sp, #20]
 800aef0:	4619      	mov	r1, r3
 800aef2:	f04f 0c0a 	mov.w	ip, #10
 800aef6:	4620      	mov	r0, r4
 800aef8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aefc:	3a30      	subs	r2, #48	; 0x30
 800aefe:	2a09      	cmp	r2, #9
 800af00:	d903      	bls.n	800af0a <_vfiprintf_r+0x1ee>
 800af02:	2b00      	cmp	r3, #0
 800af04:	d0c5      	beq.n	800ae92 <_vfiprintf_r+0x176>
 800af06:	9105      	str	r1, [sp, #20]
 800af08:	e7c3      	b.n	800ae92 <_vfiprintf_r+0x176>
 800af0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800af0e:	4604      	mov	r4, r0
 800af10:	2301      	movs	r3, #1
 800af12:	e7f0      	b.n	800aef6 <_vfiprintf_r+0x1da>
 800af14:	ab03      	add	r3, sp, #12
 800af16:	9300      	str	r3, [sp, #0]
 800af18:	462a      	mov	r2, r5
 800af1a:	4b16      	ldr	r3, [pc, #88]	; (800af74 <_vfiprintf_r+0x258>)
 800af1c:	a904      	add	r1, sp, #16
 800af1e:	4630      	mov	r0, r6
 800af20:	f3af 8000 	nop.w
 800af24:	4607      	mov	r7, r0
 800af26:	1c78      	adds	r0, r7, #1
 800af28:	d1d6      	bne.n	800aed8 <_vfiprintf_r+0x1bc>
 800af2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af2c:	07d9      	lsls	r1, r3, #31
 800af2e:	d405      	bmi.n	800af3c <_vfiprintf_r+0x220>
 800af30:	89ab      	ldrh	r3, [r5, #12]
 800af32:	059a      	lsls	r2, r3, #22
 800af34:	d402      	bmi.n	800af3c <_vfiprintf_r+0x220>
 800af36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af38:	f7ff feb9 	bl	800acae <__retarget_lock_release_recursive>
 800af3c:	89ab      	ldrh	r3, [r5, #12]
 800af3e:	065b      	lsls	r3, r3, #25
 800af40:	f53f af12 	bmi.w	800ad68 <_vfiprintf_r+0x4c>
 800af44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af46:	e711      	b.n	800ad6c <_vfiprintf_r+0x50>
 800af48:	ab03      	add	r3, sp, #12
 800af4a:	9300      	str	r3, [sp, #0]
 800af4c:	462a      	mov	r2, r5
 800af4e:	4b09      	ldr	r3, [pc, #36]	; (800af74 <_vfiprintf_r+0x258>)
 800af50:	a904      	add	r1, sp, #16
 800af52:	4630      	mov	r0, r6
 800af54:	f000 f880 	bl	800b058 <_printf_i>
 800af58:	e7e4      	b.n	800af24 <_vfiprintf_r+0x208>
 800af5a:	bf00      	nop
 800af5c:	0800b874 	.word	0x0800b874
 800af60:	0800b894 	.word	0x0800b894
 800af64:	0800b854 	.word	0x0800b854
 800af68:	0800b8b4 	.word	0x0800b8b4
 800af6c:	0800b8be 	.word	0x0800b8be
 800af70:	00000000 	.word	0x00000000
 800af74:	0800acf7 	.word	0x0800acf7
 800af78:	0800b8ba 	.word	0x0800b8ba

0800af7c <_printf_common>:
 800af7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af80:	4616      	mov	r6, r2
 800af82:	4699      	mov	r9, r3
 800af84:	688a      	ldr	r2, [r1, #8]
 800af86:	690b      	ldr	r3, [r1, #16]
 800af88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af8c:	4293      	cmp	r3, r2
 800af8e:	bfb8      	it	lt
 800af90:	4613      	movlt	r3, r2
 800af92:	6033      	str	r3, [r6, #0]
 800af94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af98:	4607      	mov	r7, r0
 800af9a:	460c      	mov	r4, r1
 800af9c:	b10a      	cbz	r2, 800afa2 <_printf_common+0x26>
 800af9e:	3301      	adds	r3, #1
 800afa0:	6033      	str	r3, [r6, #0]
 800afa2:	6823      	ldr	r3, [r4, #0]
 800afa4:	0699      	lsls	r1, r3, #26
 800afa6:	bf42      	ittt	mi
 800afa8:	6833      	ldrmi	r3, [r6, #0]
 800afaa:	3302      	addmi	r3, #2
 800afac:	6033      	strmi	r3, [r6, #0]
 800afae:	6825      	ldr	r5, [r4, #0]
 800afb0:	f015 0506 	ands.w	r5, r5, #6
 800afb4:	d106      	bne.n	800afc4 <_printf_common+0x48>
 800afb6:	f104 0a19 	add.w	sl, r4, #25
 800afba:	68e3      	ldr	r3, [r4, #12]
 800afbc:	6832      	ldr	r2, [r6, #0]
 800afbe:	1a9b      	subs	r3, r3, r2
 800afc0:	42ab      	cmp	r3, r5
 800afc2:	dc26      	bgt.n	800b012 <_printf_common+0x96>
 800afc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800afc8:	1e13      	subs	r3, r2, #0
 800afca:	6822      	ldr	r2, [r4, #0]
 800afcc:	bf18      	it	ne
 800afce:	2301      	movne	r3, #1
 800afd0:	0692      	lsls	r2, r2, #26
 800afd2:	d42b      	bmi.n	800b02c <_printf_common+0xb0>
 800afd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800afd8:	4649      	mov	r1, r9
 800afda:	4638      	mov	r0, r7
 800afdc:	47c0      	blx	r8
 800afde:	3001      	adds	r0, #1
 800afe0:	d01e      	beq.n	800b020 <_printf_common+0xa4>
 800afe2:	6823      	ldr	r3, [r4, #0]
 800afe4:	68e5      	ldr	r5, [r4, #12]
 800afe6:	6832      	ldr	r2, [r6, #0]
 800afe8:	f003 0306 	and.w	r3, r3, #6
 800afec:	2b04      	cmp	r3, #4
 800afee:	bf08      	it	eq
 800aff0:	1aad      	subeq	r5, r5, r2
 800aff2:	68a3      	ldr	r3, [r4, #8]
 800aff4:	6922      	ldr	r2, [r4, #16]
 800aff6:	bf0c      	ite	eq
 800aff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800affc:	2500      	movne	r5, #0
 800affe:	4293      	cmp	r3, r2
 800b000:	bfc4      	itt	gt
 800b002:	1a9b      	subgt	r3, r3, r2
 800b004:	18ed      	addgt	r5, r5, r3
 800b006:	2600      	movs	r6, #0
 800b008:	341a      	adds	r4, #26
 800b00a:	42b5      	cmp	r5, r6
 800b00c:	d11a      	bne.n	800b044 <_printf_common+0xc8>
 800b00e:	2000      	movs	r0, #0
 800b010:	e008      	b.n	800b024 <_printf_common+0xa8>
 800b012:	2301      	movs	r3, #1
 800b014:	4652      	mov	r2, sl
 800b016:	4649      	mov	r1, r9
 800b018:	4638      	mov	r0, r7
 800b01a:	47c0      	blx	r8
 800b01c:	3001      	adds	r0, #1
 800b01e:	d103      	bne.n	800b028 <_printf_common+0xac>
 800b020:	f04f 30ff 	mov.w	r0, #4294967295
 800b024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b028:	3501      	adds	r5, #1
 800b02a:	e7c6      	b.n	800afba <_printf_common+0x3e>
 800b02c:	18e1      	adds	r1, r4, r3
 800b02e:	1c5a      	adds	r2, r3, #1
 800b030:	2030      	movs	r0, #48	; 0x30
 800b032:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b036:	4422      	add	r2, r4
 800b038:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b03c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b040:	3302      	adds	r3, #2
 800b042:	e7c7      	b.n	800afd4 <_printf_common+0x58>
 800b044:	2301      	movs	r3, #1
 800b046:	4622      	mov	r2, r4
 800b048:	4649      	mov	r1, r9
 800b04a:	4638      	mov	r0, r7
 800b04c:	47c0      	blx	r8
 800b04e:	3001      	adds	r0, #1
 800b050:	d0e6      	beq.n	800b020 <_printf_common+0xa4>
 800b052:	3601      	adds	r6, #1
 800b054:	e7d9      	b.n	800b00a <_printf_common+0x8e>
	...

0800b058 <_printf_i>:
 800b058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b05c:	460c      	mov	r4, r1
 800b05e:	4691      	mov	r9, r2
 800b060:	7e27      	ldrb	r7, [r4, #24]
 800b062:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b064:	2f78      	cmp	r7, #120	; 0x78
 800b066:	4680      	mov	r8, r0
 800b068:	469a      	mov	sl, r3
 800b06a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b06e:	d807      	bhi.n	800b080 <_printf_i+0x28>
 800b070:	2f62      	cmp	r7, #98	; 0x62
 800b072:	d80a      	bhi.n	800b08a <_printf_i+0x32>
 800b074:	2f00      	cmp	r7, #0
 800b076:	f000 80d8 	beq.w	800b22a <_printf_i+0x1d2>
 800b07a:	2f58      	cmp	r7, #88	; 0x58
 800b07c:	f000 80a3 	beq.w	800b1c6 <_printf_i+0x16e>
 800b080:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b084:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b088:	e03a      	b.n	800b100 <_printf_i+0xa8>
 800b08a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b08e:	2b15      	cmp	r3, #21
 800b090:	d8f6      	bhi.n	800b080 <_printf_i+0x28>
 800b092:	a001      	add	r0, pc, #4	; (adr r0, 800b098 <_printf_i+0x40>)
 800b094:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b098:	0800b0f1 	.word	0x0800b0f1
 800b09c:	0800b105 	.word	0x0800b105
 800b0a0:	0800b081 	.word	0x0800b081
 800b0a4:	0800b081 	.word	0x0800b081
 800b0a8:	0800b081 	.word	0x0800b081
 800b0ac:	0800b081 	.word	0x0800b081
 800b0b0:	0800b105 	.word	0x0800b105
 800b0b4:	0800b081 	.word	0x0800b081
 800b0b8:	0800b081 	.word	0x0800b081
 800b0bc:	0800b081 	.word	0x0800b081
 800b0c0:	0800b081 	.word	0x0800b081
 800b0c4:	0800b211 	.word	0x0800b211
 800b0c8:	0800b135 	.word	0x0800b135
 800b0cc:	0800b1f3 	.word	0x0800b1f3
 800b0d0:	0800b081 	.word	0x0800b081
 800b0d4:	0800b081 	.word	0x0800b081
 800b0d8:	0800b233 	.word	0x0800b233
 800b0dc:	0800b081 	.word	0x0800b081
 800b0e0:	0800b135 	.word	0x0800b135
 800b0e4:	0800b081 	.word	0x0800b081
 800b0e8:	0800b081 	.word	0x0800b081
 800b0ec:	0800b1fb 	.word	0x0800b1fb
 800b0f0:	680b      	ldr	r3, [r1, #0]
 800b0f2:	1d1a      	adds	r2, r3, #4
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	600a      	str	r2, [r1, #0]
 800b0f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b0fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b100:	2301      	movs	r3, #1
 800b102:	e0a3      	b.n	800b24c <_printf_i+0x1f4>
 800b104:	6825      	ldr	r5, [r4, #0]
 800b106:	6808      	ldr	r0, [r1, #0]
 800b108:	062e      	lsls	r6, r5, #24
 800b10a:	f100 0304 	add.w	r3, r0, #4
 800b10e:	d50a      	bpl.n	800b126 <_printf_i+0xce>
 800b110:	6805      	ldr	r5, [r0, #0]
 800b112:	600b      	str	r3, [r1, #0]
 800b114:	2d00      	cmp	r5, #0
 800b116:	da03      	bge.n	800b120 <_printf_i+0xc8>
 800b118:	232d      	movs	r3, #45	; 0x2d
 800b11a:	426d      	negs	r5, r5
 800b11c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b120:	485e      	ldr	r0, [pc, #376]	; (800b29c <_printf_i+0x244>)
 800b122:	230a      	movs	r3, #10
 800b124:	e019      	b.n	800b15a <_printf_i+0x102>
 800b126:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b12a:	6805      	ldr	r5, [r0, #0]
 800b12c:	600b      	str	r3, [r1, #0]
 800b12e:	bf18      	it	ne
 800b130:	b22d      	sxthne	r5, r5
 800b132:	e7ef      	b.n	800b114 <_printf_i+0xbc>
 800b134:	680b      	ldr	r3, [r1, #0]
 800b136:	6825      	ldr	r5, [r4, #0]
 800b138:	1d18      	adds	r0, r3, #4
 800b13a:	6008      	str	r0, [r1, #0]
 800b13c:	0628      	lsls	r0, r5, #24
 800b13e:	d501      	bpl.n	800b144 <_printf_i+0xec>
 800b140:	681d      	ldr	r5, [r3, #0]
 800b142:	e002      	b.n	800b14a <_printf_i+0xf2>
 800b144:	0669      	lsls	r1, r5, #25
 800b146:	d5fb      	bpl.n	800b140 <_printf_i+0xe8>
 800b148:	881d      	ldrh	r5, [r3, #0]
 800b14a:	4854      	ldr	r0, [pc, #336]	; (800b29c <_printf_i+0x244>)
 800b14c:	2f6f      	cmp	r7, #111	; 0x6f
 800b14e:	bf0c      	ite	eq
 800b150:	2308      	moveq	r3, #8
 800b152:	230a      	movne	r3, #10
 800b154:	2100      	movs	r1, #0
 800b156:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b15a:	6866      	ldr	r6, [r4, #4]
 800b15c:	60a6      	str	r6, [r4, #8]
 800b15e:	2e00      	cmp	r6, #0
 800b160:	bfa2      	ittt	ge
 800b162:	6821      	ldrge	r1, [r4, #0]
 800b164:	f021 0104 	bicge.w	r1, r1, #4
 800b168:	6021      	strge	r1, [r4, #0]
 800b16a:	b90d      	cbnz	r5, 800b170 <_printf_i+0x118>
 800b16c:	2e00      	cmp	r6, #0
 800b16e:	d04d      	beq.n	800b20c <_printf_i+0x1b4>
 800b170:	4616      	mov	r6, r2
 800b172:	fbb5 f1f3 	udiv	r1, r5, r3
 800b176:	fb03 5711 	mls	r7, r3, r1, r5
 800b17a:	5dc7      	ldrb	r7, [r0, r7]
 800b17c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b180:	462f      	mov	r7, r5
 800b182:	42bb      	cmp	r3, r7
 800b184:	460d      	mov	r5, r1
 800b186:	d9f4      	bls.n	800b172 <_printf_i+0x11a>
 800b188:	2b08      	cmp	r3, #8
 800b18a:	d10b      	bne.n	800b1a4 <_printf_i+0x14c>
 800b18c:	6823      	ldr	r3, [r4, #0]
 800b18e:	07df      	lsls	r7, r3, #31
 800b190:	d508      	bpl.n	800b1a4 <_printf_i+0x14c>
 800b192:	6923      	ldr	r3, [r4, #16]
 800b194:	6861      	ldr	r1, [r4, #4]
 800b196:	4299      	cmp	r1, r3
 800b198:	bfde      	ittt	le
 800b19a:	2330      	movle	r3, #48	; 0x30
 800b19c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b1a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b1a4:	1b92      	subs	r2, r2, r6
 800b1a6:	6122      	str	r2, [r4, #16]
 800b1a8:	f8cd a000 	str.w	sl, [sp]
 800b1ac:	464b      	mov	r3, r9
 800b1ae:	aa03      	add	r2, sp, #12
 800b1b0:	4621      	mov	r1, r4
 800b1b2:	4640      	mov	r0, r8
 800b1b4:	f7ff fee2 	bl	800af7c <_printf_common>
 800b1b8:	3001      	adds	r0, #1
 800b1ba:	d14c      	bne.n	800b256 <_printf_i+0x1fe>
 800b1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b1c0:	b004      	add	sp, #16
 800b1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1c6:	4835      	ldr	r0, [pc, #212]	; (800b29c <_printf_i+0x244>)
 800b1c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b1cc:	6823      	ldr	r3, [r4, #0]
 800b1ce:	680e      	ldr	r6, [r1, #0]
 800b1d0:	061f      	lsls	r7, r3, #24
 800b1d2:	f856 5b04 	ldr.w	r5, [r6], #4
 800b1d6:	600e      	str	r6, [r1, #0]
 800b1d8:	d514      	bpl.n	800b204 <_printf_i+0x1ac>
 800b1da:	07d9      	lsls	r1, r3, #31
 800b1dc:	bf44      	itt	mi
 800b1de:	f043 0320 	orrmi.w	r3, r3, #32
 800b1e2:	6023      	strmi	r3, [r4, #0]
 800b1e4:	b91d      	cbnz	r5, 800b1ee <_printf_i+0x196>
 800b1e6:	6823      	ldr	r3, [r4, #0]
 800b1e8:	f023 0320 	bic.w	r3, r3, #32
 800b1ec:	6023      	str	r3, [r4, #0]
 800b1ee:	2310      	movs	r3, #16
 800b1f0:	e7b0      	b.n	800b154 <_printf_i+0xfc>
 800b1f2:	6823      	ldr	r3, [r4, #0]
 800b1f4:	f043 0320 	orr.w	r3, r3, #32
 800b1f8:	6023      	str	r3, [r4, #0]
 800b1fa:	2378      	movs	r3, #120	; 0x78
 800b1fc:	4828      	ldr	r0, [pc, #160]	; (800b2a0 <_printf_i+0x248>)
 800b1fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b202:	e7e3      	b.n	800b1cc <_printf_i+0x174>
 800b204:	065e      	lsls	r6, r3, #25
 800b206:	bf48      	it	mi
 800b208:	b2ad      	uxthmi	r5, r5
 800b20a:	e7e6      	b.n	800b1da <_printf_i+0x182>
 800b20c:	4616      	mov	r6, r2
 800b20e:	e7bb      	b.n	800b188 <_printf_i+0x130>
 800b210:	680b      	ldr	r3, [r1, #0]
 800b212:	6826      	ldr	r6, [r4, #0]
 800b214:	6960      	ldr	r0, [r4, #20]
 800b216:	1d1d      	adds	r5, r3, #4
 800b218:	600d      	str	r5, [r1, #0]
 800b21a:	0635      	lsls	r5, r6, #24
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	d501      	bpl.n	800b224 <_printf_i+0x1cc>
 800b220:	6018      	str	r0, [r3, #0]
 800b222:	e002      	b.n	800b22a <_printf_i+0x1d2>
 800b224:	0671      	lsls	r1, r6, #25
 800b226:	d5fb      	bpl.n	800b220 <_printf_i+0x1c8>
 800b228:	8018      	strh	r0, [r3, #0]
 800b22a:	2300      	movs	r3, #0
 800b22c:	6123      	str	r3, [r4, #16]
 800b22e:	4616      	mov	r6, r2
 800b230:	e7ba      	b.n	800b1a8 <_printf_i+0x150>
 800b232:	680b      	ldr	r3, [r1, #0]
 800b234:	1d1a      	adds	r2, r3, #4
 800b236:	600a      	str	r2, [r1, #0]
 800b238:	681e      	ldr	r6, [r3, #0]
 800b23a:	6862      	ldr	r2, [r4, #4]
 800b23c:	2100      	movs	r1, #0
 800b23e:	4630      	mov	r0, r6
 800b240:	f7f4 ffde 	bl	8000200 <memchr>
 800b244:	b108      	cbz	r0, 800b24a <_printf_i+0x1f2>
 800b246:	1b80      	subs	r0, r0, r6
 800b248:	6060      	str	r0, [r4, #4]
 800b24a:	6863      	ldr	r3, [r4, #4]
 800b24c:	6123      	str	r3, [r4, #16]
 800b24e:	2300      	movs	r3, #0
 800b250:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b254:	e7a8      	b.n	800b1a8 <_printf_i+0x150>
 800b256:	6923      	ldr	r3, [r4, #16]
 800b258:	4632      	mov	r2, r6
 800b25a:	4649      	mov	r1, r9
 800b25c:	4640      	mov	r0, r8
 800b25e:	47d0      	blx	sl
 800b260:	3001      	adds	r0, #1
 800b262:	d0ab      	beq.n	800b1bc <_printf_i+0x164>
 800b264:	6823      	ldr	r3, [r4, #0]
 800b266:	079b      	lsls	r3, r3, #30
 800b268:	d413      	bmi.n	800b292 <_printf_i+0x23a>
 800b26a:	68e0      	ldr	r0, [r4, #12]
 800b26c:	9b03      	ldr	r3, [sp, #12]
 800b26e:	4298      	cmp	r0, r3
 800b270:	bfb8      	it	lt
 800b272:	4618      	movlt	r0, r3
 800b274:	e7a4      	b.n	800b1c0 <_printf_i+0x168>
 800b276:	2301      	movs	r3, #1
 800b278:	4632      	mov	r2, r6
 800b27a:	4649      	mov	r1, r9
 800b27c:	4640      	mov	r0, r8
 800b27e:	47d0      	blx	sl
 800b280:	3001      	adds	r0, #1
 800b282:	d09b      	beq.n	800b1bc <_printf_i+0x164>
 800b284:	3501      	adds	r5, #1
 800b286:	68e3      	ldr	r3, [r4, #12]
 800b288:	9903      	ldr	r1, [sp, #12]
 800b28a:	1a5b      	subs	r3, r3, r1
 800b28c:	42ab      	cmp	r3, r5
 800b28e:	dcf2      	bgt.n	800b276 <_printf_i+0x21e>
 800b290:	e7eb      	b.n	800b26a <_printf_i+0x212>
 800b292:	2500      	movs	r5, #0
 800b294:	f104 0619 	add.w	r6, r4, #25
 800b298:	e7f5      	b.n	800b286 <_printf_i+0x22e>
 800b29a:	bf00      	nop
 800b29c:	0800b8c5 	.word	0x0800b8c5
 800b2a0:	0800b8d6 	.word	0x0800b8d6

0800b2a4 <__sread>:
 800b2a4:	b510      	push	{r4, lr}
 800b2a6:	460c      	mov	r4, r1
 800b2a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2ac:	f000 fa58 	bl	800b760 <_read_r>
 800b2b0:	2800      	cmp	r0, #0
 800b2b2:	bfab      	itete	ge
 800b2b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b2b6:	89a3      	ldrhlt	r3, [r4, #12]
 800b2b8:	181b      	addge	r3, r3, r0
 800b2ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b2be:	bfac      	ite	ge
 800b2c0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b2c2:	81a3      	strhlt	r3, [r4, #12]
 800b2c4:	bd10      	pop	{r4, pc}

0800b2c6 <__swrite>:
 800b2c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2ca:	461f      	mov	r7, r3
 800b2cc:	898b      	ldrh	r3, [r1, #12]
 800b2ce:	05db      	lsls	r3, r3, #23
 800b2d0:	4605      	mov	r5, r0
 800b2d2:	460c      	mov	r4, r1
 800b2d4:	4616      	mov	r6, r2
 800b2d6:	d505      	bpl.n	800b2e4 <__swrite+0x1e>
 800b2d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2dc:	2302      	movs	r3, #2
 800b2de:	2200      	movs	r2, #0
 800b2e0:	f000 f9c8 	bl	800b674 <_lseek_r>
 800b2e4:	89a3      	ldrh	r3, [r4, #12]
 800b2e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2ee:	81a3      	strh	r3, [r4, #12]
 800b2f0:	4632      	mov	r2, r6
 800b2f2:	463b      	mov	r3, r7
 800b2f4:	4628      	mov	r0, r5
 800b2f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2fa:	f000 b869 	b.w	800b3d0 <_write_r>

0800b2fe <__sseek>:
 800b2fe:	b510      	push	{r4, lr}
 800b300:	460c      	mov	r4, r1
 800b302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b306:	f000 f9b5 	bl	800b674 <_lseek_r>
 800b30a:	1c43      	adds	r3, r0, #1
 800b30c:	89a3      	ldrh	r3, [r4, #12]
 800b30e:	bf15      	itete	ne
 800b310:	6560      	strne	r0, [r4, #84]	; 0x54
 800b312:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b316:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b31a:	81a3      	strheq	r3, [r4, #12]
 800b31c:	bf18      	it	ne
 800b31e:	81a3      	strhne	r3, [r4, #12]
 800b320:	bd10      	pop	{r4, pc}

0800b322 <__sclose>:
 800b322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b326:	f000 b8d3 	b.w	800b4d0 <_close_r>
	...

0800b32c <__swbuf_r>:
 800b32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b32e:	460e      	mov	r6, r1
 800b330:	4614      	mov	r4, r2
 800b332:	4605      	mov	r5, r0
 800b334:	b118      	cbz	r0, 800b33e <__swbuf_r+0x12>
 800b336:	6983      	ldr	r3, [r0, #24]
 800b338:	b90b      	cbnz	r3, 800b33e <__swbuf_r+0x12>
 800b33a:	f7ff fc19 	bl	800ab70 <__sinit>
 800b33e:	4b21      	ldr	r3, [pc, #132]	; (800b3c4 <__swbuf_r+0x98>)
 800b340:	429c      	cmp	r4, r3
 800b342:	d12b      	bne.n	800b39c <__swbuf_r+0x70>
 800b344:	686c      	ldr	r4, [r5, #4]
 800b346:	69a3      	ldr	r3, [r4, #24]
 800b348:	60a3      	str	r3, [r4, #8]
 800b34a:	89a3      	ldrh	r3, [r4, #12]
 800b34c:	071a      	lsls	r2, r3, #28
 800b34e:	d52f      	bpl.n	800b3b0 <__swbuf_r+0x84>
 800b350:	6923      	ldr	r3, [r4, #16]
 800b352:	b36b      	cbz	r3, 800b3b0 <__swbuf_r+0x84>
 800b354:	6923      	ldr	r3, [r4, #16]
 800b356:	6820      	ldr	r0, [r4, #0]
 800b358:	1ac0      	subs	r0, r0, r3
 800b35a:	6963      	ldr	r3, [r4, #20]
 800b35c:	b2f6      	uxtb	r6, r6
 800b35e:	4283      	cmp	r3, r0
 800b360:	4637      	mov	r7, r6
 800b362:	dc04      	bgt.n	800b36e <__swbuf_r+0x42>
 800b364:	4621      	mov	r1, r4
 800b366:	4628      	mov	r0, r5
 800b368:	f000 f948 	bl	800b5fc <_fflush_r>
 800b36c:	bb30      	cbnz	r0, 800b3bc <__swbuf_r+0x90>
 800b36e:	68a3      	ldr	r3, [r4, #8]
 800b370:	3b01      	subs	r3, #1
 800b372:	60a3      	str	r3, [r4, #8]
 800b374:	6823      	ldr	r3, [r4, #0]
 800b376:	1c5a      	adds	r2, r3, #1
 800b378:	6022      	str	r2, [r4, #0]
 800b37a:	701e      	strb	r6, [r3, #0]
 800b37c:	6963      	ldr	r3, [r4, #20]
 800b37e:	3001      	adds	r0, #1
 800b380:	4283      	cmp	r3, r0
 800b382:	d004      	beq.n	800b38e <__swbuf_r+0x62>
 800b384:	89a3      	ldrh	r3, [r4, #12]
 800b386:	07db      	lsls	r3, r3, #31
 800b388:	d506      	bpl.n	800b398 <__swbuf_r+0x6c>
 800b38a:	2e0a      	cmp	r6, #10
 800b38c:	d104      	bne.n	800b398 <__swbuf_r+0x6c>
 800b38e:	4621      	mov	r1, r4
 800b390:	4628      	mov	r0, r5
 800b392:	f000 f933 	bl	800b5fc <_fflush_r>
 800b396:	b988      	cbnz	r0, 800b3bc <__swbuf_r+0x90>
 800b398:	4638      	mov	r0, r7
 800b39a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b39c:	4b0a      	ldr	r3, [pc, #40]	; (800b3c8 <__swbuf_r+0x9c>)
 800b39e:	429c      	cmp	r4, r3
 800b3a0:	d101      	bne.n	800b3a6 <__swbuf_r+0x7a>
 800b3a2:	68ac      	ldr	r4, [r5, #8]
 800b3a4:	e7cf      	b.n	800b346 <__swbuf_r+0x1a>
 800b3a6:	4b09      	ldr	r3, [pc, #36]	; (800b3cc <__swbuf_r+0xa0>)
 800b3a8:	429c      	cmp	r4, r3
 800b3aa:	bf08      	it	eq
 800b3ac:	68ec      	ldreq	r4, [r5, #12]
 800b3ae:	e7ca      	b.n	800b346 <__swbuf_r+0x1a>
 800b3b0:	4621      	mov	r1, r4
 800b3b2:	4628      	mov	r0, r5
 800b3b4:	f000 f81e 	bl	800b3f4 <__swsetup_r>
 800b3b8:	2800      	cmp	r0, #0
 800b3ba:	d0cb      	beq.n	800b354 <__swbuf_r+0x28>
 800b3bc:	f04f 37ff 	mov.w	r7, #4294967295
 800b3c0:	e7ea      	b.n	800b398 <__swbuf_r+0x6c>
 800b3c2:	bf00      	nop
 800b3c4:	0800b874 	.word	0x0800b874
 800b3c8:	0800b894 	.word	0x0800b894
 800b3cc:	0800b854 	.word	0x0800b854

0800b3d0 <_write_r>:
 800b3d0:	b538      	push	{r3, r4, r5, lr}
 800b3d2:	4d07      	ldr	r5, [pc, #28]	; (800b3f0 <_write_r+0x20>)
 800b3d4:	4604      	mov	r4, r0
 800b3d6:	4608      	mov	r0, r1
 800b3d8:	4611      	mov	r1, r2
 800b3da:	2200      	movs	r2, #0
 800b3dc:	602a      	str	r2, [r5, #0]
 800b3de:	461a      	mov	r2, r3
 800b3e0:	f7f5 fab9 	bl	8000956 <_write>
 800b3e4:	1c43      	adds	r3, r0, #1
 800b3e6:	d102      	bne.n	800b3ee <_write_r+0x1e>
 800b3e8:	682b      	ldr	r3, [r5, #0]
 800b3ea:	b103      	cbz	r3, 800b3ee <_write_r+0x1e>
 800b3ec:	6023      	str	r3, [r4, #0]
 800b3ee:	bd38      	pop	{r3, r4, r5, pc}
 800b3f0:	20000870 	.word	0x20000870

0800b3f4 <__swsetup_r>:
 800b3f4:	4b32      	ldr	r3, [pc, #200]	; (800b4c0 <__swsetup_r+0xcc>)
 800b3f6:	b570      	push	{r4, r5, r6, lr}
 800b3f8:	681d      	ldr	r5, [r3, #0]
 800b3fa:	4606      	mov	r6, r0
 800b3fc:	460c      	mov	r4, r1
 800b3fe:	b125      	cbz	r5, 800b40a <__swsetup_r+0x16>
 800b400:	69ab      	ldr	r3, [r5, #24]
 800b402:	b913      	cbnz	r3, 800b40a <__swsetup_r+0x16>
 800b404:	4628      	mov	r0, r5
 800b406:	f7ff fbb3 	bl	800ab70 <__sinit>
 800b40a:	4b2e      	ldr	r3, [pc, #184]	; (800b4c4 <__swsetup_r+0xd0>)
 800b40c:	429c      	cmp	r4, r3
 800b40e:	d10f      	bne.n	800b430 <__swsetup_r+0x3c>
 800b410:	686c      	ldr	r4, [r5, #4]
 800b412:	89a3      	ldrh	r3, [r4, #12]
 800b414:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b418:	0719      	lsls	r1, r3, #28
 800b41a:	d42c      	bmi.n	800b476 <__swsetup_r+0x82>
 800b41c:	06dd      	lsls	r5, r3, #27
 800b41e:	d411      	bmi.n	800b444 <__swsetup_r+0x50>
 800b420:	2309      	movs	r3, #9
 800b422:	6033      	str	r3, [r6, #0]
 800b424:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b428:	81a3      	strh	r3, [r4, #12]
 800b42a:	f04f 30ff 	mov.w	r0, #4294967295
 800b42e:	e03e      	b.n	800b4ae <__swsetup_r+0xba>
 800b430:	4b25      	ldr	r3, [pc, #148]	; (800b4c8 <__swsetup_r+0xd4>)
 800b432:	429c      	cmp	r4, r3
 800b434:	d101      	bne.n	800b43a <__swsetup_r+0x46>
 800b436:	68ac      	ldr	r4, [r5, #8]
 800b438:	e7eb      	b.n	800b412 <__swsetup_r+0x1e>
 800b43a:	4b24      	ldr	r3, [pc, #144]	; (800b4cc <__swsetup_r+0xd8>)
 800b43c:	429c      	cmp	r4, r3
 800b43e:	bf08      	it	eq
 800b440:	68ec      	ldreq	r4, [r5, #12]
 800b442:	e7e6      	b.n	800b412 <__swsetup_r+0x1e>
 800b444:	0758      	lsls	r0, r3, #29
 800b446:	d512      	bpl.n	800b46e <__swsetup_r+0x7a>
 800b448:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b44a:	b141      	cbz	r1, 800b45e <__swsetup_r+0x6a>
 800b44c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b450:	4299      	cmp	r1, r3
 800b452:	d002      	beq.n	800b45a <__swsetup_r+0x66>
 800b454:	4630      	mov	r0, r6
 800b456:	f7ff fa61 	bl	800a91c <_free_r>
 800b45a:	2300      	movs	r3, #0
 800b45c:	6363      	str	r3, [r4, #52]	; 0x34
 800b45e:	89a3      	ldrh	r3, [r4, #12]
 800b460:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b464:	81a3      	strh	r3, [r4, #12]
 800b466:	2300      	movs	r3, #0
 800b468:	6063      	str	r3, [r4, #4]
 800b46a:	6923      	ldr	r3, [r4, #16]
 800b46c:	6023      	str	r3, [r4, #0]
 800b46e:	89a3      	ldrh	r3, [r4, #12]
 800b470:	f043 0308 	orr.w	r3, r3, #8
 800b474:	81a3      	strh	r3, [r4, #12]
 800b476:	6923      	ldr	r3, [r4, #16]
 800b478:	b94b      	cbnz	r3, 800b48e <__swsetup_r+0x9a>
 800b47a:	89a3      	ldrh	r3, [r4, #12]
 800b47c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b484:	d003      	beq.n	800b48e <__swsetup_r+0x9a>
 800b486:	4621      	mov	r1, r4
 800b488:	4630      	mov	r0, r6
 800b48a:	f000 f929 	bl	800b6e0 <__smakebuf_r>
 800b48e:	89a0      	ldrh	r0, [r4, #12]
 800b490:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b494:	f010 0301 	ands.w	r3, r0, #1
 800b498:	d00a      	beq.n	800b4b0 <__swsetup_r+0xbc>
 800b49a:	2300      	movs	r3, #0
 800b49c:	60a3      	str	r3, [r4, #8]
 800b49e:	6963      	ldr	r3, [r4, #20]
 800b4a0:	425b      	negs	r3, r3
 800b4a2:	61a3      	str	r3, [r4, #24]
 800b4a4:	6923      	ldr	r3, [r4, #16]
 800b4a6:	b943      	cbnz	r3, 800b4ba <__swsetup_r+0xc6>
 800b4a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b4ac:	d1ba      	bne.n	800b424 <__swsetup_r+0x30>
 800b4ae:	bd70      	pop	{r4, r5, r6, pc}
 800b4b0:	0781      	lsls	r1, r0, #30
 800b4b2:	bf58      	it	pl
 800b4b4:	6963      	ldrpl	r3, [r4, #20]
 800b4b6:	60a3      	str	r3, [r4, #8]
 800b4b8:	e7f4      	b.n	800b4a4 <__swsetup_r+0xb0>
 800b4ba:	2000      	movs	r0, #0
 800b4bc:	e7f7      	b.n	800b4ae <__swsetup_r+0xba>
 800b4be:	bf00      	nop
 800b4c0:	2000002c 	.word	0x2000002c
 800b4c4:	0800b874 	.word	0x0800b874
 800b4c8:	0800b894 	.word	0x0800b894
 800b4cc:	0800b854 	.word	0x0800b854

0800b4d0 <_close_r>:
 800b4d0:	b538      	push	{r3, r4, r5, lr}
 800b4d2:	4d06      	ldr	r5, [pc, #24]	; (800b4ec <_close_r+0x1c>)
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	4604      	mov	r4, r0
 800b4d8:	4608      	mov	r0, r1
 800b4da:	602b      	str	r3, [r5, #0]
 800b4dc:	f7f5 fa57 	bl	800098e <_close>
 800b4e0:	1c43      	adds	r3, r0, #1
 800b4e2:	d102      	bne.n	800b4ea <_close_r+0x1a>
 800b4e4:	682b      	ldr	r3, [r5, #0]
 800b4e6:	b103      	cbz	r3, 800b4ea <_close_r+0x1a>
 800b4e8:	6023      	str	r3, [r4, #0]
 800b4ea:	bd38      	pop	{r3, r4, r5, pc}
 800b4ec:	20000870 	.word	0x20000870

0800b4f0 <__sflush_r>:
 800b4f0:	898a      	ldrh	r2, [r1, #12]
 800b4f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4f6:	4605      	mov	r5, r0
 800b4f8:	0710      	lsls	r0, r2, #28
 800b4fa:	460c      	mov	r4, r1
 800b4fc:	d458      	bmi.n	800b5b0 <__sflush_r+0xc0>
 800b4fe:	684b      	ldr	r3, [r1, #4]
 800b500:	2b00      	cmp	r3, #0
 800b502:	dc05      	bgt.n	800b510 <__sflush_r+0x20>
 800b504:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b506:	2b00      	cmp	r3, #0
 800b508:	dc02      	bgt.n	800b510 <__sflush_r+0x20>
 800b50a:	2000      	movs	r0, #0
 800b50c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b510:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b512:	2e00      	cmp	r6, #0
 800b514:	d0f9      	beq.n	800b50a <__sflush_r+0x1a>
 800b516:	2300      	movs	r3, #0
 800b518:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b51c:	682f      	ldr	r7, [r5, #0]
 800b51e:	602b      	str	r3, [r5, #0]
 800b520:	d032      	beq.n	800b588 <__sflush_r+0x98>
 800b522:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b524:	89a3      	ldrh	r3, [r4, #12]
 800b526:	075a      	lsls	r2, r3, #29
 800b528:	d505      	bpl.n	800b536 <__sflush_r+0x46>
 800b52a:	6863      	ldr	r3, [r4, #4]
 800b52c:	1ac0      	subs	r0, r0, r3
 800b52e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b530:	b10b      	cbz	r3, 800b536 <__sflush_r+0x46>
 800b532:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b534:	1ac0      	subs	r0, r0, r3
 800b536:	2300      	movs	r3, #0
 800b538:	4602      	mov	r2, r0
 800b53a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b53c:	6a21      	ldr	r1, [r4, #32]
 800b53e:	4628      	mov	r0, r5
 800b540:	47b0      	blx	r6
 800b542:	1c43      	adds	r3, r0, #1
 800b544:	89a3      	ldrh	r3, [r4, #12]
 800b546:	d106      	bne.n	800b556 <__sflush_r+0x66>
 800b548:	6829      	ldr	r1, [r5, #0]
 800b54a:	291d      	cmp	r1, #29
 800b54c:	d82c      	bhi.n	800b5a8 <__sflush_r+0xb8>
 800b54e:	4a2a      	ldr	r2, [pc, #168]	; (800b5f8 <__sflush_r+0x108>)
 800b550:	40ca      	lsrs	r2, r1
 800b552:	07d6      	lsls	r6, r2, #31
 800b554:	d528      	bpl.n	800b5a8 <__sflush_r+0xb8>
 800b556:	2200      	movs	r2, #0
 800b558:	6062      	str	r2, [r4, #4]
 800b55a:	04d9      	lsls	r1, r3, #19
 800b55c:	6922      	ldr	r2, [r4, #16]
 800b55e:	6022      	str	r2, [r4, #0]
 800b560:	d504      	bpl.n	800b56c <__sflush_r+0x7c>
 800b562:	1c42      	adds	r2, r0, #1
 800b564:	d101      	bne.n	800b56a <__sflush_r+0x7a>
 800b566:	682b      	ldr	r3, [r5, #0]
 800b568:	b903      	cbnz	r3, 800b56c <__sflush_r+0x7c>
 800b56a:	6560      	str	r0, [r4, #84]	; 0x54
 800b56c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b56e:	602f      	str	r7, [r5, #0]
 800b570:	2900      	cmp	r1, #0
 800b572:	d0ca      	beq.n	800b50a <__sflush_r+0x1a>
 800b574:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b578:	4299      	cmp	r1, r3
 800b57a:	d002      	beq.n	800b582 <__sflush_r+0x92>
 800b57c:	4628      	mov	r0, r5
 800b57e:	f7ff f9cd 	bl	800a91c <_free_r>
 800b582:	2000      	movs	r0, #0
 800b584:	6360      	str	r0, [r4, #52]	; 0x34
 800b586:	e7c1      	b.n	800b50c <__sflush_r+0x1c>
 800b588:	6a21      	ldr	r1, [r4, #32]
 800b58a:	2301      	movs	r3, #1
 800b58c:	4628      	mov	r0, r5
 800b58e:	47b0      	blx	r6
 800b590:	1c41      	adds	r1, r0, #1
 800b592:	d1c7      	bne.n	800b524 <__sflush_r+0x34>
 800b594:	682b      	ldr	r3, [r5, #0]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d0c4      	beq.n	800b524 <__sflush_r+0x34>
 800b59a:	2b1d      	cmp	r3, #29
 800b59c:	d001      	beq.n	800b5a2 <__sflush_r+0xb2>
 800b59e:	2b16      	cmp	r3, #22
 800b5a0:	d101      	bne.n	800b5a6 <__sflush_r+0xb6>
 800b5a2:	602f      	str	r7, [r5, #0]
 800b5a4:	e7b1      	b.n	800b50a <__sflush_r+0x1a>
 800b5a6:	89a3      	ldrh	r3, [r4, #12]
 800b5a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5ac:	81a3      	strh	r3, [r4, #12]
 800b5ae:	e7ad      	b.n	800b50c <__sflush_r+0x1c>
 800b5b0:	690f      	ldr	r7, [r1, #16]
 800b5b2:	2f00      	cmp	r7, #0
 800b5b4:	d0a9      	beq.n	800b50a <__sflush_r+0x1a>
 800b5b6:	0793      	lsls	r3, r2, #30
 800b5b8:	680e      	ldr	r6, [r1, #0]
 800b5ba:	bf08      	it	eq
 800b5bc:	694b      	ldreq	r3, [r1, #20]
 800b5be:	600f      	str	r7, [r1, #0]
 800b5c0:	bf18      	it	ne
 800b5c2:	2300      	movne	r3, #0
 800b5c4:	eba6 0807 	sub.w	r8, r6, r7
 800b5c8:	608b      	str	r3, [r1, #8]
 800b5ca:	f1b8 0f00 	cmp.w	r8, #0
 800b5ce:	dd9c      	ble.n	800b50a <__sflush_r+0x1a>
 800b5d0:	6a21      	ldr	r1, [r4, #32]
 800b5d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b5d4:	4643      	mov	r3, r8
 800b5d6:	463a      	mov	r2, r7
 800b5d8:	4628      	mov	r0, r5
 800b5da:	47b0      	blx	r6
 800b5dc:	2800      	cmp	r0, #0
 800b5de:	dc06      	bgt.n	800b5ee <__sflush_r+0xfe>
 800b5e0:	89a3      	ldrh	r3, [r4, #12]
 800b5e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5e6:	81a3      	strh	r3, [r4, #12]
 800b5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5ec:	e78e      	b.n	800b50c <__sflush_r+0x1c>
 800b5ee:	4407      	add	r7, r0
 800b5f0:	eba8 0800 	sub.w	r8, r8, r0
 800b5f4:	e7e9      	b.n	800b5ca <__sflush_r+0xda>
 800b5f6:	bf00      	nop
 800b5f8:	20400001 	.word	0x20400001

0800b5fc <_fflush_r>:
 800b5fc:	b538      	push	{r3, r4, r5, lr}
 800b5fe:	690b      	ldr	r3, [r1, #16]
 800b600:	4605      	mov	r5, r0
 800b602:	460c      	mov	r4, r1
 800b604:	b913      	cbnz	r3, 800b60c <_fflush_r+0x10>
 800b606:	2500      	movs	r5, #0
 800b608:	4628      	mov	r0, r5
 800b60a:	bd38      	pop	{r3, r4, r5, pc}
 800b60c:	b118      	cbz	r0, 800b616 <_fflush_r+0x1a>
 800b60e:	6983      	ldr	r3, [r0, #24]
 800b610:	b90b      	cbnz	r3, 800b616 <_fflush_r+0x1a>
 800b612:	f7ff faad 	bl	800ab70 <__sinit>
 800b616:	4b14      	ldr	r3, [pc, #80]	; (800b668 <_fflush_r+0x6c>)
 800b618:	429c      	cmp	r4, r3
 800b61a:	d11b      	bne.n	800b654 <_fflush_r+0x58>
 800b61c:	686c      	ldr	r4, [r5, #4]
 800b61e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d0ef      	beq.n	800b606 <_fflush_r+0xa>
 800b626:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b628:	07d0      	lsls	r0, r2, #31
 800b62a:	d404      	bmi.n	800b636 <_fflush_r+0x3a>
 800b62c:	0599      	lsls	r1, r3, #22
 800b62e:	d402      	bmi.n	800b636 <_fflush_r+0x3a>
 800b630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b632:	f7ff fb3b 	bl	800acac <__retarget_lock_acquire_recursive>
 800b636:	4628      	mov	r0, r5
 800b638:	4621      	mov	r1, r4
 800b63a:	f7ff ff59 	bl	800b4f0 <__sflush_r>
 800b63e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b640:	07da      	lsls	r2, r3, #31
 800b642:	4605      	mov	r5, r0
 800b644:	d4e0      	bmi.n	800b608 <_fflush_r+0xc>
 800b646:	89a3      	ldrh	r3, [r4, #12]
 800b648:	059b      	lsls	r3, r3, #22
 800b64a:	d4dd      	bmi.n	800b608 <_fflush_r+0xc>
 800b64c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b64e:	f7ff fb2e 	bl	800acae <__retarget_lock_release_recursive>
 800b652:	e7d9      	b.n	800b608 <_fflush_r+0xc>
 800b654:	4b05      	ldr	r3, [pc, #20]	; (800b66c <_fflush_r+0x70>)
 800b656:	429c      	cmp	r4, r3
 800b658:	d101      	bne.n	800b65e <_fflush_r+0x62>
 800b65a:	68ac      	ldr	r4, [r5, #8]
 800b65c:	e7df      	b.n	800b61e <_fflush_r+0x22>
 800b65e:	4b04      	ldr	r3, [pc, #16]	; (800b670 <_fflush_r+0x74>)
 800b660:	429c      	cmp	r4, r3
 800b662:	bf08      	it	eq
 800b664:	68ec      	ldreq	r4, [r5, #12]
 800b666:	e7da      	b.n	800b61e <_fflush_r+0x22>
 800b668:	0800b874 	.word	0x0800b874
 800b66c:	0800b894 	.word	0x0800b894
 800b670:	0800b854 	.word	0x0800b854

0800b674 <_lseek_r>:
 800b674:	b538      	push	{r3, r4, r5, lr}
 800b676:	4d07      	ldr	r5, [pc, #28]	; (800b694 <_lseek_r+0x20>)
 800b678:	4604      	mov	r4, r0
 800b67a:	4608      	mov	r0, r1
 800b67c:	4611      	mov	r1, r2
 800b67e:	2200      	movs	r2, #0
 800b680:	602a      	str	r2, [r5, #0]
 800b682:	461a      	mov	r2, r3
 800b684:	f7f5 f9aa 	bl	80009dc <_lseek>
 800b688:	1c43      	adds	r3, r0, #1
 800b68a:	d102      	bne.n	800b692 <_lseek_r+0x1e>
 800b68c:	682b      	ldr	r3, [r5, #0]
 800b68e:	b103      	cbz	r3, 800b692 <_lseek_r+0x1e>
 800b690:	6023      	str	r3, [r4, #0]
 800b692:	bd38      	pop	{r3, r4, r5, pc}
 800b694:	20000870 	.word	0x20000870

0800b698 <__swhatbuf_r>:
 800b698:	b570      	push	{r4, r5, r6, lr}
 800b69a:	460e      	mov	r6, r1
 800b69c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6a0:	2900      	cmp	r1, #0
 800b6a2:	b096      	sub	sp, #88	; 0x58
 800b6a4:	4614      	mov	r4, r2
 800b6a6:	461d      	mov	r5, r3
 800b6a8:	da07      	bge.n	800b6ba <__swhatbuf_r+0x22>
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	602b      	str	r3, [r5, #0]
 800b6ae:	89b3      	ldrh	r3, [r6, #12]
 800b6b0:	061a      	lsls	r2, r3, #24
 800b6b2:	d410      	bmi.n	800b6d6 <__swhatbuf_r+0x3e>
 800b6b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6b8:	e00e      	b.n	800b6d8 <__swhatbuf_r+0x40>
 800b6ba:	466a      	mov	r2, sp
 800b6bc:	f000 f862 	bl	800b784 <_fstat_r>
 800b6c0:	2800      	cmp	r0, #0
 800b6c2:	dbf2      	blt.n	800b6aa <__swhatbuf_r+0x12>
 800b6c4:	9a01      	ldr	r2, [sp, #4]
 800b6c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b6ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b6ce:	425a      	negs	r2, r3
 800b6d0:	415a      	adcs	r2, r3
 800b6d2:	602a      	str	r2, [r5, #0]
 800b6d4:	e7ee      	b.n	800b6b4 <__swhatbuf_r+0x1c>
 800b6d6:	2340      	movs	r3, #64	; 0x40
 800b6d8:	2000      	movs	r0, #0
 800b6da:	6023      	str	r3, [r4, #0]
 800b6dc:	b016      	add	sp, #88	; 0x58
 800b6de:	bd70      	pop	{r4, r5, r6, pc}

0800b6e0 <__smakebuf_r>:
 800b6e0:	898b      	ldrh	r3, [r1, #12]
 800b6e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b6e4:	079d      	lsls	r5, r3, #30
 800b6e6:	4606      	mov	r6, r0
 800b6e8:	460c      	mov	r4, r1
 800b6ea:	d507      	bpl.n	800b6fc <__smakebuf_r+0x1c>
 800b6ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b6f0:	6023      	str	r3, [r4, #0]
 800b6f2:	6123      	str	r3, [r4, #16]
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	6163      	str	r3, [r4, #20]
 800b6f8:	b002      	add	sp, #8
 800b6fa:	bd70      	pop	{r4, r5, r6, pc}
 800b6fc:	ab01      	add	r3, sp, #4
 800b6fe:	466a      	mov	r2, sp
 800b700:	f7ff ffca 	bl	800b698 <__swhatbuf_r>
 800b704:	9900      	ldr	r1, [sp, #0]
 800b706:	4605      	mov	r5, r0
 800b708:	4630      	mov	r0, r6
 800b70a:	f7ff f957 	bl	800a9bc <_malloc_r>
 800b70e:	b948      	cbnz	r0, 800b724 <__smakebuf_r+0x44>
 800b710:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b714:	059a      	lsls	r2, r3, #22
 800b716:	d4ef      	bmi.n	800b6f8 <__smakebuf_r+0x18>
 800b718:	f023 0303 	bic.w	r3, r3, #3
 800b71c:	f043 0302 	orr.w	r3, r3, #2
 800b720:	81a3      	strh	r3, [r4, #12]
 800b722:	e7e3      	b.n	800b6ec <__smakebuf_r+0xc>
 800b724:	4b0d      	ldr	r3, [pc, #52]	; (800b75c <__smakebuf_r+0x7c>)
 800b726:	62b3      	str	r3, [r6, #40]	; 0x28
 800b728:	89a3      	ldrh	r3, [r4, #12]
 800b72a:	6020      	str	r0, [r4, #0]
 800b72c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b730:	81a3      	strh	r3, [r4, #12]
 800b732:	9b00      	ldr	r3, [sp, #0]
 800b734:	6163      	str	r3, [r4, #20]
 800b736:	9b01      	ldr	r3, [sp, #4]
 800b738:	6120      	str	r0, [r4, #16]
 800b73a:	b15b      	cbz	r3, 800b754 <__smakebuf_r+0x74>
 800b73c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b740:	4630      	mov	r0, r6
 800b742:	f000 f831 	bl	800b7a8 <_isatty_r>
 800b746:	b128      	cbz	r0, 800b754 <__smakebuf_r+0x74>
 800b748:	89a3      	ldrh	r3, [r4, #12]
 800b74a:	f023 0303 	bic.w	r3, r3, #3
 800b74e:	f043 0301 	orr.w	r3, r3, #1
 800b752:	81a3      	strh	r3, [r4, #12]
 800b754:	89a0      	ldrh	r0, [r4, #12]
 800b756:	4305      	orrs	r5, r0
 800b758:	81a5      	strh	r5, [r4, #12]
 800b75a:	e7cd      	b.n	800b6f8 <__smakebuf_r+0x18>
 800b75c:	0800ab09 	.word	0x0800ab09

0800b760 <_read_r>:
 800b760:	b538      	push	{r3, r4, r5, lr}
 800b762:	4d07      	ldr	r5, [pc, #28]	; (800b780 <_read_r+0x20>)
 800b764:	4604      	mov	r4, r0
 800b766:	4608      	mov	r0, r1
 800b768:	4611      	mov	r1, r2
 800b76a:	2200      	movs	r2, #0
 800b76c:	602a      	str	r2, [r5, #0]
 800b76e:	461a      	mov	r2, r3
 800b770:	f7f5 f8d4 	bl	800091c <_read>
 800b774:	1c43      	adds	r3, r0, #1
 800b776:	d102      	bne.n	800b77e <_read_r+0x1e>
 800b778:	682b      	ldr	r3, [r5, #0]
 800b77a:	b103      	cbz	r3, 800b77e <_read_r+0x1e>
 800b77c:	6023      	str	r3, [r4, #0]
 800b77e:	bd38      	pop	{r3, r4, r5, pc}
 800b780:	20000870 	.word	0x20000870

0800b784 <_fstat_r>:
 800b784:	b538      	push	{r3, r4, r5, lr}
 800b786:	4d07      	ldr	r5, [pc, #28]	; (800b7a4 <_fstat_r+0x20>)
 800b788:	2300      	movs	r3, #0
 800b78a:	4604      	mov	r4, r0
 800b78c:	4608      	mov	r0, r1
 800b78e:	4611      	mov	r1, r2
 800b790:	602b      	str	r3, [r5, #0]
 800b792:	f7f5 f908 	bl	80009a6 <_fstat>
 800b796:	1c43      	adds	r3, r0, #1
 800b798:	d102      	bne.n	800b7a0 <_fstat_r+0x1c>
 800b79a:	682b      	ldr	r3, [r5, #0]
 800b79c:	b103      	cbz	r3, 800b7a0 <_fstat_r+0x1c>
 800b79e:	6023      	str	r3, [r4, #0]
 800b7a0:	bd38      	pop	{r3, r4, r5, pc}
 800b7a2:	bf00      	nop
 800b7a4:	20000870 	.word	0x20000870

0800b7a8 <_isatty_r>:
 800b7a8:	b538      	push	{r3, r4, r5, lr}
 800b7aa:	4d06      	ldr	r5, [pc, #24]	; (800b7c4 <_isatty_r+0x1c>)
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	4604      	mov	r4, r0
 800b7b0:	4608      	mov	r0, r1
 800b7b2:	602b      	str	r3, [r5, #0]
 800b7b4:	f7f5 f907 	bl	80009c6 <_isatty>
 800b7b8:	1c43      	adds	r3, r0, #1
 800b7ba:	d102      	bne.n	800b7c2 <_isatty_r+0x1a>
 800b7bc:	682b      	ldr	r3, [r5, #0]
 800b7be:	b103      	cbz	r3, 800b7c2 <_isatty_r+0x1a>
 800b7c0:	6023      	str	r3, [r4, #0]
 800b7c2:	bd38      	pop	{r3, r4, r5, pc}
 800b7c4:	20000870 	.word	0x20000870

0800b7c8 <_init>:
 800b7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ca:	bf00      	nop
 800b7cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ce:	bc08      	pop	{r3}
 800b7d0:	469e      	mov	lr, r3
 800b7d2:	4770      	bx	lr

0800b7d4 <_fini>:
 800b7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7d6:	bf00      	nop
 800b7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7da:	bc08      	pop	{r3}
 800b7dc:	469e      	mov	lr, r3
 800b7de:	4770      	bx	lr
