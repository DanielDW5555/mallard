
mallard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc44  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  0800bdf4  0800bdf4  0001bdf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bef0  0800bef0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800bef0  0800bef0  0001bef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bef8  0800bef8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bef8  0800bef8  0001bef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800befc  0800befc  0001befc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800bf00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008fc  20000090  0800bf90  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000098c  0800bf90  0002098c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023e03  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004385  00000000  00000000  00043ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001778  00000000  00000000  00048248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015e0  00000000  00000000  000499c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f472  00000000  00000000  0004afa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab3f  00000000  00000000  0007a412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118282  00000000  00000000  00094f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ad1d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a70  00000000  00000000  001ad228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bddc 	.word	0x0800bddc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	0800bddc 	.word	0x0800bddc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <blinky>:

// ************************************************* START FUNCTIONS HERE ***************************************

// Blinky!!
void blinky(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 2; i ++)
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	e011      	b.n	80005b8 <blinky+0x30>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000594:	2180      	movs	r1, #128	; 0x80
 8000596:	480c      	ldr	r0, [pc, #48]	; (80005c8 <blinky+0x40>)
 8000598:	f002 fa2a 	bl	80029f0 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 800059c:	2064      	movs	r0, #100	; 0x64
 800059e:	f000 fd03 	bl	8000fa8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80005a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005a6:	4808      	ldr	r0, [pc, #32]	; (80005c8 <blinky+0x40>)
 80005a8:	f002 fa22 	bl	80029f0 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80005ac:	2064      	movs	r0, #100	; 0x64
 80005ae:	f000 fcfb 	bl	8000fa8 <HAL_Delay>
	for(int i = 0; i < 2; i ++)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	3301      	adds	r3, #1
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	ddea      	ble.n	8000594 <blinky+0xc>
	}
}
 80005be:	bf00      	nop
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	48000400 	.word	0x48000400

080005cc <HAL_RTCEx_WakeUpTimerEventCallback>:

}

// Wakeup RTC Interupt
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	SystemClock_Config();
 80005d4:	f000 f83a 	bl	800064c <SystemClock_Config>
	HAL_ResumeTick();
 80005d8:	f000 fd0a 	bl	8000ff0 <HAL_ResumeTick>
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f000 fc68 	bl	8000ebe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ee:	f000 f82d 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f000 f9a9 	bl	8000948 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005f6:	f000 f947 	bl	8000888 <MX_LPUART1_UART_Init>
  MX_USB_HOST_Init();
 80005fa:	f00a f95f 	bl	800a8bc <MX_USB_HOST_Init>
  MX_ADC1_Init();
 80005fe:	f000 f8cd 	bl	800079c <MX_ADC1_Init>
  MX_RTC_Init();
 8000602:	f000 f96f 	bl	80008e4 <MX_RTC_Init>
  // ************************************************* START BEFORE WHILE CODE HERE ***************************************

  // Bootup Blinkys
  // These are put in place to allow programming before the microcontroller enters its sleep loop, currently its set to wait 5 seconds before entering sleep mode

  printf("System Starting!");
 8000606:	480f      	ldr	r0, [pc, #60]	; (8000644 <main+0x60>)
 8000608:	f00a fd3c 	bl	800b084 <iprintf>

  blinky();
 800060c:	f7ff ffbc 	bl	8000588 <blinky>
  HAL_Delay(5000);
 8000610:	f241 3088 	movw	r0, #5000	; 0x1388
 8000614:	f000 fcc8 	bl	8000fa8 <HAL_Delay>
  blinky();
 8000618:	f7ff ffb6 	bl	8000588 <blinky>
  //Assign ADC Variable
  uint16_t ADC_READING = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	80fb      	strh	r3, [r7, #6]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000620:	f00a f972 	bl	800a908 <MX_USB_HOST_Process>



    // ************************************************* START WHILE CODE HERE ***************************************
    //Start ADC Conversion
    HAL_ADC_Start(&hadc1);
 8000624:	4808      	ldr	r0, [pc, #32]	; (8000648 <main+0x64>)
 8000626:	f001 f843 	bl	80016b0 <HAL_ADC_Start>

    //Poll ADC 1 Periferal and Timeout 1ms
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800062a:	f04f 31ff 	mov.w	r1, #4294967295
 800062e:	4806      	ldr	r0, [pc, #24]	; (8000648 <main+0x64>)
 8000630:	f001 f8f8 	bl	8001824 <HAL_ADC_PollForConversion>

    //Store ADC Value in ADC_Reading
    ADC_READING = HAL_ADC_GetValue(&hadc1);
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <main+0x64>)
 8000636:	f001 f9cd 	bl	80019d4 <HAL_ADC_GetValue>
 800063a:	4603      	mov	r3, r0
 800063c:	80fb      	strh	r3, [r7, #6]

    // Enter sleep mode using RTC wakeup functions
    // enterSleepMode(3); // Parameter depicts how long the sleep cycle is (currently its set to 3 seconds)
    blinky();
 800063e:	f7ff ffa3 	bl	8000588 <blinky>
    MX_USB_HOST_Process();
 8000642:	e7ed      	b.n	8000620 <main+0x3c>
 8000644:	0800bdf4 	.word	0x0800bdf4
 8000648:	20000140 	.word	0x20000140

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b0ba      	sub	sp, #232	; 0xe8
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000656:	2244      	movs	r2, #68	; 0x44
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f00a fc60 	bl	800af20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	228c      	movs	r2, #140	; 0x8c
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f00a fc52 	bl	800af20 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800067c:	f003 feba 	bl	80043f4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000680:	4b44      	ldr	r3, [pc, #272]	; (8000794 <SystemClock_Config+0x148>)
 8000682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000686:	4a43      	ldr	r2, [pc, #268]	; (8000794 <SystemClock_Config+0x148>)
 8000688:	f023 0318 	bic.w	r3, r3, #24
 800068c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000690:	231c      	movs	r3, #28
 8000692:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000696:	2301      	movs	r3, #1
 8000698:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006a2:	2301      	movs	r3, #1
 80006a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 80006ae:	2390      	movs	r3, #144	; 0x90
 80006b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006ba:	2301      	movs	r3, #1
 80006bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 5;
 80006c0:	2305      	movs	r3, #5
 80006c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 71;
 80006c6:	2347      	movs	r3, #71	; 0x47
 80006c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 80006d8:	2306      	movs	r3, #6
 80006da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80006e2:	4618      	mov	r0, r3
 80006e4:	f003 ff1a 	bl	800451c <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006ee:	f000 f9cf 	bl	8000a90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	230f      	movs	r3, #15
 80006f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f8:	2303      	movs	r3, #3
 80006fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80006fe:	2390      	movs	r3, #144	; 0x90
 8000700:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000708:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000712:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f004 fb25 	bl	8004d68 <HAL_RCC_ClockConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000724:	f000 f9b4 	bl	8000a90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPUART1
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemClock_Config+0x14c>)
 800072a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800072c:	2300      	movs	r3, #0
 800072e:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000730:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000734:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800073c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000740:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000744:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000746:	2301      	movs	r3, #1
 8000748:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 800074a:	2305      	movs	r3, #5
 800074c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
 800074e:	2314      	movs	r3, #20
 8000750:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000752:	2302      	movs	r3, #2
 8000754:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000756:	2302      	movs	r3, #2
 8000758:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800075a:	2302      	movs	r3, #2
 800075c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 800075e:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8000762:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	4618      	mov	r0, r3
 8000768:	f004 fd04 	bl	8005174 <HAL_RCCEx_PeriphCLKConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0x12a>
  {
    Error_Handler();
 8000772:	f000 f98d 	bl	8000a90 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000776:	f44f 7000 	mov.w	r0, #512	; 0x200
 800077a:	f003 fe59 	bl	8004430 <HAL_PWREx_ControlVoltageScaling>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x13c>
  {
    Error_Handler();
 8000784:	f000 f984 	bl	8000a90 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000788:	f004 fff0 	bl	800576c <HAL_RCCEx_EnableMSIPLLMode>
}
 800078c:	bf00      	nop
 800078e:	37e8      	adds	r7, #232	; 0xe8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40021000 	.word	0x40021000
 8000798:	00026020 	.word	0x00026020

0800079c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	; 0x28
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
 80007bc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80007be:	4b2f      	ldr	r3, [pc, #188]	; (800087c <MX_ADC1_Init+0xe0>)
 80007c0:	4a2f      	ldr	r2, [pc, #188]	; (8000880 <MX_ADC1_Init+0xe4>)
 80007c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007c4:	4b2d      	ldr	r3, [pc, #180]	; (800087c <MX_ADC1_Init+0xe0>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ca:	4b2c      	ldr	r3, [pc, #176]	; (800087c <MX_ADC1_Init+0xe0>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d0:	4b2a      	ldr	r3, [pc, #168]	; (800087c <MX_ADC1_Init+0xe0>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007d6:	4b29      	ldr	r3, [pc, #164]	; (800087c <MX_ADC1_Init+0xe0>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007dc:	4b27      	ldr	r3, [pc, #156]	; (800087c <MX_ADC1_Init+0xe0>)
 80007de:	2204      	movs	r2, #4
 80007e0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007e2:	4b26      	ldr	r3, [pc, #152]	; (800087c <MX_ADC1_Init+0xe0>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007e8:	4b24      	ldr	r3, [pc, #144]	; (800087c <MX_ADC1_Init+0xe0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007ee:	4b23      	ldr	r3, [pc, #140]	; (800087c <MX_ADC1_Init+0xe0>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007f4:	4b21      	ldr	r3, [pc, #132]	; (800087c <MX_ADC1_Init+0xe0>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007fc:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_ADC1_Init+0xe0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000802:	4b1e      	ldr	r3, [pc, #120]	; (800087c <MX_ADC1_Init+0xe0>)
 8000804:	2200      	movs	r2, #0
 8000806:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000808:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_ADC1_Init+0xe0>)
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000810:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_ADC1_Init+0xe0>)
 8000812:	2200      	movs	r2, #0
 8000814:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000816:	4b19      	ldr	r3, [pc, #100]	; (800087c <MX_ADC1_Init+0xe0>)
 8000818:	2200      	movs	r2, #0
 800081a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800081e:	4817      	ldr	r0, [pc, #92]	; (800087c <MX_ADC1_Init+0xe0>)
 8000820:	f000 fdec 	bl	80013fc <HAL_ADC_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800082a:	f000 f931 	bl	8000a90 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	4810      	ldr	r0, [pc, #64]	; (800087c <MX_ADC1_Init+0xe0>)
 800083a:	f001 fd6d 	bl	8002318 <HAL_ADCEx_MultiModeConfigChannel>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000844:	f000 f924 	bl	8000a90 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000848:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_ADC1_Init+0xe8>)
 800084a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800084c:	2306      	movs	r3, #6
 800084e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000854:	237f      	movs	r3, #127	; 0x7f
 8000856:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000858:	2304      	movs	r3, #4
 800085a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	4619      	mov	r1, r3
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_ADC1_Init+0xe0>)
 8000866:	f001 f8c3 	bl	80019f0 <HAL_ADC_ConfigChannel>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000870:	f000 f90e 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	3728      	adds	r7, #40	; 0x28
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000140 	.word	0x20000140
 8000880:	50040000 	.word	0x50040000
 8000884:	04300002 	.word	0x04300002

08000888 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 800088e:	4a13      	ldr	r2, [pc, #76]	; (80008dc <MX_LPUART1_UART_Init+0x54>)
 8000890:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 8000894:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <MX_LPUART1_UART_Init+0x58>)
 8000896:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 800089a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800089e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 80008c6:	f005 fafb 	bl	8005ec0 <HAL_UART_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80008d0:	f000 f8de 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200000bc 	.word	0x200000bc
 80008dc:	40008000 	.word	0x40008000
 80008e0:	00033324 	.word	0x00033324

080008e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <MX_RTC_Init+0x5c>)
 80008ea:	4a16      	ldr	r2, [pc, #88]	; (8000944 <MX_RTC_Init+0x60>)
 80008ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_RTC_Init+0x5c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_RTC_Init+0x5c>)
 80008f6:	227f      	movs	r2, #127	; 0x7f
 80008f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_RTC_Init+0x5c>)
 80008fc:	22ff      	movs	r2, #255	; 0xff
 80008fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_RTC_Init+0x5c>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_RTC_Init+0x5c>)
 8000908:	2200      	movs	r2, #0
 800090a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_RTC_Init+0x5c>)
 800090e:	2200      	movs	r2, #0
 8000910:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_RTC_Init+0x5c>)
 8000914:	2200      	movs	r2, #0
 8000916:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000918:	4809      	ldr	r0, [pc, #36]	; (8000940 <MX_RTC_Init+0x5c>)
 800091a:	f005 f905 	bl	8005b28 <HAL_RTC_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000924:	f000 f8b4 	bl	8000a90 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8000928:	2204      	movs	r2, #4
 800092a:	2100      	movs	r1, #0
 800092c:	4804      	ldr	r0, [pc, #16]	; (8000940 <MX_RTC_Init+0x5c>)
 800092e:	f005 fa0d 	bl	8005d4c <HAL_RTCEx_SetWakeUpTimer_IT>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000938:	f000 f8aa 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	200001a8 	.word	0x200001a8
 8000944:	40002800 	.word	0x40002800

08000948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08a      	sub	sp, #40	; 0x28
 800094c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
 800095c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	4b47      	ldr	r3, [pc, #284]	; (8000a7c <MX_GPIO_Init+0x134>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	4a46      	ldr	r2, [pc, #280]	; (8000a7c <MX_GPIO_Init+0x134>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096a:	4b44      	ldr	r3, [pc, #272]	; (8000a7c <MX_GPIO_Init+0x134>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000976:	4b41      	ldr	r3, [pc, #260]	; (8000a7c <MX_GPIO_Init+0x134>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	4a40      	ldr	r2, [pc, #256]	; (8000a7c <MX_GPIO_Init+0x134>)
 800097c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000982:	4b3e      	ldr	r3, [pc, #248]	; (8000a7c <MX_GPIO_Init+0x134>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	4b3b      	ldr	r3, [pc, #236]	; (8000a7c <MX_GPIO_Init+0x134>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	4a3a      	ldr	r2, [pc, #232]	; (8000a7c <MX_GPIO_Init+0x134>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099a:	4b38      	ldr	r3, [pc, #224]	; (8000a7c <MX_GPIO_Init+0x134>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009a6:	4b35      	ldr	r3, [pc, #212]	; (8000a7c <MX_GPIO_Init+0x134>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	4a34      	ldr	r2, [pc, #208]	; (8000a7c <MX_GPIO_Init+0x134>)
 80009ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b2:	4b32      	ldr	r3, [pc, #200]	; (8000a7c <MX_GPIO_Init+0x134>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80009be:	f003 fd9d 	bl	80044fc <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	4b2e      	ldr	r3, [pc, #184]	; (8000a7c <MX_GPIO_Init+0x134>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	4a2d      	ldr	r2, [pc, #180]	; (8000a7c <MX_GPIO_Init+0x134>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ce:	4b2b      	ldr	r3, [pc, #172]	; (8000a7c <MX_GPIO_Init+0x134>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80009e0:	4827      	ldr	r0, [pc, #156]	; (8000a80 <MX_GPIO_Init+0x138>)
 80009e2:	f001 ffed 	bl	80029c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
 80009ec:	4825      	ldr	r0, [pc, #148]	; (8000a84 <MX_GPIO_Init+0x13c>)
 80009ee:	f001 ffe7 	bl	80029c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f8:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <MX_GPIO_Init+0x140>)
 80009fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4619      	mov	r1, r3
 8000a06:	4821      	ldr	r0, [pc, #132]	; (8000a8c <MX_GPIO_Init+0x144>)
 8000a08:	f001 fe48 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000a0c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	4816      	ldr	r0, [pc, #88]	; (8000a80 <MX_GPIO_Init+0x138>)
 8000a26:	f001 fe39 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin SMPS_PG_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|SMPS_PG_Pin;
 8000a2a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8000a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4811      	ldr	r0, [pc, #68]	; (8000a84 <MX_GPIO_Init+0x13c>)
 8000a40:	f001 fe2c 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin SMPS_V1_Pin SMPS_EN_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin;
 8000a44:	f44f 5331 	mov.w	r3, #11328	; 0x2c40
 8000a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4809      	ldr	r0, [pc, #36]	; (8000a84 <MX_GPIO_Init+0x13c>)
 8000a5e:	f001 fe1d 	bl	800269c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2100      	movs	r1, #0
 8000a66:	2028      	movs	r0, #40	; 0x28
 8000a68:	f001 fde1 	bl	800262e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a6c:	2028      	movs	r0, #40	; 0x28
 8000a6e:	f001 fdfa 	bl	8002666 <HAL_NVIC_EnableIRQ>

}
 8000a72:	bf00      	nop
 8000a74:	3728      	adds	r7, #40	; 0x28
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	48000400 	.word	0x48000400
 8000a84:	48001800 	.word	0x48001800
 8000a88:	10110000 	.word	0x10110000
 8000a8c:	48000800 	.word	0x48000800

08000a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
}
 8000a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <Error_Handler+0x8>
	...

08000a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <HAL_MspInit+0x44>)
 8000aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aa6:	4a0e      	ldr	r2, [pc, #56]	; (8000ae0 <HAL_MspInit+0x44>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6613      	str	r3, [r2, #96]	; 0x60
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <HAL_MspInit+0x44>)
 8000ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <HAL_MspInit+0x44>)
 8000abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000abe:	4a08      	ldr	r2, [pc, #32]	; (8000ae0 <HAL_MspInit+0x44>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_MspInit+0x44>)
 8000ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	; 0x28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a15      	ldr	r2, [pc, #84]	; (8000b58 <HAL_ADC_MspInit+0x74>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d123      	bne.n	8000b4e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <HAL_ADC_MspInit+0x78>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	4a14      	ldr	r2, [pc, #80]	; (8000b5c <HAL_ADC_MspInit+0x78>)
 8000b0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b12:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <HAL_ADC_MspInit+0x78>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <HAL_ADC_MspInit+0x78>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	4a0e      	ldr	r2, [pc, #56]	; (8000b5c <HAL_ADC_MspInit+0x78>)
 8000b24:	f043 0304 	orr.w	r3, r3, #4
 8000b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <HAL_ADC_MspInit+0x78>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	f003 0304 	and.w	r3, r3, #4
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b36:	2301      	movs	r3, #1
 8000b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b3a:	230b      	movs	r3, #11
 8000b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	4805      	ldr	r0, [pc, #20]	; (8000b60 <HAL_ADC_MspInit+0x7c>)
 8000b4a:	f001 fda7 	bl	800269c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b4e:	bf00      	nop
 8000b50:	3728      	adds	r7, #40	; 0x28
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	50040000 	.word	0x50040000
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	48000800 	.word	0x48000800

08000b64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a18      	ldr	r2, [pc, #96]	; (8000be4 <HAL_UART_MspInit+0x80>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d12a      	bne.n	8000bdc <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b86:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <HAL_UART_MspInit+0x84>)
 8000b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b8a:	4a17      	ldr	r2, [pc, #92]	; (8000be8 <HAL_UART_MspInit+0x84>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <HAL_UART_MspInit+0x84>)
 8000b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b9e:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <HAL_UART_MspInit+0x84>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	4a11      	ldr	r2, [pc, #68]	; (8000be8 <HAL_UART_MspInit+0x84>)
 8000ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000baa:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <HAL_UART_MspInit+0x84>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8000bb6:	f003 fca1 	bl	80044fc <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bba:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000bcc:	2308      	movs	r3, #8
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <HAL_UART_MspInit+0x88>)
 8000bd8:	f001 fd60 	bl	800269c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000bdc:	bf00      	nop
 8000bde:	3728      	adds	r7, #40	; 0x28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40008000 	.word	0x40008000
 8000be8:	40021000 	.word	0x40021000
 8000bec:	48001800 	.word	0x48001800

08000bf0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0b      	ldr	r2, [pc, #44]	; (8000c2c <HAL_RTC_MspInit+0x3c>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d10f      	bne.n	8000c22 <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <HAL_RTC_MspInit+0x40>)
 8000c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c08:	4a09      	ldr	r2, [pc, #36]	; (8000c30 <HAL_RTC_MspInit+0x40>)
 8000c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2100      	movs	r1, #0
 8000c16:	2003      	movs	r0, #3
 8000c18:	f001 fd09 	bl	800262e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f001 fd22 	bl	8002666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40002800 	.word	0x40002800
 8000c30:	40021000 	.word	0x40021000

08000c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <NMI_Handler+0x4>

08000c3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <HardFault_Handler+0x4>

08000c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <MemManage_Handler+0x4>

08000c46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <BusFault_Handler+0x4>

08000c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <UsageFault_Handler+0x4>

08000c52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c80:	f000 f972 	bl	8000f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <RTC_WKUP_IRQHandler+0x10>)
 8000c8e:	f005 f8f1 	bl	8005e74 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200001a8 	.word	0x200001a8

08000c9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ca0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ca4:	f001 febe 	bl	8002a24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}

08000cac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cb0:	4802      	ldr	r0, [pc, #8]	; (8000cbc <OTG_FS_IRQHandler+0x10>)
 8000cb2:	f002 f941 	bl	8002f38 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000678 	.word	0x20000678

08000cc0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	e00a      	b.n	8000ce8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cd2:	f3af 8000 	nop.w
 8000cd6:	4601      	mov	r1, r0
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	1c5a      	adds	r2, r3, #1
 8000cdc:	60ba      	str	r2, [r7, #8]
 8000cde:	b2ca      	uxtb	r2, r1
 8000ce0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	697a      	ldr	r2, [r7, #20]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	dbf0      	blt.n	8000cd2 <_read+0x12>
	}

return len;
 8000cf0:	687b      	ldr	r3, [r7, #4]
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b086      	sub	sp, #24
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	60f8      	str	r0, [r7, #12]
 8000d02:	60b9      	str	r1, [r7, #8]
 8000d04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
 8000d0a:	e009      	b.n	8000d20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	1c5a      	adds	r2, r3, #1
 8000d10:	60ba      	str	r2, [r7, #8]
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	697a      	ldr	r2, [r7, #20]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	dbf1      	blt.n	8000d0c <_write+0x12>
	}
	return len;
 8000d28:	687b      	ldr	r3, [r7, #4]
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3718      	adds	r7, #24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <_close>:

int _close(int file)
{
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
	return -1;
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
 8000d52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d5a:	605a      	str	r2, [r3, #4]
	return 0;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <_isatty>:

int _isatty(int file)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b083      	sub	sp, #12
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
	return 1;
 8000d72:	2301      	movs	r3, #1
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
	return 0;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3714      	adds	r7, #20
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da4:	4a14      	ldr	r2, [pc, #80]	; (8000df8 <_sbrk+0x5c>)
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <_sbrk+0x60>)
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db0:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d102      	bne.n	8000dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <_sbrk+0x64>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <_sbrk+0x68>)
 8000dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d207      	bcs.n	8000ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dcc:	f00a f86e 	bl	800aeac <__errno>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dda:	e009      	b.n	8000df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de2:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <_sbrk+0x64>)
 8000dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dee:	68fb      	ldr	r3, [r7, #12]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20050000 	.word	0x20050000
 8000dfc:	00000400 	.word	0x00000400
 8000e00:	200000ac 	.word	0x200000ac
 8000e04:	20000990 	.word	0x20000990

08000e08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e0c:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <SystemInit+0x5c>)
 8000e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e12:	4a14      	ldr	r2, [pc, #80]	; (8000e64 <SystemInit+0x5c>)
 8000e14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <SystemInit+0x60>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a11      	ldr	r2, [pc, #68]	; (8000e68 <SystemInit+0x60>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e28:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <SystemInit+0x60>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <SystemInit+0x60>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a0d      	ldr	r2, [pc, #52]	; (8000e68 <SystemInit+0x60>)
 8000e34:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e38:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e3c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <SystemInit+0x60>)
 8000e40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e44:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e46:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <SystemInit+0x60>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a07      	ldr	r2, [pc, #28]	; (8000e68 <SystemInit+0x60>)
 8000e4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e50:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e52:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <SystemInit+0x60>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000ed00 	.word	0xe000ed00
 8000e68:	40021000 	.word	0x40021000

08000e6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e70:	f7ff ffca 	bl	8000e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e74:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e76:	e003      	b.n	8000e80 <LoopCopyDataInit>

08000e78 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e78:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e7a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e7c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e7e:	3104      	adds	r1, #4

08000e80 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e80:	480a      	ldr	r0, [pc, #40]	; (8000eac <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e84:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e86:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e88:	d3f6      	bcc.n	8000e78 <CopyDataInit>
	ldr	r2, =_sbss
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e8c:	e002      	b.n	8000e94 <LoopFillZerobss>

08000e8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e8e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e90:	f842 3b04 	str.w	r3, [r2], #4

08000e94 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <LoopForever+0x16>)
	cmp	r2, r3
 8000e96:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e98:	d3f9      	bcc.n	8000e8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e9a:	f00a f80d 	bl	800aeb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e9e:	f7ff fba1 	bl	80005e4 <main>

08000ea2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ea2:	e7fe      	b.n	8000ea2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ea4:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8000ea8:	0800bf00 	.word	0x0800bf00
	ldr	r0, =_sdata
 8000eac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000eb0:	20000090 	.word	0x20000090
	ldr	r2, =_sbss
 8000eb4:	20000090 	.word	0x20000090
	ldr	r3, = _ebss
 8000eb8:	2000098c 	.word	0x2000098c

08000ebc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ebc:	e7fe      	b.n	8000ebc <ADC1_2_IRQHandler>

08000ebe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec8:	2003      	movs	r0, #3
 8000eca:	f001 fba5 	bl	8002618 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f000 f80e 	bl	8000ef0 <HAL_InitTick>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d002      	beq.n	8000ee0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	71fb      	strb	r3, [r7, #7]
 8000ede:	e001      	b.n	8000ee4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ee0:	f7ff fddc 	bl	8000a9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000efc:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <HAL_InitTick+0x6c>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d023      	beq.n	8000f4c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f04:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <HAL_InitTick+0x70>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <HAL_InitTick+0x6c>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f001 fbb1 	bl	8002682 <HAL_SYSTICK_Config>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d10f      	bne.n	8000f46 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b0f      	cmp	r3, #15
 8000f2a:	d809      	bhi.n	8000f40 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	f04f 30ff 	mov.w	r0, #4294967295
 8000f34:	f001 fb7b 	bl	800262e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f38:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <HAL_InitTick+0x74>)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	e007      	b.n	8000f50 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	73fb      	strb	r3, [r7, #15]
 8000f44:	e004      	b.n	8000f50 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	73fb      	strb	r3, [r7, #15]
 8000f4a:	e001      	b.n	8000f50 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	20000000 	.word	0x20000000
 8000f64:	20000004 	.word	0x20000004

08000f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_IncTick+0x20>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x24>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <HAL_IncTick+0x24>)
 8000f7a:	6013      	str	r3, [r2, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	200001cc 	.word	0x200001cc

08000f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <HAL_GetTick+0x14>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	200001cc 	.word	0x200001cc

08000fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb0:	f7ff ffee 	bl	8000f90 <HAL_GetTick>
 8000fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc0:	d005      	beq.n	8000fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_Delay+0x44>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4413      	add	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fce:	bf00      	nop
 8000fd0:	f7ff ffde 	bl	8000f90 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d8f7      	bhi.n	8000fd0 <HAL_Delay+0x28>
  {
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000008 	.word	0x20000008

08000ff0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <HAL_ResumeTick+0x1c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <HAL_ResumeTick+0x1c>)
 8000ffa:	f043 0302 	orr.w	r3, r3, #2
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000e010 	.word	0xe000e010

08001010 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	431a      	orrs	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	609a      	str	r2, [r3, #8]
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
 800103e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	431a      	orrs	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	609a      	str	r2, [r3, #8]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001078:	b480      	push	{r7}
 800107a:	b087      	sub	sp, #28
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	3360      	adds	r3, #96	; 0x60
 800108a:	461a      	mov	r2, r3
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <LL_ADC_SetOffset+0x44>)
 800109a:	4013      	ands	r3, r2
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	430a      	orrs	r2, r1
 80010a6:	4313      	orrs	r3, r2
 80010a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80010b0:	bf00      	nop
 80010b2:	371c      	adds	r7, #28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	03fff000 	.word	0x03fff000

080010c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3360      	adds	r3, #96	; 0x60
 80010ce:	461a      	mov	r2, r3
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b087      	sub	sp, #28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	3360      	adds	r3, #96	; 0x60
 80010fc:	461a      	mov	r2, r3
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4413      	add	r3, r2
 8001104:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	431a      	orrs	r2, r3
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001116:	bf00      	nop
 8001118:	371c      	adds	r7, #28
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001122:	b480      	push	{r7}
 8001124:	b083      	sub	sp, #12
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	431a      	orrs	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	615a      	str	r2, [r3, #20]
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001158:	2b00      	cmp	r3, #0
 800115a:	d101      	bne.n	8001160 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800115c:	2301      	movs	r3, #1
 800115e:	e000      	b.n	8001162 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800116e:	b480      	push	{r7}
 8001170:	b087      	sub	sp, #28
 8001172:	af00      	add	r7, sp, #0
 8001174:	60f8      	str	r0, [r7, #12]
 8001176:	60b9      	str	r1, [r7, #8]
 8001178:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	3330      	adds	r3, #48	; 0x30
 800117e:	461a      	mov	r2, r3
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	0a1b      	lsrs	r3, r3, #8
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	f003 030c 	and.w	r3, r3, #12
 800118a:	4413      	add	r3, r2
 800118c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	f003 031f 	and.w	r3, r3, #31
 8001198:	211f      	movs	r1, #31
 800119a:	fa01 f303 	lsl.w	r3, r1, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	401a      	ands	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	0e9b      	lsrs	r3, r3, #26
 80011a6:	f003 011f 	and.w	r1, r3, #31
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	f003 031f 	and.w	r3, r3, #31
 80011b0:	fa01 f303 	lsl.w	r3, r1, r3
 80011b4:	431a      	orrs	r2, r3
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011ba:	bf00      	nop
 80011bc:	371c      	adds	r7, #28
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b087      	sub	sp, #28
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	60f8      	str	r0, [r7, #12]
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	3314      	adds	r3, #20
 80011d6:	461a      	mov	r2, r3
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	0e5b      	lsrs	r3, r3, #25
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	4413      	add	r3, r2
 80011e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	0d1b      	lsrs	r3, r3, #20
 80011ee:	f003 031f 	and.w	r3, r3, #31
 80011f2:	2107      	movs	r1, #7
 80011f4:	fa01 f303 	lsl.w	r3, r1, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	401a      	ands	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	0d1b      	lsrs	r3, r3, #20
 8001200:	f003 031f 	and.w	r3, r3, #31
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	fa01 f303 	lsl.w	r3, r1, r3
 800120a:	431a      	orrs	r2, r3
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001210:	bf00      	nop
 8001212:	371c      	adds	r7, #28
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001234:	43db      	mvns	r3, r3
 8001236:	401a      	ands	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f003 0318 	and.w	r3, r3, #24
 800123e:	4908      	ldr	r1, [pc, #32]	; (8001260 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001240:	40d9      	lsrs	r1, r3
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	400b      	ands	r3, r1
 8001246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800124a:	431a      	orrs	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001252:	bf00      	nop
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	0007ffff 	.word	0x0007ffff

08001264 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f003 031f 	and.w	r3, r3, #31
}
 8001274:	4618      	mov	r0, r3
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001290:	4618      	mov	r0, r3
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80012ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	6093      	str	r3, [r2, #8]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012d4:	d101      	bne.n	80012da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80012d6:	2301      	movs	r3, #1
 80012d8:	e000      	b.n	80012dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80012f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001320:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001324:	d101      	bne.n	800132a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001348:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800134c:	f043 0201 	orr.w	r2, r3, #1
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	2b01      	cmp	r3, #1
 8001372:	d101      	bne.n	8001378 <LL_ADC_IsEnabled+0x18>
 8001374:	2301      	movs	r3, #1
 8001376:	e000      	b.n	800137a <LL_ADC_IsEnabled+0x1a>
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001396:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800139a:	f043 0204 	orr.w	r2, r3, #4
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 0304 	and.w	r3, r3, #4
 80013be:	2b04      	cmp	r3, #4
 80013c0:	d101      	bne.n	80013c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80013c2:	2301      	movs	r3, #1
 80013c4:	e000      	b.n	80013c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f003 0308 	and.w	r3, r3, #8
 80013e4:	2b08      	cmp	r3, #8
 80013e6:	d101      	bne.n	80013ec <LL_ADC_INJ_IsConversionOngoing+0x18>
 80013e8:	2301      	movs	r3, #1
 80013ea:	e000      	b.n	80013ee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013fc:	b590      	push	{r4, r7, lr}
 80013fe:	b089      	sub	sp, #36	; 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001404:	2300      	movs	r3, #0
 8001406:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001408:	2300      	movs	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e139      	b.n	800168a <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001420:	2b00      	cmp	r3, #0
 8001422:	d109      	bne.n	8001438 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff fb5d 	bl	8000ae4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff3f 	bl	80012c0 <LL_ADC_IsDeepPowerDownEnabled>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d004      	beq.n	8001452 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff25 	bl	800129c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff ff5a 	bl	8001310 <LL_ADC_IsInternalRegulatorEnabled>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d115      	bne.n	800148e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff ff3e 	bl	80012e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800146c:	4b89      	ldr	r3, [pc, #548]	; (8001694 <HAL_ADC_Init+0x298>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	099b      	lsrs	r3, r3, #6
 8001472:	4a89      	ldr	r2, [pc, #548]	; (8001698 <HAL_ADC_Init+0x29c>)
 8001474:	fba2 2303 	umull	r2, r3, r2, r3
 8001478:	099b      	lsrs	r3, r3, #6
 800147a:	3301      	adds	r3, #1
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001480:	e002      	b.n	8001488 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	3b01      	subs	r3, #1
 8001486:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f9      	bne.n	8001482 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ff3c 	bl	8001310 <LL_ADC_IsInternalRegulatorEnabled>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d10d      	bne.n	80014ba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a2:	f043 0210 	orr.w	r2, r3, #16
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ae:	f043 0201 	orr.w	r2, r3, #1
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff ff75 	bl	80013ae <LL_ADC_REG_IsConversionOngoing>
 80014c4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ca:	f003 0310 	and.w	r3, r3, #16
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f040 80d2 	bne.w	8001678 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f040 80ce 	bne.w	8001678 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80014e4:	f043 0202 	orr.w	r2, r3, #2
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff35 	bl	8001360 <LL_ADC_IsEnabled>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d115      	bne.n	8001528 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014fc:	4867      	ldr	r0, [pc, #412]	; (800169c <HAL_ADC_Init+0x2a0>)
 80014fe:	f7ff ff2f 	bl	8001360 <LL_ADC_IsEnabled>
 8001502:	4604      	mov	r4, r0
 8001504:	4866      	ldr	r0, [pc, #408]	; (80016a0 <HAL_ADC_Init+0x2a4>)
 8001506:	f7ff ff2b 	bl	8001360 <LL_ADC_IsEnabled>
 800150a:	4603      	mov	r3, r0
 800150c:	431c      	orrs	r4, r3
 800150e:	4865      	ldr	r0, [pc, #404]	; (80016a4 <HAL_ADC_Init+0x2a8>)
 8001510:	f7ff ff26 	bl	8001360 <LL_ADC_IsEnabled>
 8001514:	4603      	mov	r3, r0
 8001516:	4323      	orrs	r3, r4
 8001518:	2b00      	cmp	r3, #0
 800151a:	d105      	bne.n	8001528 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	4619      	mov	r1, r3
 8001522:	4861      	ldr	r0, [pc, #388]	; (80016a8 <HAL_ADC_Init+0x2ac>)
 8001524:	f7ff fd74 	bl	8001010 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	7e5b      	ldrb	r3, [r3, #25]
 800152c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001532:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001538:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800153e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001546:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001548:	4313      	orrs	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d106      	bne.n	8001564 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155a:	3b01      	subs	r3, #1
 800155c:	045b      	lsls	r3, r3, #17
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001568:	2b00      	cmp	r3, #0
 800156a:	d009      	beq.n	8001580 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001570:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001578:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	4b49      	ldr	r3, [pc, #292]	; (80016ac <HAL_ADC_Init+0x2b0>)
 8001588:	4013      	ands	r3, r2
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	69b9      	ldr	r1, [r7, #24]
 8001590:	430b      	orrs	r3, r1
 8001592:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff08 	bl	80013ae <LL_ADC_REG_IsConversionOngoing>
 800159e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff15 	bl	80013d4 <LL_ADC_INJ_IsConversionOngoing>
 80015aa:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d140      	bne.n	8001634 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d13d      	bne.n	8001634 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	7e1b      	ldrb	r3, [r3, #24]
 80015c0:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80015c2:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015ca:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015da:	f023 0306 	bic.w	r3, r3, #6
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	69b9      	ldr	r1, [r7, #24]
 80015e4:	430b      	orrs	r3, r1
 80015e6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d118      	bne.n	8001624 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80015fc:	f023 0304 	bic.w	r3, r3, #4
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001608:	4311      	orrs	r1, r2
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800160e:	4311      	orrs	r1, r2
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001614:	430a      	orrs	r2, r1
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f042 0201 	orr.w	r2, r2, #1
 8001620:	611a      	str	r2, [r3, #16]
 8001622:	e007      	b.n	8001634 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	691a      	ldr	r2, [r3, #16]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0201 	bic.w	r2, r2, #1
 8001632:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d10c      	bne.n	8001656 <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f023 010f 	bic.w	r1, r3, #15
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	1e5a      	subs	r2, r3, #1
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	631a      	str	r2, [r3, #48]	; 0x30
 8001654:	e007      	b.n	8001666 <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 020f 	bic.w	r2, r2, #15
 8001664:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166a:	f023 0303 	bic.w	r3, r3, #3
 800166e:	f043 0201 	orr.w	r2, r3, #1
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	659a      	str	r2, [r3, #88]	; 0x58
 8001676:	e007      	b.n	8001688 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167c:	f043 0210 	orr.w	r2, r3, #16
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001688:	7ffb      	ldrb	r3, [r7, #31]
}
 800168a:	4618      	mov	r0, r3
 800168c:	3724      	adds	r7, #36	; 0x24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd90      	pop	{r4, r7, pc}
 8001692:	bf00      	nop
 8001694:	20000000 	.word	0x20000000
 8001698:	053e2d63 	.word	0x053e2d63
 800169c:	50040000 	.word	0x50040000
 80016a0:	50040100 	.word	0x50040100
 80016a4:	50040200 	.word	0x50040200
 80016a8:	50040300 	.word	0x50040300
 80016ac:	fff0c007 	.word	0xfff0c007

080016b0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016b8:	4857      	ldr	r0, [pc, #348]	; (8001818 <HAL_ADC_Start+0x168>)
 80016ba:	f7ff fdd3 	bl	8001264 <LL_ADC_GetMultimode>
 80016be:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fe72 	bl	80013ae <LL_ADC_REG_IsConversionOngoing>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f040 809c 	bne.w	800180a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d101      	bne.n	80016e0 <HAL_ADC_Start+0x30>
 80016dc:	2302      	movs	r3, #2
 80016de:	e097      	b.n	8001810 <HAL_ADC_Start+0x160>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 fd8d 	bl	8002208 <ADC_Enable>
 80016ee:	4603      	mov	r3, r0
 80016f0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80016f2:	7dfb      	ldrb	r3, [r7, #23]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f040 8083 	bne.w	8001800 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001702:	f023 0301 	bic.w	r3, r3, #1
 8001706:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a42      	ldr	r2, [pc, #264]	; (800181c <HAL_ADC_Start+0x16c>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d002      	beq.n	800171e <HAL_ADC_Start+0x6e>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	e000      	b.n	8001720 <HAL_ADC_Start+0x70>
 800171e:	4b40      	ldr	r3, [pc, #256]	; (8001820 <HAL_ADC_Start+0x170>)
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	4293      	cmp	r3, r2
 8001726:	d002      	beq.n	800172e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d105      	bne.n	800173a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001732:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001746:	d106      	bne.n	8001756 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174c:	f023 0206 	bic.w	r2, r3, #6
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	65da      	str	r2, [r3, #92]	; 0x5c
 8001754:	e002      	b.n	800175c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	221c      	movs	r2, #28
 8001762:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a2a      	ldr	r2, [pc, #168]	; (800181c <HAL_ADC_Start+0x16c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d002      	beq.n	800177c <HAL_ADC_Start+0xcc>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	e000      	b.n	800177e <HAL_ADC_Start+0xce>
 800177c:	4b28      	ldr	r3, [pc, #160]	; (8001820 <HAL_ADC_Start+0x170>)
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6812      	ldr	r2, [r2, #0]
 8001782:	4293      	cmp	r3, r2
 8001784:	d008      	beq.n	8001798 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	2b05      	cmp	r3, #5
 8001790:	d002      	beq.n	8001798 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	2b09      	cmp	r3, #9
 8001796:	d114      	bne.n	80017c2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d007      	beq.n	80017b6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fde3 	bl	8001386 <LL_ADC_REG_StartConversion>
 80017c0:	e025      	b.n	800180e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a12      	ldr	r2, [pc, #72]	; (800181c <HAL_ADC_Start+0x16c>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d002      	beq.n	80017de <HAL_ADC_Start+0x12e>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	e000      	b.n	80017e0 <HAL_ADC_Start+0x130>
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <HAL_ADC_Start+0x170>)
 80017e0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00f      	beq.n	800180e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	659a      	str	r2, [r3, #88]	; 0x58
 80017fe:	e006      	b.n	800180e <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001808:	e001      	b.n	800180e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800180a:	2302      	movs	r3, #2
 800180c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800180e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	50040300 	.word	0x50040300
 800181c:	50040100 	.word	0x50040100
 8001820:	50040000 	.word	0x50040000

08001824 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800182e:	4866      	ldr	r0, [pc, #408]	; (80019c8 <HAL_ADC_PollForConversion+0x1a4>)
 8001830:	f7ff fd18 	bl	8001264 <LL_ADC_GetMultimode>
 8001834:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	2b08      	cmp	r3, #8
 800183c:	d102      	bne.n	8001844 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800183e:	2308      	movs	r3, #8
 8001840:	61fb      	str	r3, [r7, #28]
 8001842:	e02a      	b.n	800189a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d005      	beq.n	8001856 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	2b05      	cmp	r3, #5
 800184e:	d002      	beq.n	8001856 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	2b09      	cmp	r3, #9
 8001854:	d111      	bne.n	800187a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b00      	cmp	r3, #0
 8001862:	d007      	beq.n	8001874 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001868:	f043 0220 	orr.w	r2, r3, #32
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e0a4      	b.n	80019be <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001874:	2304      	movs	r3, #4
 8001876:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001878:	e00f      	b.n	800189a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800187a:	4853      	ldr	r0, [pc, #332]	; (80019c8 <HAL_ADC_PollForConversion+0x1a4>)
 800187c:	f7ff fd00 	bl	8001280 <LL_ADC_GetMultiDMATransfer>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d007      	beq.n	8001896 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188a:	f043 0220 	orr.w	r2, r3, #32
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e093      	b.n	80019be <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001896:	2304      	movs	r3, #4
 8001898:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800189a:	f7ff fb79 	bl	8000f90 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80018a0:	e021      	b.n	80018e6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a8:	d01d      	beq.n	80018e6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80018aa:	f7ff fb71 	bl	8000f90 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d302      	bcc.n	80018c0 <HAL_ADC_PollForConversion+0x9c>
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d112      	bne.n	80018e6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	4013      	ands	r3, r2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d10b      	bne.n	80018e6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d2:	f043 0204 	orr.w	r2, r3, #4
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e06b      	b.n	80019be <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0d6      	beq.n	80018a2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fc1f 	bl	8001148 <LL_ADC_REG_IsTriggerSourceSWStart>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d01c      	beq.n	800194a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	7e5b      	ldrb	r3, [r3, #25]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d118      	bne.n	800194a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	2b08      	cmp	r3, #8
 8001924:	d111      	bne.n	800194a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001936:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d105      	bne.n	800194a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001942:	f043 0201 	orr.w	r2, r3, #1
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a1f      	ldr	r2, [pc, #124]	; (80019cc <HAL_ADC_PollForConversion+0x1a8>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d002      	beq.n	800195a <HAL_ADC_PollForConversion+0x136>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	e000      	b.n	800195c <HAL_ADC_PollForConversion+0x138>
 800195a:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <HAL_ADC_PollForConversion+0x1ac>)
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	4293      	cmp	r3, r2
 8001962:	d008      	beq.n	8001976 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d005      	beq.n	8001976 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	2b05      	cmp	r3, #5
 800196e:	d002      	beq.n	8001976 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	2b09      	cmp	r3, #9
 8001974:	d104      	bne.n	8001980 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	61bb      	str	r3, [r7, #24]
 800197e:	e00c      	b.n	800199a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a11      	ldr	r2, [pc, #68]	; (80019cc <HAL_ADC_PollForConversion+0x1a8>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d002      	beq.n	8001990 <HAL_ADC_PollForConversion+0x16c>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	e000      	b.n	8001992 <HAL_ADC_PollForConversion+0x16e>
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <HAL_ADC_PollForConversion+0x1ac>)
 8001992:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	2b08      	cmp	r3, #8
 800199e:	d104      	bne.n	80019aa <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2208      	movs	r2, #8
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	e008      	b.n	80019bc <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d103      	bne.n	80019bc <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	220c      	movs	r2, #12
 80019ba:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3720      	adds	r7, #32
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	50040300 	.word	0x50040300
 80019cc:	50040100 	.word	0x50040100
 80019d0:	50040000 	.word	0x50040000

080019d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b0b6      	sub	sp, #216	; 0xd8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019fa:	2300      	movs	r3, #0
 80019fc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d101      	bne.n	8001a12 <HAL_ADC_ConfigChannel+0x22>
 8001a0e:	2302      	movs	r3, #2
 8001a10:	e3e3      	b.n	80021da <HAL_ADC_ConfigChannel+0x7ea>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fcc5 	bl	80013ae <LL_ADC_REG_IsConversionOngoing>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f040 83c4 	bne.w	80021b4 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b05      	cmp	r3, #5
 8001a32:	d824      	bhi.n	8001a7e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	3b02      	subs	r3, #2
 8001a3a:	2b03      	cmp	r3, #3
 8001a3c:	d81b      	bhi.n	8001a76 <HAL_ADC_ConfigChannel+0x86>
 8001a3e:	a201      	add	r2, pc, #4	; (adr r2, 8001a44 <HAL_ADC_ConfigChannel+0x54>)
 8001a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a44:	08001a55 	.word	0x08001a55
 8001a48:	08001a5d 	.word	0x08001a5d
 8001a4c:	08001a65 	.word	0x08001a65
 8001a50:	08001a6d 	.word	0x08001a6d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	220c      	movs	r2, #12
 8001a58:	605a      	str	r2, [r3, #4]
          break;
 8001a5a:	e011      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	2212      	movs	r2, #18
 8001a60:	605a      	str	r2, [r3, #4]
          break;
 8001a62:	e00d      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	2218      	movs	r2, #24
 8001a68:	605a      	str	r2, [r3, #4]
          break;
 8001a6a:	e009      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a72:	605a      	str	r2, [r3, #4]
          break;
 8001a74:	e004      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	2206      	movs	r2, #6
 8001a7a:	605a      	str	r2, [r3, #4]
          break;
 8001a7c:	e000      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001a7e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6818      	ldr	r0, [r3, #0]
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	6859      	ldr	r1, [r3, #4]
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	f7ff fb6e 	bl	800116e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fc89 	bl	80013ae <LL_ADC_REG_IsConversionOngoing>
 8001a9c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fc95 	bl	80013d4 <LL_ADC_INJ_IsConversionOngoing>
 8001aaa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001aae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f040 81c1 	bne.w	8001e3a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ab8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f040 81bc 	bne.w	8001e3a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001aca:	d10f      	bne.n	8001aec <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6818      	ldr	r0, [r3, #0]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f7ff fb75 	bl	80011c6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fb1c 	bl	8001122 <LL_ADC_SetSamplingTimeCommonConfig>
 8001aea:	e00e      	b.n	8001b0a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6818      	ldr	r0, [r3, #0]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	6819      	ldr	r1, [r3, #0]
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	461a      	mov	r2, r3
 8001afa:	f7ff fb64 	bl	80011c6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2100      	movs	r1, #0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fb0c 	bl	8001122 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	695a      	ldr	r2, [r3, #20]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	08db      	lsrs	r3, r3, #3
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d00a      	beq.n	8001b42 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6818      	ldr	r0, [r3, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	6919      	ldr	r1, [r3, #16]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b3c:	f7ff fa9c 	bl	8001078 <LL_ADC_SetOffset>
 8001b40:	e17b      	b.n	8001e3a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2100      	movs	r1, #0
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fab9 	bl	80010c0 <LL_ADC_GetOffsetChannel>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10a      	bne.n	8001b6e <HAL_ADC_ConfigChannel+0x17e>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff faae 	bl	80010c0 <LL_ADC_GetOffsetChannel>
 8001b64:	4603      	mov	r3, r0
 8001b66:	0e9b      	lsrs	r3, r3, #26
 8001b68:	f003 021f 	and.w	r2, r3, #31
 8001b6c:	e01e      	b.n	8001bac <HAL_ADC_ConfigChannel+0x1bc>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2100      	movs	r1, #0
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff faa3 	bl	80010c0 <LL_ADC_GetOffsetChannel>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b84:	fa93 f3a3 	rbit	r3, r3
 8001b88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001b9c:	2320      	movs	r3, #32
 8001b9e:	e004      	b.n	8001baa <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001ba0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ba4:	fab3 f383 	clz	r3, r3
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d105      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x1d4>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	0e9b      	lsrs	r3, r3, #26
 8001bbe:	f003 031f 	and.w	r3, r3, #31
 8001bc2:	e018      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x206>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bcc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001bd0:	fa93 f3a3 	rbit	r3, r3
 8001bd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001bd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001be0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001be8:	2320      	movs	r3, #32
 8001bea:	e004      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001bec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001bf0:	fab3 f383 	clz	r3, r3
 8001bf4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d106      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2100      	movs	r1, #0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff fa72 	bl	80010ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fa56 	bl	80010c0 <LL_ADC_GetOffsetChannel>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10a      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x244>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2101      	movs	r1, #1
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fa4b 	bl	80010c0 <LL_ADC_GetOffsetChannel>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	0e9b      	lsrs	r3, r3, #26
 8001c2e:	f003 021f 	and.w	r2, r3, #31
 8001c32:	e01e      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x282>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2101      	movs	r1, #1
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fa40 	bl	80010c0 <LL_ADC_GetOffsetChannel>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c4a:	fa93 f3a3 	rbit	r3, r3
 8001c4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001c52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001c5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001c62:	2320      	movs	r3, #32
 8001c64:	e004      	b.n	8001c70 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001c66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c6a:	fab3 f383 	clz	r3, r3
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d105      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x29a>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	0e9b      	lsrs	r3, r3, #26
 8001c84:	f003 031f 	and.w	r3, r3, #31
 8001c88:	e018      	b.n	8001cbc <HAL_ADC_ConfigChannel+0x2cc>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001c9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ca2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001ca6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001cae:	2320      	movs	r3, #32
 8001cb0:	e004      	b.n	8001cbc <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001cb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cb6:	fab3 f383 	clz	r3, r3
 8001cba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d106      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fa0f 	bl	80010ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2102      	movs	r1, #2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff f9f3 	bl	80010c0 <LL_ADC_GetOffsetChannel>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10a      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x30a>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2102      	movs	r1, #2
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff f9e8 	bl	80010c0 <LL_ADC_GetOffsetChannel>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	0e9b      	lsrs	r3, r3, #26
 8001cf4:	f003 021f 	and.w	r2, r3, #31
 8001cf8:	e01e      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x348>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2102      	movs	r1, #2
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff f9dd 	bl	80010c0 <LL_ADC_GetOffsetChannel>
 8001d06:	4603      	mov	r3, r0
 8001d08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d10:	fa93 f3a3 	rbit	r3, r3
 8001d14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001d18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001d20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001d28:	2320      	movs	r3, #32
 8001d2a:	e004      	b.n	8001d36 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001d2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d30:	fab3 f383 	clz	r3, r3
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d105      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x360>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	0e9b      	lsrs	r3, r3, #26
 8001d4a:	f003 031f 	and.w	r3, r3, #31
 8001d4e:	e016      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x38e>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d5c:	fa93 f3a3 	rbit	r3, r3
 8001d60:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001d62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001d68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001d70:	2320      	movs	r3, #32
 8001d72:	e004      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001d74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d78:	fab3 f383 	clz	r3, r3
 8001d7c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d106      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2200      	movs	r2, #0
 8001d88:	2102      	movs	r1, #2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff f9ae 	bl	80010ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2103      	movs	r1, #3
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff f992 	bl	80010c0 <LL_ADC_GetOffsetChannel>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10a      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x3cc>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2103      	movs	r1, #3
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff f987 	bl	80010c0 <LL_ADC_GetOffsetChannel>
 8001db2:	4603      	mov	r3, r0
 8001db4:	0e9b      	lsrs	r3, r3, #26
 8001db6:	f003 021f 	and.w	r2, r3, #31
 8001dba:	e017      	b.n	8001dec <HAL_ADC_ConfigChannel+0x3fc>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2103      	movs	r1, #3
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff f97c 	bl	80010c0 <LL_ADC_GetOffsetChannel>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dce:	fa93 f3a3 	rbit	r3, r3
 8001dd2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001dd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dd6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001dd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001dde:	2320      	movs	r3, #32
 8001de0:	e003      	b.n	8001dea <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001de2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001de4:	fab3 f383 	clz	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d105      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x414>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	0e9b      	lsrs	r3, r3, #26
 8001dfe:	f003 031f 	and.w	r3, r3, #31
 8001e02:	e011      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x438>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e0c:	fa93 f3a3 	rbit	r3, r3
 8001e10:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001e12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e14:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001e1c:	2320      	movs	r3, #32
 8001e1e:	e003      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e22:	fab3 f383 	clz	r3, r3
 8001e26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d106      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2200      	movs	r2, #0
 8001e32:	2103      	movs	r1, #3
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff f959 	bl	80010ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fa8e 	bl	8001360 <LL_ADC_IsEnabled>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f040 8140 	bne.w	80020cc <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	6819      	ldr	r1, [r3, #0]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	f7ff f9df 	bl	800121c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	4a8f      	ldr	r2, [pc, #572]	; (80020a0 <HAL_ADC_ConfigChannel+0x6b0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	f040 8131 	bne.w	80020cc <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10b      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x4a2>
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	0e9b      	lsrs	r3, r3, #26
 8001e80:	3301      	adds	r3, #1
 8001e82:	f003 031f 	and.w	r3, r3, #31
 8001e86:	2b09      	cmp	r3, #9
 8001e88:	bf94      	ite	ls
 8001e8a:	2301      	movls	r3, #1
 8001e8c:	2300      	movhi	r3, #0
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	e019      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x4d6>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e9a:	fa93 f3a3 	rbit	r3, r3
 8001e9e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001ea0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ea2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001ea4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001eaa:	2320      	movs	r3, #32
 8001eac:	e003      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001eae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001eb0:	fab3 f383 	clz	r3, r3
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	f003 031f 	and.w	r3, r3, #31
 8001ebc:	2b09      	cmp	r3, #9
 8001ebe:	bf94      	ite	ls
 8001ec0:	2301      	movls	r3, #1
 8001ec2:	2300      	movhi	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d079      	beq.n	8001fbe <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d107      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x4f6>
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	0e9b      	lsrs	r3, r3, #26
 8001edc:	3301      	adds	r3, #1
 8001ede:	069b      	lsls	r3, r3, #26
 8001ee0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ee4:	e015      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x522>
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eee:	fa93 f3a3 	rbit	r3, r3
 8001ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ef6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001ef8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001efe:	2320      	movs	r3, #32
 8001f00:	e003      	b.n	8001f0a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f04:	fab3 f383 	clz	r3, r3
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	069b      	lsls	r3, r3, #26
 8001f0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d109      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x542>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	0e9b      	lsrs	r3, r3, #26
 8001f24:	3301      	adds	r3, #1
 8001f26:	f003 031f 	and.w	r3, r3, #31
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f30:	e017      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x572>
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f3a:	fa93 f3a3 	rbit	r3, r3
 8001f3e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f42:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001f4a:	2320      	movs	r3, #32
 8001f4c:	e003      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001f4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f50:	fab3 f383 	clz	r3, r3
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	3301      	adds	r3, #1
 8001f58:	f003 031f 	and.w	r3, r3, #31
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	ea42 0103 	orr.w	r1, r2, r3
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10a      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x598>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	0e9b      	lsrs	r3, r3, #26
 8001f78:	3301      	adds	r3, #1
 8001f7a:	f003 021f 	and.w	r2, r3, #31
 8001f7e:	4613      	mov	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4413      	add	r3, r2
 8001f84:	051b      	lsls	r3, r3, #20
 8001f86:	e018      	b.n	8001fba <HAL_ADC_ConfigChannel+0x5ca>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f98:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001fa0:	2320      	movs	r3, #32
 8001fa2:	e003      	b.n	8001fac <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fa6:	fab3 f383 	clz	r3, r3
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	3301      	adds	r3, #1
 8001fae:	f003 021f 	and.w	r2, r3, #31
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	4413      	add	r3, r2
 8001fb8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fba:	430b      	orrs	r3, r1
 8001fbc:	e081      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d107      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x5ea>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	0e9b      	lsrs	r3, r3, #26
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	069b      	lsls	r3, r3, #26
 8001fd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fd8:	e015      	b.n	8002006 <HAL_ADC_ConfigChannel+0x616>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe2:	fa93 f3a3 	rbit	r3, r3
 8001fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fea:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001ff2:	2320      	movs	r3, #32
 8001ff4:	e003      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff8:	fab3 f383 	clz	r3, r3
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	3301      	adds	r3, #1
 8002000:	069b      	lsls	r3, r3, #26
 8002002:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200e:	2b00      	cmp	r3, #0
 8002010:	d109      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x636>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	0e9b      	lsrs	r3, r3, #26
 8002018:	3301      	adds	r3, #1
 800201a:	f003 031f 	and.w	r3, r3, #31
 800201e:	2101      	movs	r1, #1
 8002020:	fa01 f303 	lsl.w	r3, r1, r3
 8002024:	e017      	b.n	8002056 <HAL_ADC_ConfigChannel+0x666>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202c:	6a3b      	ldr	r3, [r7, #32]
 800202e:	fa93 f3a3 	rbit	r3, r3
 8002032:	61fb      	str	r3, [r7, #28]
  return result;
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800203e:	2320      	movs	r3, #32
 8002040:	e003      	b.n	800204a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	fab3 f383 	clz	r3, r3
 8002048:	b2db      	uxtb	r3, r3
 800204a:	3301      	adds	r3, #1
 800204c:	f003 031f 	and.w	r3, r3, #31
 8002050:	2101      	movs	r1, #1
 8002052:	fa01 f303 	lsl.w	r3, r1, r3
 8002056:	ea42 0103 	orr.w	r1, r2, r3
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10d      	bne.n	8002082 <HAL_ADC_ConfigChannel+0x692>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	0e9b      	lsrs	r3, r3, #26
 800206c:	3301      	adds	r3, #1
 800206e:	f003 021f 	and.w	r2, r3, #31
 8002072:	4613      	mov	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4413      	add	r3, r2
 8002078:	3b1e      	subs	r3, #30
 800207a:	051b      	lsls	r3, r3, #20
 800207c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002080:	e01e      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x6d0>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	613b      	str	r3, [r7, #16]
  return result;
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d104      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800209a:	2320      	movs	r3, #32
 800209c:	e006      	b.n	80020ac <HAL_ADC_ConfigChannel+0x6bc>
 800209e:	bf00      	nop
 80020a0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	fab3 f383 	clz	r3, r3
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	3301      	adds	r3, #1
 80020ae:	f003 021f 	and.w	r2, r3, #31
 80020b2:	4613      	mov	r3, r2
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	4413      	add	r3, r2
 80020b8:	3b1e      	subs	r3, #30
 80020ba:	051b      	lsls	r3, r3, #20
 80020bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020c0:	430b      	orrs	r3, r1
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	6892      	ldr	r2, [r2, #8]
 80020c6:	4619      	mov	r1, r3
 80020c8:	f7ff f87d 	bl	80011c6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4b44      	ldr	r3, [pc, #272]	; (80021e4 <HAL_ADC_ConfigChannel+0x7f4>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d07a      	beq.n	80021ce <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020d8:	4843      	ldr	r0, [pc, #268]	; (80021e8 <HAL_ADC_ConfigChannel+0x7f8>)
 80020da:	f7fe ffbf 	bl	800105c <LL_ADC_GetCommonPathInternalCh>
 80020de:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a41      	ldr	r2, [pc, #260]	; (80021ec <HAL_ADC_ConfigChannel+0x7fc>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d12c      	bne.n	8002146 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d126      	bne.n	8002146 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a3c      	ldr	r2, [pc, #240]	; (80021f0 <HAL_ADC_ConfigChannel+0x800>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d004      	beq.n	800210c <HAL_ADC_ConfigChannel+0x71c>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a3b      	ldr	r2, [pc, #236]	; (80021f4 <HAL_ADC_ConfigChannel+0x804>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d15d      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800210c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002110:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002114:	4619      	mov	r1, r3
 8002116:	4834      	ldr	r0, [pc, #208]	; (80021e8 <HAL_ADC_ConfigChannel+0x7f8>)
 8002118:	f7fe ff8d 	bl	8001036 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800211c:	4b36      	ldr	r3, [pc, #216]	; (80021f8 <HAL_ADC_ConfigChannel+0x808>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	099b      	lsrs	r3, r3, #6
 8002122:	4a36      	ldr	r2, [pc, #216]	; (80021fc <HAL_ADC_ConfigChannel+0x80c>)
 8002124:	fba2 2303 	umull	r2, r3, r2, r3
 8002128:	099b      	lsrs	r3, r3, #6
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	4613      	mov	r3, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002136:	e002      	b.n	800213e <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	3b01      	subs	r3, #1
 800213c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1f9      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002144:	e040      	b.n	80021c8 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a2d      	ldr	r2, [pc, #180]	; (8002200 <HAL_ADC_ConfigChannel+0x810>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d118      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x792>
 8002150:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002154:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d112      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a23      	ldr	r2, [pc, #140]	; (80021f0 <HAL_ADC_ConfigChannel+0x800>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d004      	beq.n	8002170 <HAL_ADC_ConfigChannel+0x780>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a22      	ldr	r2, [pc, #136]	; (80021f4 <HAL_ADC_ConfigChannel+0x804>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d12d      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002170:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002174:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002178:	4619      	mov	r1, r3
 800217a:	481b      	ldr	r0, [pc, #108]	; (80021e8 <HAL_ADC_ConfigChannel+0x7f8>)
 800217c:	f7fe ff5b 	bl	8001036 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002180:	e024      	b.n	80021cc <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a1f      	ldr	r2, [pc, #124]	; (8002204 <HAL_ADC_ConfigChannel+0x814>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d120      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800218c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002190:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d11a      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a14      	ldr	r2, [pc, #80]	; (80021f0 <HAL_ADC_ConfigChannel+0x800>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d115      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021aa:	4619      	mov	r1, r3
 80021ac:	480e      	ldr	r0, [pc, #56]	; (80021e8 <HAL_ADC_ConfigChannel+0x7f8>)
 80021ae:	f7fe ff42 	bl	8001036 <LL_ADC_SetCommonPathInternalCh>
 80021b2:	e00c      	b.n	80021ce <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b8:	f043 0220 	orr.w	r2, r3, #32
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80021c6:	e002      	b.n	80021ce <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021c8:	bf00      	nop
 80021ca:	e000      	b.n	80021ce <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80021d6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80021da:	4618      	mov	r0, r3
 80021dc:	37d8      	adds	r7, #216	; 0xd8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	80080000 	.word	0x80080000
 80021e8:	50040300 	.word	0x50040300
 80021ec:	c7520000 	.word	0xc7520000
 80021f0:	50040000 	.word	0x50040000
 80021f4:	50040200 	.word	0x50040200
 80021f8:	20000000 	.word	0x20000000
 80021fc:	053e2d63 	.word	0x053e2d63
 8002200:	cb840000 	.word	0xcb840000
 8002204:	80000001 	.word	0x80000001

08002208 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff f8a3 	bl	8001360 <LL_ADC_IsEnabled>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d14d      	bne.n	80022bc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	4b28      	ldr	r3, [pc, #160]	; (80022c8 <ADC_Enable+0xc0>)
 8002228:	4013      	ands	r3, r2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00d      	beq.n	800224a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002232:	f043 0210 	orr.w	r2, r3, #16
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223e:	f043 0201 	orr.w	r2, r3, #1
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e039      	b.n	80022be <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff f872 	bl	8001338 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002254:	f7fe fe9c 	bl	8000f90 <HAL_GetTick>
 8002258:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800225a:	e028      	b.n	80022ae <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff f87d 	bl	8001360 <LL_ADC_IsEnabled>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d104      	bne.n	8002276 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff f861 	bl	8001338 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002276:	f7fe fe8b 	bl	8000f90 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d914      	bls.n	80022ae <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b01      	cmp	r3, #1
 8002290:	d00d      	beq.n	80022ae <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002296:	f043 0210 	orr.w	r2, r3, #16
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a2:	f043 0201 	orr.w	r2, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e007      	b.n	80022be <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d1cf      	bne.n	800225c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	8000003f 	.word	0x8000003f

080022cc <LL_ADC_IsEnabled>:
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <LL_ADC_IsEnabled+0x18>
 80022e0:	2301      	movs	r3, #1
 80022e2:	e000      	b.n	80022e6 <LL_ADC_IsEnabled+0x1a>
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <LL_ADC_REG_IsConversionOngoing>:
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 0304 	and.w	r3, r3, #4
 8002302:	2b04      	cmp	r3, #4
 8002304:	d101      	bne.n	800230a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002318:	b590      	push	{r4, r7, lr}
 800231a:	b0a1      	sub	sp, #132	; 0x84
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002322:	2300      	movs	r3, #0
 8002324:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002332:	2302      	movs	r3, #2
 8002334:	e093      	b.n	800245e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800233e:	2300      	movs	r3, #0
 8002340:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002342:	2300      	movs	r3, #0
 8002344:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a47      	ldr	r2, [pc, #284]	; (8002468 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d102      	bne.n	8002356 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002350:	4b46      	ldr	r3, [pc, #280]	; (800246c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	e001      	b.n	800235a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10b      	bne.n	8002378 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002364:	f043 0220 	orr.w	r2, r3, #32
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e072      	b.n	800245e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff ffb9 	bl	80022f2 <LL_ADC_REG_IsConversionOngoing>
 8002380:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff ffb3 	bl	80022f2 <LL_ADC_REG_IsConversionOngoing>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d154      	bne.n	800243c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002392:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002394:	2b00      	cmp	r3, #0
 8002396:	d151      	bne.n	800243c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002398:	4b35      	ldr	r3, [pc, #212]	; (8002470 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800239a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d02c      	beq.n	80023fe <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80023a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	6859      	ldr	r1, [r3, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023b6:	035b      	lsls	r3, r3, #13
 80023b8:	430b      	orrs	r3, r1
 80023ba:	431a      	orrs	r2, r3
 80023bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023be:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023c0:	4829      	ldr	r0, [pc, #164]	; (8002468 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80023c2:	f7ff ff83 	bl	80022cc <LL_ADC_IsEnabled>
 80023c6:	4604      	mov	r4, r0
 80023c8:	4828      	ldr	r0, [pc, #160]	; (800246c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80023ca:	f7ff ff7f 	bl	80022cc <LL_ADC_IsEnabled>
 80023ce:	4603      	mov	r3, r0
 80023d0:	431c      	orrs	r4, r3
 80023d2:	4828      	ldr	r0, [pc, #160]	; (8002474 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80023d4:	f7ff ff7a 	bl	80022cc <LL_ADC_IsEnabled>
 80023d8:	4603      	mov	r3, r0
 80023da:	4323      	orrs	r3, r4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d137      	bne.n	8002450 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80023e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80023e8:	f023 030f 	bic.w	r3, r3, #15
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	6811      	ldr	r1, [r2, #0]
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	6892      	ldr	r2, [r2, #8]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	431a      	orrs	r2, r3
 80023f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023fa:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023fc:	e028      	b.n	8002450 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80023fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002406:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002408:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800240a:	4817      	ldr	r0, [pc, #92]	; (8002468 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800240c:	f7ff ff5e 	bl	80022cc <LL_ADC_IsEnabled>
 8002410:	4604      	mov	r4, r0
 8002412:	4816      	ldr	r0, [pc, #88]	; (800246c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002414:	f7ff ff5a 	bl	80022cc <LL_ADC_IsEnabled>
 8002418:	4603      	mov	r3, r0
 800241a:	431c      	orrs	r4, r3
 800241c:	4815      	ldr	r0, [pc, #84]	; (8002474 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800241e:	f7ff ff55 	bl	80022cc <LL_ADC_IsEnabled>
 8002422:	4603      	mov	r3, r0
 8002424:	4323      	orrs	r3, r4
 8002426:	2b00      	cmp	r3, #0
 8002428:	d112      	bne.n	8002450 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800242a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002432:	f023 030f 	bic.w	r3, r3, #15
 8002436:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002438:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800243a:	e009      	b.n	8002450 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002440:	f043 0220 	orr.w	r2, r3, #32
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800244e:	e000      	b.n	8002452 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002450:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800245a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800245e:	4618      	mov	r0, r3
 8002460:	3784      	adds	r7, #132	; 0x84
 8002462:	46bd      	mov	sp, r7
 8002464:	bd90      	pop	{r4, r7, pc}
 8002466:	bf00      	nop
 8002468:	50040000 	.word	0x50040000
 800246c:	50040100 	.word	0x50040100
 8002470:	50040300 	.word	0x50040300
 8002474:	50040200 	.word	0x50040200

08002478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <__NVIC_SetPriorityGrouping+0x44>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002494:	4013      	ands	r3, r2
 8002496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024aa:	4a04      	ldr	r2, [pc, #16]	; (80024bc <__NVIC_SetPriorityGrouping+0x44>)
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	60d3      	str	r3, [r2, #12]
}
 80024b0:	bf00      	nop
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024c4:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <__NVIC_GetPriorityGrouping+0x18>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	0a1b      	lsrs	r3, r3, #8
 80024ca:	f003 0307 	and.w	r3, r3, #7
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	db0b      	blt.n	8002506 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	f003 021f 	and.w	r2, r3, #31
 80024f4:	4907      	ldr	r1, [pc, #28]	; (8002514 <__NVIC_EnableIRQ+0x38>)
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	2001      	movs	r0, #1
 80024fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	e000e100 	.word	0xe000e100

08002518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	6039      	str	r1, [r7, #0]
 8002522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002528:	2b00      	cmp	r3, #0
 800252a:	db0a      	blt.n	8002542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	b2da      	uxtb	r2, r3
 8002530:	490c      	ldr	r1, [pc, #48]	; (8002564 <__NVIC_SetPriority+0x4c>)
 8002532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002536:	0112      	lsls	r2, r2, #4
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	440b      	add	r3, r1
 800253c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002540:	e00a      	b.n	8002558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	b2da      	uxtb	r2, r3
 8002546:	4908      	ldr	r1, [pc, #32]	; (8002568 <__NVIC_SetPriority+0x50>)
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	3b04      	subs	r3, #4
 8002550:	0112      	lsls	r2, r2, #4
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	440b      	add	r3, r1
 8002556:	761a      	strb	r2, [r3, #24]
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	e000e100 	.word	0xe000e100
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800256c:	b480      	push	{r7}
 800256e:	b089      	sub	sp, #36	; 0x24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f1c3 0307 	rsb	r3, r3, #7
 8002586:	2b04      	cmp	r3, #4
 8002588:	bf28      	it	cs
 800258a:	2304      	movcs	r3, #4
 800258c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	3304      	adds	r3, #4
 8002592:	2b06      	cmp	r3, #6
 8002594:	d902      	bls.n	800259c <NVIC_EncodePriority+0x30>
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3b03      	subs	r3, #3
 800259a:	e000      	b.n	800259e <NVIC_EncodePriority+0x32>
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a0:	f04f 32ff 	mov.w	r2, #4294967295
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43da      	mvns	r2, r3
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	401a      	ands	r2, r3
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025b4:	f04f 31ff 	mov.w	r1, #4294967295
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	fa01 f303 	lsl.w	r3, r1, r3
 80025be:	43d9      	mvns	r1, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c4:	4313      	orrs	r3, r2
         );
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3724      	adds	r7, #36	; 0x24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
	...

080025d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3b01      	subs	r3, #1
 80025e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025e4:	d301      	bcc.n	80025ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025e6:	2301      	movs	r3, #1
 80025e8:	e00f      	b.n	800260a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ea:	4a0a      	ldr	r2, [pc, #40]	; (8002614 <SysTick_Config+0x40>)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025f2:	210f      	movs	r1, #15
 80025f4:	f04f 30ff 	mov.w	r0, #4294967295
 80025f8:	f7ff ff8e 	bl	8002518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025fc:	4b05      	ldr	r3, [pc, #20]	; (8002614 <SysTick_Config+0x40>)
 80025fe:	2200      	movs	r2, #0
 8002600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002602:	4b04      	ldr	r3, [pc, #16]	; (8002614 <SysTick_Config+0x40>)
 8002604:	2207      	movs	r2, #7
 8002606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	e000e010 	.word	0xe000e010

08002618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff ff29 	bl	8002478 <__NVIC_SetPriorityGrouping>
}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b086      	sub	sp, #24
 8002632:	af00      	add	r7, sp, #0
 8002634:	4603      	mov	r3, r0
 8002636:	60b9      	str	r1, [r7, #8]
 8002638:	607a      	str	r2, [r7, #4]
 800263a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002640:	f7ff ff3e 	bl	80024c0 <__NVIC_GetPriorityGrouping>
 8002644:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	68b9      	ldr	r1, [r7, #8]
 800264a:	6978      	ldr	r0, [r7, #20]
 800264c:	f7ff ff8e 	bl	800256c <NVIC_EncodePriority>
 8002650:	4602      	mov	r2, r0
 8002652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002656:	4611      	mov	r1, r2
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ff5d 	bl	8002518 <__NVIC_SetPriority>
}
 800265e:	bf00      	nop
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b082      	sub	sp, #8
 800266a:	af00      	add	r7, sp, #0
 800266c:	4603      	mov	r3, r0
 800266e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff ff31 	bl	80024dc <__NVIC_EnableIRQ>
}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff ffa2 	bl	80025d4 <SysTick_Config>
 8002690:	4603      	mov	r3, r0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
	...

0800269c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026aa:	e166      	b.n	800297a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	2101      	movs	r1, #1
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	fa01 f303 	lsl.w	r3, r1, r3
 80026b8:	4013      	ands	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 8158 	beq.w	8002974 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d00b      	beq.n	80026e4 <HAL_GPIO_Init+0x48>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d007      	beq.n	80026e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026d8:	2b11      	cmp	r3, #17
 80026da:	d003      	beq.n	80026e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b12      	cmp	r3, #18
 80026e2:	d130      	bne.n	8002746 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	2203      	movs	r2, #3
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	4313      	orrs	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800271a:	2201      	movs	r2, #1
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43db      	mvns	r3, r3
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	4013      	ands	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	091b      	lsrs	r3, r3, #4
 8002730:	f003 0201 	and.w	r2, r3, #1
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	4313      	orrs	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	2203      	movs	r2, #3
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	4013      	ands	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d003      	beq.n	8002786 <HAL_GPIO_Init+0xea>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b12      	cmp	r3, #18
 8002784:	d123      	bne.n	80027ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	08da      	lsrs	r2, r3, #3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3208      	adds	r2, #8
 800278e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002792:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	220f      	movs	r2, #15
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	4013      	ands	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	691a      	ldr	r2, [r3, #16]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	4313      	orrs	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	08da      	lsrs	r2, r3, #3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3208      	adds	r2, #8
 80027c8:	6939      	ldr	r1, [r7, #16]
 80027ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	2203      	movs	r2, #3
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4013      	ands	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f003 0203 	and.w	r2, r3, #3
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 80b2 	beq.w	8002974 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002810:	4b61      	ldr	r3, [pc, #388]	; (8002998 <HAL_GPIO_Init+0x2fc>)
 8002812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002814:	4a60      	ldr	r2, [pc, #384]	; (8002998 <HAL_GPIO_Init+0x2fc>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	6613      	str	r3, [r2, #96]	; 0x60
 800281c:	4b5e      	ldr	r3, [pc, #376]	; (8002998 <HAL_GPIO_Init+0x2fc>)
 800281e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002828:	4a5c      	ldr	r2, [pc, #368]	; (800299c <HAL_GPIO_Init+0x300>)
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	089b      	lsrs	r3, r3, #2
 800282e:	3302      	adds	r3, #2
 8002830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002834:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f003 0303 	and.w	r3, r3, #3
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	220f      	movs	r2, #15
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4013      	ands	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002852:	d02b      	beq.n	80028ac <HAL_GPIO_Init+0x210>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a52      	ldr	r2, [pc, #328]	; (80029a0 <HAL_GPIO_Init+0x304>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d025      	beq.n	80028a8 <HAL_GPIO_Init+0x20c>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a51      	ldr	r2, [pc, #324]	; (80029a4 <HAL_GPIO_Init+0x308>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d01f      	beq.n	80028a4 <HAL_GPIO_Init+0x208>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a50      	ldr	r2, [pc, #320]	; (80029a8 <HAL_GPIO_Init+0x30c>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d019      	beq.n	80028a0 <HAL_GPIO_Init+0x204>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a4f      	ldr	r2, [pc, #316]	; (80029ac <HAL_GPIO_Init+0x310>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d013      	beq.n	800289c <HAL_GPIO_Init+0x200>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a4e      	ldr	r2, [pc, #312]	; (80029b0 <HAL_GPIO_Init+0x314>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d00d      	beq.n	8002898 <HAL_GPIO_Init+0x1fc>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a4d      	ldr	r2, [pc, #308]	; (80029b4 <HAL_GPIO_Init+0x318>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d007      	beq.n	8002894 <HAL_GPIO_Init+0x1f8>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a4c      	ldr	r2, [pc, #304]	; (80029b8 <HAL_GPIO_Init+0x31c>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d101      	bne.n	8002890 <HAL_GPIO_Init+0x1f4>
 800288c:	2307      	movs	r3, #7
 800288e:	e00e      	b.n	80028ae <HAL_GPIO_Init+0x212>
 8002890:	2308      	movs	r3, #8
 8002892:	e00c      	b.n	80028ae <HAL_GPIO_Init+0x212>
 8002894:	2306      	movs	r3, #6
 8002896:	e00a      	b.n	80028ae <HAL_GPIO_Init+0x212>
 8002898:	2305      	movs	r3, #5
 800289a:	e008      	b.n	80028ae <HAL_GPIO_Init+0x212>
 800289c:	2304      	movs	r3, #4
 800289e:	e006      	b.n	80028ae <HAL_GPIO_Init+0x212>
 80028a0:	2303      	movs	r3, #3
 80028a2:	e004      	b.n	80028ae <HAL_GPIO_Init+0x212>
 80028a4:	2302      	movs	r3, #2
 80028a6:	e002      	b.n	80028ae <HAL_GPIO_Init+0x212>
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <HAL_GPIO_Init+0x212>
 80028ac:	2300      	movs	r3, #0
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	f002 0203 	and.w	r2, r2, #3
 80028b4:	0092      	lsls	r2, r2, #2
 80028b6:	4093      	lsls	r3, r2
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028be:	4937      	ldr	r1, [pc, #220]	; (800299c <HAL_GPIO_Init+0x300>)
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	089b      	lsrs	r3, r3, #2
 80028c4:	3302      	adds	r3, #2
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80028cc:	4b3b      	ldr	r3, [pc, #236]	; (80029bc <HAL_GPIO_Init+0x320>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	43db      	mvns	r3, r3
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4013      	ands	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028f0:	4a32      	ldr	r2, [pc, #200]	; (80029bc <HAL_GPIO_Init+0x320>)
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80028f6:	4b31      	ldr	r3, [pc, #196]	; (80029bc <HAL_GPIO_Init+0x320>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	43db      	mvns	r3, r3
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4013      	ands	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4313      	orrs	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800291a:	4a28      	ldr	r2, [pc, #160]	; (80029bc <HAL_GPIO_Init+0x320>)
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002920:	4b26      	ldr	r3, [pc, #152]	; (80029bc <HAL_GPIO_Init+0x320>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	43db      	mvns	r3, r3
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002944:	4a1d      	ldr	r2, [pc, #116]	; (80029bc <HAL_GPIO_Init+0x320>)
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800294a:	4b1c      	ldr	r3, [pc, #112]	; (80029bc <HAL_GPIO_Init+0x320>)
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	43db      	mvns	r3, r3
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	4013      	ands	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800296e:	4a13      	ldr	r2, [pc, #76]	; (80029bc <HAL_GPIO_Init+0x320>)
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	3301      	adds	r3, #1
 8002978:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	fa22 f303 	lsr.w	r3, r2, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	f47f ae91 	bne.w	80026ac <HAL_GPIO_Init+0x10>
  }
}
 800298a:	bf00      	nop
 800298c:	bf00      	nop
 800298e:	371c      	adds	r7, #28
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	40021000 	.word	0x40021000
 800299c:	40010000 	.word	0x40010000
 80029a0:	48000400 	.word	0x48000400
 80029a4:	48000800 	.word	0x48000800
 80029a8:	48000c00 	.word	0x48000c00
 80029ac:	48001000 	.word	0x48001000
 80029b0:	48001400 	.word	0x48001400
 80029b4:	48001800 	.word	0x48001800
 80029b8:	48001c00 	.word	0x48001c00
 80029bc:	40010400 	.word	0x40010400

080029c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	807b      	strh	r3, [r7, #2]
 80029cc:	4613      	mov	r3, r2
 80029ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029d0:	787b      	ldrb	r3, [r7, #1]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029d6:	887a      	ldrh	r2, [r7, #2]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029dc:	e002      	b.n	80029e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029de:	887a      	ldrh	r2, [r7, #2]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a02:	887a      	ldrh	r2, [r7, #2]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4013      	ands	r3, r2
 8002a08:	041a      	lsls	r2, r3, #16
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	43d9      	mvns	r1, r3
 8002a0e:	887b      	ldrh	r3, [r7, #2]
 8002a10:	400b      	ands	r3, r1
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	619a      	str	r2, [r3, #24]
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a2e:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	88fb      	ldrh	r3, [r7, #6]
 8002a34:	4013      	ands	r3, r2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d006      	beq.n	8002a48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a3a:	4a05      	ldr	r2, [pc, #20]	; (8002a50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a3c:	88fb      	ldrh	r3, [r7, #6]
 8002a3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a40:	88fb      	ldrh	r3, [r7, #6]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 f806 	bl	8002a54 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a48:	bf00      	nop
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40010400 	.word	0x40010400

08002a54 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002a6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a6c:	b08f      	sub	sp, #60	; 0x3c
 8002a6e:	af0a      	add	r7, sp, #40	; 0x28
 8002a70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e054      	b.n	8002b26 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d106      	bne.n	8002a9c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f007 ff6e 	bl	800a978 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d102      	bne.n	8002ab6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f003 fe7c 	bl	80067b8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	603b      	str	r3, [r7, #0]
 8002ac6:	687e      	ldr	r6, [r7, #4]
 8002ac8:	466d      	mov	r5, sp
 8002aca:	f106 0410 	add.w	r4, r6, #16
 8002ace:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ad0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ad2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ad4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ad6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ada:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ade:	1d33      	adds	r3, r6, #4
 8002ae0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ae2:	6838      	ldr	r0, [r7, #0]
 8002ae4:	f003 fe2b 	bl	800673e <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2101      	movs	r1, #1
 8002aee:	4618      	mov	r0, r3
 8002af0:	f003 fe73 	bl	80067da <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	603b      	str	r3, [r7, #0]
 8002afa:	687e      	ldr	r6, [r7, #4]
 8002afc:	466d      	mov	r5, sp
 8002afe:	f106 0410 	add.w	r4, r6, #16
 8002b02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b12:	1d33      	adds	r3, r6, #4
 8002b14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b16:	6838      	ldr	r0, [r7, #0]
 8002b18:	f003 ff82 	bl	8006a20 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b2e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002b2e:	b590      	push	{r4, r7, lr}
 8002b30:	b089      	sub	sp, #36	; 0x24
 8002b32:	af04      	add	r7, sp, #16
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	4608      	mov	r0, r1
 8002b38:	4611      	mov	r1, r2
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	70fb      	strb	r3, [r7, #3]
 8002b40:	460b      	mov	r3, r1
 8002b42:	70bb      	strb	r3, [r7, #2]
 8002b44:	4613      	mov	r3, r2
 8002b46:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_HCD_HC_Init+0x28>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e076      	b.n	8002c44 <HAL_HCD_HC_Init+0x116>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002b5e:	78fb      	ldrb	r3, [r7, #3]
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	212c      	movs	r1, #44	; 0x2c
 8002b64:	fb01 f303 	mul.w	r3, r1, r3
 8002b68:	4413      	add	r3, r2
 8002b6a:	333d      	adds	r3, #61	; 0x3d
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002b70:	78fb      	ldrb	r3, [r7, #3]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	212c      	movs	r1, #44	; 0x2c
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3338      	adds	r3, #56	; 0x38
 8002b7e:	787a      	ldrb	r2, [r7, #1]
 8002b80:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002b82:	78fb      	ldrb	r3, [r7, #3]
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	212c      	movs	r1, #44	; 0x2c
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3340      	adds	r3, #64	; 0x40
 8002b90:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002b92:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002b94:	78fb      	ldrb	r3, [r7, #3]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	212c      	movs	r1, #44	; 0x2c
 8002b9a:	fb01 f303 	mul.w	r3, r1, r3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	3339      	adds	r3, #57	; 0x39
 8002ba2:	78fa      	ldrb	r2, [r7, #3]
 8002ba4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002ba6:	78fb      	ldrb	r3, [r7, #3]
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	212c      	movs	r1, #44	; 0x2c
 8002bac:	fb01 f303 	mul.w	r3, r1, r3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	333f      	adds	r3, #63	; 0x3f
 8002bb4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002bb8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002bba:	78fb      	ldrb	r3, [r7, #3]
 8002bbc:	78ba      	ldrb	r2, [r7, #2]
 8002bbe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002bc2:	b2d0      	uxtb	r0, r2
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	212c      	movs	r1, #44	; 0x2c
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	333a      	adds	r3, #58	; 0x3a
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002bd4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	da09      	bge.n	8002bf0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002bdc:	78fb      	ldrb	r3, [r7, #3]
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	212c      	movs	r1, #44	; 0x2c
 8002be2:	fb01 f303 	mul.w	r3, r1, r3
 8002be6:	4413      	add	r3, r2
 8002be8:	333b      	adds	r3, #59	; 0x3b
 8002bea:	2201      	movs	r2, #1
 8002bec:	701a      	strb	r2, [r3, #0]
 8002bee:	e008      	b.n	8002c02 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002bf0:	78fb      	ldrb	r3, [r7, #3]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	212c      	movs	r1, #44	; 0x2c
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	333b      	adds	r3, #59	; 0x3b
 8002bfe:	2200      	movs	r2, #0
 8002c00:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002c02:	78fb      	ldrb	r3, [r7, #3]
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	212c      	movs	r1, #44	; 0x2c
 8002c08:	fb01 f303 	mul.w	r3, r1, r3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	333c      	adds	r3, #60	; 0x3c
 8002c10:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002c14:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6818      	ldr	r0, [r3, #0]
 8002c1a:	787c      	ldrb	r4, [r7, #1]
 8002c1c:	78ba      	ldrb	r2, [r7, #2]
 8002c1e:	78f9      	ldrb	r1, [r7, #3]
 8002c20:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002c22:	9302      	str	r3, [sp, #8]
 8002c24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c28:	9301      	str	r3, [sp, #4]
 8002c2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	4623      	mov	r3, r4
 8002c32:	f004 f839 	bl	8006ca8 <USB_HC_Init>
 8002c36:	4603      	mov	r3, r0
 8002c38:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd90      	pop	{r4, r7, pc}

08002c4c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_HCD_HC_Halt+0x1e>
 8002c66:	2302      	movs	r3, #2
 8002c68:	e00f      	b.n	8002c8a <HAL_HCD_HC_Halt+0x3e>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	78fa      	ldrb	r2, [r7, #3]
 8002c78:	4611      	mov	r1, r2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f004 fa15 	bl	80070aa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	4608      	mov	r0, r1
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	70fb      	strb	r3, [r7, #3]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	70bb      	strb	r3, [r7, #2]
 8002caa:	4613      	mov	r3, r2
 8002cac:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002cae:	78fb      	ldrb	r3, [r7, #3]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	212c      	movs	r1, #44	; 0x2c
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	333b      	adds	r3, #59	; 0x3b
 8002cbc:	78ba      	ldrb	r2, [r7, #2]
 8002cbe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002cc0:	78fb      	ldrb	r3, [r7, #3]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	212c      	movs	r1, #44	; 0x2c
 8002cc6:	fb01 f303 	mul.w	r3, r1, r3
 8002cca:	4413      	add	r3, r2
 8002ccc:	333f      	adds	r3, #63	; 0x3f
 8002cce:	787a      	ldrb	r2, [r7, #1]
 8002cd0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002cd2:	7c3b      	ldrb	r3, [r7, #16]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d112      	bne.n	8002cfe <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	212c      	movs	r1, #44	; 0x2c
 8002cde:	fb01 f303 	mul.w	r3, r1, r3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3342      	adds	r3, #66	; 0x42
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002cea:	78fb      	ldrb	r3, [r7, #3]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	212c      	movs	r1, #44	; 0x2c
 8002cf0:	fb01 f303 	mul.w	r3, r1, r3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	333d      	adds	r3, #61	; 0x3d
 8002cf8:	7f3a      	ldrb	r2, [r7, #28]
 8002cfa:	701a      	strb	r2, [r3, #0]
 8002cfc:	e008      	b.n	8002d10 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cfe:	78fb      	ldrb	r3, [r7, #3]
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	212c      	movs	r1, #44	; 0x2c
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	4413      	add	r3, r2
 8002d0a:	3342      	adds	r3, #66	; 0x42
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002d10:	787b      	ldrb	r3, [r7, #1]
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	f200 80c6 	bhi.w	8002ea4 <HAL_HCD_HC_SubmitRequest+0x210>
 8002d18:	a201      	add	r2, pc, #4	; (adr r2, 8002d20 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1e:	bf00      	nop
 8002d20:	08002d31 	.word	0x08002d31
 8002d24:	08002e91 	.word	0x08002e91
 8002d28:	08002d95 	.word	0x08002d95
 8002d2c:	08002e13 	.word	0x08002e13
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002d30:	7c3b      	ldrb	r3, [r7, #16]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	f040 80b8 	bne.w	8002ea8 <HAL_HCD_HC_SubmitRequest+0x214>
 8002d38:	78bb      	ldrb	r3, [r7, #2]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f040 80b4 	bne.w	8002ea8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002d40:	8b3b      	ldrh	r3, [r7, #24]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d108      	bne.n	8002d58 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002d46:	78fb      	ldrb	r3, [r7, #3]
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	212c      	movs	r1, #44	; 0x2c
 8002d4c:	fb01 f303 	mul.w	r3, r1, r3
 8002d50:	4413      	add	r3, r2
 8002d52:	3355      	adds	r3, #85	; 0x55
 8002d54:	2201      	movs	r2, #1
 8002d56:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d58:	78fb      	ldrb	r3, [r7, #3]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	212c      	movs	r1, #44	; 0x2c
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	3355      	adds	r3, #85	; 0x55
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d109      	bne.n	8002d80 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d6c:	78fb      	ldrb	r3, [r7, #3]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	212c      	movs	r1, #44	; 0x2c
 8002d72:	fb01 f303 	mul.w	r3, r1, r3
 8002d76:	4413      	add	r3, r2
 8002d78:	3342      	adds	r3, #66	; 0x42
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002d7e:	e093      	b.n	8002ea8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d80:	78fb      	ldrb	r3, [r7, #3]
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	212c      	movs	r1, #44	; 0x2c
 8002d86:	fb01 f303 	mul.w	r3, r1, r3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3342      	adds	r3, #66	; 0x42
 8002d8e:	2202      	movs	r2, #2
 8002d90:	701a      	strb	r2, [r3, #0]
      break;
 8002d92:	e089      	b.n	8002ea8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002d94:	78bb      	ldrb	r3, [r7, #2]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d11d      	bne.n	8002dd6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d9a:	78fb      	ldrb	r3, [r7, #3]
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	212c      	movs	r1, #44	; 0x2c
 8002da0:	fb01 f303 	mul.w	r3, r1, r3
 8002da4:	4413      	add	r3, r2
 8002da6:	3355      	adds	r3, #85	; 0x55
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d109      	bne.n	8002dc2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002dae:	78fb      	ldrb	r3, [r7, #3]
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	212c      	movs	r1, #44	; 0x2c
 8002db4:	fb01 f303 	mul.w	r3, r1, r3
 8002db8:	4413      	add	r3, r2
 8002dba:	3342      	adds	r3, #66	; 0x42
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002dc0:	e073      	b.n	8002eaa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002dc2:	78fb      	ldrb	r3, [r7, #3]
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	212c      	movs	r1, #44	; 0x2c
 8002dc8:	fb01 f303 	mul.w	r3, r1, r3
 8002dcc:	4413      	add	r3, r2
 8002dce:	3342      	adds	r3, #66	; 0x42
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	701a      	strb	r2, [r3, #0]
      break;
 8002dd4:	e069      	b.n	8002eaa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002dd6:	78fb      	ldrb	r3, [r7, #3]
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	212c      	movs	r1, #44	; 0x2c
 8002ddc:	fb01 f303 	mul.w	r3, r1, r3
 8002de0:	4413      	add	r3, r2
 8002de2:	3354      	adds	r3, #84	; 0x54
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d109      	bne.n	8002dfe <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002dea:	78fb      	ldrb	r3, [r7, #3]
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	212c      	movs	r1, #44	; 0x2c
 8002df0:	fb01 f303 	mul.w	r3, r1, r3
 8002df4:	4413      	add	r3, r2
 8002df6:	3342      	adds	r3, #66	; 0x42
 8002df8:	2200      	movs	r2, #0
 8002dfa:	701a      	strb	r2, [r3, #0]
      break;
 8002dfc:	e055      	b.n	8002eaa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002dfe:	78fb      	ldrb	r3, [r7, #3]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	212c      	movs	r1, #44	; 0x2c
 8002e04:	fb01 f303 	mul.w	r3, r1, r3
 8002e08:	4413      	add	r3, r2
 8002e0a:	3342      	adds	r3, #66	; 0x42
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	701a      	strb	r2, [r3, #0]
      break;
 8002e10:	e04b      	b.n	8002eaa <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002e12:	78bb      	ldrb	r3, [r7, #2]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d11d      	bne.n	8002e54 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002e18:	78fb      	ldrb	r3, [r7, #3]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	212c      	movs	r1, #44	; 0x2c
 8002e1e:	fb01 f303 	mul.w	r3, r1, r3
 8002e22:	4413      	add	r3, r2
 8002e24:	3355      	adds	r3, #85	; 0x55
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d109      	bne.n	8002e40 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e2c:	78fb      	ldrb	r3, [r7, #3]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	212c      	movs	r1, #44	; 0x2c
 8002e32:	fb01 f303 	mul.w	r3, r1, r3
 8002e36:	4413      	add	r3, r2
 8002e38:	3342      	adds	r3, #66	; 0x42
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002e3e:	e034      	b.n	8002eaa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e40:	78fb      	ldrb	r3, [r7, #3]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	212c      	movs	r1, #44	; 0x2c
 8002e46:	fb01 f303 	mul.w	r3, r1, r3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3342      	adds	r3, #66	; 0x42
 8002e4e:	2202      	movs	r2, #2
 8002e50:	701a      	strb	r2, [r3, #0]
      break;
 8002e52:	e02a      	b.n	8002eaa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002e54:	78fb      	ldrb	r3, [r7, #3]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	212c      	movs	r1, #44	; 0x2c
 8002e5a:	fb01 f303 	mul.w	r3, r1, r3
 8002e5e:	4413      	add	r3, r2
 8002e60:	3354      	adds	r3, #84	; 0x54
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d109      	bne.n	8002e7c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e68:	78fb      	ldrb	r3, [r7, #3]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	212c      	movs	r1, #44	; 0x2c
 8002e6e:	fb01 f303 	mul.w	r3, r1, r3
 8002e72:	4413      	add	r3, r2
 8002e74:	3342      	adds	r3, #66	; 0x42
 8002e76:	2200      	movs	r2, #0
 8002e78:	701a      	strb	r2, [r3, #0]
      break;
 8002e7a:	e016      	b.n	8002eaa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e7c:	78fb      	ldrb	r3, [r7, #3]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	212c      	movs	r1, #44	; 0x2c
 8002e82:	fb01 f303 	mul.w	r3, r1, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	3342      	adds	r3, #66	; 0x42
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	701a      	strb	r2, [r3, #0]
      break;
 8002e8e:	e00c      	b.n	8002eaa <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	212c      	movs	r1, #44	; 0x2c
 8002e96:	fb01 f303 	mul.w	r3, r1, r3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3342      	adds	r3, #66	; 0x42
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	701a      	strb	r2, [r3, #0]
      break;
 8002ea2:	e002      	b.n	8002eaa <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002ea4:	bf00      	nop
 8002ea6:	e000      	b.n	8002eaa <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002ea8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002eaa:	78fb      	ldrb	r3, [r7, #3]
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	212c      	movs	r1, #44	; 0x2c
 8002eb0:	fb01 f303 	mul.w	r3, r1, r3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3344      	adds	r3, #68	; 0x44
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	8b3a      	ldrh	r2, [r7, #24]
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	202c      	movs	r0, #44	; 0x2c
 8002ec4:	fb00 f303 	mul.w	r3, r0, r3
 8002ec8:	440b      	add	r3, r1
 8002eca:	334c      	adds	r3, #76	; 0x4c
 8002ecc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002ece:	78fb      	ldrb	r3, [r7, #3]
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	212c      	movs	r1, #44	; 0x2c
 8002ed4:	fb01 f303 	mul.w	r3, r1, r3
 8002ed8:	4413      	add	r3, r2
 8002eda:	3360      	adds	r3, #96	; 0x60
 8002edc:	2200      	movs	r2, #0
 8002ede:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002ee0:	78fb      	ldrb	r3, [r7, #3]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	212c      	movs	r1, #44	; 0x2c
 8002ee6:	fb01 f303 	mul.w	r3, r1, r3
 8002eea:	4413      	add	r3, r2
 8002eec:	3350      	adds	r3, #80	; 0x50
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002ef2:	78fb      	ldrb	r3, [r7, #3]
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	212c      	movs	r1, #44	; 0x2c
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	4413      	add	r3, r2
 8002efe:	3339      	adds	r3, #57	; 0x39
 8002f00:	78fa      	ldrb	r2, [r7, #3]
 8002f02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	212c      	movs	r1, #44	; 0x2c
 8002f0a:	fb01 f303 	mul.w	r3, r1, r3
 8002f0e:	4413      	add	r3, r2
 8002f10:	3361      	adds	r3, #97	; 0x61
 8002f12:	2200      	movs	r2, #0
 8002f14:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6818      	ldr	r0, [r3, #0]
 8002f1a:	78fb      	ldrb	r3, [r7, #3]
 8002f1c:	222c      	movs	r2, #44	; 0x2c
 8002f1e:	fb02 f303 	mul.w	r3, r2, r3
 8002f22:	3338      	adds	r3, #56	; 0x38
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	4413      	add	r3, r2
 8002f28:	4619      	mov	r1, r3
 8002f2a:	f003 ffb5 	bl	8006e98 <USB_HC_StartXfer>
 8002f2e:	4603      	mov	r3, r0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f003 fd23 	bl	800699a <USB_GetMode>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	f040 80ef 	bne.w	800313a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f003 fd07 	bl	8006974 <USB_ReadInterrupts>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 80e5 	beq.w	8003138 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f003 fcfe 	bl	8006974 <USB_ReadInterrupts>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f82:	d104      	bne.n	8002f8e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002f8c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f003 fcee 	bl	8006974 <USB_ReadInterrupts>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fa2:	d104      	bne.n	8002fae <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002fac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f003 fcde 	bl	8006974 <USB_ReadInterrupts>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fc2:	d104      	bne.n	8002fce <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002fcc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f003 fcce 	bl	8006974 <USB_ReadInterrupts>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d103      	bne.n	8002fea <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f003 fcc0 	bl	8006974 <USB_ReadInterrupts>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ffa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ffe:	d115      	bne.n	800302c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003008:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d108      	bne.n	800302c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f007 fd2e 	bl	800aa7c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2101      	movs	r1, #1
 8003026:	4618      	mov	r0, r3
 8003028:	f003 fd78 	bl	8006b1c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f003 fc9f 	bl	8006974 <USB_ReadInterrupts>
 8003036:	4603      	mov	r3, r0
 8003038:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800303c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003040:	d102      	bne.n	8003048 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f001 f962 	bl	800430c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f003 fc91 	bl	8006974 <USB_ReadInterrupts>
 8003052:	4603      	mov	r3, r0
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	2b08      	cmp	r3, #8
 800305a:	d106      	bne.n	800306a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f007 fcf1 	bl	800aa44 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2208      	movs	r2, #8
 8003068:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f003 fc80 	bl	8006974 <USB_ReadInterrupts>
 8003074:	4603      	mov	r3, r0
 8003076:	f003 0310 	and.w	r3, r3, #16
 800307a:	2b10      	cmp	r3, #16
 800307c:	d101      	bne.n	8003082 <HAL_HCD_IRQHandler+0x14a>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <HAL_HCD_IRQHandler+0x14c>
 8003082:	2300      	movs	r3, #0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d012      	beq.n	80030ae <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699a      	ldr	r2, [r3, #24]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0210 	bic.w	r2, r2, #16
 8003096:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f001 f865 	bl	8004168 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	699a      	ldr	r2, [r3, #24]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f042 0210 	orr.w	r2, r2, #16
 80030ac:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f003 fc5e 	bl	8006974 <USB_ReadInterrupts>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030c2:	d13a      	bne.n	800313a <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f003 ffdd 	bl	8007088 <USB_HC_ReadInterrupt>
 80030ce:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80030d0:	2300      	movs	r3, #0
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	e025      	b.n	8003122 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f003 030f 	and.w	r3, r3, #15
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	fa22 f303 	lsr.w	r3, r2, r3
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d018      	beq.n	800311c <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003100:	d106      	bne.n	8003110 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	4619      	mov	r1, r3
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f897 	bl	800323c <HCD_HC_IN_IRQHandler>
 800310e:	e005      	b.n	800311c <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	b2db      	uxtb	r3, r3
 8003114:	4619      	mov	r1, r3
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 fc90 	bl	8003a3c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	3301      	adds	r3, #1
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	429a      	cmp	r2, r3
 800312a:	d3d4      	bcc.n	80030d6 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003134:	615a      	str	r2, [r3, #20]
 8003136:	e000      	b.n	800313a <HAL_HCD_IRQHandler+0x202>
      return;
 8003138:	bf00      	nop
    }
  }
}
 800313a:	3718      	adds	r7, #24
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <HAL_HCD_Start+0x16>
 8003152:	2302      	movs	r3, #2
 8003154:	e013      	b.n	800317e <HAL_HCD_Start+0x3e>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f003 fb17 	bl	8006796 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2101      	movs	r1, #1
 800316e:	4618      	mov	r0, r3
 8003170:	f003 fd38 	bl	8006be4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <HAL_HCD_Stop+0x16>
 8003198:	2302      	movs	r3, #2
 800319a:	e00d      	b.n	80031b8 <HAL_HCD_Stop+0x32>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f004 f89a 	bl	80072e2 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f003 fcdf 	bl	8006b90 <USB_ResetPort>
 80031d2:	4603      	mov	r3, r0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	212c      	movs	r1, #44	; 0x2c
 80031ee:	fb01 f303 	mul.w	r3, r1, r3
 80031f2:	4413      	add	r3, r2
 80031f4:	3360      	adds	r3, #96	; 0x60
 80031f6:	781b      	ldrb	r3, [r3, #0]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f003 fd37 	bl	8006c84 <USB_GetCurrentFrame>
 8003216:	4603      	mov	r3, r0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f003 fd12 	bl	8006c56 <USB_GetHostSpeed>
 8003232:	4603      	mov	r3, r0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003252:	78fb      	ldrb	r3, [r7, #3]
 8003254:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	4413      	add	r3, r2
 800325e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b04      	cmp	r3, #4
 800326a:	d119      	bne.n	80032a0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	015a      	lsls	r2, r3, #5
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	4413      	add	r3, r2
 8003274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003278:	461a      	mov	r2, r3
 800327a:	2304      	movs	r3, #4
 800327c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	015a      	lsls	r2, r3, #5
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	4413      	add	r3, r2
 8003286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	0151      	lsls	r1, r2, #5
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	440a      	add	r2, r1
 8003294:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003298:	f043 0302 	orr.w	r3, r3, #2
 800329c:	60d3      	str	r3, [r2, #12]
 800329e:	e101      	b.n	80034a4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	015a      	lsls	r2, r3, #5
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032b6:	d12b      	bne.n	8003310 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c4:	461a      	mov	r2, r3
 80032c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	212c      	movs	r1, #44	; 0x2c
 80032d2:	fb01 f303 	mul.w	r3, r1, r3
 80032d6:	4413      	add	r3, r2
 80032d8:	3361      	adds	r3, #97	; 0x61
 80032da:	2207      	movs	r2, #7
 80032dc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	015a      	lsls	r2, r3, #5
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	4413      	add	r3, r2
 80032e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	0151      	lsls	r1, r2, #5
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	440a      	add	r2, r1
 80032f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032f8:	f043 0302 	orr.w	r3, r3, #2
 80032fc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	4611      	mov	r1, r2
 8003308:	4618      	mov	r0, r3
 800330a:	f003 fece 	bl	80070aa <USB_HC_Halt>
 800330e:	e0c9      	b.n	80034a4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4413      	add	r3, r2
 8003318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 0320 	and.w	r3, r3, #32
 8003322:	2b20      	cmp	r3, #32
 8003324:	d109      	bne.n	800333a <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	015a      	lsls	r2, r3, #5
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	4413      	add	r3, r2
 800332e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003332:	461a      	mov	r2, r3
 8003334:	2320      	movs	r3, #32
 8003336:	6093      	str	r3, [r2, #8]
 8003338:	e0b4      	b.n	80034a4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	4413      	add	r3, r2
 8003342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b08      	cmp	r3, #8
 800334e:	d133      	bne.n	80033b8 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	4413      	add	r3, r2
 8003358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	0151      	lsls	r1, r2, #5
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	440a      	add	r2, r1
 8003366:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800336a:	f043 0302 	orr.w	r3, r3, #2
 800336e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	212c      	movs	r1, #44	; 0x2c
 8003376:	fb01 f303 	mul.w	r3, r1, r3
 800337a:	4413      	add	r3, r2
 800337c:	3361      	adds	r3, #97	; 0x61
 800337e:	2205      	movs	r2, #5
 8003380:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	015a      	lsls	r2, r3, #5
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	4413      	add	r3, r2
 800338a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338e:	461a      	mov	r2, r3
 8003390:	2310      	movs	r3, #16
 8003392:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	4413      	add	r3, r2
 800339c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a0:	461a      	mov	r2, r3
 80033a2:	2308      	movs	r3, #8
 80033a4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	4611      	mov	r1, r2
 80033b0:	4618      	mov	r0, r3
 80033b2:	f003 fe7a 	bl	80070aa <USB_HC_Halt>
 80033b6:	e075      	b.n	80034a4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	015a      	lsls	r2, r3, #5
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	4413      	add	r3, r2
 80033c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ce:	d134      	bne.n	800343a <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	015a      	lsls	r2, r3, #5
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	4413      	add	r3, r2
 80033d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	0151      	lsls	r1, r2, #5
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	440a      	add	r2, r1
 80033e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033ea:	f043 0302 	orr.w	r3, r3, #2
 80033ee:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	212c      	movs	r1, #44	; 0x2c
 80033f6:	fb01 f303 	mul.w	r3, r1, r3
 80033fa:	4413      	add	r3, r2
 80033fc:	3361      	adds	r3, #97	; 0x61
 80033fe:	2208      	movs	r2, #8
 8003400:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	015a      	lsls	r2, r3, #5
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4413      	add	r3, r2
 800340a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340e:	461a      	mov	r2, r3
 8003410:	2310      	movs	r3, #16
 8003412:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4413      	add	r3, r2
 800341c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003420:	461a      	mov	r2, r3
 8003422:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003426:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	4611      	mov	r1, r2
 8003432:	4618      	mov	r0, r3
 8003434:	f003 fe39 	bl	80070aa <USB_HC_Halt>
 8003438:	e034      	b.n	80034a4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4413      	add	r3, r2
 8003442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344c:	2b80      	cmp	r3, #128	; 0x80
 800344e:	d129      	bne.n	80034a4 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	4413      	add	r3, r2
 8003458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	0151      	lsls	r1, r2, #5
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	440a      	add	r2, r1
 8003466:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800346a:	f043 0302 	orr.w	r3, r3, #2
 800346e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	212c      	movs	r1, #44	; 0x2c
 8003476:	fb01 f303 	mul.w	r3, r1, r3
 800347a:	4413      	add	r3, r2
 800347c:	3361      	adds	r3, #97	; 0x61
 800347e:	2206      	movs	r2, #6
 8003480:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	4611      	mov	r1, r2
 800348c:	4618      	mov	r0, r3
 800348e:	f003 fe0c 	bl	80070aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	015a      	lsls	r2, r3, #5
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	4413      	add	r3, r2
 800349a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800349e:	461a      	mov	r2, r3
 80034a0:	2380      	movs	r3, #128	; 0x80
 80034a2:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	015a      	lsls	r2, r3, #5
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	4413      	add	r3, r2
 80034ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034ba:	d122      	bne.n	8003502 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	015a      	lsls	r2, r3, #5
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	4413      	add	r3, r2
 80034c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	0151      	lsls	r1, r2, #5
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	440a      	add	r2, r1
 80034d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034d6:	f043 0302 	orr.w	r3, r3, #2
 80034da:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	4611      	mov	r1, r2
 80034e6:	4618      	mov	r0, r3
 80034e8:	f003 fddf 	bl	80070aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f8:	461a      	mov	r2, r3
 80034fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034fe:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003500:	e298      	b.n	8003a34 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	4413      	add	r3, r2
 800350a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b01      	cmp	r3, #1
 8003516:	f040 80fd 	bne.w	8003714 <HCD_HC_IN_IRQHandler+0x4d8>
    hhcd->hc[ch_num].state = HC_XFRC;
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	212c      	movs	r1, #44	; 0x2c
 8003520:	fb01 f303 	mul.w	r3, r1, r3
 8003524:	4413      	add	r3, r2
 8003526:	3361      	adds	r3, #97	; 0x61
 8003528:	2201      	movs	r2, #1
 800352a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	212c      	movs	r1, #44	; 0x2c
 8003532:	fb01 f303 	mul.w	r3, r1, r3
 8003536:	4413      	add	r3, r2
 8003538:	335c      	adds	r3, #92	; 0x5c
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	015a      	lsls	r2, r3, #5
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	4413      	add	r3, r2
 8003546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354a:	461a      	mov	r2, r3
 800354c:	2301      	movs	r3, #1
 800354e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	212c      	movs	r1, #44	; 0x2c
 8003556:	fb01 f303 	mul.w	r3, r1, r3
 800355a:	4413      	add	r3, r2
 800355c:	333f      	adds	r3, #63	; 0x3f
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d009      	beq.n	8003578 <HCD_HC_IN_IRQHandler+0x33c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	212c      	movs	r1, #44	; 0x2c
 800356a:	fb01 f303 	mul.w	r3, r1, r3
 800356e:	4413      	add	r3, r2
 8003570:	333f      	adds	r3, #63	; 0x3f
 8003572:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003574:	2b02      	cmp	r3, #2
 8003576:	d121      	bne.n	80035bc <HCD_HC_IN_IRQHandler+0x380>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4413      	add	r3, r2
 8003580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	0151      	lsls	r1, r2, #5
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	440a      	add	r2, r1
 800358e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003592:	f043 0302 	orr.w	r3, r3, #2
 8003596:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	4611      	mov	r1, r2
 80035a2:	4618      	mov	r0, r3
 80035a4:	f003 fd81 	bl	80070aa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b4:	461a      	mov	r2, r3
 80035b6:	2310      	movs	r3, #16
 80035b8:	6093      	str	r3, [r2, #8]
 80035ba:	e066      	b.n	800368a <HCD_HC_IN_IRQHandler+0x44e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	212c      	movs	r1, #44	; 0x2c
 80035c2:	fb01 f303 	mul.w	r3, r1, r3
 80035c6:	4413      	add	r3, r2
 80035c8:	333f      	adds	r3, #63	; 0x3f
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	d127      	bne.n	8003620 <HCD_HC_IN_IRQHandler+0x3e4>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	0151      	lsls	r1, r2, #5
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	440a      	add	r2, r1
 80035e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035ee:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	212c      	movs	r1, #44	; 0x2c
 80035f6:	fb01 f303 	mul.w	r3, r1, r3
 80035fa:	4413      	add	r3, r2
 80035fc:	3360      	adds	r3, #96	; 0x60
 80035fe:	2201      	movs	r2, #1
 8003600:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	b2d9      	uxtb	r1, r3
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	202c      	movs	r0, #44	; 0x2c
 800360c:	fb00 f303 	mul.w	r3, r0, r3
 8003610:	4413      	add	r3, r2
 8003612:	3360      	adds	r3, #96	; 0x60
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	461a      	mov	r2, r3
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f007 fa3d 	bl	800aa98 <HAL_HCD_HC_NotifyURBChange_Callback>
 800361e:	e034      	b.n	800368a <HCD_HC_IN_IRQHandler+0x44e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	212c      	movs	r1, #44	; 0x2c
 8003626:	fb01 f303 	mul.w	r3, r1, r3
 800362a:	4413      	add	r3, r2
 800362c:	333f      	adds	r3, #63	; 0x3f
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d12a      	bne.n	800368a <HCD_HC_IN_IRQHandler+0x44e>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	212c      	movs	r1, #44	; 0x2c
 800363a:	fb01 f303 	mul.w	r3, r1, r3
 800363e:	4413      	add	r3, r2
 8003640:	3360      	adds	r3, #96	; 0x60
 8003642:	2201      	movs	r2, #1
 8003644:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	212c      	movs	r1, #44	; 0x2c
 800364c:	fb01 f303 	mul.w	r3, r1, r3
 8003650:	4413      	add	r3, r2
 8003652:	3354      	adds	r3, #84	; 0x54
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	f083 0301 	eor.w	r3, r3, #1
 800365a:	b2d8      	uxtb	r0, r3
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	212c      	movs	r1, #44	; 0x2c
 8003662:	fb01 f303 	mul.w	r3, r1, r3
 8003666:	4413      	add	r3, r2
 8003668:	3354      	adds	r3, #84	; 0x54
 800366a:	4602      	mov	r2, r0
 800366c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	b2d9      	uxtb	r1, r3
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	202c      	movs	r0, #44	; 0x2c
 8003678:	fb00 f303 	mul.w	r3, r0, r3
 800367c:	4413      	add	r3, r2
 800367e:	3360      	adds	r3, #96	; 0x60
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	461a      	mov	r2, r3
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f007 fa07 	bl	800aa98 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d12b      	bne.n	80036ea <HCD_HC_IN_IRQHandler+0x4ae>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	212c      	movs	r1, #44	; 0x2c
 8003698:	fb01 f303 	mul.w	r3, r1, r3
 800369c:	4413      	add	r3, r2
 800369e:	3348      	adds	r3, #72	; 0x48
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	202c      	movs	r0, #44	; 0x2c
 80036a8:	fb00 f202 	mul.w	r2, r0, r2
 80036ac:	440a      	add	r2, r1
 80036ae:	3240      	adds	r2, #64	; 0x40
 80036b0:	8812      	ldrh	r2, [r2, #0]
 80036b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 81ba 	beq.w	8003a34 <HCD_HC_IN_IRQHandler+0x7f8>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	212c      	movs	r1, #44	; 0x2c
 80036c6:	fb01 f303 	mul.w	r3, r1, r3
 80036ca:	4413      	add	r3, r2
 80036cc:	3354      	adds	r3, #84	; 0x54
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	f083 0301 	eor.w	r3, r3, #1
 80036d4:	b2d8      	uxtb	r0, r3
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	212c      	movs	r1, #44	; 0x2c
 80036dc:	fb01 f303 	mul.w	r3, r1, r3
 80036e0:	4413      	add	r3, r2
 80036e2:	3354      	adds	r3, #84	; 0x54
 80036e4:	4602      	mov	r2, r0
 80036e6:	701a      	strb	r2, [r3, #0]
}
 80036e8:	e1a4      	b.n	8003a34 <HCD_HC_IN_IRQHandler+0x7f8>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	212c      	movs	r1, #44	; 0x2c
 80036f0:	fb01 f303 	mul.w	r3, r1, r3
 80036f4:	4413      	add	r3, r2
 80036f6:	3354      	adds	r3, #84	; 0x54
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	f083 0301 	eor.w	r3, r3, #1
 80036fe:	b2d8      	uxtb	r0, r3
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	212c      	movs	r1, #44	; 0x2c
 8003706:	fb01 f303 	mul.w	r3, r1, r3
 800370a:	4413      	add	r3, r2
 800370c:	3354      	adds	r3, #84	; 0x54
 800370e:	4602      	mov	r2, r0
 8003710:	701a      	strb	r2, [r3, #0]
}
 8003712:	e18f      	b.n	8003a34 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	015a      	lsls	r2, r3, #5
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	4413      	add	r3, r2
 800371c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b02      	cmp	r3, #2
 8003728:	f040 8106 	bne.w	8003938 <HCD_HC_IN_IRQHandler+0x6fc>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	015a      	lsls	r2, r3, #5
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	4413      	add	r3, r2
 8003734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	0151      	lsls	r1, r2, #5
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	440a      	add	r2, r1
 8003742:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003746:	f023 0302 	bic.w	r3, r3, #2
 800374a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	212c      	movs	r1, #44	; 0x2c
 8003752:	fb01 f303 	mul.w	r3, r1, r3
 8003756:	4413      	add	r3, r2
 8003758:	3361      	adds	r3, #97	; 0x61
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d109      	bne.n	8003774 <HCD_HC_IN_IRQHandler+0x538>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	212c      	movs	r1, #44	; 0x2c
 8003766:	fb01 f303 	mul.w	r3, r1, r3
 800376a:	4413      	add	r3, r2
 800376c:	3360      	adds	r3, #96	; 0x60
 800376e:	2201      	movs	r2, #1
 8003770:	701a      	strb	r2, [r3, #0]
 8003772:	e0c9      	b.n	8003908 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	212c      	movs	r1, #44	; 0x2c
 800377a:	fb01 f303 	mul.w	r3, r1, r3
 800377e:	4413      	add	r3, r2
 8003780:	3361      	adds	r3, #97	; 0x61
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b05      	cmp	r3, #5
 8003786:	d109      	bne.n	800379c <HCD_HC_IN_IRQHandler+0x560>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	212c      	movs	r1, #44	; 0x2c
 800378e:	fb01 f303 	mul.w	r3, r1, r3
 8003792:	4413      	add	r3, r2
 8003794:	3360      	adds	r3, #96	; 0x60
 8003796:	2205      	movs	r2, #5
 8003798:	701a      	strb	r2, [r3, #0]
 800379a:	e0b5      	b.n	8003908 <HCD_HC_IN_IRQHandler+0x6cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	212c      	movs	r1, #44	; 0x2c
 80037a2:	fb01 f303 	mul.w	r3, r1, r3
 80037a6:	4413      	add	r3, r2
 80037a8:	3361      	adds	r3, #97	; 0x61
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b06      	cmp	r3, #6
 80037ae:	d009      	beq.n	80037c4 <HCD_HC_IN_IRQHandler+0x588>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	212c      	movs	r1, #44	; 0x2c
 80037b6:	fb01 f303 	mul.w	r3, r1, r3
 80037ba:	4413      	add	r3, r2
 80037bc:	3361      	adds	r3, #97	; 0x61
 80037be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d150      	bne.n	8003866 <HCD_HC_IN_IRQHandler+0x62a>
      hhcd->hc[ch_num].ErrCnt++;
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	212c      	movs	r1, #44	; 0x2c
 80037ca:	fb01 f303 	mul.w	r3, r1, r3
 80037ce:	4413      	add	r3, r2
 80037d0:	335c      	adds	r3, #92	; 0x5c
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	202c      	movs	r0, #44	; 0x2c
 80037dc:	fb00 f303 	mul.w	r3, r0, r3
 80037e0:	440b      	add	r3, r1
 80037e2:	335c      	adds	r3, #92	; 0x5c
 80037e4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	212c      	movs	r1, #44	; 0x2c
 80037ec:	fb01 f303 	mul.w	r3, r1, r3
 80037f0:	4413      	add	r3, r2
 80037f2:	335c      	adds	r3, #92	; 0x5c
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d912      	bls.n	8003820 <HCD_HC_IN_IRQHandler+0x5e4>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	212c      	movs	r1, #44	; 0x2c
 8003800:	fb01 f303 	mul.w	r3, r1, r3
 8003804:	4413      	add	r3, r2
 8003806:	335c      	adds	r3, #92	; 0x5c
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	212c      	movs	r1, #44	; 0x2c
 8003812:	fb01 f303 	mul.w	r3, r1, r3
 8003816:	4413      	add	r3, r2
 8003818:	3360      	adds	r3, #96	; 0x60
 800381a:	2204      	movs	r2, #4
 800381c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800381e:	e073      	b.n	8003908 <HCD_HC_IN_IRQHandler+0x6cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	212c      	movs	r1, #44	; 0x2c
 8003826:	fb01 f303 	mul.w	r3, r1, r3
 800382a:	4413      	add	r3, r2
 800382c:	3360      	adds	r3, #96	; 0x60
 800382e:	2202      	movs	r2, #2
 8003830:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	4413      	add	r3, r2
 800383a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003848:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003850:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	4413      	add	r3, r2
 800385a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800385e:	461a      	mov	r2, r3
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003864:	e050      	b.n	8003908 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	212c      	movs	r1, #44	; 0x2c
 800386c:	fb01 f303 	mul.w	r3, r1, r3
 8003870:	4413      	add	r3, r2
 8003872:	3361      	adds	r3, #97	; 0x61
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b03      	cmp	r3, #3
 8003878:	d122      	bne.n	80038c0 <HCD_HC_IN_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	212c      	movs	r1, #44	; 0x2c
 8003880:	fb01 f303 	mul.w	r3, r1, r3
 8003884:	4413      	add	r3, r2
 8003886:	3360      	adds	r3, #96	; 0x60
 8003888:	2202      	movs	r2, #2
 800388a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4413      	add	r3, r2
 8003894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038a2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038aa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b8:	461a      	mov	r2, r3
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	e023      	b.n	8003908 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	212c      	movs	r1, #44	; 0x2c
 80038c6:	fb01 f303 	mul.w	r3, r1, r3
 80038ca:	4413      	add	r3, r2
 80038cc:	3361      	adds	r3, #97	; 0x61
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b07      	cmp	r3, #7
 80038d2:	d119      	bne.n	8003908 <HCD_HC_IN_IRQHandler+0x6cc>
      hhcd->hc[ch_num].ErrCnt++;
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	212c      	movs	r1, #44	; 0x2c
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	4413      	add	r3, r2
 80038e0:	335c      	adds	r3, #92	; 0x5c
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	1c5a      	adds	r2, r3, #1
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	202c      	movs	r0, #44	; 0x2c
 80038ec:	fb00 f303 	mul.w	r3, r0, r3
 80038f0:	440b      	add	r3, r1
 80038f2:	335c      	adds	r3, #92	; 0x5c
 80038f4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	212c      	movs	r1, #44	; 0x2c
 80038fc:	fb01 f303 	mul.w	r3, r1, r3
 8003900:	4413      	add	r3, r2
 8003902:	3360      	adds	r3, #96	; 0x60
 8003904:	2204      	movs	r2, #4
 8003906:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	4413      	add	r3, r2
 8003910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003914:	461a      	mov	r2, r3
 8003916:	2302      	movs	r3, #2
 8003918:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	b2d9      	uxtb	r1, r3
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	202c      	movs	r0, #44	; 0x2c
 8003924:	fb00 f303 	mul.w	r3, r0, r3
 8003928:	4413      	add	r3, r2
 800392a:	3360      	adds	r3, #96	; 0x60
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	461a      	mov	r2, r3
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f007 f8b1 	bl	800aa98 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003936:	e07d      	b.n	8003a34 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	4413      	add	r3, r2
 8003940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 0310 	and.w	r3, r3, #16
 800394a:	2b10      	cmp	r3, #16
 800394c:	d172      	bne.n	8003a34 <HCD_HC_IN_IRQHandler+0x7f8>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	212c      	movs	r1, #44	; 0x2c
 8003954:	fb01 f303 	mul.w	r3, r1, r3
 8003958:	4413      	add	r3, r2
 800395a:	333f      	adds	r3, #63	; 0x3f
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	2b03      	cmp	r3, #3
 8003960:	d121      	bne.n	80039a6 <HCD_HC_IN_IRQHandler+0x76a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	212c      	movs	r1, #44	; 0x2c
 8003968:	fb01 f303 	mul.w	r3, r1, r3
 800396c:	4413      	add	r3, r2
 800396e:	335c      	adds	r3, #92	; 0x5c
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	4413      	add	r3, r2
 800397c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	0151      	lsls	r1, r2, #5
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	440a      	add	r2, r1
 800398a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800398e:	f043 0302 	orr.w	r3, r3, #2
 8003992:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	4611      	mov	r1, r2
 800399e:	4618      	mov	r0, r3
 80039a0:	f003 fb83 	bl	80070aa <USB_HC_Halt>
 80039a4:	e03d      	b.n	8003a22 <HCD_HC_IN_IRQHandler+0x7e6>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	212c      	movs	r1, #44	; 0x2c
 80039ac:	fb01 f303 	mul.w	r3, r1, r3
 80039b0:	4413      	add	r3, r2
 80039b2:	333f      	adds	r3, #63	; 0x3f
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d009      	beq.n	80039ce <HCD_HC_IN_IRQHandler+0x792>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	212c      	movs	r1, #44	; 0x2c
 80039c0:	fb01 f303 	mul.w	r3, r1, r3
 80039c4:	4413      	add	r3, r2
 80039c6:	333f      	adds	r3, #63	; 0x3f
 80039c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d129      	bne.n	8003a22 <HCD_HC_IN_IRQHandler+0x7e6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	212c      	movs	r1, #44	; 0x2c
 80039d4:	fb01 f303 	mul.w	r3, r1, r3
 80039d8:	4413      	add	r3, r2
 80039da:	335c      	adds	r3, #92	; 0x5c
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	212c      	movs	r1, #44	; 0x2c
 80039e6:	fb01 f303 	mul.w	r3, r1, r3
 80039ea:	4413      	add	r3, r2
 80039ec:	3361      	adds	r3, #97	; 0x61
 80039ee:	2203      	movs	r2, #3
 80039f0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	015a      	lsls	r2, r3, #5
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	0151      	lsls	r1, r2, #5
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	440a      	add	r2, r1
 8003a08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a0c:	f043 0302 	orr.w	r3, r3, #2
 8003a10:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f003 fb44 	bl	80070aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	015a      	lsls	r2, r3, #5
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a2e:	461a      	mov	r2, r3
 8003a30:	2310      	movs	r3, #16
 8003a32:	6093      	str	r3, [r2, #8]
}
 8003a34:	bf00      	nop
 8003a36:	3718      	adds	r7, #24
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003a52:	78fb      	ldrb	r3, [r7, #3]
 8003a54:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	015a      	lsls	r2, r3, #5
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d119      	bne.n	8003aa0 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a78:	461a      	mov	r2, r3
 8003a7a:	2304      	movs	r3, #4
 8003a7c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	015a      	lsls	r2, r3, #5
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	4413      	add	r3, r2
 8003a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	0151      	lsls	r1, r2, #5
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	440a      	add	r2, r1
 8003a94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a98:	f043 0302 	orr.w	r3, r3, #2
 8003a9c:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003a9e:	e35f      	b.n	8004160 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 0320 	and.w	r3, r3, #32
 8003ab2:	2b20      	cmp	r3, #32
 8003ab4:	d13e      	bne.n	8003b34 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	015a      	lsls	r2, r3, #5
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	4413      	add	r3, r2
 8003abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	2320      	movs	r3, #32
 8003ac6:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	212c      	movs	r1, #44	; 0x2c
 8003ace:	fb01 f303 	mul.w	r3, r1, r3
 8003ad2:	4413      	add	r3, r2
 8003ad4:	333d      	adds	r3, #61	; 0x3d
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	f040 8341 	bne.w	8004160 <HCD_HC_OUT_IRQHandler+0x724>
      hhcd->hc[ch_num].do_ping = 0U;
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	212c      	movs	r1, #44	; 0x2c
 8003ae4:	fb01 f303 	mul.w	r3, r1, r3
 8003ae8:	4413      	add	r3, r2
 8003aea:	333d      	adds	r3, #61	; 0x3d
 8003aec:	2200      	movs	r2, #0
 8003aee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	212c      	movs	r1, #44	; 0x2c
 8003af6:	fb01 f303 	mul.w	r3, r1, r3
 8003afa:	4413      	add	r3, r2
 8003afc:	3360      	adds	r3, #96	; 0x60
 8003afe:	2202      	movs	r2, #2
 8003b00:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	0151      	lsls	r1, r2, #5
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	440a      	add	r2, r1
 8003b18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b1c:	f043 0302 	orr.w	r3, r3, #2
 8003b20:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f003 fabc 	bl	80070aa <USB_HC_Halt>
}
 8003b32:	e315      	b.n	8004160 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b4a:	d122      	bne.n	8003b92 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	0151      	lsls	r1, r2, #5
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	440a      	add	r2, r1
 8003b62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b66:	f043 0302 	orr.w	r3, r3, #2
 8003b6a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	4611      	mov	r1, r2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f003 fa97 	bl	80070aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b88:	461a      	mov	r2, r3
 8003b8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b8e:	6093      	str	r3, [r2, #8]
}
 8003b90:	e2e6      	b.n	8004160 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d150      	bne.n	8003c4a <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	212c      	movs	r1, #44	; 0x2c
 8003bae:	fb01 f303 	mul.w	r3, r1, r3
 8003bb2:	4413      	add	r3, r2
 8003bb4:	335c      	adds	r3, #92	; 0x5c
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	015a      	lsls	r2, r3, #5
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bcc:	2b40      	cmp	r3, #64	; 0x40
 8003bce:	d111      	bne.n	8003bf4 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	212c      	movs	r1, #44	; 0x2c
 8003bd6:	fb01 f303 	mul.w	r3, r1, r3
 8003bda:	4413      	add	r3, r2
 8003bdc:	333d      	adds	r3, #61	; 0x3d
 8003bde:	2201      	movs	r2, #1
 8003be0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bee:	461a      	mov	r2, r3
 8003bf0:	2340      	movs	r3, #64	; 0x40
 8003bf2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	0151      	lsls	r1, r2, #5
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	440a      	add	r2, r1
 8003c0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c0e:	f043 0302 	orr.w	r3, r3, #2
 8003c12:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	4611      	mov	r1, r2
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f003 fa43 	bl	80070aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c30:	461a      	mov	r2, r3
 8003c32:	2301      	movs	r3, #1
 8003c34:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	212c      	movs	r1, #44	; 0x2c
 8003c3c:	fb01 f303 	mul.w	r3, r1, r3
 8003c40:	4413      	add	r3, r2
 8003c42:	3361      	adds	r3, #97	; 0x61
 8003c44:	2201      	movs	r2, #1
 8003c46:	701a      	strb	r2, [r3, #0]
}
 8003c48:	e28a      	b.n	8004160 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	015a      	lsls	r2, r3, #5
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5c:	2b40      	cmp	r3, #64	; 0x40
 8003c5e:	d13c      	bne.n	8003cda <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	212c      	movs	r1, #44	; 0x2c
 8003c66:	fb01 f303 	mul.w	r3, r1, r3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	3361      	adds	r3, #97	; 0x61
 8003c6e:	2204      	movs	r2, #4
 8003c70:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	212c      	movs	r1, #44	; 0x2c
 8003c78:	fb01 f303 	mul.w	r3, r1, r3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	333d      	adds	r3, #61	; 0x3d
 8003c80:	2201      	movs	r2, #1
 8003c82:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	212c      	movs	r1, #44	; 0x2c
 8003c8a:	fb01 f303 	mul.w	r3, r1, r3
 8003c8e:	4413      	add	r3, r2
 8003c90:	335c      	adds	r3, #92	; 0x5c
 8003c92:	2200      	movs	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	015a      	lsls	r2, r3, #5
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	0151      	lsls	r1, r2, #5
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	440a      	add	r2, r1
 8003cac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cb0:	f043 0302 	orr.w	r3, r3, #2
 8003cb4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	b2d2      	uxtb	r2, r2
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f003 f9f2 	bl	80070aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	015a      	lsls	r2, r3, #5
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	2340      	movs	r3, #64	; 0x40
 8003cd6:	6093      	str	r3, [r2, #8]
}
 8003cd8:	e242      	b.n	8004160 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	015a      	lsls	r2, r3, #5
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 0308 	and.w	r3, r3, #8
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d12a      	bne.n	8003d46 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	2308      	movs	r3, #8
 8003d00:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	015a      	lsls	r2, r3, #5
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	4413      	add	r3, r2
 8003d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	0151      	lsls	r1, r2, #5
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	440a      	add	r2, r1
 8003d18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d1c:	f043 0302 	orr.w	r3, r3, #2
 8003d20:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	4611      	mov	r1, r2
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f003 f9bc 	bl	80070aa <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	212c      	movs	r1, #44	; 0x2c
 8003d38:	fb01 f303 	mul.w	r3, r1, r3
 8003d3c:	4413      	add	r3, r2
 8003d3e:	3361      	adds	r3, #97	; 0x61
 8003d40:	2205      	movs	r2, #5
 8003d42:	701a      	strb	r2, [r3, #0]
}
 8003d44:	e20c      	b.n	8004160 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 0310 	and.w	r3, r3, #16
 8003d58:	2b10      	cmp	r3, #16
 8003d5a:	d133      	bne.n	8003dc4 <HCD_HC_OUT_IRQHandler+0x388>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	212c      	movs	r1, #44	; 0x2c
 8003d62:	fb01 f303 	mul.w	r3, r1, r3
 8003d66:	4413      	add	r3, r2
 8003d68:	335c      	adds	r3, #92	; 0x5c
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	212c      	movs	r1, #44	; 0x2c
 8003d74:	fb01 f303 	mul.w	r3, r1, r3
 8003d78:	4413      	add	r3, r2
 8003d7a:	3361      	adds	r3, #97	; 0x61
 8003d7c:	2203      	movs	r2, #3
 8003d7e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	015a      	lsls	r2, r3, #5
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	0151      	lsls	r1, r2, #5
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	440a      	add	r2, r1
 8003d96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d9a:	f043 0302 	orr.w	r3, r3, #2
 8003d9e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	4611      	mov	r1, r2
 8003daa:	4618      	mov	r0, r3
 8003dac:	f003 f97d 	bl	80070aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	015a      	lsls	r2, r3, #5
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	4413      	add	r3, r2
 8003db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	2310      	movs	r3, #16
 8003dc0:	6093      	str	r3, [r2, #8]
}
 8003dc2:	e1cd      	b.n	8004160 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd6:	2b80      	cmp	r3, #128	; 0x80
 8003dd8:	d12a      	bne.n	8003e30 <HCD_HC_OUT_IRQHandler+0x3f4>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	212c      	movs	r1, #44	; 0x2c
 8003de0:	fb01 f303 	mul.w	r3, r1, r3
 8003de4:	4413      	add	r3, r2
 8003de6:	3361      	adds	r3, #97	; 0x61
 8003de8:	2206      	movs	r2, #6
 8003dea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	0151      	lsls	r1, r2, #5
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	440a      	add	r2, r1
 8003e02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e06:	f043 0302 	orr.w	r3, r3, #2
 8003e0a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	b2d2      	uxtb	r2, r2
 8003e14:	4611      	mov	r1, r2
 8003e16:	4618      	mov	r0, r3
 8003e18:	f003 f947 	bl	80070aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	015a      	lsls	r2, r3, #5
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e28:	461a      	mov	r2, r3
 8003e2a:	2380      	movs	r3, #128	; 0x80
 8003e2c:	6093      	str	r3, [r2, #8]
}
 8003e2e:	e197      	b.n	8004160 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e46:	d134      	bne.n	8003eb2 <HCD_HC_OUT_IRQHandler+0x476>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	0151      	lsls	r1, r2, #5
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	440a      	add	r2, r1
 8003e5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e62:	f043 0302 	orr.w	r3, r3, #2
 8003e66:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	4611      	mov	r1, r2
 8003e72:	4618      	mov	r0, r3
 8003e74:	f003 f919 	bl	80070aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e84:	461a      	mov	r2, r3
 8003e86:	2310      	movs	r3, #16
 8003e88:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e96:	461a      	mov	r2, r3
 8003e98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	212c      	movs	r1, #44	; 0x2c
 8003ea4:	fb01 f303 	mul.w	r3, r1, r3
 8003ea8:	4413      	add	r3, r2
 8003eaa:	3361      	adds	r3, #97	; 0x61
 8003eac:	2208      	movs	r2, #8
 8003eae:	701a      	strb	r2, [r3, #0]
}
 8003eb0:	e156      	b.n	8004160 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	f040 814b 	bne.w	8004160 <HCD_HC_OUT_IRQHandler+0x724>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	0151      	lsls	r1, r2, #5
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	440a      	add	r2, r1
 8003ee0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ee4:	f023 0302 	bic.w	r3, r3, #2
 8003ee8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	212c      	movs	r1, #44	; 0x2c
 8003ef0:	fb01 f303 	mul.w	r3, r1, r3
 8003ef4:	4413      	add	r3, r2
 8003ef6:	3361      	adds	r3, #97	; 0x61
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d179      	bne.n	8003ff2 <HCD_HC_OUT_IRQHandler+0x5b6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	212c      	movs	r1, #44	; 0x2c
 8003f04:	fb01 f303 	mul.w	r3, r1, r3
 8003f08:	4413      	add	r3, r2
 8003f0a:	3360      	adds	r3, #96	; 0x60
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	212c      	movs	r1, #44	; 0x2c
 8003f16:	fb01 f303 	mul.w	r3, r1, r3
 8003f1a:	4413      	add	r3, r2
 8003f1c:	333f      	adds	r3, #63	; 0x3f
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d00a      	beq.n	8003f3a <HCD_HC_OUT_IRQHandler+0x4fe>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	212c      	movs	r1, #44	; 0x2c
 8003f2a:	fb01 f303 	mul.w	r3, r1, r3
 8003f2e:	4413      	add	r3, r2
 8003f30:	333f      	adds	r3, #63	; 0x3f
 8003f32:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003f34:	2b03      	cmp	r3, #3
 8003f36:	f040 80fc 	bne.w	8004132 <HCD_HC_OUT_IRQHandler+0x6f6>
        if (hhcd->Init.dma_enable == 1U)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d142      	bne.n	8003fc8 <HCD_HC_OUT_IRQHandler+0x58c>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	212c      	movs	r1, #44	; 0x2c
 8003f48:	fb01 f303 	mul.w	r3, r1, r3
 8003f4c:	4413      	add	r3, r2
 8003f4e:	334c      	adds	r3, #76	; 0x4c
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 80ed 	beq.w	8004132 <HCD_HC_OUT_IRQHandler+0x6f6>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	212c      	movs	r1, #44	; 0x2c
 8003f5e:	fb01 f303 	mul.w	r3, r1, r3
 8003f62:	4413      	add	r3, r2
 8003f64:	334c      	adds	r3, #76	; 0x4c
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	202c      	movs	r0, #44	; 0x2c
 8003f6e:	fb00 f202 	mul.w	r2, r0, r2
 8003f72:	440a      	add	r2, r1
 8003f74:	3240      	adds	r2, #64	; 0x40
 8003f76:	8812      	ldrh	r2, [r2, #0]
 8003f78:	4413      	add	r3, r2
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	202c      	movs	r0, #44	; 0x2c
 8003f82:	fb00 f202 	mul.w	r2, r0, r2
 8003f86:	440a      	add	r2, r1
 8003f88:	3240      	adds	r2, #64	; 0x40
 8003f8a:	8812      	ldrh	r2, [r2, #0]
 8003f8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 80ca 	beq.w	8004132 <HCD_HC_OUT_IRQHandler+0x6f6>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	212c      	movs	r1, #44	; 0x2c
 8003fa4:	fb01 f303 	mul.w	r3, r1, r3
 8003fa8:	4413      	add	r3, r2
 8003faa:	3355      	adds	r3, #85	; 0x55
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	f083 0301 	eor.w	r3, r3, #1
 8003fb2:	b2d8      	uxtb	r0, r3
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	212c      	movs	r1, #44	; 0x2c
 8003fba:	fb01 f303 	mul.w	r3, r1, r3
 8003fbe:	4413      	add	r3, r2
 8003fc0:	3355      	adds	r3, #85	; 0x55
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	701a      	strb	r2, [r3, #0]
 8003fc6:	e0b4      	b.n	8004132 <HCD_HC_OUT_IRQHandler+0x6f6>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	212c      	movs	r1, #44	; 0x2c
 8003fce:	fb01 f303 	mul.w	r3, r1, r3
 8003fd2:	4413      	add	r3, r2
 8003fd4:	3355      	adds	r3, #85	; 0x55
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	f083 0301 	eor.w	r3, r3, #1
 8003fdc:	b2d8      	uxtb	r0, r3
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	212c      	movs	r1, #44	; 0x2c
 8003fe4:	fb01 f303 	mul.w	r3, r1, r3
 8003fe8:	4413      	add	r3, r2
 8003fea:	3355      	adds	r3, #85	; 0x55
 8003fec:	4602      	mov	r2, r0
 8003fee:	701a      	strb	r2, [r3, #0]
 8003ff0:	e09f      	b.n	8004132 <HCD_HC_OUT_IRQHandler+0x6f6>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	212c      	movs	r1, #44	; 0x2c
 8003ff8:	fb01 f303 	mul.w	r3, r1, r3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	3361      	adds	r3, #97	; 0x61
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b03      	cmp	r3, #3
 8004004:	d109      	bne.n	800401a <HCD_HC_OUT_IRQHandler+0x5de>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	212c      	movs	r1, #44	; 0x2c
 800400c:	fb01 f303 	mul.w	r3, r1, r3
 8004010:	4413      	add	r3, r2
 8004012:	3360      	adds	r3, #96	; 0x60
 8004014:	2202      	movs	r2, #2
 8004016:	701a      	strb	r2, [r3, #0]
 8004018:	e08b      	b.n	8004132 <HCD_HC_OUT_IRQHandler+0x6f6>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	212c      	movs	r1, #44	; 0x2c
 8004020:	fb01 f303 	mul.w	r3, r1, r3
 8004024:	4413      	add	r3, r2
 8004026:	3361      	adds	r3, #97	; 0x61
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	2b04      	cmp	r3, #4
 800402c:	d109      	bne.n	8004042 <HCD_HC_OUT_IRQHandler+0x606>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	212c      	movs	r1, #44	; 0x2c
 8004034:	fb01 f303 	mul.w	r3, r1, r3
 8004038:	4413      	add	r3, r2
 800403a:	3360      	adds	r3, #96	; 0x60
 800403c:	2202      	movs	r2, #2
 800403e:	701a      	strb	r2, [r3, #0]
 8004040:	e077      	b.n	8004132 <HCD_HC_OUT_IRQHandler+0x6f6>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	212c      	movs	r1, #44	; 0x2c
 8004048:	fb01 f303 	mul.w	r3, r1, r3
 800404c:	4413      	add	r3, r2
 800404e:	3361      	adds	r3, #97	; 0x61
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	2b05      	cmp	r3, #5
 8004054:	d109      	bne.n	800406a <HCD_HC_OUT_IRQHandler+0x62e>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	212c      	movs	r1, #44	; 0x2c
 800405c:	fb01 f303 	mul.w	r3, r1, r3
 8004060:	4413      	add	r3, r2
 8004062:	3360      	adds	r3, #96	; 0x60
 8004064:	2205      	movs	r2, #5
 8004066:	701a      	strb	r2, [r3, #0]
 8004068:	e063      	b.n	8004132 <HCD_HC_OUT_IRQHandler+0x6f6>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	212c      	movs	r1, #44	; 0x2c
 8004070:	fb01 f303 	mul.w	r3, r1, r3
 8004074:	4413      	add	r3, r2
 8004076:	3361      	adds	r3, #97	; 0x61
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	2b06      	cmp	r3, #6
 800407c:	d009      	beq.n	8004092 <HCD_HC_OUT_IRQHandler+0x656>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	212c      	movs	r1, #44	; 0x2c
 8004084:	fb01 f303 	mul.w	r3, r1, r3
 8004088:	4413      	add	r3, r2
 800408a:	3361      	adds	r3, #97	; 0x61
 800408c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800408e:	2b08      	cmp	r3, #8
 8004090:	d14f      	bne.n	8004132 <HCD_HC_OUT_IRQHandler+0x6f6>
      hhcd->hc[ch_num].ErrCnt++;
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	212c      	movs	r1, #44	; 0x2c
 8004098:	fb01 f303 	mul.w	r3, r1, r3
 800409c:	4413      	add	r3, r2
 800409e:	335c      	adds	r3, #92	; 0x5c
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	202c      	movs	r0, #44	; 0x2c
 80040aa:	fb00 f303 	mul.w	r3, r0, r3
 80040ae:	440b      	add	r3, r1
 80040b0:	335c      	adds	r3, #92	; 0x5c
 80040b2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	212c      	movs	r1, #44	; 0x2c
 80040ba:	fb01 f303 	mul.w	r3, r1, r3
 80040be:	4413      	add	r3, r2
 80040c0:	335c      	adds	r3, #92	; 0x5c
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d912      	bls.n	80040ee <HCD_HC_OUT_IRQHandler+0x6b2>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	212c      	movs	r1, #44	; 0x2c
 80040ce:	fb01 f303 	mul.w	r3, r1, r3
 80040d2:	4413      	add	r3, r2
 80040d4:	335c      	adds	r3, #92	; 0x5c
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	212c      	movs	r1, #44	; 0x2c
 80040e0:	fb01 f303 	mul.w	r3, r1, r3
 80040e4:	4413      	add	r3, r2
 80040e6:	3360      	adds	r3, #96	; 0x60
 80040e8:	2204      	movs	r2, #4
 80040ea:	701a      	strb	r2, [r3, #0]
 80040ec:	e021      	b.n	8004132 <HCD_HC_OUT_IRQHandler+0x6f6>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	212c      	movs	r1, #44	; 0x2c
 80040f4:	fb01 f303 	mul.w	r3, r1, r3
 80040f8:	4413      	add	r3, r2
 80040fa:	3360      	adds	r3, #96	; 0x60
 80040fc:	2202      	movs	r2, #2
 80040fe:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	4413      	add	r3, r2
 8004108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004116:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800411e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	4413      	add	r3, r2
 8004128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412c:	461a      	mov	r2, r3
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	015a      	lsls	r2, r3, #5
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	4413      	add	r3, r2
 800413a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800413e:	461a      	mov	r2, r3
 8004140:	2302      	movs	r3, #2
 8004142:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	b2d9      	uxtb	r1, r3
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	202c      	movs	r0, #44	; 0x2c
 800414e:	fb00 f303 	mul.w	r3, r0, r3
 8004152:	4413      	add	r3, r2
 8004154:	3360      	adds	r3, #96	; 0x60
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	461a      	mov	r2, r3
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f006 fc9c 	bl	800aa98 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004160:	bf00      	nop
 8004162:	3720      	adds	r7, #32
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08a      	sub	sp, #40	; 0x28
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	f003 030f 	and.w	r3, r3, #15
 8004188:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	0c5b      	lsrs	r3, r3, #17
 800418e:	f003 030f 	and.w	r3, r3, #15
 8004192:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	091b      	lsrs	r3, r3, #4
 8004198:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800419c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d004      	beq.n	80041ae <HCD_RXQLVL_IRQHandler+0x46>
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	2b05      	cmp	r3, #5
 80041a8:	f000 80a9 	beq.w	80042fe <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80041ac:	e0aa      	b.n	8004304 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 80a6 	beq.w	8004302 <HCD_RXQLVL_IRQHandler+0x19a>
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	212c      	movs	r1, #44	; 0x2c
 80041bc:	fb01 f303 	mul.w	r3, r1, r3
 80041c0:	4413      	add	r3, r2
 80041c2:	3344      	adds	r3, #68	; 0x44
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f000 809b 	beq.w	8004302 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	212c      	movs	r1, #44	; 0x2c
 80041d2:	fb01 f303 	mul.w	r3, r1, r3
 80041d6:	4413      	add	r3, r2
 80041d8:	3350      	adds	r3, #80	; 0x50
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	441a      	add	r2, r3
 80041e0:	6879      	ldr	r1, [r7, #4]
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	202c      	movs	r0, #44	; 0x2c
 80041e6:	fb00 f303 	mul.w	r3, r0, r3
 80041ea:	440b      	add	r3, r1
 80041ec:	334c      	adds	r3, #76	; 0x4c
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d87a      	bhi.n	80042ea <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6818      	ldr	r0, [r3, #0]
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	212c      	movs	r1, #44	; 0x2c
 80041fe:	fb01 f303 	mul.w	r3, r1, r3
 8004202:	4413      	add	r3, r2
 8004204:	3344      	adds	r3, #68	; 0x44
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	b292      	uxth	r2, r2
 800420c:	4619      	mov	r1, r3
 800420e:	f002 fb88 	bl	8006922 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	212c      	movs	r1, #44	; 0x2c
 8004218:	fb01 f303 	mul.w	r3, r1, r3
 800421c:	4413      	add	r3, r2
 800421e:	3344      	adds	r3, #68	; 0x44
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	441a      	add	r2, r3
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	202c      	movs	r0, #44	; 0x2c
 800422c:	fb00 f303 	mul.w	r3, r0, r3
 8004230:	440b      	add	r3, r1
 8004232:	3344      	adds	r3, #68	; 0x44
 8004234:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	212c      	movs	r1, #44	; 0x2c
 800423c:	fb01 f303 	mul.w	r3, r1, r3
 8004240:	4413      	add	r3, r2
 8004242:	3350      	adds	r3, #80	; 0x50
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	441a      	add	r2, r3
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	202c      	movs	r0, #44	; 0x2c
 8004250:	fb00 f303 	mul.w	r3, r0, r3
 8004254:	440b      	add	r3, r1
 8004256:	3350      	adds	r3, #80	; 0x50
 8004258:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	4413      	add	r3, r2
 8004262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	0cdb      	lsrs	r3, r3, #19
 800426a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800426e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	212c      	movs	r1, #44	; 0x2c
 8004276:	fb01 f303 	mul.w	r3, r1, r3
 800427a:	4413      	add	r3, r2
 800427c:	3340      	adds	r3, #64	; 0x40
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	461a      	mov	r2, r3
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	4293      	cmp	r3, r2
 8004286:	d13c      	bne.n	8004302 <HCD_RXQLVL_IRQHandler+0x19a>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d039      	beq.n	8004302 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	015a      	lsls	r2, r3, #5
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	4413      	add	r3, r2
 8004296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80042a4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042ac:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ba:	461a      	mov	r2, r3
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	212c      	movs	r1, #44	; 0x2c
 80042c6:	fb01 f303 	mul.w	r3, r1, r3
 80042ca:	4413      	add	r3, r2
 80042cc:	3354      	adds	r3, #84	; 0x54
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	f083 0301 	eor.w	r3, r3, #1
 80042d4:	b2d8      	uxtb	r0, r3
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	212c      	movs	r1, #44	; 0x2c
 80042dc:	fb01 f303 	mul.w	r3, r1, r3
 80042e0:	4413      	add	r3, r2
 80042e2:	3354      	adds	r3, #84	; 0x54
 80042e4:	4602      	mov	r2, r0
 80042e6:	701a      	strb	r2, [r3, #0]
      break;
 80042e8:	e00b      	b.n	8004302 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	212c      	movs	r1, #44	; 0x2c
 80042f0:	fb01 f303 	mul.w	r3, r1, r3
 80042f4:	4413      	add	r3, r2
 80042f6:	3360      	adds	r3, #96	; 0x60
 80042f8:	2204      	movs	r2, #4
 80042fa:	701a      	strb	r2, [r3, #0]
      break;
 80042fc:	e001      	b.n	8004302 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80042fe:	bf00      	nop
 8004300:	e000      	b.n	8004304 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004302:	bf00      	nop
  }
}
 8004304:	bf00      	nop
 8004306:	3728      	adds	r7, #40	; 0x28
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004338:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b02      	cmp	r3, #2
 8004342:	d10b      	bne.n	800435c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b01      	cmp	r3, #1
 800434c:	d102      	bne.n	8004354 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f006 fb86 	bl	800aa60 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f043 0302 	orr.w	r3, r3, #2
 800435a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	2b08      	cmp	r3, #8
 8004364:	d132      	bne.n	80043cc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f043 0308 	orr.w	r3, r3, #8
 800436c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f003 0304 	and.w	r3, r3, #4
 8004374:	2b04      	cmp	r3, #4
 8004376:	d126      	bne.n	80043c6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	2b02      	cmp	r3, #2
 800437e:	d113      	bne.n	80043a8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004386:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800438a:	d106      	bne.n	800439a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2102      	movs	r1, #2
 8004392:	4618      	mov	r0, r3
 8004394:	f002 fbc2 	bl	8006b1c <USB_InitFSLSPClkSel>
 8004398:	e011      	b.n	80043be <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2101      	movs	r1, #1
 80043a0:	4618      	mov	r0, r3
 80043a2:	f002 fbbb 	bl	8006b1c <USB_InitFSLSPClkSel>
 80043a6:	e00a      	b.n	80043be <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d106      	bne.n	80043be <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043b6:	461a      	mov	r2, r3
 80043b8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80043bc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f006 fb78 	bl	800aab4 <HAL_HCD_PortEnabled_Callback>
 80043c4:	e002      	b.n	80043cc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f006 fb82 	bl	800aad0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f003 0320 	and.w	r3, r3, #32
 80043d2:	2b20      	cmp	r3, #32
 80043d4:	d103      	bne.n	80043de <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f043 0320 	orr.w	r3, r3, #32
 80043dc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80043e4:	461a      	mov	r2, r3
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	6013      	str	r3, [r2, #0]
}
 80043ea:	bf00      	nop
 80043ec:	3718      	adds	r7, #24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
	...

080043f4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043f8:	4b05      	ldr	r3, [pc, #20]	; (8004410 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a04      	ldr	r2, [pc, #16]	; (8004410 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004402:	6013      	str	r3, [r2, #0]
}
 8004404:	bf00      	nop
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	40007000 	.word	0x40007000

08004414 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004418:	4b04      	ldr	r3, [pc, #16]	; (800442c <HAL_PWREx_GetVoltageRange+0x18>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004420:	4618      	mov	r0, r3
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	40007000 	.word	0x40007000

08004430 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800443e:	d130      	bne.n	80044a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004440:	4b23      	ldr	r3, [pc, #140]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800444c:	d038      	beq.n	80044c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800444e:	4b20      	ldr	r3, [pc, #128]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004456:	4a1e      	ldr	r2, [pc, #120]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004458:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800445c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800445e:	4b1d      	ldr	r3, [pc, #116]	; (80044d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2232      	movs	r2, #50	; 0x32
 8004464:	fb02 f303 	mul.w	r3, r2, r3
 8004468:	4a1b      	ldr	r2, [pc, #108]	; (80044d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	0c9b      	lsrs	r3, r3, #18
 8004470:	3301      	adds	r3, #1
 8004472:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004474:	e002      	b.n	800447c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	3b01      	subs	r3, #1
 800447a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800447c:	4b14      	ldr	r3, [pc, #80]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004488:	d102      	bne.n	8004490 <HAL_PWREx_ControlVoltageScaling+0x60>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1f2      	bne.n	8004476 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004490:	4b0f      	ldr	r3, [pc, #60]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800449c:	d110      	bne.n	80044c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e00f      	b.n	80044c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80044a2:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ae:	d007      	beq.n	80044c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044b0:	4b07      	ldr	r3, [pc, #28]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044b8:	4a05      	ldr	r2, [pc, #20]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	40007000 	.word	0x40007000
 80044d4:	20000000 	.word	0x20000000
 80044d8:	431bde83 	.word	0x431bde83

080044dc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80044e0:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	4a04      	ldr	r2, [pc, #16]	; (80044f8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80044e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044ea:	6053      	str	r3, [r2, #4]
}
 80044ec:	bf00      	nop
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	40007000 	.word	0x40007000

080044fc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004500:	4b05      	ldr	r3, [pc, #20]	; (8004518 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	4a04      	ldr	r2, [pc, #16]	; (8004518 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800450a:	6053      	str	r3, [r2, #4]
}
 800450c:	bf00      	nop
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40007000 	.word	0x40007000

0800451c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b088      	sub	sp, #32
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d102      	bne.n	8004530 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	f000 bc16 	b.w	8004d5c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004530:	4ba0      	ldr	r3, [pc, #640]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f003 030c 	and.w	r3, r3, #12
 8004538:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800453a:	4b9e      	ldr	r3, [pc, #632]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f003 0303 	and.w	r3, r3, #3
 8004542:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0310 	and.w	r3, r3, #16
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 80e4 	beq.w	800471a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d007      	beq.n	8004568 <HAL_RCC_OscConfig+0x4c>
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	2b0c      	cmp	r3, #12
 800455c:	f040 808b 	bne.w	8004676 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	2b01      	cmp	r3, #1
 8004564:	f040 8087 	bne.w	8004676 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004568:	4b92      	ldr	r3, [pc, #584]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d005      	beq.n	8004580 <HAL_RCC_OscConfig+0x64>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e3ed      	b.n	8004d5c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a1a      	ldr	r2, [r3, #32]
 8004584:	4b8b      	ldr	r3, [pc, #556]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b00      	cmp	r3, #0
 800458e:	d004      	beq.n	800459a <HAL_RCC_OscConfig+0x7e>
 8004590:	4b88      	ldr	r3, [pc, #544]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004598:	e005      	b.n	80045a6 <HAL_RCC_OscConfig+0x8a>
 800459a:	4b86      	ldr	r3, [pc, #536]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 800459c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045a0:	091b      	lsrs	r3, r3, #4
 80045a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d223      	bcs.n	80045f2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 fd80 	bl	80050b4 <RCC_SetFlashLatencyFromMSIRange>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e3ce      	b.n	8004d5c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045be:	4b7d      	ldr	r3, [pc, #500]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a7c      	ldr	r2, [pc, #496]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 80045c4:	f043 0308 	orr.w	r3, r3, #8
 80045c8:	6013      	str	r3, [r2, #0]
 80045ca:	4b7a      	ldr	r3, [pc, #488]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	4977      	ldr	r1, [pc, #476]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045dc:	4b75      	ldr	r3, [pc, #468]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	021b      	lsls	r3, r3, #8
 80045ea:	4972      	ldr	r1, [pc, #456]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	604b      	str	r3, [r1, #4]
 80045f0:	e025      	b.n	800463e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045f2:	4b70      	ldr	r3, [pc, #448]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a6f      	ldr	r2, [pc, #444]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 80045f8:	f043 0308 	orr.w	r3, r3, #8
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	4b6d      	ldr	r3, [pc, #436]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	496a      	ldr	r1, [pc, #424]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 800460c:	4313      	orrs	r3, r2
 800460e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004610:	4b68      	ldr	r3, [pc, #416]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	021b      	lsls	r3, r3, #8
 800461e:	4965      	ldr	r1, [pc, #404]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 8004620:	4313      	orrs	r3, r2
 8004622:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d109      	bne.n	800463e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	4618      	mov	r0, r3
 8004630:	f000 fd40 	bl	80050b4 <RCC_SetFlashLatencyFromMSIRange>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e38e      	b.n	8004d5c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800463e:	f000 fc75 	bl	8004f2c <HAL_RCC_GetSysClockFreq>
 8004642:	4602      	mov	r2, r0
 8004644:	4b5b      	ldr	r3, [pc, #364]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	091b      	lsrs	r3, r3, #4
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	495a      	ldr	r1, [pc, #360]	; (80047b8 <HAL_RCC_OscConfig+0x29c>)
 8004650:	5ccb      	ldrb	r3, [r1, r3]
 8004652:	f003 031f 	and.w	r3, r3, #31
 8004656:	fa22 f303 	lsr.w	r3, r2, r3
 800465a:	4a58      	ldr	r2, [pc, #352]	; (80047bc <HAL_RCC_OscConfig+0x2a0>)
 800465c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800465e:	4b58      	ldr	r3, [pc, #352]	; (80047c0 <HAL_RCC_OscConfig+0x2a4>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	f7fc fc44 	bl	8000ef0 <HAL_InitTick>
 8004668:	4603      	mov	r3, r0
 800466a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800466c:	7bfb      	ldrb	r3, [r7, #15]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d052      	beq.n	8004718 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004672:	7bfb      	ldrb	r3, [r7, #15]
 8004674:	e372      	b.n	8004d5c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d032      	beq.n	80046e4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800467e:	4b4d      	ldr	r3, [pc, #308]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a4c      	ldr	r2, [pc, #304]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 8004684:	f043 0301 	orr.w	r3, r3, #1
 8004688:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800468a:	f7fc fc81 	bl	8000f90 <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004692:	f7fc fc7d 	bl	8000f90 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e35b      	b.n	8004d5c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046a4:	4b43      	ldr	r3, [pc, #268]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0f0      	beq.n	8004692 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046b0:	4b40      	ldr	r3, [pc, #256]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a3f      	ldr	r2, [pc, #252]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 80046b6:	f043 0308 	orr.w	r3, r3, #8
 80046ba:	6013      	str	r3, [r2, #0]
 80046bc:	4b3d      	ldr	r3, [pc, #244]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	493a      	ldr	r1, [pc, #232]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046ce:	4b39      	ldr	r3, [pc, #228]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	021b      	lsls	r3, r3, #8
 80046dc:	4935      	ldr	r1, [pc, #212]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	604b      	str	r3, [r1, #4]
 80046e2:	e01a      	b.n	800471a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046e4:	4b33      	ldr	r3, [pc, #204]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a32      	ldr	r2, [pc, #200]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 80046ea:	f023 0301 	bic.w	r3, r3, #1
 80046ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046f0:	f7fc fc4e 	bl	8000f90 <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046f8:	f7fc fc4a 	bl	8000f90 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e328      	b.n	8004d5c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800470a:	4b2a      	ldr	r3, [pc, #168]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1f0      	bne.n	80046f8 <HAL_RCC_OscConfig+0x1dc>
 8004716:	e000      	b.n	800471a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004718:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d073      	beq.n	800480e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	2b08      	cmp	r3, #8
 800472a:	d005      	beq.n	8004738 <HAL_RCC_OscConfig+0x21c>
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	2b0c      	cmp	r3, #12
 8004730:	d10e      	bne.n	8004750 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	2b03      	cmp	r3, #3
 8004736:	d10b      	bne.n	8004750 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004738:	4b1e      	ldr	r3, [pc, #120]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d063      	beq.n	800480c <HAL_RCC_OscConfig+0x2f0>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d15f      	bne.n	800480c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e305      	b.n	8004d5c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004758:	d106      	bne.n	8004768 <HAL_RCC_OscConfig+0x24c>
 800475a:	4b16      	ldr	r3, [pc, #88]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a15      	ldr	r2, [pc, #84]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 8004760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	e01d      	b.n	80047a4 <HAL_RCC_OscConfig+0x288>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004770:	d10c      	bne.n	800478c <HAL_RCC_OscConfig+0x270>
 8004772:	4b10      	ldr	r3, [pc, #64]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a0f      	ldr	r2, [pc, #60]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 8004778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	4b0d      	ldr	r3, [pc, #52]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a0c      	ldr	r2, [pc, #48]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 8004784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	e00b      	b.n	80047a4 <HAL_RCC_OscConfig+0x288>
 800478c:	4b09      	ldr	r3, [pc, #36]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a08      	ldr	r2, [pc, #32]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 8004792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	4b06      	ldr	r3, [pc, #24]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a05      	ldr	r2, [pc, #20]	; (80047b4 <HAL_RCC_OscConfig+0x298>)
 800479e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d01b      	beq.n	80047e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ac:	f7fc fbf0 	bl	8000f90 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047b2:	e010      	b.n	80047d6 <HAL_RCC_OscConfig+0x2ba>
 80047b4:	40021000 	.word	0x40021000
 80047b8:	0800be10 	.word	0x0800be10
 80047bc:	20000000 	.word	0x20000000
 80047c0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047c4:	f7fc fbe4 	bl	8000f90 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b64      	cmp	r3, #100	; 0x64
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e2c2      	b.n	8004d5c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047d6:	4baf      	ldr	r3, [pc, #700]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0f0      	beq.n	80047c4 <HAL_RCC_OscConfig+0x2a8>
 80047e2:	e014      	b.n	800480e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e4:	f7fc fbd4 	bl	8000f90 <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047ec:	f7fc fbd0 	bl	8000f90 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b64      	cmp	r3, #100	; 0x64
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e2ae      	b.n	8004d5c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047fe:	4ba5      	ldr	r3, [pc, #660]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f0      	bne.n	80047ec <HAL_RCC_OscConfig+0x2d0>
 800480a:	e000      	b.n	800480e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800480c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d060      	beq.n	80048dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	2b04      	cmp	r3, #4
 800481e:	d005      	beq.n	800482c <HAL_RCC_OscConfig+0x310>
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	2b0c      	cmp	r3, #12
 8004824:	d119      	bne.n	800485a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2b02      	cmp	r3, #2
 800482a:	d116      	bne.n	800485a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800482c:	4b99      	ldr	r3, [pc, #612]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004834:	2b00      	cmp	r3, #0
 8004836:	d005      	beq.n	8004844 <HAL_RCC_OscConfig+0x328>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e28b      	b.n	8004d5c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004844:	4b93      	ldr	r3, [pc, #588]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	061b      	lsls	r3, r3, #24
 8004852:	4990      	ldr	r1, [pc, #576]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 8004854:	4313      	orrs	r3, r2
 8004856:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004858:	e040      	b.n	80048dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d023      	beq.n	80048aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004862:	4b8c      	ldr	r3, [pc, #560]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a8b      	ldr	r2, [pc, #556]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 8004868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800486c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486e:	f7fc fb8f 	bl	8000f90 <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004876:	f7fc fb8b 	bl	8000f90 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e269      	b.n	8004d5c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004888:	4b82      	ldr	r3, [pc, #520]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0f0      	beq.n	8004876 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004894:	4b7f      	ldr	r3, [pc, #508]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	061b      	lsls	r3, r3, #24
 80048a2:	497c      	ldr	r1, [pc, #496]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	604b      	str	r3, [r1, #4]
 80048a8:	e018      	b.n	80048dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048aa:	4b7a      	ldr	r3, [pc, #488]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a79      	ldr	r2, [pc, #484]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 80048b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b6:	f7fc fb6b 	bl	8000f90 <HAL_GetTick>
 80048ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048bc:	e008      	b.n	80048d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048be:	f7fc fb67 	bl	8000f90 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e245      	b.n	8004d5c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048d0:	4b70      	ldr	r3, [pc, #448]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1f0      	bne.n	80048be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0308 	and.w	r3, r3, #8
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d03c      	beq.n	8004962 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d01c      	beq.n	800492a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048f0:	4b68      	ldr	r3, [pc, #416]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 80048f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048f6:	4a67      	ldr	r2, [pc, #412]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 80048f8:	f043 0301 	orr.w	r3, r3, #1
 80048fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004900:	f7fc fb46 	bl	8000f90 <HAL_GetTick>
 8004904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004906:	e008      	b.n	800491a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004908:	f7fc fb42 	bl	8000f90 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b02      	cmp	r3, #2
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e220      	b.n	8004d5c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800491a:	4b5e      	ldr	r3, [pc, #376]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 800491c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d0ef      	beq.n	8004908 <HAL_RCC_OscConfig+0x3ec>
 8004928:	e01b      	b.n	8004962 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800492a:	4b5a      	ldr	r3, [pc, #360]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 800492c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004930:	4a58      	ldr	r2, [pc, #352]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 8004932:	f023 0301 	bic.w	r3, r3, #1
 8004936:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800493a:	f7fc fb29 	bl	8000f90 <HAL_GetTick>
 800493e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004940:	e008      	b.n	8004954 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004942:	f7fc fb25 	bl	8000f90 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d901      	bls.n	8004954 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e203      	b.n	8004d5c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004954:	4b4f      	ldr	r3, [pc, #316]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 8004956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1ef      	bne.n	8004942 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0304 	and.w	r3, r3, #4
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 80a6 	beq.w	8004abc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004970:	2300      	movs	r3, #0
 8004972:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004974:	4b47      	ldr	r3, [pc, #284]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 8004976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10d      	bne.n	800499c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004980:	4b44      	ldr	r3, [pc, #272]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 8004982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004984:	4a43      	ldr	r2, [pc, #268]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 8004986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800498a:	6593      	str	r3, [r2, #88]	; 0x58
 800498c:	4b41      	ldr	r3, [pc, #260]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 800498e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004994:	60bb      	str	r3, [r7, #8]
 8004996:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004998:	2301      	movs	r3, #1
 800499a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800499c:	4b3e      	ldr	r3, [pc, #248]	; (8004a98 <HAL_RCC_OscConfig+0x57c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d118      	bne.n	80049da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049a8:	4b3b      	ldr	r3, [pc, #236]	; (8004a98 <HAL_RCC_OscConfig+0x57c>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a3a      	ldr	r2, [pc, #232]	; (8004a98 <HAL_RCC_OscConfig+0x57c>)
 80049ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049b4:	f7fc faec 	bl	8000f90 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049bc:	f7fc fae8 	bl	8000f90 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e1c6      	b.n	8004d5c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049ce:	4b32      	ldr	r3, [pc, #200]	; (8004a98 <HAL_RCC_OscConfig+0x57c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0f0      	beq.n	80049bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d108      	bne.n	80049f4 <HAL_RCC_OscConfig+0x4d8>
 80049e2:	4b2c      	ldr	r3, [pc, #176]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 80049e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e8:	4a2a      	ldr	r2, [pc, #168]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 80049ea:	f043 0301 	orr.w	r3, r3, #1
 80049ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049f2:	e024      	b.n	8004a3e <HAL_RCC_OscConfig+0x522>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	2b05      	cmp	r3, #5
 80049fa:	d110      	bne.n	8004a1e <HAL_RCC_OscConfig+0x502>
 80049fc:	4b25      	ldr	r3, [pc, #148]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 80049fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a02:	4a24      	ldr	r2, [pc, #144]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 8004a04:	f043 0304 	orr.w	r3, r3, #4
 8004a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a0c:	4b21      	ldr	r3, [pc, #132]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 8004a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a12:	4a20      	ldr	r2, [pc, #128]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 8004a14:	f043 0301 	orr.w	r3, r3, #1
 8004a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a1c:	e00f      	b.n	8004a3e <HAL_RCC_OscConfig+0x522>
 8004a1e:	4b1d      	ldr	r3, [pc, #116]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 8004a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a24:	4a1b      	ldr	r2, [pc, #108]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 8004a26:	f023 0301 	bic.w	r3, r3, #1
 8004a2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a2e:	4b19      	ldr	r3, [pc, #100]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 8004a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a34:	4a17      	ldr	r2, [pc, #92]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 8004a36:	f023 0304 	bic.w	r3, r3, #4
 8004a3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d016      	beq.n	8004a74 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a46:	f7fc faa3 	bl	8000f90 <HAL_GetTick>
 8004a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a4c:	e00a      	b.n	8004a64 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a4e:	f7fc fa9f 	bl	8000f90 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e17b      	b.n	8004d5c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a64:	4b0b      	ldr	r3, [pc, #44]	; (8004a94 <HAL_RCC_OscConfig+0x578>)
 8004a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d0ed      	beq.n	8004a4e <HAL_RCC_OscConfig+0x532>
 8004a72:	e01a      	b.n	8004aaa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a74:	f7fc fa8c 	bl	8000f90 <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a7a:	e00f      	b.n	8004a9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a7c:	f7fc fa88 	bl	8000f90 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d906      	bls.n	8004a9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e164      	b.n	8004d5c <HAL_RCC_OscConfig+0x840>
 8004a92:	bf00      	nop
 8004a94:	40021000 	.word	0x40021000
 8004a98:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a9c:	4ba8      	ldr	r3, [pc, #672]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1e8      	bne.n	8004a7c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004aaa:	7ffb      	ldrb	r3, [r7, #31]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d105      	bne.n	8004abc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ab0:	4ba3      	ldr	r3, [pc, #652]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab4:	4aa2      	ldr	r2, [pc, #648]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004ab6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0320 	and.w	r3, r3, #32
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d03c      	beq.n	8004b42 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d01c      	beq.n	8004b0a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ad0:	4b9b      	ldr	r3, [pc, #620]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004ad2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ad6:	4a9a      	ldr	r2, [pc, #616]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004ad8:	f043 0301 	orr.w	r3, r3, #1
 8004adc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae0:	f7fc fa56 	bl	8000f90 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ae8:	f7fc fa52 	bl	8000f90 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e130      	b.n	8004d5c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004afa:	4b91      	ldr	r3, [pc, #580]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004afc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d0ef      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x5cc>
 8004b08:	e01b      	b.n	8004b42 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b0a:	4b8d      	ldr	r3, [pc, #564]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004b0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b10:	4a8b      	ldr	r2, [pc, #556]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004b12:	f023 0301 	bic.w	r3, r3, #1
 8004b16:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1a:	f7fc fa39 	bl	8000f90 <HAL_GetTick>
 8004b1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b20:	e008      	b.n	8004b34 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b22:	f7fc fa35 	bl	8000f90 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d901      	bls.n	8004b34 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e113      	b.n	8004d5c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b34:	4b82      	ldr	r3, [pc, #520]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004b36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1ef      	bne.n	8004b22 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f000 8107 	beq.w	8004d5a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	f040 80cb 	bne.w	8004cec <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004b56:	4b7a      	ldr	r3, [pc, #488]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f003 0203 	and.w	r2, r3, #3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d12c      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b74:	3b01      	subs	r3, #1
 8004b76:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d123      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b86:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d11b      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b96:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d113      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba6:	085b      	lsrs	r3, r3, #1
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d109      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bba:	085b      	lsrs	r3, r3, #1
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d06d      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	2b0c      	cmp	r3, #12
 8004bc8:	d068      	beq.n	8004c9c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004bca:	4b5d      	ldr	r3, [pc, #372]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d105      	bne.n	8004be2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004bd6:	4b5a      	ldr	r3, [pc, #360]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e0ba      	b.n	8004d5c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004be6:	4b56      	ldr	r3, [pc, #344]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a55      	ldr	r2, [pc, #340]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004bec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bf0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bf2:	f7fc f9cd 	bl	8000f90 <HAL_GetTick>
 8004bf6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bf8:	e008      	b.n	8004c0c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bfa:	f7fc f9c9 	bl	8000f90 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e0a7      	b.n	8004d5c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c0c:	4b4c      	ldr	r3, [pc, #304]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1f0      	bne.n	8004bfa <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c18:	4b49      	ldr	r3, [pc, #292]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	4b49      	ldr	r3, [pc, #292]	; (8004d44 <HAL_RCC_OscConfig+0x828>)
 8004c1e:	4013      	ands	r3, r2
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c28:	3a01      	subs	r2, #1
 8004c2a:	0112      	lsls	r2, r2, #4
 8004c2c:	4311      	orrs	r1, r2
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c32:	0212      	lsls	r2, r2, #8
 8004c34:	4311      	orrs	r1, r2
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c3a:	0852      	lsrs	r2, r2, #1
 8004c3c:	3a01      	subs	r2, #1
 8004c3e:	0552      	lsls	r2, r2, #21
 8004c40:	4311      	orrs	r1, r2
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c46:	0852      	lsrs	r2, r2, #1
 8004c48:	3a01      	subs	r2, #1
 8004c4a:	0652      	lsls	r2, r2, #25
 8004c4c:	4311      	orrs	r1, r2
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c52:	06d2      	lsls	r2, r2, #27
 8004c54:	430a      	orrs	r2, r1
 8004c56:	493a      	ldr	r1, [pc, #232]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004c5c:	4b38      	ldr	r3, [pc, #224]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a37      	ldr	r2, [pc, #220]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004c62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c68:	4b35      	ldr	r3, [pc, #212]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	4a34      	ldr	r2, [pc, #208]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004c6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c74:	f7fc f98c 	bl	8000f90 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c7c:	f7fc f988 	bl	8000f90 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e066      	b.n	8004d5c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c8e:	4b2c      	ldr	r3, [pc, #176]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0f0      	beq.n	8004c7c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c9a:	e05e      	b.n	8004d5a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e05d      	b.n	8004d5c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ca0:	4b27      	ldr	r3, [pc, #156]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d156      	bne.n	8004d5a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004cac:	4b24      	ldr	r3, [pc, #144]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a23      	ldr	r2, [pc, #140]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cb6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cb8:	4b21      	ldr	r3, [pc, #132]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	4a20      	ldr	r2, [pc, #128]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cc2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004cc4:	f7fc f964 	bl	8000f90 <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ccc:	f7fc f960 	bl	8000f90 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e03e      	b.n	8004d5c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cde:	4b18      	ldr	r3, [pc, #96]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0f0      	beq.n	8004ccc <HAL_RCC_OscConfig+0x7b0>
 8004cea:	e036      	b.n	8004d5a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	2b0c      	cmp	r3, #12
 8004cf0:	d031      	beq.n	8004d56 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cf2:	4b13      	ldr	r3, [pc, #76]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a12      	ldr	r2, [pc, #72]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004cf8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cfc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004cfe:	4b10      	ldr	r3, [pc, #64]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d105      	bne.n	8004d16 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004d0a:	4b0d      	ldr	r3, [pc, #52]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	4a0c      	ldr	r2, [pc, #48]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004d10:	f023 0303 	bic.w	r3, r3, #3
 8004d14:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004d16:	4b0a      	ldr	r3, [pc, #40]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	4a09      	ldr	r2, [pc, #36]	; (8004d40 <HAL_RCC_OscConfig+0x824>)
 8004d1c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004d20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d24:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d26:	f7fc f933 	bl	8000f90 <HAL_GetTick>
 8004d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d2c:	e00c      	b.n	8004d48 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d2e:	f7fc f92f 	bl	8000f90 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d905      	bls.n	8004d48 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e00d      	b.n	8004d5c <HAL_RCC_OscConfig+0x840>
 8004d40:	40021000 	.word	0x40021000
 8004d44:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d48:	4b06      	ldr	r3, [pc, #24]	; (8004d64 <HAL_RCC_OscConfig+0x848>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1ec      	bne.n	8004d2e <HAL_RCC_OscConfig+0x812>
 8004d54:	e001      	b.n	8004d5a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e000      	b.n	8004d5c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3720      	adds	r7, #32
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	40021000 	.word	0x40021000

08004d68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e0c8      	b.n	8004f0e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d7c:	4b66      	ldr	r3, [pc, #408]	; (8004f18 <HAL_RCC_ClockConfig+0x1b0>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0307 	and.w	r3, r3, #7
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d910      	bls.n	8004dac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d8a:	4b63      	ldr	r3, [pc, #396]	; (8004f18 <HAL_RCC_ClockConfig+0x1b0>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f023 0207 	bic.w	r2, r3, #7
 8004d92:	4961      	ldr	r1, [pc, #388]	; (8004f18 <HAL_RCC_ClockConfig+0x1b0>)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d9a:	4b5f      	ldr	r3, [pc, #380]	; (8004f18 <HAL_RCC_ClockConfig+0x1b0>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0307 	and.w	r3, r3, #7
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d001      	beq.n	8004dac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e0b0      	b.n	8004f0e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d04c      	beq.n	8004e52 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	2b03      	cmp	r3, #3
 8004dbe:	d107      	bne.n	8004dd0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dc0:	4b56      	ldr	r3, [pc, #344]	; (8004f1c <HAL_RCC_ClockConfig+0x1b4>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d121      	bne.n	8004e10 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e09e      	b.n	8004f0e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d107      	bne.n	8004de8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dd8:	4b50      	ldr	r3, [pc, #320]	; (8004f1c <HAL_RCC_ClockConfig+0x1b4>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d115      	bne.n	8004e10 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e092      	b.n	8004f0e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d107      	bne.n	8004e00 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004df0:	4b4a      	ldr	r3, [pc, #296]	; (8004f1c <HAL_RCC_ClockConfig+0x1b4>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d109      	bne.n	8004e10 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e086      	b.n	8004f0e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e00:	4b46      	ldr	r3, [pc, #280]	; (8004f1c <HAL_RCC_ClockConfig+0x1b4>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e07e      	b.n	8004f0e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e10:	4b42      	ldr	r3, [pc, #264]	; (8004f1c <HAL_RCC_ClockConfig+0x1b4>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f023 0203 	bic.w	r2, r3, #3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	493f      	ldr	r1, [pc, #252]	; (8004f1c <HAL_RCC_ClockConfig+0x1b4>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e22:	f7fc f8b5 	bl	8000f90 <HAL_GetTick>
 8004e26:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e28:	e00a      	b.n	8004e40 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e2a:	f7fc f8b1 	bl	8000f90 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d901      	bls.n	8004e40 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e066      	b.n	8004f0e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e40:	4b36      	ldr	r3, [pc, #216]	; (8004f1c <HAL_RCC_ClockConfig+0x1b4>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f003 020c 	and.w	r2, r3, #12
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d1eb      	bne.n	8004e2a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d008      	beq.n	8004e70 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e5e:	4b2f      	ldr	r3, [pc, #188]	; (8004f1c <HAL_RCC_ClockConfig+0x1b4>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	492c      	ldr	r1, [pc, #176]	; (8004f1c <HAL_RCC_ClockConfig+0x1b4>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e70:	4b29      	ldr	r3, [pc, #164]	; (8004f18 <HAL_RCC_ClockConfig+0x1b0>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d210      	bcs.n	8004ea0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e7e:	4b26      	ldr	r3, [pc, #152]	; (8004f18 <HAL_RCC_ClockConfig+0x1b0>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f023 0207 	bic.w	r2, r3, #7
 8004e86:	4924      	ldr	r1, [pc, #144]	; (8004f18 <HAL_RCC_ClockConfig+0x1b0>)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e8e:	4b22      	ldr	r3, [pc, #136]	; (8004f18 <HAL_RCC_ClockConfig+0x1b0>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d001      	beq.n	8004ea0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e036      	b.n	8004f0e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d008      	beq.n	8004ebe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eac:	4b1b      	ldr	r3, [pc, #108]	; (8004f1c <HAL_RCC_ClockConfig+0x1b4>)
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	4918      	ldr	r1, [pc, #96]	; (8004f1c <HAL_RCC_ClockConfig+0x1b4>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d009      	beq.n	8004ede <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eca:	4b14      	ldr	r3, [pc, #80]	; (8004f1c <HAL_RCC_ClockConfig+0x1b4>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	4910      	ldr	r1, [pc, #64]	; (8004f1c <HAL_RCC_ClockConfig+0x1b4>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ede:	f000 f825 	bl	8004f2c <HAL_RCC_GetSysClockFreq>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	4b0d      	ldr	r3, [pc, #52]	; (8004f1c <HAL_RCC_ClockConfig+0x1b4>)
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	091b      	lsrs	r3, r3, #4
 8004eea:	f003 030f 	and.w	r3, r3, #15
 8004eee:	490c      	ldr	r1, [pc, #48]	; (8004f20 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef0:	5ccb      	ldrb	r3, [r1, r3]
 8004ef2:	f003 031f 	and.w	r3, r3, #31
 8004ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8004efa:	4a0a      	ldr	r2, [pc, #40]	; (8004f24 <HAL_RCC_ClockConfig+0x1bc>)
 8004efc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004efe:	4b0a      	ldr	r3, [pc, #40]	; (8004f28 <HAL_RCC_ClockConfig+0x1c0>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fb fff4 	bl	8000ef0 <HAL_InitTick>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	72fb      	strb	r3, [r7, #11]

  return status;
 8004f0c:	7afb      	ldrb	r3, [r7, #11]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	40022000 	.word	0x40022000
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	0800be10 	.word	0x0800be10
 8004f24:	20000000 	.word	0x20000000
 8004f28:	20000004 	.word	0x20000004

08004f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b089      	sub	sp, #36	; 0x24
 8004f30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f32:	2300      	movs	r3, #0
 8004f34:	61fb      	str	r3, [r7, #28]
 8004f36:	2300      	movs	r3, #0
 8004f38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f3a:	4b3e      	ldr	r3, [pc, #248]	; (8005034 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f003 030c 	and.w	r3, r3, #12
 8004f42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f44:	4b3b      	ldr	r3, [pc, #236]	; (8005034 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f003 0303 	and.w	r3, r3, #3
 8004f4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d005      	beq.n	8004f60 <HAL_RCC_GetSysClockFreq+0x34>
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	2b0c      	cmp	r3, #12
 8004f58:	d121      	bne.n	8004f9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d11e      	bne.n	8004f9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f60:	4b34      	ldr	r3, [pc, #208]	; (8005034 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0308 	and.w	r3, r3, #8
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d107      	bne.n	8004f7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f6c:	4b31      	ldr	r3, [pc, #196]	; (8005034 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f72:	0a1b      	lsrs	r3, r3, #8
 8004f74:	f003 030f 	and.w	r3, r3, #15
 8004f78:	61fb      	str	r3, [r7, #28]
 8004f7a:	e005      	b.n	8004f88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f7c:	4b2d      	ldr	r3, [pc, #180]	; (8005034 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	091b      	lsrs	r3, r3, #4
 8004f82:	f003 030f 	and.w	r3, r3, #15
 8004f86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004f88:	4a2b      	ldr	r2, [pc, #172]	; (8005038 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10d      	bne.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f9c:	e00a      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d102      	bne.n	8004faa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004fa4:	4b25      	ldr	r3, [pc, #148]	; (800503c <HAL_RCC_GetSysClockFreq+0x110>)
 8004fa6:	61bb      	str	r3, [r7, #24]
 8004fa8:	e004      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d101      	bne.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004fb0:	4b23      	ldr	r3, [pc, #140]	; (8005040 <HAL_RCC_GetSysClockFreq+0x114>)
 8004fb2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	2b0c      	cmp	r3, #12
 8004fb8:	d134      	bne.n	8005024 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004fba:	4b1e      	ldr	r3, [pc, #120]	; (8005034 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f003 0303 	and.w	r3, r3, #3
 8004fc2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d003      	beq.n	8004fd2 <HAL_RCC_GetSysClockFreq+0xa6>
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	2b03      	cmp	r3, #3
 8004fce:	d003      	beq.n	8004fd8 <HAL_RCC_GetSysClockFreq+0xac>
 8004fd0:	e005      	b.n	8004fde <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004fd2:	4b1a      	ldr	r3, [pc, #104]	; (800503c <HAL_RCC_GetSysClockFreq+0x110>)
 8004fd4:	617b      	str	r3, [r7, #20]
      break;
 8004fd6:	e005      	b.n	8004fe4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004fd8:	4b19      	ldr	r3, [pc, #100]	; (8005040 <HAL_RCC_GetSysClockFreq+0x114>)
 8004fda:	617b      	str	r3, [r7, #20]
      break;
 8004fdc:	e002      	b.n	8004fe4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	617b      	str	r3, [r7, #20]
      break;
 8004fe2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fe4:	4b13      	ldr	r3, [pc, #76]	; (8005034 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	091b      	lsrs	r3, r3, #4
 8004fea:	f003 0307 	and.w	r3, r3, #7
 8004fee:	3301      	adds	r3, #1
 8004ff0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ff2:	4b10      	ldr	r3, [pc, #64]	; (8005034 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	0a1b      	lsrs	r3, r3, #8
 8004ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	fb02 f203 	mul.w	r2, r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	fbb2 f3f3 	udiv	r3, r2, r3
 8005008:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800500a:	4b0a      	ldr	r3, [pc, #40]	; (8005034 <HAL_RCC_GetSysClockFreq+0x108>)
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	0e5b      	lsrs	r3, r3, #25
 8005010:	f003 0303 	and.w	r3, r3, #3
 8005014:	3301      	adds	r3, #1
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005022:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005024:	69bb      	ldr	r3, [r7, #24]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3724      	adds	r7, #36	; 0x24
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	40021000 	.word	0x40021000
 8005038:	0800be28 	.word	0x0800be28
 800503c:	00f42400 	.word	0x00f42400
 8005040:	007a1200 	.word	0x007a1200

08005044 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005048:	4b03      	ldr	r3, [pc, #12]	; (8005058 <HAL_RCC_GetHCLKFreq+0x14>)
 800504a:	681b      	ldr	r3, [r3, #0]
}
 800504c:	4618      	mov	r0, r3
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	20000000 	.word	0x20000000

0800505c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005060:	f7ff fff0 	bl	8005044 <HAL_RCC_GetHCLKFreq>
 8005064:	4602      	mov	r2, r0
 8005066:	4b06      	ldr	r3, [pc, #24]	; (8005080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	0a1b      	lsrs	r3, r3, #8
 800506c:	f003 0307 	and.w	r3, r3, #7
 8005070:	4904      	ldr	r1, [pc, #16]	; (8005084 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005072:	5ccb      	ldrb	r3, [r1, r3]
 8005074:	f003 031f 	and.w	r3, r3, #31
 8005078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800507c:	4618      	mov	r0, r3
 800507e:	bd80      	pop	{r7, pc}
 8005080:	40021000 	.word	0x40021000
 8005084:	0800be20 	.word	0x0800be20

08005088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800508c:	f7ff ffda 	bl	8005044 <HAL_RCC_GetHCLKFreq>
 8005090:	4602      	mov	r2, r0
 8005092:	4b06      	ldr	r3, [pc, #24]	; (80050ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	0adb      	lsrs	r3, r3, #11
 8005098:	f003 0307 	and.w	r3, r3, #7
 800509c:	4904      	ldr	r1, [pc, #16]	; (80050b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800509e:	5ccb      	ldrb	r3, [r1, r3]
 80050a0:	f003 031f 	and.w	r3, r3, #31
 80050a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	40021000 	.word	0x40021000
 80050b0:	0800be20 	.word	0x0800be20

080050b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80050bc:	2300      	movs	r3, #0
 80050be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80050c0:	4b2a      	ldr	r3, [pc, #168]	; (800516c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80050cc:	f7ff f9a2 	bl	8004414 <HAL_PWREx_GetVoltageRange>
 80050d0:	6178      	str	r0, [r7, #20]
 80050d2:	e014      	b.n	80050fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80050d4:	4b25      	ldr	r3, [pc, #148]	; (800516c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d8:	4a24      	ldr	r2, [pc, #144]	; (800516c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050de:	6593      	str	r3, [r2, #88]	; 0x58
 80050e0:	4b22      	ldr	r3, [pc, #136]	; (800516c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050e8:	60fb      	str	r3, [r7, #12]
 80050ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80050ec:	f7ff f992 	bl	8004414 <HAL_PWREx_GetVoltageRange>
 80050f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80050f2:	4b1e      	ldr	r3, [pc, #120]	; (800516c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f6:	4a1d      	ldr	r2, [pc, #116]	; (800516c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005104:	d10b      	bne.n	800511e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b80      	cmp	r3, #128	; 0x80
 800510a:	d919      	bls.n	8005140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2ba0      	cmp	r3, #160	; 0xa0
 8005110:	d902      	bls.n	8005118 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005112:	2302      	movs	r3, #2
 8005114:	613b      	str	r3, [r7, #16]
 8005116:	e013      	b.n	8005140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005118:	2301      	movs	r3, #1
 800511a:	613b      	str	r3, [r7, #16]
 800511c:	e010      	b.n	8005140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b80      	cmp	r3, #128	; 0x80
 8005122:	d902      	bls.n	800512a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005124:	2303      	movs	r3, #3
 8005126:	613b      	str	r3, [r7, #16]
 8005128:	e00a      	b.n	8005140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b80      	cmp	r3, #128	; 0x80
 800512e:	d102      	bne.n	8005136 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005130:	2302      	movs	r3, #2
 8005132:	613b      	str	r3, [r7, #16]
 8005134:	e004      	b.n	8005140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b70      	cmp	r3, #112	; 0x70
 800513a:	d101      	bne.n	8005140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800513c:	2301      	movs	r3, #1
 800513e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005140:	4b0b      	ldr	r3, [pc, #44]	; (8005170 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f023 0207 	bic.w	r2, r3, #7
 8005148:	4909      	ldr	r1, [pc, #36]	; (8005170 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	4313      	orrs	r3, r2
 800514e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005150:	4b07      	ldr	r3, [pc, #28]	; (8005170 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0307 	and.w	r3, r3, #7
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	429a      	cmp	r2, r3
 800515c:	d001      	beq.n	8005162 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e000      	b.n	8005164 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3718      	adds	r7, #24
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	40021000 	.word	0x40021000
 8005170:	40022000 	.word	0x40022000

08005174 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800517c:	2300      	movs	r3, #0
 800517e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005180:	2300      	movs	r3, #0
 8005182:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800518c:	2b00      	cmp	r3, #0
 800518e:	d041      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005194:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005198:	d02a      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800519a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800519e:	d824      	bhi.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80051a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051a4:	d008      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80051a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051aa:	d81e      	bhi.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00a      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80051b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051b4:	d010      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80051b6:	e018      	b.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051b8:	4b86      	ldr	r3, [pc, #536]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	4a85      	ldr	r2, [pc, #532]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051c4:	e015      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	3304      	adds	r3, #4
 80051ca:	2100      	movs	r1, #0
 80051cc:	4618      	mov	r0, r3
 80051ce:	f000 fadd 	bl	800578c <RCCEx_PLLSAI1_Config>
 80051d2:	4603      	mov	r3, r0
 80051d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051d6:	e00c      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3320      	adds	r3, #32
 80051dc:	2100      	movs	r1, #0
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 fbc6 	bl	8005970 <RCCEx_PLLSAI2_Config>
 80051e4:	4603      	mov	r3, r0
 80051e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051e8:	e003      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	74fb      	strb	r3, [r7, #19]
      break;
 80051ee:	e000      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80051f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051f2:	7cfb      	ldrb	r3, [r7, #19]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10b      	bne.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051f8:	4b76      	ldr	r3, [pc, #472]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005206:	4973      	ldr	r1, [pc, #460]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005208:	4313      	orrs	r3, r2
 800520a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800520e:	e001      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005210:	7cfb      	ldrb	r3, [r7, #19]
 8005212:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d041      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005224:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005228:	d02a      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800522a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800522e:	d824      	bhi.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005230:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005234:	d008      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005236:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800523a:	d81e      	bhi.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00a      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005244:	d010      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005246:	e018      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005248:	4b62      	ldr	r3, [pc, #392]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	4a61      	ldr	r2, [pc, #388]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800524e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005252:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005254:	e015      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	3304      	adds	r3, #4
 800525a:	2100      	movs	r1, #0
 800525c:	4618      	mov	r0, r3
 800525e:	f000 fa95 	bl	800578c <RCCEx_PLLSAI1_Config>
 8005262:	4603      	mov	r3, r0
 8005264:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005266:	e00c      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3320      	adds	r3, #32
 800526c:	2100      	movs	r1, #0
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fb7e 	bl	8005970 <RCCEx_PLLSAI2_Config>
 8005274:	4603      	mov	r3, r0
 8005276:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005278:	e003      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	74fb      	strb	r3, [r7, #19]
      break;
 800527e:	e000      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005280:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005282:	7cfb      	ldrb	r3, [r7, #19]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10b      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005288:	4b52      	ldr	r3, [pc, #328]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800528a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005296:	494f      	ldr	r1, [pc, #316]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005298:	4313      	orrs	r3, r2
 800529a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800529e:	e001      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a0:	7cfb      	ldrb	r3, [r7, #19]
 80052a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f000 80a0 	beq.w	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052b2:	2300      	movs	r3, #0
 80052b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80052b6:	4b47      	ldr	r3, [pc, #284]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80052c2:	2301      	movs	r3, #1
 80052c4:	e000      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80052c6:	2300      	movs	r3, #0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00d      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052cc:	4b41      	ldr	r3, [pc, #260]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d0:	4a40      	ldr	r2, [pc, #256]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052d6:	6593      	str	r3, [r2, #88]	; 0x58
 80052d8:	4b3e      	ldr	r3, [pc, #248]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e0:	60bb      	str	r3, [r7, #8]
 80052e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052e4:	2301      	movs	r3, #1
 80052e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052e8:	4b3b      	ldr	r3, [pc, #236]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a3a      	ldr	r2, [pc, #232]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052f4:	f7fb fe4c 	bl	8000f90 <HAL_GetTick>
 80052f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052fa:	e009      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052fc:	f7fb fe48 	bl	8000f90 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b02      	cmp	r3, #2
 8005308:	d902      	bls.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	74fb      	strb	r3, [r7, #19]
        break;
 800530e:	e005      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005310:	4b31      	ldr	r3, [pc, #196]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005318:	2b00      	cmp	r3, #0
 800531a:	d0ef      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800531c:	7cfb      	ldrb	r3, [r7, #19]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d15c      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005322:	4b2c      	ldr	r3, [pc, #176]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005328:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800532c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d01f      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	429a      	cmp	r2, r3
 800533e:	d019      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005340:	4b24      	ldr	r3, [pc, #144]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005346:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800534a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800534c:	4b21      	ldr	r3, [pc, #132]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800534e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005352:	4a20      	ldr	r2, [pc, #128]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800535c:	4b1d      	ldr	r3, [pc, #116]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800535e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005362:	4a1c      	ldr	r2, [pc, #112]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800536c:	4a19      	ldr	r2, [pc, #100]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d016      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537e:	f7fb fe07 	bl	8000f90 <HAL_GetTick>
 8005382:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005384:	e00b      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005386:	f7fb fe03 	bl	8000f90 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	f241 3288 	movw	r2, #5000	; 0x1388
 8005394:	4293      	cmp	r3, r2
 8005396:	d902      	bls.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	74fb      	strb	r3, [r7, #19]
            break;
 800539c:	e006      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800539e:	4b0d      	ldr	r3, [pc, #52]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d0ec      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80053ac:	7cfb      	ldrb	r3, [r7, #19]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10c      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053b2:	4b08      	ldr	r3, [pc, #32]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c2:	4904      	ldr	r1, [pc, #16]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80053ca:	e009      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053cc:	7cfb      	ldrb	r3, [r7, #19]
 80053ce:	74bb      	strb	r3, [r7, #18]
 80053d0:	e006      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80053d2:	bf00      	nop
 80053d4:	40021000 	.word	0x40021000
 80053d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053dc:	7cfb      	ldrb	r3, [r7, #19]
 80053de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053e0:	7c7b      	ldrb	r3, [r7, #17]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d105      	bne.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053e6:	4ba6      	ldr	r3, [pc, #664]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ea:	4aa5      	ldr	r2, [pc, #660]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053fe:	4ba0      	ldr	r3, [pc, #640]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005404:	f023 0203 	bic.w	r2, r3, #3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540c:	499c      	ldr	r1, [pc, #624]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800540e:	4313      	orrs	r3, r2
 8005410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005420:	4b97      	ldr	r3, [pc, #604]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005426:	f023 020c 	bic.w	r2, r3, #12
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542e:	4994      	ldr	r1, [pc, #592]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005430:	4313      	orrs	r3, r2
 8005432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0304 	and.w	r3, r3, #4
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005442:	4b8f      	ldr	r3, [pc, #572]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005448:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005450:	498b      	ldr	r1, [pc, #556]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005452:	4313      	orrs	r3, r2
 8005454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0308 	and.w	r3, r3, #8
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00a      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005464:	4b86      	ldr	r3, [pc, #536]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005472:	4983      	ldr	r1, [pc, #524]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005474:	4313      	orrs	r3, r2
 8005476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0310 	and.w	r3, r3, #16
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005486:	4b7e      	ldr	r3, [pc, #504]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005494:	497a      	ldr	r1, [pc, #488]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005496:	4313      	orrs	r3, r2
 8005498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0320 	and.w	r3, r3, #32
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00a      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054a8:	4b75      	ldr	r3, [pc, #468]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054b6:	4972      	ldr	r1, [pc, #456]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054ca:	4b6d      	ldr	r3, [pc, #436]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d8:	4969      	ldr	r1, [pc, #420]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00a      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054ec:	4b64      	ldr	r3, [pc, #400]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054fa:	4961      	ldr	r1, [pc, #388]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00a      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800550e:	4b5c      	ldr	r3, [pc, #368]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005514:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800551c:	4958      	ldr	r1, [pc, #352]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800551e:	4313      	orrs	r3, r2
 8005520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00a      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005530:	4b53      	ldr	r3, [pc, #332]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005536:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553e:	4950      	ldr	r1, [pc, #320]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005540:	4313      	orrs	r3, r2
 8005542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00a      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005552:	4b4b      	ldr	r3, [pc, #300]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005558:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005560:	4947      	ldr	r1, [pc, #284]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005562:	4313      	orrs	r3, r2
 8005564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00a      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005574:	4b42      	ldr	r3, [pc, #264]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005576:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800557a:	f023 0203 	bic.w	r2, r3, #3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005582:	493f      	ldr	r1, [pc, #252]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005584:	4313      	orrs	r3, r2
 8005586:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d028      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005596:	4b3a      	ldr	r3, [pc, #232]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a4:	4936      	ldr	r1, [pc, #216]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055b4:	d106      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055b6:	4b32      	ldr	r3, [pc, #200]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	4a31      	ldr	r2, [pc, #196]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055c0:	60d3      	str	r3, [r2, #12]
 80055c2:	e011      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055cc:	d10c      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	3304      	adds	r3, #4
 80055d2:	2101      	movs	r1, #1
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 f8d9 	bl	800578c <RCCEx_PLLSAI1_Config>
 80055da:	4603      	mov	r3, r0
 80055dc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80055de:	7cfb      	ldrb	r3, [r7, #19]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80055e4:	7cfb      	ldrb	r3, [r7, #19]
 80055e6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d028      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80055f4:	4b22      	ldr	r3, [pc, #136]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005602:	491f      	ldr	r1, [pc, #124]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005604:	4313      	orrs	r3, r2
 8005606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800560e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005612:	d106      	bne.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005614:	4b1a      	ldr	r3, [pc, #104]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	4a19      	ldr	r2, [pc, #100]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800561a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800561e:	60d3      	str	r3, [r2, #12]
 8005620:	e011      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005626:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800562a:	d10c      	bne.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3304      	adds	r3, #4
 8005630:	2101      	movs	r1, #1
 8005632:	4618      	mov	r0, r3
 8005634:	f000 f8aa 	bl	800578c <RCCEx_PLLSAI1_Config>
 8005638:	4603      	mov	r3, r0
 800563a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800563c:	7cfb      	ldrb	r3, [r7, #19]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8005642:	7cfb      	ldrb	r3, [r7, #19]
 8005644:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d02a      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005652:	4b0b      	ldr	r3, [pc, #44]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005658:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005660:	4907      	ldr	r1, [pc, #28]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005662:	4313      	orrs	r3, r2
 8005664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800566c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005670:	d108      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005672:	4b03      	ldr	r3, [pc, #12]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	4a02      	ldr	r2, [pc, #8]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005678:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800567c:	60d3      	str	r3, [r2, #12]
 800567e:	e013      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8005680:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005688:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800568c:	d10c      	bne.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	3304      	adds	r3, #4
 8005692:	2101      	movs	r1, #1
 8005694:	4618      	mov	r0, r3
 8005696:	f000 f879 	bl	800578c <RCCEx_PLLSAI1_Config>
 800569a:	4603      	mov	r3, r0
 800569c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800569e:	7cfb      	ldrb	r3, [r7, #19]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80056a4:	7cfb      	ldrb	r3, [r7, #19]
 80056a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d02f      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056b4:	4b2c      	ldr	r3, [pc, #176]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056c2:	4929      	ldr	r1, [pc, #164]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056d2:	d10d      	bne.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	3304      	adds	r3, #4
 80056d8:	2102      	movs	r1, #2
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 f856 	bl	800578c <RCCEx_PLLSAI1_Config>
 80056e0:	4603      	mov	r3, r0
 80056e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056e4:	7cfb      	ldrb	r3, [r7, #19]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d014      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80056ea:	7cfb      	ldrb	r3, [r7, #19]
 80056ec:	74bb      	strb	r3, [r7, #18]
 80056ee:	e011      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056f8:	d10c      	bne.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	3320      	adds	r3, #32
 80056fe:	2102      	movs	r1, #2
 8005700:	4618      	mov	r0, r3
 8005702:	f000 f935 	bl	8005970 <RCCEx_PLLSAI2_Config>
 8005706:	4603      	mov	r3, r0
 8005708:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800570a:	7cfb      	ldrb	r3, [r7, #19]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d001      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005710:	7cfb      	ldrb	r3, [r7, #19]
 8005712:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00b      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005720:	4b11      	ldr	r3, [pc, #68]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005726:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005730:	490d      	ldr	r1, [pc, #52]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005732:	4313      	orrs	r3, r2
 8005734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00b      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005744:	4b08      	ldr	r3, [pc, #32]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005754:	4904      	ldr	r1, [pc, #16]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005756:	4313      	orrs	r3, r2
 8005758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800575c:	7cbb      	ldrb	r3, [r7, #18]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3718      	adds	r7, #24
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	40021000 	.word	0x40021000

0800576c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800576c:	b480      	push	{r7}
 800576e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005770:	4b05      	ldr	r3, [pc, #20]	; (8005788 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a04      	ldr	r2, [pc, #16]	; (8005788 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005776:	f043 0304 	orr.w	r3, r3, #4
 800577a:	6013      	str	r3, [r2, #0]
}
 800577c:	bf00      	nop
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	40021000 	.word	0x40021000

0800578c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005796:	2300      	movs	r3, #0
 8005798:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800579a:	4b74      	ldr	r3, [pc, #464]	; (800596c <RCCEx_PLLSAI1_Config+0x1e0>)
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d018      	beq.n	80057d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80057a6:	4b71      	ldr	r3, [pc, #452]	; (800596c <RCCEx_PLLSAI1_Config+0x1e0>)
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	f003 0203 	and.w	r2, r3, #3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d10d      	bne.n	80057d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
       ||
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d009      	beq.n	80057d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80057be:	4b6b      	ldr	r3, [pc, #428]	; (800596c <RCCEx_PLLSAI1_Config+0x1e0>)
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	091b      	lsrs	r3, r3, #4
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	1c5a      	adds	r2, r3, #1
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
       ||
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d047      	beq.n	8005862 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	73fb      	strb	r3, [r7, #15]
 80057d6:	e044      	b.n	8005862 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2b03      	cmp	r3, #3
 80057de:	d018      	beq.n	8005812 <RCCEx_PLLSAI1_Config+0x86>
 80057e0:	2b03      	cmp	r3, #3
 80057e2:	d825      	bhi.n	8005830 <RCCEx_PLLSAI1_Config+0xa4>
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d002      	beq.n	80057ee <RCCEx_PLLSAI1_Config+0x62>
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d009      	beq.n	8005800 <RCCEx_PLLSAI1_Config+0x74>
 80057ec:	e020      	b.n	8005830 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057ee:	4b5f      	ldr	r3, [pc, #380]	; (800596c <RCCEx_PLLSAI1_Config+0x1e0>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d11d      	bne.n	8005836 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057fe:	e01a      	b.n	8005836 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005800:	4b5a      	ldr	r3, [pc, #360]	; (800596c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005808:	2b00      	cmp	r3, #0
 800580a:	d116      	bne.n	800583a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005810:	e013      	b.n	800583a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005812:	4b56      	ldr	r3, [pc, #344]	; (800596c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10f      	bne.n	800583e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800581e:	4b53      	ldr	r3, [pc, #332]	; (800596c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d109      	bne.n	800583e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800582e:	e006      	b.n	800583e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	73fb      	strb	r3, [r7, #15]
      break;
 8005834:	e004      	b.n	8005840 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005836:	bf00      	nop
 8005838:	e002      	b.n	8005840 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800583a:	bf00      	nop
 800583c:	e000      	b.n	8005840 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800583e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005840:	7bfb      	ldrb	r3, [r7, #15]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10d      	bne.n	8005862 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005846:	4b49      	ldr	r3, [pc, #292]	; (800596c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6819      	ldr	r1, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	3b01      	subs	r3, #1
 8005858:	011b      	lsls	r3, r3, #4
 800585a:	430b      	orrs	r3, r1
 800585c:	4943      	ldr	r1, [pc, #268]	; (800596c <RCCEx_PLLSAI1_Config+0x1e0>)
 800585e:	4313      	orrs	r3, r2
 8005860:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005862:	7bfb      	ldrb	r3, [r7, #15]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d17c      	bne.n	8005962 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005868:	4b40      	ldr	r3, [pc, #256]	; (800596c <RCCEx_PLLSAI1_Config+0x1e0>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a3f      	ldr	r2, [pc, #252]	; (800596c <RCCEx_PLLSAI1_Config+0x1e0>)
 800586e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005872:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005874:	f7fb fb8c 	bl	8000f90 <HAL_GetTick>
 8005878:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800587a:	e009      	b.n	8005890 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800587c:	f7fb fb88 	bl	8000f90 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	2b02      	cmp	r3, #2
 8005888:	d902      	bls.n	8005890 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	73fb      	strb	r3, [r7, #15]
        break;
 800588e:	e005      	b.n	800589c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005890:	4b36      	ldr	r3, [pc, #216]	; (800596c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1ef      	bne.n	800587c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800589c:	7bfb      	ldrb	r3, [r7, #15]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d15f      	bne.n	8005962 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d110      	bne.n	80058ca <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058a8:	4b30      	ldr	r3, [pc, #192]	; (800596c <RCCEx_PLLSAI1_Config+0x1e0>)
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80058b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6892      	ldr	r2, [r2, #8]
 80058b8:	0211      	lsls	r1, r2, #8
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	68d2      	ldr	r2, [r2, #12]
 80058be:	06d2      	lsls	r2, r2, #27
 80058c0:	430a      	orrs	r2, r1
 80058c2:	492a      	ldr	r1, [pc, #168]	; (800596c <RCCEx_PLLSAI1_Config+0x1e0>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	610b      	str	r3, [r1, #16]
 80058c8:	e027      	b.n	800591a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d112      	bne.n	80058f6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058d0:	4b26      	ldr	r3, [pc, #152]	; (800596c <RCCEx_PLLSAI1_Config+0x1e0>)
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80058d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	6892      	ldr	r2, [r2, #8]
 80058e0:	0211      	lsls	r1, r2, #8
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	6912      	ldr	r2, [r2, #16]
 80058e6:	0852      	lsrs	r2, r2, #1
 80058e8:	3a01      	subs	r2, #1
 80058ea:	0552      	lsls	r2, r2, #21
 80058ec:	430a      	orrs	r2, r1
 80058ee:	491f      	ldr	r1, [pc, #124]	; (800596c <RCCEx_PLLSAI1_Config+0x1e0>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	610b      	str	r3, [r1, #16]
 80058f4:	e011      	b.n	800591a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058f6:	4b1d      	ldr	r3, [pc, #116]	; (800596c <RCCEx_PLLSAI1_Config+0x1e0>)
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80058fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	6892      	ldr	r2, [r2, #8]
 8005906:	0211      	lsls	r1, r2, #8
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6952      	ldr	r2, [r2, #20]
 800590c:	0852      	lsrs	r2, r2, #1
 800590e:	3a01      	subs	r2, #1
 8005910:	0652      	lsls	r2, r2, #25
 8005912:	430a      	orrs	r2, r1
 8005914:	4915      	ldr	r1, [pc, #84]	; (800596c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005916:	4313      	orrs	r3, r2
 8005918:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800591a:	4b14      	ldr	r3, [pc, #80]	; (800596c <RCCEx_PLLSAI1_Config+0x1e0>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a13      	ldr	r2, [pc, #76]	; (800596c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005920:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005924:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005926:	f7fb fb33 	bl	8000f90 <HAL_GetTick>
 800592a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800592c:	e009      	b.n	8005942 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800592e:	f7fb fb2f 	bl	8000f90 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	2b02      	cmp	r3, #2
 800593a:	d902      	bls.n	8005942 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	73fb      	strb	r3, [r7, #15]
          break;
 8005940:	e005      	b.n	800594e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005942:	4b0a      	ldr	r3, [pc, #40]	; (800596c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d0ef      	beq.n	800592e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800594e:	7bfb      	ldrb	r3, [r7, #15]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d106      	bne.n	8005962 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005954:	4b05      	ldr	r3, [pc, #20]	; (800596c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005956:	691a      	ldr	r2, [r3, #16]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	4903      	ldr	r1, [pc, #12]	; (800596c <RCCEx_PLLSAI1_Config+0x1e0>)
 800595e:	4313      	orrs	r3, r2
 8005960:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005962:	7bfb      	ldrb	r3, [r7, #15]
}
 8005964:	4618      	mov	r0, r3
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	40021000 	.word	0x40021000

08005970 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800597a:	2300      	movs	r3, #0
 800597c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800597e:	4b69      	ldr	r3, [pc, #420]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	f003 0303 	and.w	r3, r3, #3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d018      	beq.n	80059bc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800598a:	4b66      	ldr	r3, [pc, #408]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	f003 0203 	and.w	r2, r3, #3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	429a      	cmp	r2, r3
 8005998:	d10d      	bne.n	80059b6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
       ||
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d009      	beq.n	80059b6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80059a2:	4b60      	ldr	r3, [pc, #384]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	091b      	lsrs	r3, r3, #4
 80059a8:	f003 0307 	and.w	r3, r3, #7
 80059ac:	1c5a      	adds	r2, r3, #1
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
       ||
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d047      	beq.n	8005a46 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	73fb      	strb	r3, [r7, #15]
 80059ba:	e044      	b.n	8005a46 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2b03      	cmp	r3, #3
 80059c2:	d018      	beq.n	80059f6 <RCCEx_PLLSAI2_Config+0x86>
 80059c4:	2b03      	cmp	r3, #3
 80059c6:	d825      	bhi.n	8005a14 <RCCEx_PLLSAI2_Config+0xa4>
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d002      	beq.n	80059d2 <RCCEx_PLLSAI2_Config+0x62>
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d009      	beq.n	80059e4 <RCCEx_PLLSAI2_Config+0x74>
 80059d0:	e020      	b.n	8005a14 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80059d2:	4b54      	ldr	r3, [pc, #336]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d11d      	bne.n	8005a1a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059e2:	e01a      	b.n	8005a1a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80059e4:	4b4f      	ldr	r3, [pc, #316]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d116      	bne.n	8005a1e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059f4:	e013      	b.n	8005a1e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059f6:	4b4b      	ldr	r3, [pc, #300]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10f      	bne.n	8005a22 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a02:	4b48      	ldr	r3, [pc, #288]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d109      	bne.n	8005a22 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a12:	e006      	b.n	8005a22 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	73fb      	strb	r3, [r7, #15]
      break;
 8005a18:	e004      	b.n	8005a24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a1a:	bf00      	nop
 8005a1c:	e002      	b.n	8005a24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a1e:	bf00      	nop
 8005a20:	e000      	b.n	8005a24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a22:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a24:	7bfb      	ldrb	r3, [r7, #15]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10d      	bne.n	8005a46 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a2a:	4b3e      	ldr	r3, [pc, #248]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6819      	ldr	r1, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	011b      	lsls	r3, r3, #4
 8005a3e:	430b      	orrs	r3, r1
 8005a40:	4938      	ldr	r1, [pc, #224]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a46:	7bfb      	ldrb	r3, [r7, #15]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d166      	bne.n	8005b1a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005a4c:	4b35      	ldr	r3, [pc, #212]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a34      	ldr	r2, [pc, #208]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a58:	f7fb fa9a 	bl	8000f90 <HAL_GetTick>
 8005a5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a5e:	e009      	b.n	8005a74 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a60:	f7fb fa96 	bl	8000f90 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d902      	bls.n	8005a74 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	73fb      	strb	r3, [r7, #15]
        break;
 8005a72:	e005      	b.n	8005a80 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a74:	4b2b      	ldr	r3, [pc, #172]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1ef      	bne.n	8005a60 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d149      	bne.n	8005b1a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d110      	bne.n	8005aae <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a8c:	4b25      	ldr	r3, [pc, #148]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005a94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	6892      	ldr	r2, [r2, #8]
 8005a9c:	0211      	lsls	r1, r2, #8
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	68d2      	ldr	r2, [r2, #12]
 8005aa2:	06d2      	lsls	r2, r2, #27
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	491f      	ldr	r1, [pc, #124]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	614b      	str	r3, [r1, #20]
 8005aac:	e011      	b.n	8005ad2 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005aae:	4b1d      	ldr	r3, [pc, #116]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005ab6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	6892      	ldr	r2, [r2, #8]
 8005abe:	0211      	lsls	r1, r2, #8
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	6912      	ldr	r2, [r2, #16]
 8005ac4:	0852      	lsrs	r2, r2, #1
 8005ac6:	3a01      	subs	r2, #1
 8005ac8:	0652      	lsls	r2, r2, #25
 8005aca:	430a      	orrs	r2, r1
 8005acc:	4915      	ldr	r1, [pc, #84]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005ad2:	4b14      	ldr	r3, [pc, #80]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a13      	ldr	r2, [pc, #76]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005adc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ade:	f7fb fa57 	bl	8000f90 <HAL_GetTick>
 8005ae2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ae4:	e009      	b.n	8005afa <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ae6:	f7fb fa53 	bl	8000f90 <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d902      	bls.n	8005afa <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	73fb      	strb	r3, [r7, #15]
          break;
 8005af8:	e005      	b.n	8005b06 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005afa:	4b0a      	ldr	r3, [pc, #40]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d0ef      	beq.n	8005ae6 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8005b06:	7bfb      	ldrb	r3, [r7, #15]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d106      	bne.n	8005b1a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005b0c:	4b05      	ldr	r3, [pc, #20]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b0e:	695a      	ldr	r2, [r3, #20]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	4903      	ldr	r1, [pc, #12]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	40021000 	.word	0x40021000

08005b28 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d06c      	beq.n	8005c14 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d106      	bne.n	8005b54 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7fb f84e 	bl	8000bf0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	22ca      	movs	r2, #202	; 0xca
 8005b62:	625a      	str	r2, [r3, #36]	; 0x24
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2253      	movs	r2, #83	; 0x53
 8005b6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f87c 	bl	8005c6a <RTC_EnterInitMode>
 8005b72:	4603      	mov	r3, r0
 8005b74:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005b76:	7bfb      	ldrb	r3, [r7, #15]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d14b      	bne.n	8005c14 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	6812      	ldr	r2, [r2, #0]
 8005b86:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b8e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6899      	ldr	r1, [r3, #8]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685a      	ldr	r2, [r3, #4]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	431a      	orrs	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	68d2      	ldr	r2, [r2, #12]
 8005bb6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6919      	ldr	r1, [r3, #16]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	041a      	lsls	r2, r3, #16
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f87f 	bl	8005cd0 <RTC_ExitInitMode>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005bd6:	7bfb      	ldrb	r3, [r7, #15]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d11b      	bne.n	8005c14 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 0203 	bic.w	r2, r2, #3
 8005bea:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69da      	ldr	r2, [r3, #28]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	22ff      	movs	r2, #255	; 0xff
 8005c0a:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8005c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b084      	sub	sp, #16
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68da      	ldr	r2, [r3, #12]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c34:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005c36:	f7fb f9ab 	bl	8000f90 <HAL_GetTick>
 8005c3a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c3c:	e009      	b.n	8005c52 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c3e:	f7fb f9a7 	bl	8000f90 <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c4c:	d901      	bls.n	8005c52 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e007      	b.n	8005c62 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	f003 0320 	and.w	r3, r3, #32
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d0ee      	beq.n	8005c3e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b084      	sub	sp, #16
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c72:	2300      	movs	r3, #0
 8005c74:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d120      	bne.n	8005cc6 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f04f 32ff 	mov.w	r2, #4294967295
 8005c8c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005c8e:	f7fb f97f 	bl	8000f90 <HAL_GetTick>
 8005c92:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005c94:	e00d      	b.n	8005cb2 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005c96:	f7fb f97b 	bl	8000f90 <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ca4:	d905      	bls.n	8005cb2 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2203      	movs	r2, #3
 8005cae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d102      	bne.n	8005cc6 <RTC_EnterInitMode+0x5c>
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
 8005cc2:	2b03      	cmp	r3, #3
 8005cc4:	d1e7      	bne.n	8005c96 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005cdc:	4b1a      	ldr	r3, [pc, #104]	; (8005d48 <RTC_ExitInitMode+0x78>)
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	4a19      	ldr	r2, [pc, #100]	; (8005d48 <RTC_ExitInitMode+0x78>)
 8005ce2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ce6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005ce8:	4b17      	ldr	r3, [pc, #92]	; (8005d48 <RTC_ExitInitMode+0x78>)
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f003 0320 	and.w	r3, r3, #32
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10c      	bne.n	8005d0e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f7ff ff92 	bl	8005c1e <HAL_RTC_WaitForSynchro>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d01e      	beq.n	8005d3e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2203      	movs	r2, #3
 8005d04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	73fb      	strb	r3, [r7, #15]
 8005d0c:	e017      	b.n	8005d3e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005d0e:	4b0e      	ldr	r3, [pc, #56]	; (8005d48 <RTC_ExitInitMode+0x78>)
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	4a0d      	ldr	r2, [pc, #52]	; (8005d48 <RTC_ExitInitMode+0x78>)
 8005d14:	f023 0320 	bic.w	r3, r3, #32
 8005d18:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f7ff ff7f 	bl	8005c1e <HAL_RTC_WaitForSynchro>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d005      	beq.n	8005d32 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2203      	movs	r2, #3
 8005d2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005d32:	4b05      	ldr	r3, [pc, #20]	; (8005d48 <RTC_ExitInitMode+0x78>)
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	4a04      	ldr	r2, [pc, #16]	; (8005d48 <RTC_ExitInitMode+0x78>)
 8005d38:	f043 0320 	orr.w	r3, r3, #32
 8005d3c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	40002800 	.word	0x40002800

08005d4c <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d101      	bne.n	8005d66 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005d62:	2302      	movs	r3, #2
 8005d64:	e07f      	b.n	8005e66 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2202      	movs	r2, #2
 8005d72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	22ca      	movs	r2, #202	; 0xca
 8005d7c:	625a      	str	r2, [r3, #36]	; 0x24
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2253      	movs	r2, #83	; 0x53
 8005d84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	689a      	ldr	r2, [r3, #8]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d94:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005da6:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d120      	bne.n	8005df8 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8005db6:	f7fb f8eb 	bl	8000f90 <HAL_GetTick>
 8005dba:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8005dbc:	e015      	b.n	8005dea <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005dbe:	f7fb f8e7 	bl	8000f90 <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dcc:	d90d      	bls.n	8005dea <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	22ff      	movs	r2, #255	; 0xff
 8005dd4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2203      	movs	r2, #3
 8005dda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e03d      	b.n	8005e66 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f003 0304 	and.w	r3, r3, #4
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d0e2      	beq.n	8005dbe <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f023 0107 	bic.w	r1, r3, #7
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005e14:	4b16      	ldr	r3, [pc, #88]	; (8005e70 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a15      	ldr	r2, [pc, #84]	; (8005e70 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005e1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e1e:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005e20:	4b13      	ldr	r3, [pc, #76]	; (8005e70 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	4a12      	ldr	r2, [pc, #72]	; (8005e70 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005e26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e2a:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689a      	ldr	r2, [r3, #8]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e3a:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689a      	ldr	r2, [r3, #8]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e4a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	22ff      	movs	r2, #255	; 0xff
 8005e52:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	40010400 	.word	0x40010400

08005e74 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8005e7c:	4b0f      	ldr	r3, [pc, #60]	; (8005ebc <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8005e7e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005e82:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00b      	beq.n	8005eaa <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005ea2:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7fa fb91 	bl	80005cc <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8005eb2:	bf00      	nop
 8005eb4:	3708      	adds	r7, #8
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	40010400 	.word	0x40010400

08005ec0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e040      	b.n	8005f54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d106      	bne.n	8005ee8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7fa fe3e 	bl	8000b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2224      	movs	r2, #36	; 0x24
 8005eec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 0201 	bic.w	r2, r2, #1
 8005efc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f82c 	bl	8005f5c <UART_SetConfig>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d101      	bne.n	8005f0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e022      	b.n	8005f54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d002      	beq.n	8005f1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 faaa 	bl	8006470 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689a      	ldr	r2, [r3, #8]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0201 	orr.w	r2, r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fb31 	bl	80065b4 <UART_CheckIdleState>
 8005f52:	4603      	mov	r3, r0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f5c:	b5b0      	push	{r4, r5, r7, lr}
 8005f5e:	b088      	sub	sp, #32
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689a      	ldr	r2, [r3, #8]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	431a      	orrs	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	431a      	orrs	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	69db      	ldr	r3, [r3, #28]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	4bad      	ldr	r3, [pc, #692]	; (800623c <UART_SetConfig+0x2e0>)
 8005f88:	4013      	ands	r3, r2
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	6812      	ldr	r2, [r2, #0]
 8005f8e:	69f9      	ldr	r1, [r7, #28]
 8005f90:	430b      	orrs	r3, r1
 8005f92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68da      	ldr	r2, [r3, #12]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4aa2      	ldr	r2, [pc, #648]	; (8006240 <UART_SetConfig+0x2e4>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d004      	beq.n	8005fc4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	69fa      	ldr	r2, [r7, #28]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	69fa      	ldr	r2, [r7, #28]
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a99      	ldr	r2, [pc, #612]	; (8006244 <UART_SetConfig+0x2e8>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d121      	bne.n	8006026 <UART_SetConfig+0xca>
 8005fe2:	4b99      	ldr	r3, [pc, #612]	; (8006248 <UART_SetConfig+0x2ec>)
 8005fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe8:	f003 0303 	and.w	r3, r3, #3
 8005fec:	2b03      	cmp	r3, #3
 8005fee:	d817      	bhi.n	8006020 <UART_SetConfig+0xc4>
 8005ff0:	a201      	add	r2, pc, #4	; (adr r2, 8005ff8 <UART_SetConfig+0x9c>)
 8005ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff6:	bf00      	nop
 8005ff8:	08006009 	.word	0x08006009
 8005ffc:	08006015 	.word	0x08006015
 8006000:	0800600f 	.word	0x0800600f
 8006004:	0800601b 	.word	0x0800601b
 8006008:	2301      	movs	r3, #1
 800600a:	76fb      	strb	r3, [r7, #27]
 800600c:	e0e7      	b.n	80061de <UART_SetConfig+0x282>
 800600e:	2302      	movs	r3, #2
 8006010:	76fb      	strb	r3, [r7, #27]
 8006012:	e0e4      	b.n	80061de <UART_SetConfig+0x282>
 8006014:	2304      	movs	r3, #4
 8006016:	76fb      	strb	r3, [r7, #27]
 8006018:	e0e1      	b.n	80061de <UART_SetConfig+0x282>
 800601a:	2308      	movs	r3, #8
 800601c:	76fb      	strb	r3, [r7, #27]
 800601e:	e0de      	b.n	80061de <UART_SetConfig+0x282>
 8006020:	2310      	movs	r3, #16
 8006022:	76fb      	strb	r3, [r7, #27]
 8006024:	e0db      	b.n	80061de <UART_SetConfig+0x282>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a88      	ldr	r2, [pc, #544]	; (800624c <UART_SetConfig+0x2f0>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d132      	bne.n	8006096 <UART_SetConfig+0x13a>
 8006030:	4b85      	ldr	r3, [pc, #532]	; (8006248 <UART_SetConfig+0x2ec>)
 8006032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006036:	f003 030c 	and.w	r3, r3, #12
 800603a:	2b0c      	cmp	r3, #12
 800603c:	d828      	bhi.n	8006090 <UART_SetConfig+0x134>
 800603e:	a201      	add	r2, pc, #4	; (adr r2, 8006044 <UART_SetConfig+0xe8>)
 8006040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006044:	08006079 	.word	0x08006079
 8006048:	08006091 	.word	0x08006091
 800604c:	08006091 	.word	0x08006091
 8006050:	08006091 	.word	0x08006091
 8006054:	08006085 	.word	0x08006085
 8006058:	08006091 	.word	0x08006091
 800605c:	08006091 	.word	0x08006091
 8006060:	08006091 	.word	0x08006091
 8006064:	0800607f 	.word	0x0800607f
 8006068:	08006091 	.word	0x08006091
 800606c:	08006091 	.word	0x08006091
 8006070:	08006091 	.word	0x08006091
 8006074:	0800608b 	.word	0x0800608b
 8006078:	2300      	movs	r3, #0
 800607a:	76fb      	strb	r3, [r7, #27]
 800607c:	e0af      	b.n	80061de <UART_SetConfig+0x282>
 800607e:	2302      	movs	r3, #2
 8006080:	76fb      	strb	r3, [r7, #27]
 8006082:	e0ac      	b.n	80061de <UART_SetConfig+0x282>
 8006084:	2304      	movs	r3, #4
 8006086:	76fb      	strb	r3, [r7, #27]
 8006088:	e0a9      	b.n	80061de <UART_SetConfig+0x282>
 800608a:	2308      	movs	r3, #8
 800608c:	76fb      	strb	r3, [r7, #27]
 800608e:	e0a6      	b.n	80061de <UART_SetConfig+0x282>
 8006090:	2310      	movs	r3, #16
 8006092:	76fb      	strb	r3, [r7, #27]
 8006094:	e0a3      	b.n	80061de <UART_SetConfig+0x282>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a6d      	ldr	r2, [pc, #436]	; (8006250 <UART_SetConfig+0x2f4>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d120      	bne.n	80060e2 <UART_SetConfig+0x186>
 80060a0:	4b69      	ldr	r3, [pc, #420]	; (8006248 <UART_SetConfig+0x2ec>)
 80060a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060aa:	2b30      	cmp	r3, #48	; 0x30
 80060ac:	d013      	beq.n	80060d6 <UART_SetConfig+0x17a>
 80060ae:	2b30      	cmp	r3, #48	; 0x30
 80060b0:	d814      	bhi.n	80060dc <UART_SetConfig+0x180>
 80060b2:	2b20      	cmp	r3, #32
 80060b4:	d009      	beq.n	80060ca <UART_SetConfig+0x16e>
 80060b6:	2b20      	cmp	r3, #32
 80060b8:	d810      	bhi.n	80060dc <UART_SetConfig+0x180>
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d002      	beq.n	80060c4 <UART_SetConfig+0x168>
 80060be:	2b10      	cmp	r3, #16
 80060c0:	d006      	beq.n	80060d0 <UART_SetConfig+0x174>
 80060c2:	e00b      	b.n	80060dc <UART_SetConfig+0x180>
 80060c4:	2300      	movs	r3, #0
 80060c6:	76fb      	strb	r3, [r7, #27]
 80060c8:	e089      	b.n	80061de <UART_SetConfig+0x282>
 80060ca:	2302      	movs	r3, #2
 80060cc:	76fb      	strb	r3, [r7, #27]
 80060ce:	e086      	b.n	80061de <UART_SetConfig+0x282>
 80060d0:	2304      	movs	r3, #4
 80060d2:	76fb      	strb	r3, [r7, #27]
 80060d4:	e083      	b.n	80061de <UART_SetConfig+0x282>
 80060d6:	2308      	movs	r3, #8
 80060d8:	76fb      	strb	r3, [r7, #27]
 80060da:	e080      	b.n	80061de <UART_SetConfig+0x282>
 80060dc:	2310      	movs	r3, #16
 80060de:	76fb      	strb	r3, [r7, #27]
 80060e0:	e07d      	b.n	80061de <UART_SetConfig+0x282>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a5b      	ldr	r2, [pc, #364]	; (8006254 <UART_SetConfig+0x2f8>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d120      	bne.n	800612e <UART_SetConfig+0x1d2>
 80060ec:	4b56      	ldr	r3, [pc, #344]	; (8006248 <UART_SetConfig+0x2ec>)
 80060ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80060f6:	2bc0      	cmp	r3, #192	; 0xc0
 80060f8:	d013      	beq.n	8006122 <UART_SetConfig+0x1c6>
 80060fa:	2bc0      	cmp	r3, #192	; 0xc0
 80060fc:	d814      	bhi.n	8006128 <UART_SetConfig+0x1cc>
 80060fe:	2b80      	cmp	r3, #128	; 0x80
 8006100:	d009      	beq.n	8006116 <UART_SetConfig+0x1ba>
 8006102:	2b80      	cmp	r3, #128	; 0x80
 8006104:	d810      	bhi.n	8006128 <UART_SetConfig+0x1cc>
 8006106:	2b00      	cmp	r3, #0
 8006108:	d002      	beq.n	8006110 <UART_SetConfig+0x1b4>
 800610a:	2b40      	cmp	r3, #64	; 0x40
 800610c:	d006      	beq.n	800611c <UART_SetConfig+0x1c0>
 800610e:	e00b      	b.n	8006128 <UART_SetConfig+0x1cc>
 8006110:	2300      	movs	r3, #0
 8006112:	76fb      	strb	r3, [r7, #27]
 8006114:	e063      	b.n	80061de <UART_SetConfig+0x282>
 8006116:	2302      	movs	r3, #2
 8006118:	76fb      	strb	r3, [r7, #27]
 800611a:	e060      	b.n	80061de <UART_SetConfig+0x282>
 800611c:	2304      	movs	r3, #4
 800611e:	76fb      	strb	r3, [r7, #27]
 8006120:	e05d      	b.n	80061de <UART_SetConfig+0x282>
 8006122:	2308      	movs	r3, #8
 8006124:	76fb      	strb	r3, [r7, #27]
 8006126:	e05a      	b.n	80061de <UART_SetConfig+0x282>
 8006128:	2310      	movs	r3, #16
 800612a:	76fb      	strb	r3, [r7, #27]
 800612c:	e057      	b.n	80061de <UART_SetConfig+0x282>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a49      	ldr	r2, [pc, #292]	; (8006258 <UART_SetConfig+0x2fc>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d125      	bne.n	8006184 <UART_SetConfig+0x228>
 8006138:	4b43      	ldr	r3, [pc, #268]	; (8006248 <UART_SetConfig+0x2ec>)
 800613a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800613e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006142:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006146:	d017      	beq.n	8006178 <UART_SetConfig+0x21c>
 8006148:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800614c:	d817      	bhi.n	800617e <UART_SetConfig+0x222>
 800614e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006152:	d00b      	beq.n	800616c <UART_SetConfig+0x210>
 8006154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006158:	d811      	bhi.n	800617e <UART_SetConfig+0x222>
 800615a:	2b00      	cmp	r3, #0
 800615c:	d003      	beq.n	8006166 <UART_SetConfig+0x20a>
 800615e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006162:	d006      	beq.n	8006172 <UART_SetConfig+0x216>
 8006164:	e00b      	b.n	800617e <UART_SetConfig+0x222>
 8006166:	2300      	movs	r3, #0
 8006168:	76fb      	strb	r3, [r7, #27]
 800616a:	e038      	b.n	80061de <UART_SetConfig+0x282>
 800616c:	2302      	movs	r3, #2
 800616e:	76fb      	strb	r3, [r7, #27]
 8006170:	e035      	b.n	80061de <UART_SetConfig+0x282>
 8006172:	2304      	movs	r3, #4
 8006174:	76fb      	strb	r3, [r7, #27]
 8006176:	e032      	b.n	80061de <UART_SetConfig+0x282>
 8006178:	2308      	movs	r3, #8
 800617a:	76fb      	strb	r3, [r7, #27]
 800617c:	e02f      	b.n	80061de <UART_SetConfig+0x282>
 800617e:	2310      	movs	r3, #16
 8006180:	76fb      	strb	r3, [r7, #27]
 8006182:	e02c      	b.n	80061de <UART_SetConfig+0x282>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a2d      	ldr	r2, [pc, #180]	; (8006240 <UART_SetConfig+0x2e4>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d125      	bne.n	80061da <UART_SetConfig+0x27e>
 800618e:	4b2e      	ldr	r3, [pc, #184]	; (8006248 <UART_SetConfig+0x2ec>)
 8006190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006194:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006198:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800619c:	d017      	beq.n	80061ce <UART_SetConfig+0x272>
 800619e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061a2:	d817      	bhi.n	80061d4 <UART_SetConfig+0x278>
 80061a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061a8:	d00b      	beq.n	80061c2 <UART_SetConfig+0x266>
 80061aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061ae:	d811      	bhi.n	80061d4 <UART_SetConfig+0x278>
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d003      	beq.n	80061bc <UART_SetConfig+0x260>
 80061b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061b8:	d006      	beq.n	80061c8 <UART_SetConfig+0x26c>
 80061ba:	e00b      	b.n	80061d4 <UART_SetConfig+0x278>
 80061bc:	2300      	movs	r3, #0
 80061be:	76fb      	strb	r3, [r7, #27]
 80061c0:	e00d      	b.n	80061de <UART_SetConfig+0x282>
 80061c2:	2302      	movs	r3, #2
 80061c4:	76fb      	strb	r3, [r7, #27]
 80061c6:	e00a      	b.n	80061de <UART_SetConfig+0x282>
 80061c8:	2304      	movs	r3, #4
 80061ca:	76fb      	strb	r3, [r7, #27]
 80061cc:	e007      	b.n	80061de <UART_SetConfig+0x282>
 80061ce:	2308      	movs	r3, #8
 80061d0:	76fb      	strb	r3, [r7, #27]
 80061d2:	e004      	b.n	80061de <UART_SetConfig+0x282>
 80061d4:	2310      	movs	r3, #16
 80061d6:	76fb      	strb	r3, [r7, #27]
 80061d8:	e001      	b.n	80061de <UART_SetConfig+0x282>
 80061da:	2310      	movs	r3, #16
 80061dc:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a17      	ldr	r2, [pc, #92]	; (8006240 <UART_SetConfig+0x2e4>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	f040 8087 	bne.w	80062f8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80061ea:	7efb      	ldrb	r3, [r7, #27]
 80061ec:	2b08      	cmp	r3, #8
 80061ee:	d837      	bhi.n	8006260 <UART_SetConfig+0x304>
 80061f0:	a201      	add	r2, pc, #4	; (adr r2, 80061f8 <UART_SetConfig+0x29c>)
 80061f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f6:	bf00      	nop
 80061f8:	0800621d 	.word	0x0800621d
 80061fc:	08006261 	.word	0x08006261
 8006200:	08006225 	.word	0x08006225
 8006204:	08006261 	.word	0x08006261
 8006208:	0800622b 	.word	0x0800622b
 800620c:	08006261 	.word	0x08006261
 8006210:	08006261 	.word	0x08006261
 8006214:	08006261 	.word	0x08006261
 8006218:	08006233 	.word	0x08006233
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800621c:	f7fe ff1e 	bl	800505c <HAL_RCC_GetPCLK1Freq>
 8006220:	6178      	str	r0, [r7, #20]
        break;
 8006222:	e022      	b.n	800626a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006224:	4b0d      	ldr	r3, [pc, #52]	; (800625c <UART_SetConfig+0x300>)
 8006226:	617b      	str	r3, [r7, #20]
        break;
 8006228:	e01f      	b.n	800626a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800622a:	f7fe fe7f 	bl	8004f2c <HAL_RCC_GetSysClockFreq>
 800622e:	6178      	str	r0, [r7, #20]
        break;
 8006230:	e01b      	b.n	800626a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006236:	617b      	str	r3, [r7, #20]
        break;
 8006238:	e017      	b.n	800626a <UART_SetConfig+0x30e>
 800623a:	bf00      	nop
 800623c:	efff69f3 	.word	0xefff69f3
 8006240:	40008000 	.word	0x40008000
 8006244:	40013800 	.word	0x40013800
 8006248:	40021000 	.word	0x40021000
 800624c:	40004400 	.word	0x40004400
 8006250:	40004800 	.word	0x40004800
 8006254:	40004c00 	.word	0x40004c00
 8006258:	40005000 	.word	0x40005000
 800625c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006260:	2300      	movs	r3, #0
 8006262:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	76bb      	strb	r3, [r7, #26]
        break;
 8006268:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 80f1 	beq.w	8006454 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685a      	ldr	r2, [r3, #4]
 8006276:	4613      	mov	r3, r2
 8006278:	005b      	lsls	r3, r3, #1
 800627a:	4413      	add	r3, r2
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	429a      	cmp	r2, r3
 8006280:	d305      	bcc.n	800628e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	429a      	cmp	r2, r3
 800628c:	d902      	bls.n	8006294 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	76bb      	strb	r3, [r7, #26]
 8006292:	e0df      	b.n	8006454 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	4618      	mov	r0, r3
 8006298:	f04f 0100 	mov.w	r1, #0
 800629c:	f04f 0200 	mov.w	r2, #0
 80062a0:	f04f 0300 	mov.w	r3, #0
 80062a4:	020b      	lsls	r3, r1, #8
 80062a6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80062aa:	0202      	lsls	r2, r0, #8
 80062ac:	6879      	ldr	r1, [r7, #4]
 80062ae:	6849      	ldr	r1, [r1, #4]
 80062b0:	0849      	lsrs	r1, r1, #1
 80062b2:	4608      	mov	r0, r1
 80062b4:	f04f 0100 	mov.w	r1, #0
 80062b8:	1814      	adds	r4, r2, r0
 80062ba:	eb43 0501 	adc.w	r5, r3, r1
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	461a      	mov	r2, r3
 80062c4:	f04f 0300 	mov.w	r3, #0
 80062c8:	4620      	mov	r0, r4
 80062ca:	4629      	mov	r1, r5
 80062cc:	f7f9 ffe0 	bl	8000290 <__aeabi_uldivmod>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	4613      	mov	r3, r2
 80062d6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062de:	d308      	bcc.n	80062f2 <UART_SetConfig+0x396>
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062e6:	d204      	bcs.n	80062f2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	60da      	str	r2, [r3, #12]
 80062f0:	e0b0      	b.n	8006454 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	76bb      	strb	r3, [r7, #26]
 80062f6:	e0ad      	b.n	8006454 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	69db      	ldr	r3, [r3, #28]
 80062fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006300:	d15c      	bne.n	80063bc <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006302:	7efb      	ldrb	r3, [r7, #27]
 8006304:	2b08      	cmp	r3, #8
 8006306:	d828      	bhi.n	800635a <UART_SetConfig+0x3fe>
 8006308:	a201      	add	r2, pc, #4	; (adr r2, 8006310 <UART_SetConfig+0x3b4>)
 800630a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630e:	bf00      	nop
 8006310:	08006335 	.word	0x08006335
 8006314:	0800633d 	.word	0x0800633d
 8006318:	08006345 	.word	0x08006345
 800631c:	0800635b 	.word	0x0800635b
 8006320:	0800634b 	.word	0x0800634b
 8006324:	0800635b 	.word	0x0800635b
 8006328:	0800635b 	.word	0x0800635b
 800632c:	0800635b 	.word	0x0800635b
 8006330:	08006353 	.word	0x08006353
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006334:	f7fe fe92 	bl	800505c <HAL_RCC_GetPCLK1Freq>
 8006338:	6178      	str	r0, [r7, #20]
        break;
 800633a:	e013      	b.n	8006364 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800633c:	f7fe fea4 	bl	8005088 <HAL_RCC_GetPCLK2Freq>
 8006340:	6178      	str	r0, [r7, #20]
        break;
 8006342:	e00f      	b.n	8006364 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006344:	4b49      	ldr	r3, [pc, #292]	; (800646c <UART_SetConfig+0x510>)
 8006346:	617b      	str	r3, [r7, #20]
        break;
 8006348:	e00c      	b.n	8006364 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800634a:	f7fe fdef 	bl	8004f2c <HAL_RCC_GetSysClockFreq>
 800634e:	6178      	str	r0, [r7, #20]
        break;
 8006350:	e008      	b.n	8006364 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006356:	617b      	str	r3, [r7, #20]
        break;
 8006358:	e004      	b.n	8006364 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800635a:	2300      	movs	r3, #0
 800635c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	76bb      	strb	r3, [r7, #26]
        break;
 8006362:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d074      	beq.n	8006454 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	005a      	lsls	r2, r3, #1
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	085b      	lsrs	r3, r3, #1
 8006374:	441a      	add	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	fbb2 f3f3 	udiv	r3, r2, r3
 800637e:	b29b      	uxth	r3, r3
 8006380:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	2b0f      	cmp	r3, #15
 8006386:	d916      	bls.n	80063b6 <UART_SetConfig+0x45a>
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800638e:	d212      	bcs.n	80063b6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	b29b      	uxth	r3, r3
 8006394:	f023 030f 	bic.w	r3, r3, #15
 8006398:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	085b      	lsrs	r3, r3, #1
 800639e:	b29b      	uxth	r3, r3
 80063a0:	f003 0307 	and.w	r3, r3, #7
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	89fb      	ldrh	r3, [r7, #14]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	89fa      	ldrh	r2, [r7, #14]
 80063b2:	60da      	str	r2, [r3, #12]
 80063b4:	e04e      	b.n	8006454 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	76bb      	strb	r3, [r7, #26]
 80063ba:	e04b      	b.n	8006454 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063bc:	7efb      	ldrb	r3, [r7, #27]
 80063be:	2b08      	cmp	r3, #8
 80063c0:	d827      	bhi.n	8006412 <UART_SetConfig+0x4b6>
 80063c2:	a201      	add	r2, pc, #4	; (adr r2, 80063c8 <UART_SetConfig+0x46c>)
 80063c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c8:	080063ed 	.word	0x080063ed
 80063cc:	080063f5 	.word	0x080063f5
 80063d0:	080063fd 	.word	0x080063fd
 80063d4:	08006413 	.word	0x08006413
 80063d8:	08006403 	.word	0x08006403
 80063dc:	08006413 	.word	0x08006413
 80063e0:	08006413 	.word	0x08006413
 80063e4:	08006413 	.word	0x08006413
 80063e8:	0800640b 	.word	0x0800640b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063ec:	f7fe fe36 	bl	800505c <HAL_RCC_GetPCLK1Freq>
 80063f0:	6178      	str	r0, [r7, #20]
        break;
 80063f2:	e013      	b.n	800641c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063f4:	f7fe fe48 	bl	8005088 <HAL_RCC_GetPCLK2Freq>
 80063f8:	6178      	str	r0, [r7, #20]
        break;
 80063fa:	e00f      	b.n	800641c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063fc:	4b1b      	ldr	r3, [pc, #108]	; (800646c <UART_SetConfig+0x510>)
 80063fe:	617b      	str	r3, [r7, #20]
        break;
 8006400:	e00c      	b.n	800641c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006402:	f7fe fd93 	bl	8004f2c <HAL_RCC_GetSysClockFreq>
 8006406:	6178      	str	r0, [r7, #20]
        break;
 8006408:	e008      	b.n	800641c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800640a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800640e:	617b      	str	r3, [r7, #20]
        break;
 8006410:	e004      	b.n	800641c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006412:	2300      	movs	r3, #0
 8006414:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	76bb      	strb	r3, [r7, #26]
        break;
 800641a:	bf00      	nop
    }

    if (pclk != 0U)
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d018      	beq.n	8006454 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	085a      	lsrs	r2, r3, #1
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	441a      	add	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	fbb2 f3f3 	udiv	r3, r2, r3
 8006434:	b29b      	uxth	r3, r3
 8006436:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	2b0f      	cmp	r3, #15
 800643c:	d908      	bls.n	8006450 <UART_SetConfig+0x4f4>
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006444:	d204      	bcs.n	8006450 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	60da      	str	r2, [r3, #12]
 800644e:	e001      	b.n	8006454 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006460:	7ebb      	ldrb	r3, [r7, #26]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3720      	adds	r7, #32
 8006466:	46bd      	mov	sp, r7
 8006468:	bdb0      	pop	{r4, r5, r7, pc}
 800646a:	bf00      	nop
 800646c:	00f42400 	.word	0x00f42400

08006470 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00a      	beq.n	800649a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	430a      	orrs	r2, r1
 8006498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00a      	beq.n	80064bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c0:	f003 0304 	and.w	r3, r3, #4
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00a      	beq.n	80064de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	430a      	orrs	r2, r1
 80064dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e2:	f003 0308 	and.w	r3, r3, #8
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00a      	beq.n	8006500 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	430a      	orrs	r2, r1
 80064fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006504:	f003 0310 	and.w	r3, r3, #16
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00a      	beq.n	8006522 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	430a      	orrs	r2, r1
 8006520:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006526:	f003 0320 	and.w	r3, r3, #32
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00a      	beq.n	8006544 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	430a      	orrs	r2, r1
 8006542:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654c:	2b00      	cmp	r3, #0
 800654e:	d01a      	beq.n	8006586 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	430a      	orrs	r2, r1
 8006564:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800656e:	d10a      	bne.n	8006586 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	430a      	orrs	r2, r1
 8006584:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00a      	beq.n	80065a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	430a      	orrs	r2, r1
 80065a6:	605a      	str	r2, [r3, #4]
  }
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af02      	add	r7, sp, #8
 80065ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065c4:	f7fa fce4 	bl	8000f90 <HAL_GetTick>
 80065c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0308 	and.w	r3, r3, #8
 80065d4:	2b08      	cmp	r3, #8
 80065d6:	d10e      	bne.n	80065f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065dc:	9300      	str	r3, [sp, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f82d 	bl	8006646 <UART_WaitOnFlagUntilTimeout>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e023      	b.n	800663e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0304 	and.w	r3, r3, #4
 8006600:	2b04      	cmp	r3, #4
 8006602:	d10e      	bne.n	8006622 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006604:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f817 	bl	8006646 <UART_WaitOnFlagUntilTimeout>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e00d      	b.n	800663e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2220      	movs	r2, #32
 8006626:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2220      	movs	r2, #32
 800662c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b084      	sub	sp, #16
 800664a:	af00      	add	r7, sp, #0
 800664c:	60f8      	str	r0, [r7, #12]
 800664e:	60b9      	str	r1, [r7, #8]
 8006650:	603b      	str	r3, [r7, #0]
 8006652:	4613      	mov	r3, r2
 8006654:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006656:	e05e      	b.n	8006716 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665e:	d05a      	beq.n	8006716 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006660:	f7fa fc96 	bl	8000f90 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	429a      	cmp	r2, r3
 800666e:	d302      	bcc.n	8006676 <UART_WaitOnFlagUntilTimeout+0x30>
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d11b      	bne.n	80066ae <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006684:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	689a      	ldr	r2, [r3, #8]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f022 0201 	bic.w	r2, r2, #1
 8006694:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2220      	movs	r2, #32
 800669a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2220      	movs	r2, #32
 80066a0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e043      	b.n	8006736 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0304 	and.w	r3, r3, #4
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d02c      	beq.n	8006716 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	69db      	ldr	r3, [r3, #28]
 80066c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066ca:	d124      	bne.n	8006716 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066d4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80066e4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	689a      	ldr	r2, [r3, #8]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 0201 	bic.w	r2, r2, #1
 80066f4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2220      	movs	r2, #32
 80066fa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2220      	movs	r2, #32
 8006700:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2220      	movs	r2, #32
 8006706:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e00f      	b.n	8006736 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	69da      	ldr	r2, [r3, #28]
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	4013      	ands	r3, r2
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	429a      	cmp	r2, r3
 8006724:	bf0c      	ite	eq
 8006726:	2301      	moveq	r3, #1
 8006728:	2300      	movne	r3, #0
 800672a:	b2db      	uxtb	r3, r3
 800672c:	461a      	mov	r2, r3
 800672e:	79fb      	ldrb	r3, [r7, #7]
 8006730:	429a      	cmp	r2, r3
 8006732:	d091      	beq.n	8006658 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800673e:	b084      	sub	sp, #16
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	f107 001c 	add.w	r0, r7, #28
 800674c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f92b 	bl	80069b8 <USB_CoreReset>
 8006762:	4603      	mov	r3, r0
 8006764:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006768:	2b00      	cmp	r3, #0
 800676a:	d106      	bne.n	800677a <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006770:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	639a      	str	r2, [r3, #56]	; 0x38
 8006778:	e005      	b.n	8006786 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8006786:	7bfb      	ldrb	r3, [r7, #15]
}
 8006788:	4618      	mov	r0, r3
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006792:	b004      	add	sp, #16
 8006794:	4770      	bx	lr

08006796 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006796:	b480      	push	{r7}
 8006798:	b083      	sub	sp, #12
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f043 0201 	orr.w	r2, r3, #1
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f023 0201 	bic.w	r2, r3, #1
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b082      	sub	sp, #8
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	460b      	mov	r3, r1
 80067e4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80067f2:	78fb      	ldrb	r3, [r7, #3]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d106      	bne.n	8006806 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	60da      	str	r2, [r3, #12]
 8006804:	e00b      	b.n	800681e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006806:	78fb      	ldrb	r3, [r7, #3]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d106      	bne.n	800681a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	60da      	str	r2, [r3, #12]
 8006818:	e001      	b.n	800681e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e003      	b.n	8006826 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800681e:	2032      	movs	r0, #50	; 0x32
 8006820:	f7fa fbc2 	bl	8000fa8 <HAL_Delay>

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
	...

08006830 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800683a:	2300      	movs	r3, #0
 800683c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	019b      	lsls	r3, r3, #6
 8006842:	f043 0220 	orr.w	r2, r3, #32
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	3301      	adds	r3, #1
 800684e:	60fb      	str	r3, [r7, #12]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4a09      	ldr	r2, [pc, #36]	; (8006878 <USB_FlushTxFifo+0x48>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d901      	bls.n	800685c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e006      	b.n	800686a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	f003 0320 	and.w	r3, r3, #32
 8006864:	2b20      	cmp	r3, #32
 8006866:	d0f0      	beq.n	800684a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	00030d40 	.word	0x00030d40

0800687c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006884:	2300      	movs	r3, #0
 8006886:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2210      	movs	r2, #16
 800688c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	3301      	adds	r3, #1
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	4a09      	ldr	r2, [pc, #36]	; (80068bc <USB_FlushRxFifo+0x40>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d901      	bls.n	80068a0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e006      	b.n	80068ae <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	f003 0310 	and.w	r3, r3, #16
 80068a8:	2b10      	cmp	r3, #16
 80068aa:	d0f0      	beq.n	800688e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	00030d40 	.word	0x00030d40

080068c0 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b089      	sub	sp, #36	; 0x24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	4611      	mov	r1, r2
 80068cc:	461a      	mov	r2, r3
 80068ce:	460b      	mov	r3, r1
 80068d0:	71fb      	strb	r3, [r7, #7]
 80068d2:	4613      	mov	r3, r2
 80068d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80068de:	88bb      	ldrh	r3, [r7, #4]
 80068e0:	3303      	adds	r3, #3
 80068e2:	089b      	lsrs	r3, r3, #2
 80068e4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80068e6:	2300      	movs	r3, #0
 80068e8:	61bb      	str	r3, [r7, #24]
 80068ea:	e00f      	b.n	800690c <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80068ec:	79fb      	ldrb	r3, [r7, #7]
 80068ee:	031a      	lsls	r2, r3, #12
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068f8:	461a      	mov	r2, r3
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6013      	str	r3, [r2, #0]
    pSrc++;
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	3304      	adds	r3, #4
 8006904:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	3301      	adds	r3, #1
 800690a:	61bb      	str	r3, [r7, #24]
 800690c:	69ba      	ldr	r2, [r7, #24]
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	429a      	cmp	r2, r3
 8006912:	d3eb      	bcc.n	80068ec <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3724      	adds	r7, #36	; 0x24
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006922:	b480      	push	{r7}
 8006924:	b089      	sub	sp, #36	; 0x24
 8006926:	af00      	add	r7, sp, #0
 8006928:	60f8      	str	r0, [r7, #12]
 800692a:	60b9      	str	r1, [r7, #8]
 800692c:	4613      	mov	r3, r2
 800692e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006938:	88fb      	ldrh	r3, [r7, #6]
 800693a:	3303      	adds	r3, #3
 800693c:	089b      	lsrs	r3, r3, #2
 800693e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006940:	2300      	movs	r3, #0
 8006942:	61bb      	str	r3, [r7, #24]
 8006944:	e00b      	b.n	800695e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	601a      	str	r2, [r3, #0]
    pDest++;
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	3304      	adds	r3, #4
 8006956:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	3301      	adds	r3, #1
 800695c:	61bb      	str	r3, [r7, #24]
 800695e:	69ba      	ldr	r2, [r7, #24]
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	429a      	cmp	r2, r3
 8006964:	d3ef      	bcc.n	8006946 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006966:	69fb      	ldr	r3, [r7, #28]
}
 8006968:	4618      	mov	r0, r3
 800696a:	3724      	adds	r7, #36	; 0x24
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	4013      	ands	r3, r2
 800698a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800698c:	68fb      	ldr	r3, [r7, #12]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3714      	adds	r7, #20
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800699a:	b480      	push	{r7}
 800699c:	b083      	sub	sp, #12
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	f003 0301 	and.w	r3, r3, #1
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
	...

080069b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80069c0:	2300      	movs	r3, #0
 80069c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	3301      	adds	r3, #1
 80069c8:	60fb      	str	r3, [r7, #12]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	4a13      	ldr	r2, [pc, #76]	; (8006a1c <USB_CoreReset+0x64>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d901      	bls.n	80069d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e01b      	b.n	8006a0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	daf2      	bge.n	80069c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069de:	2300      	movs	r3, #0
 80069e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	f043 0201 	orr.w	r2, r3, #1
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	3301      	adds	r3, #1
 80069f2:	60fb      	str	r3, [r7, #12]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4a09      	ldr	r2, [pc, #36]	; (8006a1c <USB_CoreReset+0x64>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d901      	bls.n	8006a00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e006      	b.n	8006a0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	f003 0301 	and.w	r3, r3, #1
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d0f0      	beq.n	80069ee <USB_CoreReset+0x36>

  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3714      	adds	r7, #20
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	00030d40 	.word	0x00030d40

08006a20 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a20:	b084      	sub	sp, #16
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b084      	sub	sp, #16
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
 8006a2a:	f107 001c 	add.w	r0, r7, #28
 8006a2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	2300      	movs	r3, #0
 8006a40:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a46:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006a68:	f023 0304 	bic.w	r3, r3, #4
 8006a6c:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006a6e:	2110      	movs	r1, #16
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7ff fedd 	bl	8006830 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7ff ff00 	bl	800687c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	60fb      	str	r3, [r7, #12]
 8006a80:	e015      	b.n	8006aae <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a8e:	461a      	mov	r2, r3
 8006a90:	f04f 33ff 	mov.w	r3, #4294967295
 8006a94:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	015a      	lsls	r2, r3, #5
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	60fb      	str	r3, [r7, #12]
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d3e5      	bcc.n	8006a82 <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006ab6:	2101      	movs	r1, #1
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 f893 	bl	8006be4 <USB_DriveVbus>

  HAL_Delay(200U);
 8006abe:	20c8      	movs	r0, #200	; 0xc8
 8006ac0:	f7fa fa72 	bl	8000fa8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ad0:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2280      	movs	r2, #128	; 0x80
 8006ad6:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a0d      	ldr	r2, [pc, #52]	; (8006b10 <USB_HostInit+0xf0>)
 8006adc:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a0c      	ldr	r2, [pc, #48]	; (8006b14 <USB_HostInit+0xf4>)
 8006ae2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	f043 0210 	orr.w	r2, r3, #16
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	699a      	ldr	r2, [r3, #24]
 8006af6:	4b08      	ldr	r3, [pc, #32]	; (8006b18 <USB_HostInit+0xf8>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b0a:	b004      	add	sp, #16
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	00600080 	.word	0x00600080
 8006b14:	004000e0 	.word	0x004000e0
 8006b18:	a3200008 	.word	0xa3200008

08006b1c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b085      	sub	sp, #20
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	460b      	mov	r3, r1
 8006b26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b3a:	f023 0303 	bic.w	r3, r3, #3
 8006b3e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	78fb      	ldrb	r3, [r7, #3]
 8006b4a:	f003 0303 	and.w	r3, r3, #3
 8006b4e:	68f9      	ldr	r1, [r7, #12]
 8006b50:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006b54:	4313      	orrs	r3, r2
 8006b56:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006b58:	78fb      	ldrb	r3, [r7, #3]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d107      	bne.n	8006b6e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b64:	461a      	mov	r2, r3
 8006b66:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006b6a:	6053      	str	r3, [r2, #4]
 8006b6c:	e009      	b.n	8006b82 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006b6e:	78fb      	ldrb	r3, [r7, #3]
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d106      	bne.n	8006b82 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	f241 7370 	movw	r3, #6000	; 0x1770
 8006b80:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006bb0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bbe:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006bc0:	2064      	movs	r0, #100	; 0x64
 8006bc2:	f7fa f9f1 	bl	8000fa8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006bce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bd2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006bd4:	200a      	movs	r0, #10
 8006bd6:	f7fa f9e7 	bl	8000fa8 <HAL_Delay>

  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	460b      	mov	r3, r1
 8006bee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006c08:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d109      	bne.n	8006c28 <USB_DriveVbus+0x44>
 8006c14:	78fb      	ldrb	r3, [r7, #3]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d106      	bne.n	8006c28 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006c22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c26:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c32:	d109      	bne.n	8006c48 <USB_DriveVbus+0x64>
 8006c34:	78fb      	ldrb	r3, [r7, #3]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d106      	bne.n	8006c48 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006c42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c46:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b085      	sub	sp, #20
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006c62:	2300      	movs	r3, #0
 8006c64:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	0c5b      	lsrs	r3, r3, #17
 8006c74:	f003 0303 	and.w	r3, r3, #3
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3714      	adds	r7, #20
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	b29b      	uxth	r3, r3
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
	...

08006ca8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b088      	sub	sp, #32
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	4608      	mov	r0, r1
 8006cb2:	4611      	mov	r1, r2
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	70fb      	strb	r3, [r7, #3]
 8006cba:	460b      	mov	r3, r1
 8006cbc:	70bb      	strb	r3, [r7, #2]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006cca:	78fb      	ldrb	r3, [r7, #3]
 8006ccc:	015a      	lsls	r2, r3, #5
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8006cdc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006cde:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006ce2:	2b03      	cmp	r3, #3
 8006ce4:	d867      	bhi.n	8006db6 <USB_HC_Init+0x10e>
 8006ce6:	a201      	add	r2, pc, #4	; (adr r2, 8006cec <USB_HC_Init+0x44>)
 8006ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cec:	08006cfd 	.word	0x08006cfd
 8006cf0:	08006d79 	.word	0x08006d79
 8006cf4:	08006cfd 	.word	0x08006cfd
 8006cf8:	08006d3b 	.word	0x08006d3b
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006cfc:	78fb      	ldrb	r3, [r7, #3]
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d08:	461a      	mov	r2, r3
 8006d0a:	f240 439d 	movw	r3, #1181	; 0x49d
 8006d0e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006d10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	da51      	bge.n	8006dbc <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006d18:	78fb      	ldrb	r3, [r7, #3]
 8006d1a:	015a      	lsls	r2, r3, #5
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	78fa      	ldrb	r2, [r7, #3]
 8006d28:	0151      	lsls	r1, r2, #5
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	440a      	add	r2, r1
 8006d2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d36:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006d38:	e040      	b.n	8006dbc <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d3a:	78fb      	ldrb	r3, [r7, #3]
 8006d3c:	015a      	lsls	r2, r3, #5
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	4413      	add	r3, r2
 8006d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d46:	461a      	mov	r2, r3
 8006d48:	f240 639d 	movw	r3, #1693	; 0x69d
 8006d4c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006d4e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	da34      	bge.n	8006dc0 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006d56:	78fb      	ldrb	r3, [r7, #3]
 8006d58:	015a      	lsls	r2, r3, #5
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	78fa      	ldrb	r2, [r7, #3]
 8006d66:	0151      	lsls	r1, r2, #5
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	440a      	add	r2, r1
 8006d6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d74:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006d76:	e023      	b.n	8006dc0 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d78:	78fb      	ldrb	r3, [r7, #3]
 8006d7a:	015a      	lsls	r2, r3, #5
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d84:	461a      	mov	r2, r3
 8006d86:	f240 2325 	movw	r3, #549	; 0x225
 8006d8a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006d8c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	da17      	bge.n	8006dc4 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006d94:	78fb      	ldrb	r3, [r7, #3]
 8006d96:	015a      	lsls	r2, r3, #5
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	78fa      	ldrb	r2, [r7, #3]
 8006da4:	0151      	lsls	r1, r2, #5
 8006da6:	693a      	ldr	r2, [r7, #16]
 8006da8:	440a      	add	r2, r1
 8006daa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dae:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006db2:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006db4:	e006      	b.n	8006dc4 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	77fb      	strb	r3, [r7, #31]
      break;
 8006dba:	e004      	b.n	8006dc6 <USB_HC_Init+0x11e>
      break;
 8006dbc:	bf00      	nop
 8006dbe:	e002      	b.n	8006dc6 <USB_HC_Init+0x11e>
      break;
 8006dc0:	bf00      	nop
 8006dc2:	e000      	b.n	8006dc6 <USB_HC_Init+0x11e>
      break;
 8006dc4:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dcc:	699a      	ldr	r2, [r3, #24]
 8006dce:	78fb      	ldrb	r3, [r7, #3]
 8006dd0:	f003 030f 	and.w	r3, r3, #15
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8006dda:	6939      	ldr	r1, [r7, #16]
 8006ddc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006de0:	4313      	orrs	r3, r2
 8006de2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006df0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	da03      	bge.n	8006e00 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006df8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dfc:	61bb      	str	r3, [r7, #24]
 8006dfe:	e001      	b.n	8006e04 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f7ff ff26 	bl	8006c56 <USB_GetHostSpeed>
 8006e0a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006e0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d106      	bne.n	8006e22 <USB_HC_Init+0x17a>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d003      	beq.n	8006e22 <USB_HC_Init+0x17a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006e1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006e1e:	617b      	str	r3, [r7, #20]
 8006e20:	e001      	b.n	8006e26 <USB_HC_Init+0x17e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006e22:	2300      	movs	r3, #0
 8006e24:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e26:	787b      	ldrb	r3, [r7, #1]
 8006e28:	059b      	lsls	r3, r3, #22
 8006e2a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006e2e:	78bb      	ldrb	r3, [r7, #2]
 8006e30:	02db      	lsls	r3, r3, #11
 8006e32:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e36:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006e38:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006e3c:	049b      	lsls	r3, r3, #18
 8006e3e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006e42:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006e44:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006e46:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006e4a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e50:	78fb      	ldrb	r3, [r7, #3]
 8006e52:	0159      	lsls	r1, r3, #5
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	440b      	add	r3, r1
 8006e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e5c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e62:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006e64:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006e68:	2b03      	cmp	r3, #3
 8006e6a:	d10f      	bne.n	8006e8c <USB_HC_Init+0x1e4>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006e6c:	78fb      	ldrb	r3, [r7, #3]
 8006e6e:	015a      	lsls	r2, r3, #5
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	4413      	add	r3, r2
 8006e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	78fa      	ldrb	r2, [r7, #3]
 8006e7c:	0151      	lsls	r1, r2, #5
 8006e7e:	693a      	ldr	r2, [r7, #16]
 8006e80:	440a      	add	r2, r1
 8006e82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e8a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006e8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3720      	adds	r7, #32
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop

08006e98 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b088      	sub	sp, #32
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	785b      	ldrb	r3, [r3, #1]
 8006eaa:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006eac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006eb0:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	695b      	ldr	r3, [r3, #20]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d018      	beq.n	8006eec <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	8912      	ldrh	r2, [r2, #8]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	8912      	ldrh	r2, [r2, #8]
 8006eca:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ece:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8006ed0:	8bfa      	ldrh	r2, [r7, #30]
 8006ed2:	8a7b      	ldrh	r3, [r7, #18]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d90b      	bls.n	8006ef0 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8006ed8:	8a7b      	ldrh	r3, [r7, #18]
 8006eda:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006edc:	8bfb      	ldrh	r3, [r7, #30]
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	8912      	ldrh	r2, [r2, #8]
 8006ee2:	fb02 f203 	mul.w	r2, r2, r3
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	611a      	str	r2, [r3, #16]
 8006eea:	e001      	b.n	8006ef0 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8006eec:	2301      	movs	r3, #1
 8006eee:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	78db      	ldrb	r3, [r3, #3]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d007      	beq.n	8006f08 <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006ef8:	8bfb      	ldrh	r3, [r7, #30]
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	8912      	ldrh	r2, [r2, #8]
 8006efe:	fb02 f203 	mul.w	r2, r2, r3
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	611a      	str	r2, [r3, #16]
 8006f06:	e003      	b.n	8006f10 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	695a      	ldr	r2, [r3, #20]
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f18:	8bfb      	ldrh	r3, [r7, #30]
 8006f1a:	04d9      	lsls	r1, r3, #19
 8006f1c:	4b59      	ldr	r3, [pc, #356]	; (8007084 <USB_HC_StartXfer+0x1ec>)
 8006f1e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f20:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	7a9b      	ldrb	r3, [r3, #10]
 8006f26:	075b      	lsls	r3, r3, #29
 8006f28:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f2c:	6979      	ldr	r1, [r7, #20]
 8006f2e:	0148      	lsls	r0, r1, #5
 8006f30:	69b9      	ldr	r1, [r7, #24]
 8006f32:	4401      	add	r1, r0
 8006f34:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f38:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f3a:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	f003 0301 	and.w	r3, r3, #1
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	bf0c      	ite	eq
 8006f4c:	2301      	moveq	r3, #1
 8006f4e:	2300      	movne	r3, #0
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	015a      	lsls	r2, r3, #5
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	0151      	lsls	r1, r2, #5
 8006f66:	69ba      	ldr	r2, [r7, #24]
 8006f68:	440a      	add	r2, r1
 8006f6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f6e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f72:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	015a      	lsls	r2, r3, #5
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	7c7b      	ldrb	r3, [r7, #17]
 8006f84:	075b      	lsls	r3, r3, #29
 8006f86:	6979      	ldr	r1, [r7, #20]
 8006f88:	0148      	lsls	r0, r1, #5
 8006f8a:	69b9      	ldr	r1, [r7, #24]
 8006f8c:	4401      	add	r1, r0
 8006f8e:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006f92:	4313      	orrs	r3, r2
 8006f94:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	015a      	lsls	r2, r3, #5
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006fac:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	78db      	ldrb	r3, [r3, #3]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d004      	beq.n	8006fc0 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fbc:	60bb      	str	r3, [r7, #8]
 8006fbe:	e003      	b.n	8006fc8 <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fc6:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fce:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	015a      	lsls	r2, r3, #5
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fdc:	461a      	mov	r2, r3
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	78db      	ldrb	r3, [r3, #3]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d147      	bne.n	800707a <USB_HC_StartXfer+0x1e2>
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d043      	beq.n	800707a <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	79db      	ldrb	r3, [r3, #7]
 8006ff6:	2b03      	cmp	r3, #3
 8006ff8:	d830      	bhi.n	800705c <USB_HC_StartXfer+0x1c4>
 8006ffa:	a201      	add	r2, pc, #4	; (adr r2, 8007000 <USB_HC_StartXfer+0x168>)
 8006ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007000:	08007011 	.word	0x08007011
 8007004:	08007035 	.word	0x08007035
 8007008:	08007011 	.word	0x08007011
 800700c:	08007035 	.word	0x08007035
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	695b      	ldr	r3, [r3, #20]
 8007014:	3303      	adds	r3, #3
 8007016:	089b      	lsrs	r3, r3, #2
 8007018:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800701a:	89fa      	ldrh	r2, [r7, #14]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007020:	b29b      	uxth	r3, r3
 8007022:	429a      	cmp	r2, r3
 8007024:	d91c      	bls.n	8007060 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	f043 0220 	orr.w	r2, r3, #32
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	619a      	str	r2, [r3, #24]
        }
        break;
 8007032:	e015      	b.n	8007060 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	3303      	adds	r3, #3
 800703a:	089b      	lsrs	r3, r3, #2
 800703c:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800703e:	89fa      	ldrh	r2, [r7, #14]
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	b29b      	uxth	r3, r3
 800704a:	429a      	cmp	r2, r3
 800704c:	d90a      	bls.n	8007064 <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	619a      	str	r2, [r3, #24]
        }
        break;
 800705a:	e003      	b.n	8007064 <USB_HC_StartXfer+0x1cc>

      default:
        break;
 800705c:	bf00      	nop
 800705e:	e002      	b.n	8007066 <USB_HC_StartXfer+0x1ce>
        break;
 8007060:	bf00      	nop
 8007062:	e000      	b.n	8007066 <USB_HC_StartXfer+0x1ce>
        break;
 8007064:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	68d9      	ldr	r1, [r3, #12]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	785a      	ldrb	r2, [r3, #1]
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	b29b      	uxth	r3, r3
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7ff fc23 	bl	80068c0 <USB_WritePacket>
  }

  return HAL_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3720      	adds	r7, #32
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	1ff80000 	.word	0x1ff80000

08007088 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800709a:	695b      	ldr	r3, [r3, #20]
 800709c:	b29b      	uxth	r3, r3
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80070aa:	b480      	push	{r7}
 80070ac:	b089      	sub	sp, #36	; 0x24
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	460b      	mov	r3, r1
 80070b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80070ba:	78fb      	ldrb	r3, [r7, #3]
 80070bc:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80070be:	2300      	movs	r3, #0
 80070c0:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	015a      	lsls	r2, r3, #5
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	0c9b      	lsrs	r3, r3, #18
 80070d2:	f003 0303 	and.w	r3, r3, #3
 80070d6:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	015a      	lsls	r2, r3, #5
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	4413      	add	r3, r2
 80070e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	0fdb      	lsrs	r3, r3, #31
 80070e8:	f003 0301 	and.w	r3, r3, #1
 80070ec:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f003 0320 	and.w	r3, r3, #32
 80070f6:	2b20      	cmp	r3, #32
 80070f8:	d104      	bne.n	8007104 <USB_HC_Halt+0x5a>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d101      	bne.n	8007104 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007100:	2300      	movs	r3, #0
 8007102:	e0e8      	b.n	80072d6 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d002      	beq.n	8007110 <USB_HC_Halt+0x66>
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	2b02      	cmp	r3, #2
 800710e:	d173      	bne.n	80071f8 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	4413      	add	r3, r2
 8007118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	0151      	lsls	r1, r2, #5
 8007122:	69ba      	ldr	r2, [r7, #24]
 8007124:	440a      	add	r2, r1
 8007126:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800712a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800712e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f003 0320 	and.w	r3, r3, #32
 8007138:	2b00      	cmp	r3, #0
 800713a:	f040 80cb 	bne.w	80072d4 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007142:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007146:	2b00      	cmp	r3, #0
 8007148:	d143      	bne.n	80071d2 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	015a      	lsls	r2, r3, #5
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	4413      	add	r3, r2
 8007152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	697a      	ldr	r2, [r7, #20]
 800715a:	0151      	lsls	r1, r2, #5
 800715c:	69ba      	ldr	r2, [r7, #24]
 800715e:	440a      	add	r2, r1
 8007160:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007164:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007168:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	015a      	lsls	r2, r3, #5
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	4413      	add	r3, r2
 8007172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	697a      	ldr	r2, [r7, #20]
 800717a:	0151      	lsls	r1, r2, #5
 800717c:	69ba      	ldr	r2, [r7, #24]
 800717e:	440a      	add	r2, r1
 8007180:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007184:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007188:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	015a      	lsls	r2, r3, #5
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	4413      	add	r3, r2
 8007192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	697a      	ldr	r2, [r7, #20]
 800719a:	0151      	lsls	r1, r2, #5
 800719c:	69ba      	ldr	r2, [r7, #24]
 800719e:	440a      	add	r2, r1
 80071a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071a8:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	3301      	adds	r3, #1
 80071ae:	61fb      	str	r3, [r7, #28]
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071b6:	d81d      	bhi.n	80071f4 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	015a      	lsls	r2, r3, #5
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	4413      	add	r3, r2
 80071c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071ce:	d0ec      	beq.n	80071aa <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071d0:	e080      	b.n	80072d4 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	015a      	lsls	r2, r3, #5
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	4413      	add	r3, r2
 80071da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	0151      	lsls	r1, r2, #5
 80071e4:	69ba      	ldr	r2, [r7, #24]
 80071e6:	440a      	add	r2, r1
 80071e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071f0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071f2:	e06f      	b.n	80072d4 <USB_HC_Halt+0x22a>
            break;
 80071f4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071f6:	e06d      	b.n	80072d4 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	0151      	lsls	r1, r2, #5
 800720a:	69ba      	ldr	r2, [r7, #24]
 800720c:	440a      	add	r2, r1
 800720e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007212:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007216:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d143      	bne.n	80072b0 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	015a      	lsls	r2, r3, #5
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	4413      	add	r3, r2
 8007230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	0151      	lsls	r1, r2, #5
 800723a:	69ba      	ldr	r2, [r7, #24]
 800723c:	440a      	add	r2, r1
 800723e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007242:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007246:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	015a      	lsls	r2, r3, #5
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	4413      	add	r3, r2
 8007250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	0151      	lsls	r1, r2, #5
 800725a:	69ba      	ldr	r2, [r7, #24]
 800725c:	440a      	add	r2, r1
 800725e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007262:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007266:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	4413      	add	r3, r2
 8007270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	0151      	lsls	r1, r2, #5
 800727a:	69ba      	ldr	r2, [r7, #24]
 800727c:	440a      	add	r2, r1
 800727e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007282:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007286:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	3301      	adds	r3, #1
 800728c:	61fb      	str	r3, [r7, #28]
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007294:	d81d      	bhi.n	80072d2 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	015a      	lsls	r2, r3, #5
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	4413      	add	r3, r2
 800729e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072ac:	d0ec      	beq.n	8007288 <USB_HC_Halt+0x1de>
 80072ae:	e011      	b.n	80072d4 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	015a      	lsls	r2, r3, #5
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	4413      	add	r3, r2
 80072b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	0151      	lsls	r1, r2, #5
 80072c2:	69ba      	ldr	r2, [r7, #24]
 80072c4:	440a      	add	r2, r1
 80072c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072ce:	6013      	str	r3, [r2, #0]
 80072d0:	e000      	b.n	80072d4 <USB_HC_Halt+0x22a>
          break;
 80072d2:	bf00      	nop
    }
  }

  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3724      	adds	r7, #36	; 0x24
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr

080072e2 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b086      	sub	sp, #24
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80072ee:	2300      	movs	r3, #0
 80072f0:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f7ff fa60 	bl	80067b8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80072f8:	2110      	movs	r1, #16
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f7ff fa98 	bl	8006830 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7ff fabb 	bl	800687c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007306:	2300      	movs	r3, #0
 8007308:	613b      	str	r3, [r7, #16]
 800730a:	e01f      	b.n	800734c <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	4413      	add	r3, r2
 8007314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007322:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800732a:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007332:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	015a      	lsls	r2, r3, #5
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	4413      	add	r3, r2
 800733c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007340:	461a      	mov	r2, r3
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	3301      	adds	r3, #1
 800734a:	613b      	str	r3, [r7, #16]
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	2b0f      	cmp	r3, #15
 8007350:	d9dc      	bls.n	800730c <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007352:	2300      	movs	r3, #0
 8007354:	613b      	str	r3, [r7, #16]
 8007356:	e034      	b.n	80073c2 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	015a      	lsls	r2, r3, #5
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	4413      	add	r3, r2
 8007360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800736e:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007376:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800737e:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	015a      	lsls	r2, r3, #5
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	4413      	add	r3, r2
 8007388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800738c:	461a      	mov	r2, r3
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	3301      	adds	r3, #1
 8007396:	617b      	str	r3, [r7, #20]
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800739e:	d80c      	bhi.n	80073ba <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	015a      	lsls	r2, r3, #5
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	4413      	add	r3, r2
 80073a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073b6:	d0ec      	beq.n	8007392 <USB_StopHost+0xb0>
 80073b8:	e000      	b.n	80073bc <USB_StopHost+0xda>
        break;
 80073ba:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	3301      	adds	r3, #1
 80073c0:	613b      	str	r3, [r7, #16]
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	2b0f      	cmp	r3, #15
 80073c6:	d9c7      	bls.n	8007358 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073ce:	461a      	mov	r2, r3
 80073d0:	f04f 33ff 	mov.w	r3, #4294967295
 80073d4:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f04f 32ff 	mov.w	r2, #4294967295
 80073dc:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f7ff f9d9 	bl	8006796 <USB_EnableGlobalInt>

  return HAL_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3718      	adds	r7, #24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <USBH_AUDIO_InterfaceInit>:
  *         The function init the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80073ee:	b590      	push	{r4, r7, lr}
 80073f0:	b08b      	sub	sp, #44	; 0x2c
 80073f2:	af04      	add	r7, sp, #16
 80073f4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef out_status, in_status;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  uint8_t  interface, index;
  uint16_t ep_size_out = 0U;
 80073f6:	2300      	movs	r3, #0
 80073f8:	82bb      	strh	r3, [r7, #20]
  uint16_t ep_size_in = 0U;
 80073fa:	2300      	movs	r3, #0
 80073fc:	827b      	strh	r3, [r7, #18]

  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0x00U);
 80073fe:	2300      	movs	r3, #0
 8007400:	2201      	movs	r2, #1
 8007402:	2101      	movs	r1, #1
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f001 ffa0 	bl	800934a <USBH_FindInterface>
 800740a:	4603      	mov	r3, r0
 800740c:	747b      	strb	r3, [r7, #17]

  if (interface == 0xFFU) /* Not Valid Interface */
 800740e:	7c7b      	ldrb	r3, [r7, #17]
 8007410:	2bff      	cmp	r3, #255	; 0xff
 8007412:	d101      	bne.n	8007418 <USBH_AUDIO_InterfaceInit+0x2a>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007414:	2302      	movs	r3, #2
 8007416:	e1a5      	b.n	8007764 <USBH_AUDIO_InterfaceInit+0x376>
  }

  phost->pActiveClass->pData = (AUDIO_HandleTypeDef *)USBH_malloc(sizeof(AUDIO_HandleTypeDef));
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 444c 	ldr.w	r4, [r3, #1100]	; 0x44c
 800741e:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8007422:	f003 fd6d 	bl	800af00 <malloc>
 8007426:	4603      	mov	r3, r0
 8007428:	61e3      	str	r3, [r4, #28]
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007430:	69db      	ldr	r3, [r3, #28]
 8007432:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle == NULL)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d101      	bne.n	800743e <USBH_AUDIO_InterfaceInit+0x50>
  {
    USBH_DbgLog("Cannot allocate memory for AUDIO Handle");
    return USBH_FAIL;
 800743a:	2302      	movs	r3, #2
 800743c:	e192      	b.n	8007764 <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* Initialize audio handler */
  USBH_memset(AUDIO_Handle, 0, sizeof(AUDIO_HandleTypeDef));
 800743e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8007442:	2100      	movs	r1, #0
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f003 fd6b 	bl	800af20 <memset>

  /* 1st Step:  Find Audio Interfaces */
  out_status = USBH_AUDIO_FindAudioStreamingIN(phost);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 fc0f 	bl	8007c6e <USBH_AUDIO_FindAudioStreamingIN>
 8007450:	4603      	mov	r3, r0
 8007452:	72fb      	strb	r3, [r7, #11]

  in_status = USBH_AUDIO_FindAudioStreamingOUT(phost);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fcc9 	bl	8007dec <USBH_AUDIO_FindAudioStreamingOUT>
 800745a:	4603      	mov	r3, r0
 800745c:	72bb      	strb	r3, [r7, #10]

  if ((out_status == USBH_FAIL) && (in_status == USBH_FAIL))
 800745e:	7afb      	ldrb	r3, [r7, #11]
 8007460:	2b02      	cmp	r3, #2
 8007462:	d104      	bne.n	800746e <USBH_AUDIO_InterfaceInit+0x80>
 8007464:	7abb      	ldrb	r3, [r7, #10]
 8007466:	2b02      	cmp	r3, #2
 8007468:	d101      	bne.n	800746e <USBH_AUDIO_InterfaceInit+0x80>
  {
    USBH_DbgLog("%s class configuration not supported.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800746a:	2302      	movs	r3, #2
 800746c:	e17a      	b.n	8007764 <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* 2nd Step:  Select Audio Streaming Interfaces with largest endpoint size : default behavior */
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 800746e:	2300      	movs	r3, #0
 8007470:	75fb      	strb	r3, [r7, #23]
 8007472:	e0c6      	b.n	8007602 <USBH_AUDIO_InterfaceInit+0x214>
  {
    if (AUDIO_Handle->stream_out[index].valid == 1U)
 8007474:	7dfa      	ldrb	r2, [r7, #23]
 8007476:	68f9      	ldr	r1, [r7, #12]
 8007478:	4613      	mov	r3, r2
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	4413      	add	r3, r2
 800747e:	005b      	lsls	r3, r3, #1
 8007480:	440b      	add	r3, r1
 8007482:	333e      	adds	r3, #62	; 0x3e
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d156      	bne.n	8007538 <USBH_AUDIO_InterfaceInit+0x14a>
    {
      if (ep_size_out < AUDIO_Handle->stream_out[index].EpSize)
 800748a:	7dfa      	ldrb	r2, [r7, #23]
 800748c:	68f9      	ldr	r1, [r7, #12]
 800748e:	4613      	mov	r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	4413      	add	r3, r2
 8007494:	005b      	lsls	r3, r3, #1
 8007496:	440b      	add	r3, r1
 8007498:	333a      	adds	r3, #58	; 0x3a
 800749a:	881b      	ldrh	r3, [r3, #0]
 800749c:	8aba      	ldrh	r2, [r7, #20]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d24a      	bcs.n	8007538 <USBH_AUDIO_InterfaceInit+0x14a>
      {
        ep_size_out = AUDIO_Handle->stream_out[index].EpSize;
 80074a2:	7dfa      	ldrb	r2, [r7, #23]
 80074a4:	68f9      	ldr	r1, [r7, #12]
 80074a6:	4613      	mov	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	4413      	add	r3, r2
 80074ac:	005b      	lsls	r3, r3, #1
 80074ae:	440b      	add	r3, r1
 80074b0:	333a      	adds	r3, #58	; 0x3a
 80074b2:	881b      	ldrh	r3, [r3, #0]
 80074b4:	82bb      	strh	r3, [r7, #20]
        AUDIO_Handle->headphone.interface = AUDIO_Handle->stream_out[index].interface;
 80074b6:	7dfa      	ldrb	r2, [r7, #23]
 80074b8:	68f9      	ldr	r1, [r7, #12]
 80074ba:	4613      	mov	r3, r2
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	4413      	add	r3, r2
 80074c0:	005b      	lsls	r3, r3, #1
 80074c2:	440b      	add	r3, r1
 80074c4:	333d      	adds	r3, #61	; 0x3d
 80074c6:	781a      	ldrb	r2, [r3, #0]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
        AUDIO_Handle->headphone.AltSettings = AUDIO_Handle->stream_out[index].AltSettings;
 80074ce:	7dfa      	ldrb	r2, [r7, #23]
 80074d0:	68f9      	ldr	r1, [r7, #12]
 80074d2:	4613      	mov	r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	4413      	add	r3, r2
 80074d8:	005b      	lsls	r3, r3, #1
 80074da:	440b      	add	r3, r1
 80074dc:	333c      	adds	r3, #60	; 0x3c
 80074de:	781a      	ldrb	r2, [r3, #0]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
        AUDIO_Handle->headphone.Ep = AUDIO_Handle->stream_out[index].Ep;
 80074e6:	7dfa      	ldrb	r2, [r7, #23]
 80074e8:	68f9      	ldr	r1, [r7, #12]
 80074ea:	4613      	mov	r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4413      	add	r3, r2
 80074f0:	005b      	lsls	r3, r3, #1
 80074f2:	440b      	add	r3, r1
 80074f4:	3338      	adds	r3, #56	; 0x38
 80074f6:	781a      	ldrb	r2, [r3, #0]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
        AUDIO_Handle->headphone.EpSize = AUDIO_Handle->stream_out[index].EpSize;
 80074fe:	7dfa      	ldrb	r2, [r7, #23]
 8007500:	68f9      	ldr	r1, [r7, #12]
 8007502:	4613      	mov	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	005b      	lsls	r3, r3, #1
 800750a:	440b      	add	r3, r1
 800750c:	333a      	adds	r3, #58	; 0x3a
 800750e:	881a      	ldrh	r2, [r3, #0]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
        AUDIO_Handle->headphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 8007516:	7dfa      	ldrb	r2, [r7, #23]
 8007518:	68f9      	ldr	r1, [r7, #12]
 800751a:	4613      	mov	r3, r2
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	4413      	add	r3, r2
 8007520:	005b      	lsls	r3, r3, #1
 8007522:	440b      	add	r3, r1
 8007524:	3340      	adds	r3, #64	; 0x40
 8007526:	881b      	ldrh	r3, [r3, #0]
 8007528:	b2da      	uxtb	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
        AUDIO_Handle->headphone.supported = 1U;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
      }
    }

    if (AUDIO_Handle->stream_in[index].valid == 1U)
 8007538:	7dfa      	ldrb	r2, [r7, #23]
 800753a:	68f9      	ldr	r1, [r7, #12]
 800753c:	4613      	mov	r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4413      	add	r3, r2
 8007542:	005b      	lsls	r3, r3, #1
 8007544:	440b      	add	r3, r1
 8007546:	330c      	adds	r3, #12
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	2b01      	cmp	r3, #1
 800754c:	d156      	bne.n	80075fc <USBH_AUDIO_InterfaceInit+0x20e>
    {
      if (ep_size_in < AUDIO_Handle->stream_in[index].EpSize)
 800754e:	7dfa      	ldrb	r2, [r7, #23]
 8007550:	68f9      	ldr	r1, [r7, #12]
 8007552:	4613      	mov	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4413      	add	r3, r2
 8007558:	005b      	lsls	r3, r3, #1
 800755a:	440b      	add	r3, r1
 800755c:	3308      	adds	r3, #8
 800755e:	881b      	ldrh	r3, [r3, #0]
 8007560:	8a7a      	ldrh	r2, [r7, #18]
 8007562:	429a      	cmp	r2, r3
 8007564:	d24a      	bcs.n	80075fc <USBH_AUDIO_InterfaceInit+0x20e>
      {
        ep_size_in = AUDIO_Handle->stream_in[index].EpSize;
 8007566:	7dfa      	ldrb	r2, [r7, #23]
 8007568:	68f9      	ldr	r1, [r7, #12]
 800756a:	4613      	mov	r3, r2
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	4413      	add	r3, r2
 8007570:	005b      	lsls	r3, r3, #1
 8007572:	440b      	add	r3, r1
 8007574:	3308      	adds	r3, #8
 8007576:	881b      	ldrh	r3, [r3, #0]
 8007578:	827b      	strh	r3, [r7, #18]
        AUDIO_Handle->microphone.interface = AUDIO_Handle->stream_in[index].interface;
 800757a:	7dfa      	ldrb	r2, [r7, #23]
 800757c:	68f9      	ldr	r1, [r7, #12]
 800757e:	4613      	mov	r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4413      	add	r3, r2
 8007584:	005b      	lsls	r3, r3, #1
 8007586:	440b      	add	r3, r1
 8007588:	330b      	adds	r3, #11
 800758a:	781a      	ldrb	r2, [r3, #0]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
        AUDIO_Handle->microphone.AltSettings = AUDIO_Handle->stream_in[index].AltSettings;
 8007592:	7dfa      	ldrb	r2, [r7, #23]
 8007594:	68f9      	ldr	r1, [r7, #12]
 8007596:	4613      	mov	r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	4413      	add	r3, r2
 800759c:	005b      	lsls	r3, r3, #1
 800759e:	440b      	add	r3, r1
 80075a0:	330a      	adds	r3, #10
 80075a2:	781a      	ldrb	r2, [r3, #0]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
        AUDIO_Handle->microphone.Ep = AUDIO_Handle->stream_in[index].Ep;
 80075aa:	7dfa      	ldrb	r2, [r7, #23]
 80075ac:	68f9      	ldr	r1, [r7, #12]
 80075ae:	4613      	mov	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4413      	add	r3, r2
 80075b4:	005b      	lsls	r3, r3, #1
 80075b6:	440b      	add	r3, r1
 80075b8:	3306      	adds	r3, #6
 80075ba:	781a      	ldrb	r2, [r3, #0]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        AUDIO_Handle->microphone.EpSize = AUDIO_Handle->stream_in[index].EpSize;
 80075c2:	7dfa      	ldrb	r2, [r7, #23]
 80075c4:	68f9      	ldr	r1, [r7, #12]
 80075c6:	4613      	mov	r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4413      	add	r3, r2
 80075cc:	005b      	lsls	r3, r3, #1
 80075ce:	440b      	add	r3, r1
 80075d0:	3308      	adds	r3, #8
 80075d2:	881a      	ldrh	r2, [r3, #0]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
        AUDIO_Handle->microphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 80075da:	7dfa      	ldrb	r2, [r7, #23]
 80075dc:	68f9      	ldr	r1, [r7, #12]
 80075de:	4613      	mov	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4413      	add	r3, r2
 80075e4:	005b      	lsls	r3, r3, #1
 80075e6:	440b      	add	r3, r1
 80075e8:	3340      	adds	r3, #64	; 0x40
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
        AUDIO_Handle->microphone.supported = 1U;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 80075fc:	7dfb      	ldrb	r3, [r7, #23]
 80075fe:	3301      	adds	r3, #1
 8007600:	75fb      	strb	r3, [r7, #23]
 8007602:	7dfb      	ldrb	r3, [r7, #23]
 8007604:	2b04      	cmp	r3, #4
 8007606:	f67f af35 	bls.w	8007474 <USBH_AUDIO_InterfaceInit+0x86>
      }
    }
  }

  if (USBH_AUDIO_FindHIDControl(phost) == USBH_OK)
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 fcad 	bl	8007f6a <USBH_AUDIO_FindHIDControl>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d103      	bne.n	800761e <USBH_AUDIO_InterfaceInit+0x230>
  {
    AUDIO_Handle->control.supported = 1U;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
  }

  /* 3rd Step:  Find and Parse Audio interfaces */
  USBH_AUDIO_ParseCSDescriptors(phost);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 fd25 	bl	800806e <USBH_AUDIO_ParseCSDescriptors>


  /* 4th Step:  Open the Audio streaming pipes*/
  if (AUDIO_Handle->headphone.supported == 1U)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800762a:	2b01      	cmp	r3, #1
 800762c:	d12e      	bne.n	800768c <USBH_AUDIO_InterfaceInit+0x29e>
  {
    USBH_AUDIO_BuildHeadphonePath(phost);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 ff68 	bl	8008504 <USBH_AUDIO_BuildHeadphonePath>

    AUDIO_Handle->headphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->headphone.Ep);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800763a:	4619      	mov	r1, r3
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f003 f8d5 	bl	800a7ec <USBH_AllocPipe>
 8007642:	4603      	mov	r3, r0
 8007644:	461a      	mov	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f893 10fb 	ldrb.w	r1, [r3, #251]	; 0xfb
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	; 0xf6
 800766a:	9202      	str	r2, [sp, #8]
 800766c:	2201      	movs	r2, #1
 800766e:	9201      	str	r2, [sp, #4]
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	4623      	mov	r3, r4
 8007674:	4602      	mov	r2, r0
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f003 f889 	bl	800a78e <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_ISOC,
                  AUDIO_Handle->headphone.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->headphone.Pipe, 0U);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8007682:	2200      	movs	r2, #0
 8007684:	4619      	mov	r1, r3
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f003 fb8d 	bl	800ada6 <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8007692:	2b01      	cmp	r3, #1
 8007694:	d12e      	bne.n	80076f4 <USBH_AUDIO_InterfaceInit+0x306>
  {
    USBH_AUDIO_BuildMicrophonePath(phost);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 feac 	bl	80083f4 <USBH_AUDIO_BuildMicrophonePath>
    AUDIO_Handle->microphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->microphone.Ep);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80076a2:	4619      	mov	r1, r3
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f003 f8a1 	bl	800a7ec <USBH_AllocPipe>
 80076aa:	4603      	mov	r3, r0
 80076ac:	461a      	mov	r2, r3
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f893 1143 	ldrb.w	r1, [r3, #323]	; 0x143
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f893 013c 	ldrb.w	r0, [r3, #316]	; 0x13c
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	f8b2 213e 	ldrh.w	r2, [r2, #318]	; 0x13e
 80076d2:	9202      	str	r2, [sp, #8]
 80076d4:	2201      	movs	r2, #1
 80076d6:	9201      	str	r2, [sp, #4]
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	4623      	mov	r3, r4
 80076dc:	4602      	mov	r2, r0
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f003 f855 	bl	800a78e <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_ISOC,
                  AUDIO_Handle->microphone.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->microphone.Pipe, 0U);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 80076ea:	2200      	movs	r2, #0
 80076ec:	4619      	mov	r1, r3
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f003 fb59 	bl	800ada6 <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->control.supported == 1U)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d12b      	bne.n	8007756 <USBH_AUDIO_InterfaceInit+0x368>
  {
    AUDIO_Handle->control.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->control.Ep);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 8007704:	4619      	mov	r1, r3
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f003 f870 	bl	800a7ec <USBH_AllocPipe>
 800770c:	4603      	mov	r3, r0
 800770e:	461a      	mov	r2, r3
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f893 118a 	ldrb.w	r1, [r3, #394]	; 0x18a
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f893 0184 	ldrb.w	r0, [r3, #388]	; 0x184
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	f8b2 2186 	ldrh.w	r2, [r2, #390]	; 0x186
 8007734:	9202      	str	r2, [sp, #8]
 8007736:	2203      	movs	r2, #3
 8007738:	9201      	str	r2, [sp, #4]
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	4623      	mov	r3, r4
 800773e:	4602      	mov	r2, r0
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f003 f824 	bl	800a78e <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_INTR,
                  AUDIO_Handle->control.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->control.Pipe, 0U);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 800774c:	2200      	movs	r2, #0
 800774e:	4619      	mov	r1, r3
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f003 fb28 	bl	800ada6 <USBH_LL_SetToggle>

  }

  AUDIO_Handle->req_state = AUDIO_REQ_INIT;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2201      	movs	r2, #1
 800775a:	701a      	strb	r2, [r3, #0]
  AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2201      	movs	r2, #1
 8007760:	70da      	strb	r2, [r3, #3]

  return USBH_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	371c      	adds	r7, #28
 8007768:	46bd      	mov	sp, r7
 800776a:	bd90      	pop	{r4, r7, pc}

0800776c <USBH_AUDIO_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800777a:	69db      	ldr	r3, [r3, #28]
 800777c:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle->microphone.Pipe != 0x00U)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8007784:	2b00      	cmp	r3, #0
 8007786:	d011      	beq.n	80077ac <USBH_AUDIO_InterfaceDeInit+0x40>
  {
    USBH_ClosePipe(phost, AUDIO_Handle->microphone.Pipe);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 800778e:	4619      	mov	r1, r3
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f003 f81b 	bl	800a7cc <USBH_ClosePipe>
    USBH_FreePipe(phost, AUDIO_Handle->microphone.Pipe);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 800779c:	4619      	mov	r1, r3
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f003 f846 	bl	800a830 <USBH_FreePipe>
    AUDIO_Handle->microphone.Pipe = 0U;     /* Reset the pipe as Free */
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
  }

  if (AUDIO_Handle->headphone.Pipe != 0x00U)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d011      	beq.n	80077da <USBH_AUDIO_InterfaceDeInit+0x6e>
  {
    USBH_ClosePipe(phost,  AUDIO_Handle->headphone.Pipe);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 80077bc:	4619      	mov	r1, r3
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f003 f804 	bl	800a7cc <USBH_ClosePipe>
    USBH_FreePipe(phost,  AUDIO_Handle->headphone.Pipe);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 80077ca:	4619      	mov	r1, r3
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f003 f82f 	bl	800a830 <USBH_FreePipe>
    AUDIO_Handle->headphone.Pipe = 0U;     /* Reset the pipe as Free */
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  }

  if (AUDIO_Handle->control.Pipe != 0x00U)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d011      	beq.n	8007808 <USBH_AUDIO_InterfaceDeInit+0x9c>
  {
    USBH_ClosePipe(phost,  AUDIO_Handle->control.Pipe);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 80077ea:	4619      	mov	r1, r3
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f002 ffed 	bl	800a7cc <USBH_ClosePipe>
    USBH_FreePipe(phost,  AUDIO_Handle->control.Pipe);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 80077f8:	4619      	mov	r1, r3
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f003 f818 	bl	800a830 <USBH_FreePipe>
    AUDIO_Handle->control.Pipe = 0U;     /* Reset the pipe as Free */
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2200      	movs	r2, #0
 8007804:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
  }

  if (phost->pActiveClass->pData)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800780e:	69db      	ldr	r3, [r3, #28]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00b      	beq.n	800782c <USBH_AUDIO_InterfaceDeInit+0xc0>
  {
    USBH_free(phost->pActiveClass->pData);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800781a:	69db      	ldr	r3, [r3, #28]
 800781c:	4618      	mov	r0, r3
 800781e:	f003 fb77 	bl	800af10 <free>
    phost->pActiveClass->pData = 0U;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007828:	2200      	movs	r2, #0
 800782a:	61da      	str	r2, [r3, #28]
  }
  return USBH_OK ;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
	...

08007838 <USBH_AUDIO_ClassRequest>:
  *         for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b086      	sub	sp, #24
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007846:	69db      	ldr	r3, [r3, #28]
 8007848:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 800784a:	2301      	movs	r3, #1
 800784c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 800784e:	2301      	movs	r3, #1
 8007850:	73fb      	strb	r3, [r7, #15]

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->req_state)
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	3b01      	subs	r3, #1
 8007858:	2b06      	cmp	r3, #6
 800785a:	f200 80be 	bhi.w	80079da <USBH_AUDIO_ClassRequest+0x1a2>
 800785e:	a201      	add	r2, pc, #4	; (adr r2, 8007864 <USBH_AUDIO_ClassRequest+0x2c>)
 8007860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007864:	08007881 	.word	0x08007881
 8007868:	080079c3 	.word	0x080079c3
 800786c:	08007881 	.word	0x08007881
 8007870:	080078c3 	.word	0x080078c3
 8007874:	0800793b 	.word	0x0800793b
 8007878:	0800797f 	.word	0x0800797f
 800787c:	08007927 	.word	0x08007927
  {
  case AUDIO_REQ_INIT:
  case AUDIO_REQ_SET_DEFAULT_IN_INTERFACE:
    if (AUDIO_Handle->microphone.supported == 1U)
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8007886:	2b01      	cmp	r3, #1
 8007888:	d117      	bne.n	80078ba <USBH_AUDIO_ClassRequest+0x82>
    {
      req_status = USBH_SetInterface(phost,
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8007890:	2200      	movs	r2, #0
 8007892:	4619      	mov	r1, r3
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f002 fb2a 	bl	8009eee <USBH_SetInterface>
 800789a:	4603      	mov	r3, r0
 800789c:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->microphone.interface,
                                     0U);

      if (req_status == USBH_OK)
 800789e:	7bfb      	ldrb	r3, [r7, #15]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d103      	bne.n	80078ac <USBH_AUDIO_ClassRequest+0x74>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	2204      	movs	r2, #4
 80078a8:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80078aa:	e098      	b.n	80079de <USBH_AUDIO_ClassRequest+0x1a6>
      else if (req_status == USBH_NOT_SUPPORTED)
 80078ac:	7bfb      	ldrb	r3, [r7, #15]
 80078ae:	2b03      	cmp	r3, #3
 80078b0:	f040 8095 	bne.w	80079de <USBH_AUDIO_ClassRequest+0x1a6>
        status = USBH_FAIL;
 80078b4:	2302      	movs	r3, #2
 80078b6:	75fb      	strb	r3, [r7, #23]
    break;
 80078b8:	e091      	b.n	80079de <USBH_AUDIO_ClassRequest+0x1a6>
      AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	2204      	movs	r2, #4
 80078be:	701a      	strb	r2, [r3, #0]
    break;
 80078c0:	e08d      	b.n	80079de <USBH_AUDIO_ClassRequest+0x1a6>

  case AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE:
    if (AUDIO_Handle->headphone.supported == 1U)
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d125      	bne.n	8007918 <USBH_AUDIO_ClassRequest+0xe0>
    {
      req_status = USBH_SetInterface(phost,
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 80078d2:	2200      	movs	r2, #0
 80078d4:	4619      	mov	r1, r3
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f002 fb09 	bl	8009eee <USBH_SetInterface>
 80078dc:	4603      	mov	r3, r0
 80078de:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->headphone.interface,
                                     0U);

      if (req_status == USBH_OK)
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d112      	bne.n	800790c <USBH_AUDIO_ClassRequest+0xd4>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	2207      	movs	r2, #7
 80078ea:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	2206      	movs	r2, #6
 80078f0:	705a      	strb	r2, [r3, #1]

        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800790a:	e06a      	b.n	80079e2 <USBH_AUDIO_ClassRequest+0x1aa>
      else if (req_status == USBH_NOT_SUPPORTED)
 800790c:	7bfb      	ldrb	r3, [r7, #15]
 800790e:	2b03      	cmp	r3, #3
 8007910:	d167      	bne.n	80079e2 <USBH_AUDIO_ClassRequest+0x1aa>
        status = USBH_FAIL;
 8007912:	2302      	movs	r3, #2
 8007914:	75fb      	strb	r3, [r7, #23]
    break;
 8007916:	e064      	b.n	80079e2 <USBH_AUDIO_ClassRequest+0x1aa>
      AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	2207      	movs	r2, #7
 800791c:	701a      	strb	r2, [r3, #0]
      AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	2206      	movs	r2, #6
 8007922:	705a      	strb	r2, [r3, #1]
    break;
 8007924:	e05d      	b.n	80079e2 <USBH_AUDIO_ClassRequest+0x1aa>

  case AUDIO_REQ_CS_REQUESTS:
    if (USBH_AUDIO_HandleCSRequest(phost) == USBH_OK)
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f938 	bl	8007b9c <USBH_AUDIO_HandleCSRequest>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d159      	bne.n	80079e6 <USBH_AUDIO_ClassRequest+0x1ae>
    {
      AUDIO_Handle->req_state = AUDIO_REQ_SET_IN_INTERFACE;
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	2205      	movs	r2, #5
 8007936:	701a      	strb	r2, [r3, #0]
    }
    break;
 8007938:	e055      	b.n	80079e6 <USBH_AUDIO_ClassRequest+0x1ae>

  case AUDIO_REQ_SET_IN_INTERFACE:
    if (AUDIO_Handle->microphone.supported == 1U)
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8007940:	2b01      	cmp	r3, #1
 8007942:	d118      	bne.n	8007976 <USBH_AUDIO_ClassRequest+0x13e>
    {
      req_status = USBH_SetInterface(phost,
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	f893 1140 	ldrb.w	r1, [r3, #320]	; 0x140
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8007950:	461a      	mov	r2, r3
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f002 facb 	bl	8009eee <USBH_SetInterface>
 8007958:	4603      	mov	r3, r0
 800795a:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->microphone.interface,
                                     AUDIO_Handle->microphone.AltSettings);

      if (req_status == USBH_OK)
 800795c:	7bfb      	ldrb	r3, [r7, #15]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d103      	bne.n	800796a <USBH_AUDIO_ClassRequest+0x132>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	2206      	movs	r2, #6
 8007966:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007968:	e03f      	b.n	80079ea <USBH_AUDIO_ClassRequest+0x1b2>
      else if (req_status == USBH_NOT_SUPPORTED)
 800796a:	7bfb      	ldrb	r3, [r7, #15]
 800796c:	2b03      	cmp	r3, #3
 800796e:	d13c      	bne.n	80079ea <USBH_AUDIO_ClassRequest+0x1b2>
        status = USBH_FAIL;
 8007970:	2302      	movs	r3, #2
 8007972:	75fb      	strb	r3, [r7, #23]
    break;
 8007974:	e039      	b.n	80079ea <USBH_AUDIO_ClassRequest+0x1b2>
      AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	2206      	movs	r2, #6
 800797a:	701a      	strb	r2, [r3, #0]
    break;
 800797c:	e035      	b.n	80079ea <USBH_AUDIO_ClassRequest+0x1b2>
  case AUDIO_REQ_SET_OUT_INTERFACE:
    if (AUDIO_Handle->headphone.supported == 1U)
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8007984:	2b01      	cmp	r3, #1
 8007986:	d118      	bne.n	80079ba <USBH_AUDIO_ClassRequest+0x182>
    {
      req_status = USBH_SetInterface(phost,
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	f893 10f8 	ldrb.w	r1, [r3, #248]	; 0xf8
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 8007994:	461a      	mov	r2, r3
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f002 faa9 	bl	8009eee <USBH_SetInterface>
 800799c:	4603      	mov	r3, r0
 800799e:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->headphone.interface,
                                     AUDIO_Handle->headphone.AltSettings);

      if (req_status == USBH_OK)
 80079a0:	7bfb      	ldrb	r3, [r7, #15]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d103      	bne.n	80079ae <USBH_AUDIO_ClassRequest+0x176>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	2202      	movs	r2, #2
 80079aa:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80079ac:	e01f      	b.n	80079ee <USBH_AUDIO_ClassRequest+0x1b6>
      else if (req_status == USBH_NOT_SUPPORTED)
 80079ae:	7bfb      	ldrb	r3, [r7, #15]
 80079b0:	2b03      	cmp	r3, #3
 80079b2:	d11c      	bne.n	80079ee <USBH_AUDIO_ClassRequest+0x1b6>
        status = USBH_FAIL;
 80079b4:	2302      	movs	r3, #2
 80079b6:	75fb      	strb	r3, [r7, #23]
    break;
 80079b8:	e019      	b.n	80079ee <USBH_AUDIO_ClassRequest+0x1b6>
      AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	2202      	movs	r2, #2
 80079be:	701a      	strb	r2, [r3, #0]
    break;
 80079c0:	e015      	b.n	80079ee <USBH_AUDIO_ClassRequest+0x1b6>
  case AUDIO_REQ_IDLE:
    AUDIO_Handle->play_state = AUDIO_PLAYBACK_INIT;
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	2201      	movs	r2, #1
 80079c6:	709a      	strb	r2, [r3, #2]
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80079ce:	2102      	movs	r1, #2
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	4798      	blx	r3
    status  = USBH_OK;
 80079d4:	2300      	movs	r3, #0
 80079d6:	75fb      	strb	r3, [r7, #23]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80079d8:	e00a      	b.n	80079f0 <USBH_AUDIO_ClassRequest+0x1b8>

  default:
    break;
 80079da:	bf00      	nop
 80079dc:	e008      	b.n	80079f0 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 80079de:	bf00      	nop
 80079e0:	e006      	b.n	80079f0 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 80079e2:	bf00      	nop
 80079e4:	e004      	b.n	80079f0 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 80079e6:	bf00      	nop
 80079e8:	e002      	b.n	80079f0 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 80079ea:	bf00      	nop
 80079ec:	e000      	b.n	80079f0 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 80079ee:	bf00      	nop
  }
  return status;
 80079f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3718      	adds	r7, #24
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop

080079fc <USBH_AUDIO_CSRequest>:
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_CSRequest(USBH_HandleTypeDef *phost,
                                               uint8_t feature, uint8_t channel)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b088      	sub	sp, #32
 8007a00:	af02      	add	r7, sp, #8
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	460b      	mov	r3, r1
 8007a06:	70fb      	strb	r3, [r7, #3]
 8007a08:	4613      	mov	r3, r2
 8007a0a:	70bb      	strb	r3, [r7, #2]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007a12:	69db      	ldr	r3, [r3, #28]
 8007a14:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007a16:	2301      	movs	r3, #1
 8007a18:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	73fb      	strb	r3, [r7, #15]
  uint16_t VolumeCtl, ResolutionCtl;

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->cs_req_state)
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	785b      	ldrb	r3, [r3, #1]
 8007a22:	3b04      	subs	r3, #4
 8007a24:	2b04      	cmp	r3, #4
 8007a26:	f200 80aa 	bhi.w	8007b7e <USBH_AUDIO_CSRequest+0x182>
 8007a2a:	a201      	add	r2, pc, #4	; (adr r2, 8007a30 <USBH_AUDIO_CSRequest+0x34>)
 8007a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a30:	08007a8d 	.word	0x08007a8d
 8007a34:	08007ad3 	.word	0x08007ad3
 8007a38:	08007a45 	.word	0x08007a45
 8007a3c:	08007b33 	.word	0x08007b33
 8007a40:	08007b79 	.word	0x08007b79
  {
    case AUDIO_REQ_GET_VOLUME:
      req_status = USBH_AC_GetCur(phost,
 8007a44:	78fa      	ldrb	r2, [r7, #3]
 8007a46:	2302      	movs	r3, #2
 8007a48:	9301      	str	r3, [sp, #4]
 8007a4a:	78bb      	ldrb	r3, [r7, #2]
 8007a4c:	9300      	str	r3, [sp, #0]
 8007a4e:	2302      	movs	r3, #2
 8007a50:	2106      	movs	r1, #6
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 fe94 	bl	8008780 <USBH_AC_GetCur>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8007a5c:	7bfb      	ldrb	r3, [r7, #15]
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	f000 808f 	beq.w	8007b82 <USBH_AUDIO_CSRequest+0x186>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MIN_VOLUME;
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	2204      	movs	r2, #4
 8007a68:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8007a76:	3302      	adds	r3, #2
 8007a78:	881b      	ldrh	r3, [r3, #0]
 8007a7a:	021b      	lsls	r3, r3, #8
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volume = (uint32_t)VolumeCtl;
 8007a82:	897a      	ldrh	r2, [r7, #10]
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      }
      break;
 8007a8a:	e07a      	b.n	8007b82 <USBH_AUDIO_CSRequest+0x186>

    case AUDIO_REQ_GET_MIN_VOLUME:
      req_status = USBH_AC_GetMin(phost,
 8007a8c:	78fa      	ldrb	r2, [r7, #3]
 8007a8e:	2302      	movs	r3, #2
 8007a90:	9301      	str	r3, [sp, #4]
 8007a92:	78bb      	ldrb	r3, [r7, #2]
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	2302      	movs	r3, #2
 8007a98:	2106      	movs	r1, #6
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f001 f835 	bl	8008b0a <USBH_AC_GetMin>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8007aa4:	7bfb      	ldrb	r3, [r7, #15]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d06d      	beq.n	8007b86 <USBH_AUDIO_CSRequest+0x18a>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MAX_VOLUME;
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	2205      	movs	r2, #5
 8007aae:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8007abc:	3302      	adds	r3, #2
 8007abe:	881b      	ldrh	r3, [r3, #0]
 8007ac0:	021b      	lsls	r3, r3, #8
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMin = (uint32_t)VolumeCtl;
 8007ac8:	897a      	ldrh	r2, [r7, #10]
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
      }
      break;
 8007ad0:	e059      	b.n	8007b86 <USBH_AUDIO_CSRequest+0x18a>

    case AUDIO_REQ_GET_MAX_VOLUME:
      req_status = USBH_AC_GetMax(phost,
 8007ad2:	78fa      	ldrb	r2, [r7, #3]
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	9301      	str	r3, [sp, #4]
 8007ad8:	78bb      	ldrb	r3, [r7, #2]
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	2302      	movs	r3, #2
 8007ade:	2106      	movs	r1, #6
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fee4 	bl	80088ae <USBH_AC_GetMax>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8007aea:	7bfb      	ldrb	r3, [r7, #15]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d04c      	beq.n	8007b8a <USBH_AUDIO_CSRequest+0x18e>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_RESOLUTION;
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	2207      	movs	r2, #7
 8007af4:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8007b02:	3302      	adds	r3, #2
 8007b04:	881b      	ldrh	r3, [r3, #0]
 8007b06:	021b      	lsls	r3, r3, #8
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMax = (uint32_t)VolumeCtl;
 8007b0e:	897a      	ldrh	r2, [r7, #10]
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        if (AUDIO_Handle->headphone.attribute.volumeMax < AUDIO_Handle->headphone.attribute.volumeMin)
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d231      	bcs.n	8007b8a <USBH_AUDIO_CSRequest+0x18e>
        {
          AUDIO_Handle->headphone.attribute.volumeMax = 0xFF00U;
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8007b2c:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        }
      }
      break;
 8007b30:	e02b      	b.n	8007b8a <USBH_AUDIO_CSRequest+0x18e>

    case AUDIO_REQ_GET_RESOLUTION:
      req_status = USBH_AC_GetRes(phost,
 8007b32:	78fa      	ldrb	r2, [r7, #3]
 8007b34:	2302      	movs	r3, #2
 8007b36:	9301      	str	r3, [sp, #4]
 8007b38:	78bb      	ldrb	r3, [r7, #2]
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	2106      	movs	r1, #6
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 ff4b 	bl	80089dc <USBH_AC_GetRes>
 8007b46:	4603      	mov	r3, r0
 8007b48:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);                /* length   */
      if (req_status != USBH_BUSY)
 8007b4a:	7bfb      	ldrb	r3, [r7, #15]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d01e      	beq.n	8007b8e <USBH_AUDIO_CSRequest+0x192>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_CS_IDLE;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	2208      	movs	r2, #8
 8007b54:	705a      	strb	r2, [r3, #1]
        ResolutionCtl = LE16(&AUDIO_Handle->mem[0]);
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8007b62:	3302      	adds	r3, #2
 8007b64:	881b      	ldrh	r3, [r3, #0]
 8007b66:	021b      	lsls	r3, r3, #8
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	81bb      	strh	r3, [r7, #12]
        AUDIO_Handle->headphone.attribute.resolution = (uint32_t)ResolutionCtl;
 8007b6e:	89ba      	ldrh	r2, [r7, #12]
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
      }
      break;
 8007b76:	e00a      	b.n	8007b8e <USBH_AUDIO_CSRequest+0x192>


    case AUDIO_REQ_CS_IDLE:
      status = USBH_OK;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b7c:	e008      	b.n	8007b90 <USBH_AUDIO_CSRequest+0x194>

    default:
      break;
 8007b7e:	bf00      	nop
 8007b80:	e006      	b.n	8007b90 <USBH_AUDIO_CSRequest+0x194>
      break;
 8007b82:	bf00      	nop
 8007b84:	e004      	b.n	8007b90 <USBH_AUDIO_CSRequest+0x194>
      break;
 8007b86:	bf00      	nop
 8007b88:	e002      	b.n	8007b90 <USBH_AUDIO_CSRequest+0x194>
      break;
 8007b8a:	bf00      	nop
 8007b8c:	e000      	b.n	8007b90 <USBH_AUDIO_CSRequest+0x194>
      break;
 8007b8e:	bf00      	nop
  }
  return status;
 8007b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3718      	adds	r7, #24
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop

08007b9c <USBH_AUDIO_HandleCSRequest>:
  *         and associated channels for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_HandleCSRequest(USBH_HandleTypeDef *phost)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_BUSY;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef cs_status = USBH_BUSY;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007bb2:	69db      	ldr	r3, [r3, #28]
 8007bb4:	60bb      	str	r3, [r7, #8]

  cs_status = USBH_AUDIO_CSRequest(phost,
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f7ff ff19 	bl	80079fc <USBH_AUDIO_CSRequest>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	73bb      	strb	r3, [r7, #14]
                                   AUDIO_Handle->temp_feature,
                                   AUDIO_Handle->temp_channels);

  if (cs_status != USBH_BUSY)
 8007bce:	7bbb      	ldrb	r3, [r7, #14]
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d01c      	beq.n	8007c0e <USBH_AUDIO_HandleCSRequest+0x72>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d10c      	bne.n	8007bf8 <USBH_AUDIO_HandleCSRequest+0x5c>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = 0U;
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
      status = USBH_OK;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	73fb      	strb	r3, [r7, #15]
 8007bf6:	e007      	b.n	8007c08 <USBH_AUDIO_HandleCSRequest+0x6c>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	b2da      	uxtb	r2, r3
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	2206      	movs	r2, #6
 8007c0c:	705a      	strb	r2, [r3, #1]
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }

  return status;
 8007c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <USBH_AUDIO_Process>:
  *         The function is for managing state machine for Audio data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Process(USBH_HandleTypeDef *phost)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007c20:	2301      	movs	r3, #1
 8007c22:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *)  phost->pActiveClass->pData;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007c2a:	69db      	ldr	r3, [r3, #28]
 8007c2c:	60bb      	str	r3, [r7, #8]

  if (AUDIO_Handle->headphone.supported == 1U)
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d102      	bne.n	8007c3e <USBH_AUDIO_Process+0x26>
  {
    USBH_AUDIO_OutputStream(phost);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f001 f8e7 	bl	8008e0c <USBH_AUDIO_OutputStream>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d102      	bne.n	8007c4e <USBH_AUDIO_Process+0x36>
  {
    USBH_AUDIO_InputStream(phost);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f001 f81d 	bl	8008c88 <USBH_AUDIO_InputStream>
  }

  return status;
 8007c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <USBH_AUDIO_SOFProcess>:
  *         The function is for managing the SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	370c      	adds	r7, #12
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <USBH_AUDIO_FindAudioStreamingIN>:
  * @brief  Find IN Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingIN(USBH_HandleTypeDef *phost)
{
 8007c6e:	b480      	push	{r7}
 8007c70:	b085      	sub	sp, #20
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
 8007c76:	2302      	movs	r3, #2
 8007c78:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007c80:	69db      	ldr	r3, [r3, #28]
 8007c82:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 8007c84:	2300      	movs	r3, #0
 8007c86:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8007c88:	2300      	movs	r3, #0
 8007c8a:	73fb      	strb	r3, [r7, #15]
 8007c8c:	e09e      	b.n	8007dcc <USBH_AUDIO_FindAudioStreamingIN+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8007c8e:	7bfb      	ldrb	r3, [r7, #15]
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	211a      	movs	r1, #26
 8007c94:	fb01 f303 	mul.w	r3, r1, r3
 8007c98:	4413      	add	r3, r2
 8007c9a:	f203 3347 	addw	r3, r3, #839	; 0x347
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	f040 8090 	bne.w	8007dc6 <USBH_AUDIO_FindAudioStreamingIN+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 8007ca6:	7bfb      	ldrb	r3, [r7, #15]
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	211a      	movs	r1, #26
 8007cac:	fb01 f303 	mul.w	r3, r1, r3
 8007cb0:	4413      	add	r3, r2
 8007cb2:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8007cb6:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	f040 8084 	bne.w	8007dc6 <USBH_AUDIO_FindAudioStreamingIN+0x158>
    {
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) &&
 8007cbe:	7bfb      	ldrb	r3, [r7, #15]
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	211a      	movs	r1, #26
 8007cc4:	fb01 f303 	mul.w	r3, r1, r3
 8007cc8:	4413      	add	r3, r2
 8007cca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	b25b      	sxtb	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	da77      	bge.n	8007dc6 <USBH_AUDIO_FindAudioStreamingIN+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8007cd6:	7bfb      	ldrb	r3, [r7, #15]
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	211a      	movs	r1, #26
 8007cdc:	fb01 f303 	mul.w	r3, r1, r3
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007ce6:	881b      	ldrh	r3, [r3, #0]
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) &&
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d06c      	beq.n	8007dc6 <USBH_AUDIO_FindAudioStreamingIN+0x158>
      {
        AUDIO_Handle->stream_in[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007cec:	7bfb      	ldrb	r3, [r7, #15]
 8007cee:	7bba      	ldrb	r2, [r7, #14]
 8007cf0:	6879      	ldr	r1, [r7, #4]
 8007cf2:	201a      	movs	r0, #26
 8007cf4:	fb00 f303 	mul.w	r3, r0, r3
 8007cf8:	440b      	add	r3, r1
 8007cfa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007cfe:	7818      	ldrb	r0, [r3, #0]
 8007d00:	68b9      	ldr	r1, [r7, #8]
 8007d02:	4613      	mov	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4413      	add	r3, r2
 8007d08:	005b      	lsls	r3, r3, #1
 8007d0a:	440b      	add	r3, r1
 8007d0c:	3306      	adds	r3, #6
 8007d0e:	4602      	mov	r2, r0
 8007d10:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
 8007d14:	7bba      	ldrb	r2, [r7, #14]
 8007d16:	6879      	ldr	r1, [r7, #4]
 8007d18:	201a      	movs	r0, #26
 8007d1a:	fb00 f303 	mul.w	r3, r0, r3
 8007d1e:	440b      	add	r3, r1
 8007d20:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007d24:	8818      	ldrh	r0, [r3, #0]
 8007d26:	68b9      	ldr	r1, [r7, #8]
 8007d28:	4613      	mov	r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	4413      	add	r3, r2
 8007d2e:	005b      	lsls	r3, r3, #1
 8007d30:	440b      	add	r3, r1
 8007d32:	3308      	adds	r3, #8
 8007d34:	4602      	mov	r2, r0
 8007d36:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8007d38:	7bfb      	ldrb	r3, [r7, #15]
 8007d3a:	7bba      	ldrb	r2, [r7, #14]
 8007d3c:	6879      	ldr	r1, [r7, #4]
 8007d3e:	201a      	movs	r0, #26
 8007d40:	fb00 f303 	mul.w	r3, r0, r3
 8007d44:	440b      	add	r3, r1
 8007d46:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8007d4a:	7818      	ldrb	r0, [r3, #0]
 8007d4c:	68b9      	ldr	r1, [r7, #8]
 8007d4e:	4613      	mov	r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	4413      	add	r3, r2
 8007d54:	005b      	lsls	r3, r3, #1
 8007d56:	440b      	add	r3, r1
 8007d58:	330b      	adds	r3, #11
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8007d5e:	7bfb      	ldrb	r3, [r7, #15]
 8007d60:	7bba      	ldrb	r2, [r7, #14]
 8007d62:	6879      	ldr	r1, [r7, #4]
 8007d64:	201a      	movs	r0, #26
 8007d66:	fb00 f303 	mul.w	r3, r0, r3
 8007d6a:	440b      	add	r3, r1
 8007d6c:	f203 3345 	addw	r3, r3, #837	; 0x345
 8007d70:	7818      	ldrb	r0, [r3, #0]
 8007d72:	68b9      	ldr	r1, [r7, #8]
 8007d74:	4613      	mov	r3, r2
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	4413      	add	r3, r2
 8007d7a:	005b      	lsls	r3, r3, #1
 8007d7c:	440b      	add	r3, r1
 8007d7e:	330a      	adds	r3, #10
 8007d80:	4602      	mov	r2, r0
 8007d82:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8007d84:	7bfb      	ldrb	r3, [r7, #15]
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	211a      	movs	r1, #26
 8007d8a:	fb01 f303 	mul.w	r3, r1, r3
 8007d8e:	4413      	add	r3, r2
 8007d90:	f203 3352 	addw	r3, r3, #850	; 0x352
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	7bba      	ldrb	r2, [r7, #14]
 8007d98:	b298      	uxth	r0, r3
 8007d9a:	68b9      	ldr	r1, [r7, #8]
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	4413      	add	r3, r2
 8007da2:	005b      	lsls	r3, r3, #1
 8007da4:	440b      	add	r3, r1
 8007da6:	330e      	adds	r3, #14
 8007da8:	4602      	mov	r2, r0
 8007daa:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].valid = 1U;
 8007dac:	7bba      	ldrb	r2, [r7, #14]
 8007dae:	68b9      	ldr	r1, [r7, #8]
 8007db0:	4613      	mov	r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4413      	add	r3, r2
 8007db6:	005b      	lsls	r3, r3, #1
 8007db8:	440b      	add	r3, r1
 8007dba:	330c      	adds	r3, #12
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 8007dc0:	7bbb      	ldrb	r3, [r7, #14]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8007dc6:	7bfb      	ldrb	r3, [r7, #15]
 8007dc8:	3301      	adds	r3, #1
 8007dca:	73fb      	strb	r3, [r7, #15]
 8007dcc:	7bfb      	ldrb	r3, [r7, #15]
 8007dce:	2b09      	cmp	r3, #9
 8007dd0:	f67f af5d 	bls.w	8007c8e <USBH_AUDIO_FindAudioStreamingIN+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 8007dd4:	7bbb      	ldrb	r3, [r7, #14]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d001      	beq.n	8007dde <USBH_AUDIO_FindAudioStreamingIN+0x170>
  {
    status = USBH_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8007dde:	7b7b      	ldrb	r3, [r7, #13]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3714      	adds	r7, #20
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <USBH_AUDIO_FindAudioStreamingOUT>:
  * @brief  Find OUT Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingOUT(USBH_HandleTypeDef *phost)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
 8007df4:	2302      	movs	r3, #2
 8007df6:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 8007e02:	2300      	movs	r3, #0
 8007e04:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8007e06:	2300      	movs	r3, #0
 8007e08:	73fb      	strb	r3, [r7, #15]
 8007e0a:	e09e      	b.n	8007f4a <USBH_AUDIO_FindAudioStreamingOUT+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8007e0c:	7bfb      	ldrb	r3, [r7, #15]
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	211a      	movs	r1, #26
 8007e12:	fb01 f303 	mul.w	r3, r1, r3
 8007e16:	4413      	add	r3, r2
 8007e18:	f203 3347 	addw	r3, r3, #839	; 0x347
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	f040 8090 	bne.w	8007f44 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 8007e24:	7bfb      	ldrb	r3, [r7, #15]
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	211a      	movs	r1, #26
 8007e2a:	fb01 f303 	mul.w	r3, r1, r3
 8007e2e:	4413      	add	r3, r2
 8007e30:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8007e34:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	f040 8084 	bne.w	8007f44 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
    {
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 8007e3c:	7bfb      	ldrb	r3, [r7, #15]
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	211a      	movs	r1, #26
 8007e42:	fb01 f303 	mul.w	r3, r1, r3
 8007e46:	4413      	add	r3, r2
 8007e48:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	b25b      	sxtb	r3, r3
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	db77      	blt.n	8007f44 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	211a      	movs	r1, #26
 8007e5a:	fb01 f303 	mul.w	r3, r1, r3
 8007e5e:	4413      	add	r3, r2
 8007e60:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007e64:	881b      	ldrh	r3, [r3, #0]
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d06c      	beq.n	8007f44 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
      {
        AUDIO_Handle->stream_out[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007e6a:	7bfb      	ldrb	r3, [r7, #15]
 8007e6c:	7bba      	ldrb	r2, [r7, #14]
 8007e6e:	6879      	ldr	r1, [r7, #4]
 8007e70:	201a      	movs	r0, #26
 8007e72:	fb00 f303 	mul.w	r3, r0, r3
 8007e76:	440b      	add	r3, r1
 8007e78:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007e7c:	7818      	ldrb	r0, [r3, #0]
 8007e7e:	68b9      	ldr	r1, [r7, #8]
 8007e80:	4613      	mov	r3, r2
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	4413      	add	r3, r2
 8007e86:	005b      	lsls	r3, r3, #1
 8007e88:	440b      	add	r3, r1
 8007e8a:	3338      	adds	r3, #56	; 0x38
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007e90:	7bfb      	ldrb	r3, [r7, #15]
 8007e92:	7bba      	ldrb	r2, [r7, #14]
 8007e94:	6879      	ldr	r1, [r7, #4]
 8007e96:	201a      	movs	r0, #26
 8007e98:	fb00 f303 	mul.w	r3, r0, r3
 8007e9c:	440b      	add	r3, r1
 8007e9e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007ea2:	8818      	ldrh	r0, [r3, #0]
 8007ea4:	68b9      	ldr	r1, [r7, #8]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	4413      	add	r3, r2
 8007eac:	005b      	lsls	r3, r3, #1
 8007eae:	440b      	add	r3, r1
 8007eb0:	333a      	adds	r3, #58	; 0x3a
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8007eb6:	7bfb      	ldrb	r3, [r7, #15]
 8007eb8:	7bba      	ldrb	r2, [r7, #14]
 8007eba:	6879      	ldr	r1, [r7, #4]
 8007ebc:	201a      	movs	r0, #26
 8007ebe:	fb00 f303 	mul.w	r3, r0, r3
 8007ec2:	440b      	add	r3, r1
 8007ec4:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8007ec8:	7818      	ldrb	r0, [r3, #0]
 8007eca:	68b9      	ldr	r1, [r7, #8]
 8007ecc:	4613      	mov	r3, r2
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	4413      	add	r3, r2
 8007ed2:	005b      	lsls	r3, r3, #1
 8007ed4:	440b      	add	r3, r1
 8007ed6:	333d      	adds	r3, #61	; 0x3d
 8007ed8:	4602      	mov	r2, r0
 8007eda:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8007edc:	7bfb      	ldrb	r3, [r7, #15]
 8007ede:	7bba      	ldrb	r2, [r7, #14]
 8007ee0:	6879      	ldr	r1, [r7, #4]
 8007ee2:	201a      	movs	r0, #26
 8007ee4:	fb00 f303 	mul.w	r3, r0, r3
 8007ee8:	440b      	add	r3, r1
 8007eea:	f203 3345 	addw	r3, r3, #837	; 0x345
 8007eee:	7818      	ldrb	r0, [r3, #0]
 8007ef0:	68b9      	ldr	r1, [r7, #8]
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	4413      	add	r3, r2
 8007ef8:	005b      	lsls	r3, r3, #1
 8007efa:	440b      	add	r3, r1
 8007efc:	333c      	adds	r3, #60	; 0x3c
 8007efe:	4602      	mov	r2, r0
 8007f00:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	211a      	movs	r1, #26
 8007f08:	fb01 f303 	mul.w	r3, r1, r3
 8007f0c:	4413      	add	r3, r2
 8007f0e:	f203 3352 	addw	r3, r3, #850	; 0x352
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	7bba      	ldrb	r2, [r7, #14]
 8007f16:	b298      	uxth	r0, r3
 8007f18:	68b9      	ldr	r1, [r7, #8]
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4413      	add	r3, r2
 8007f20:	005b      	lsls	r3, r3, #1
 8007f22:	440b      	add	r3, r1
 8007f24:	3340      	adds	r3, #64	; 0x40
 8007f26:	4602      	mov	r2, r0
 8007f28:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].valid = 1U;
 8007f2a:	7bba      	ldrb	r2, [r7, #14]
 8007f2c:	68b9      	ldr	r1, [r7, #8]
 8007f2e:	4613      	mov	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	4413      	add	r3, r2
 8007f34:	005b      	lsls	r3, r3, #1
 8007f36:	440b      	add	r3, r1
 8007f38:	333e      	adds	r3, #62	; 0x3e
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 8007f3e:	7bbb      	ldrb	r3, [r7, #14]
 8007f40:	3301      	adds	r3, #1
 8007f42:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8007f44:	7bfb      	ldrb	r3, [r7, #15]
 8007f46:	3301      	adds	r3, #1
 8007f48:	73fb      	strb	r3, [r7, #15]
 8007f4a:	7bfb      	ldrb	r3, [r7, #15]
 8007f4c:	2b09      	cmp	r3, #9
 8007f4e:	f67f af5d 	bls.w	8007e0c <USBH_AUDIO_FindAudioStreamingOUT+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 8007f52:	7bbb      	ldrb	r3, [r7, #14]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d001      	beq.n	8007f5c <USBH_AUDIO_FindAudioStreamingOUT+0x170>
  {
    status = USBH_OK;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8007f5c:	7b7b      	ldrb	r3, [r7, #13]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <USBH_AUDIO_FindHIDControl>:
  * @brief  Find HID Control interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindHIDControl(USBH_HandleTypeDef *phost)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b084      	sub	sp, #16
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  uint8_t interface;
  USBH_StatusTypeDef status = USBH_FAIL;
 8007f72:	2302      	movs	r3, #2
 8007f74:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007f7c:	69db      	ldr	r3, [r3, #28]
 8007f7e:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOCONTROL  interface */
  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0xFFU);
 8007f80:	23ff      	movs	r3, #255	; 0xff
 8007f82:	2201      	movs	r2, #1
 8007f84:	2101      	movs	r1, #1
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f001 f9df 	bl	800934a <USBH_FindInterface>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	73fb      	strb	r3, [r7, #15]
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES))
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
 8007f92:	2bff      	cmp	r3, #255	; 0xff
 8007f94:	d002      	beq.n	8007f9c <USBH_AUDIO_FindHIDControl+0x32>
 8007f96:	7bfb      	ldrb	r3, [r7, #15]
 8007f98:	2b09      	cmp	r3, #9
 8007f9a:	d901      	bls.n	8007fa0 <USBH_AUDIO_FindHIDControl+0x36>
  {
    return USBH_FAIL;
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	e062      	b.n	8008066 <USBH_AUDIO_FindHIDControl+0xfc>
  }

  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	73fb      	strb	r3, [r7, #15]
 8007fa4:	e05b      	b.n	800805e <USBH_AUDIO_FindHIDControl+0xf4>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 8007fa6:	7bfb      	ldrb	r3, [r7, #15]
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	211a      	movs	r1, #26
 8007fac:	fb01 f303 	mul.w	r3, r1, r3
 8007fb0:	4413      	add	r3, r2
 8007fb2:	f203 3347 	addw	r3, r3, #839	; 0x347
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	2b03      	cmp	r3, #3
 8007fba:	d14d      	bne.n	8008058 <USBH_AUDIO_FindHIDControl+0xee>
        (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8007fbc:	7bfb      	ldrb	r3, [r7, #15]
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	211a      	movs	r1, #26
 8007fc2:	fb01 f303 	mul.w	r3, r1, r3
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007fcc:	881b      	ldrh	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d042      	beq.n	8008058 <USBH_AUDIO_FindHIDControl+0xee>
    {
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x80U)
 8007fd2:	7bfb      	ldrb	r3, [r7, #15]
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	211a      	movs	r1, #26
 8007fd8:	fb01 f303 	mul.w	r3, r1, r3
 8007fdc:	4413      	add	r3, r2
 8007fde:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	b25b      	sxtb	r3, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	da36      	bge.n	8008058 <USBH_AUDIO_FindHIDControl+0xee>
      {
        AUDIO_Handle->control.Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007fea:	7bfb      	ldrb	r3, [r7, #15]
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	211a      	movs	r1, #26
 8007ff0:	fb01 f303 	mul.w	r3, r1, r3
 8007ff4:	4413      	add	r3, r2
 8007ff6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007ffa:	781a      	ldrb	r2, [r3, #0]
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
        AUDIO_Handle->control.EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008002:	7bfb      	ldrb	r3, [r7, #15]
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	211a      	movs	r1, #26
 8008008:	fb01 f303 	mul.w	r3, r1, r3
 800800c:	4413      	add	r3, r2
 800800e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008012:	881a      	ldrh	r2, [r3, #0]
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	f8a3 2186 	strh.w	r2, [r3, #390]	; 0x186
        AUDIO_Handle->control.interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 800801a:	7bfb      	ldrb	r3, [r7, #15]
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	211a      	movs	r1, #26
 8008020:	fb01 f303 	mul.w	r3, r1, r3
 8008024:	4413      	add	r3, r2
 8008026:	f503 7351 	add.w	r3, r3, #836	; 0x344
 800802a:	781a      	ldrb	r2, [r3, #0]
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
        AUDIO_Handle->control.Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8008032:	7bfb      	ldrb	r3, [r7, #15]
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	211a      	movs	r1, #26
 8008038:	fb01 f303 	mul.w	r3, r1, r3
 800803c:	4413      	add	r3, r2
 800803e:	f203 3352 	addw	r3, r3, #850	; 0x352
 8008042:	781a      	ldrb	r2, [r3, #0]
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
        AUDIO_Handle->control.supported = 1U;
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	2201      	movs	r2, #1
 800804e:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
        status = USBH_OK;
 8008052:	2300      	movs	r3, #0
 8008054:	73bb      	strb	r3, [r7, #14]
        break;
 8008056:	e005      	b.n	8008064 <USBH_AUDIO_FindHIDControl+0xfa>
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8008058:	7bfb      	ldrb	r3, [r7, #15]
 800805a:	3301      	adds	r3, #1
 800805c:	73fb      	strb	r3, [r7, #15]
 800805e:	7bfb      	ldrb	r3, [r7, #15]
 8008060:	2b09      	cmp	r3, #9
 8008062:	d9a0      	bls.n	8007fa6 <USBH_AUDIO_FindHIDControl+0x3c>
      }
    }
  }

  return status;
 8008064:	7bbb      	ldrb	r3, [r7, #14]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <USBH_AUDIO_ParseCSDescriptors>:
  * @brief  Parse AC and interfaces Descriptors
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ParseCSDescriptors(USBH_HandleTypeDef *phost)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b088      	sub	sp, #32
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008076:	2300      	movs	r3, #0
 8008078:	77fb      	strb	r3, [r7, #31]
  USBH_DescHeader_t            *pdesc;
  uint16_t                      ptr;
  uint8_t                       itf_index = 0U;
 800807a:	2300      	movs	r3, #0
 800807c:	75fb      	strb	r3, [r7, #23]
  uint8_t                       itf_number = 0U;
 800807e:	2300      	movs	r3, #0
 8008080:	75bb      	strb	r3, [r7, #22]
  uint8_t                       alt_setting;
  AUDIO_HandleTypeDef           *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008088:	69db      	ldr	r3, [r3, #28]
 800808a:	613b      	str	r3, [r7, #16]
  pdesc   = (USBH_DescHeader_t *)(void *)(phost->device.CfgDesc_Raw);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	331c      	adds	r3, #28
 8008090:	61bb      	str	r3, [r7, #24]
  ptr = USB_LEN_CFG_DESC;
 8008092:	2309      	movs	r3, #9
 8008094:	81bb      	strh	r3, [r7, #12]

  AUDIO_Handle->class_desc.FeatureUnitNum = 0U;
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	2200      	movs	r2, #0
 800809a:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
  AUDIO_Handle->class_desc.InputTerminalNum = 0U;
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
  AUDIO_Handle->class_desc.OutputTerminalNum = 0U;
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
  AUDIO_Handle->class_desc.ASNum = 0U;
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8

  while (ptr < phost->device.CfgDesc.wTotalLength)
 80080b6:	e03d      	b.n	8008134 <USBH_AUDIO_ParseCSDescriptors+0xc6>
  {
    pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80080b8:	f107 030c 	add.w	r3, r7, #12
 80080bc:	4619      	mov	r1, r3
 80080be:	69b8      	ldr	r0, [r7, #24]
 80080c0:	f002 f901 	bl	800a2c6 <USBH_GetNextDesc>
 80080c4:	61b8      	str	r0, [r7, #24]

    switch (pdesc->bDescriptorType)
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	785b      	ldrb	r3, [r3, #1]
 80080ca:	2b04      	cmp	r3, #4
 80080cc:	d002      	beq.n	80080d4 <USBH_AUDIO_ParseCSDescriptors+0x66>
 80080ce:	2b24      	cmp	r3, #36	; 0x24
 80080d0:	d00f      	beq.n	80080f2 <USBH_AUDIO_ParseCSDescriptors+0x84>
 80080d2:	e02e      	b.n	8008132 <USBH_AUDIO_ParseCSDescriptors+0xc4>
    {

      case USB_DESC_TYPE_INTERFACE:
        itf_number = *((uint8_t *)(void *)pdesc + 2U);
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	789b      	ldrb	r3, [r3, #2]
 80080d8:	75bb      	strb	r3, [r7, #22]
        alt_setting = *((uint8_t *)(void *)pdesc + 3U);
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	78db      	ldrb	r3, [r3, #3]
 80080de:	73fb      	strb	r3, [r7, #15]
        itf_index = USBH_FindInterfaceIndex(phost, itf_number, alt_setting);
 80080e0:	7bfa      	ldrb	r2, [r7, #15]
 80080e2:	7dbb      	ldrb	r3, [r7, #22]
 80080e4:	4619      	mov	r1, r3
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f001 f975 	bl	80093d6 <USBH_FindInterfaceIndex>
 80080ec:	4603      	mov	r3, r0
 80080ee:	75fb      	strb	r3, [r7, #23]
        break;
 80080f0:	e020      	b.n	8008134 <USBH_AUDIO_ParseCSDescriptors+0xc6>

      case USB_DESC_TYPE_CS_INTERFACE:
        if (itf_number <= phost->device.CfgDesc.bNumInterfaces)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80080f8:	7dba      	ldrb	r2, [r7, #22]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d81a      	bhi.n	8008134 <USBH_AUDIO_ParseCSDescriptors+0xc6>
        {
          if ((itf_index == 0xFFU) || (itf_index >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80080fe:	7dfb      	ldrb	r3, [r7, #23]
 8008100:	2bff      	cmp	r3, #255	; 0xff
 8008102:	d002      	beq.n	800810a <USBH_AUDIO_ParseCSDescriptors+0x9c>
 8008104:	7dfb      	ldrb	r3, [r7, #23]
 8008106:	2b09      	cmp	r3, #9
 8008108:	d902      	bls.n	8008110 <USBH_AUDIO_ParseCSDescriptors+0xa2>
          {
            USBH_DbgLog("Cannot Find the audio interface index for %s class.", phost->pActiveClass->Name);
            status = USBH_FAIL;
 800810a:	2302      	movs	r3, #2
 800810c:	77fb      	strb	r3, [r7, #31]
 800810e:	e00f      	b.n	8008130 <USBH_AUDIO_ParseCSDescriptors+0xc2>
          }
          else
          {

            ParseCSDescriptors(&AUDIO_Handle->class_desc,
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8008116:	7dfb      	ldrb	r3, [r7, #23]
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	211a      	movs	r1, #26
 800811c:	fb01 f303 	mul.w	r3, r1, r3
 8008120:	4413      	add	r3, r2
 8008122:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	69ba      	ldr	r2, [r7, #24]
 800812a:	4619      	mov	r1, r3
 800812c:	f000 f80e 	bl	800814c <ParseCSDescriptors>
                               phost->device.CfgDesc.Itf_Desc[itf_index].bInterfaceSubClass,
                               (uint8_t *)pdesc);
          }
        }
        break;
 8008130:	e000      	b.n	8008134 <USBH_AUDIO_ParseCSDescriptors+0xc6>

      default:
        break;
 8008132:	bf00      	nop
  while (ptr < phost->device.CfgDesc.wTotalLength)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8b3 233a 	ldrh.w	r2, [r3, #826]	; 0x33a
 800813a:	89bb      	ldrh	r3, [r7, #12]
 800813c:	429a      	cmp	r2, r3
 800813e:	d8bb      	bhi.n	80080b8 <USBH_AUDIO_ParseCSDescriptors+0x4a>
    }
  }

  return status;
 8008140:	7ffb      	ldrb	r3, [r7, #31]
}
 8008142:	4618      	mov	r0, r3
 8008144:	3720      	adds	r7, #32
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
	...

0800814c <ParseCSDescriptors>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef ParseCSDescriptors(AUDIO_ClassSpecificDescTypedef *class_desc,
                                             uint8_t ac_subclass,
                                             uint8_t *pdesc)
{
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	460b      	mov	r3, r1
 8008156:	607a      	str	r2, [r7, #4]
 8008158:	72fb      	strb	r3, [r7, #11]
  if (ac_subclass == USB_SUBCLASS_AUDIOCONTROL)
 800815a:	7afb      	ldrb	r3, [r7, #11]
 800815c:	2b01      	cmp	r3, #1
 800815e:	d163      	bne.n	8008228 <ParseCSDescriptors+0xdc>
  {
    switch (pdesc[2])
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	3302      	adds	r3, #2
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	3b01      	subs	r3, #1
 8008168:	2b05      	cmp	r3, #5
 800816a:	f200 8081 	bhi.w	8008270 <ParseCSDescriptors+0x124>
 800816e:	a201      	add	r2, pc, #4	; (adr r2, 8008174 <ParseCSDescriptors+0x28>)
 8008170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008174:	0800818d 	.word	0x0800818d
 8008178:	08008195 	.word	0x08008195
 800817c:	080081b1 	.word	0x080081b1
 8008180:	0800820b 	.word	0x0800820b
 8008184:	080081ed 	.word	0x080081ed
 8008188:	080081cf 	.word	0x080081cf
    {
      case UAC_HEADER:
        class_desc->cs_desc.HeaderDesc = (AUDIO_HeaderDescTypeDef *)(void *)pdesc;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	601a      	str	r2, [r3, #0]
        break;
 8008192:	e070      	b.n	8008276 <ParseCSDescriptors+0x12a>

      case UAC_INPUT_TERMINAL:
        class_desc->cs_desc.InputTerminalDesc[class_desc->InputTerminalNum++] = (AUDIO_ITDescTypeDef *)(void *)pdesc;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800819a:	1c5a      	adds	r2, r3, #1
 800819c:	b291      	uxth	r1, r2
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	f8a2 107e 	strh.w	r1, [r2, #126]	; 0x7e
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	4413      	add	r3, r2
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	605a      	str	r2, [r3, #4]
        break;
 80081ae:	e062      	b.n	8008276 <ParseCSDescriptors+0x12a>

      case UAC_OUTPUT_TERMINAL:
        class_desc->cs_desc.OutputTerminalDesc[class_desc->OutputTerminalNum++] = (AUDIO_OTDescTypeDef *)(void *)pdesc;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80081b6:	1c5a      	adds	r2, r3, #1
 80081b8:	b291      	uxth	r1, r2
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	3304      	adds	r3, #4
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	4413      	add	r3, r2
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	605a      	str	r2, [r3, #4]
        break;
 80081cc:	e053      	b.n	8008276 <ParseCSDescriptors+0x12a>

      case UAC_FEATURE_UNIT:
        class_desc->cs_desc.FeatureUnitDesc[class_desc->FeatureUnitNum++] = (AUDIO_FeatureDescTypeDef *)(void *)pdesc;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80081d4:	1c5a      	adds	r2, r3, #1
 80081d6:	b291      	uxth	r1, r2
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	f8a2 1082 	strh.w	r1, [r2, #130]	; 0x82
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	3308      	adds	r3, #8
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	4413      	add	r3, r2
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	605a      	str	r2, [r3, #4]
        break;
 80081ea:	e044      	b.n	8008276 <ParseCSDescriptors+0x12a>

      case UAC_SELECTOR_UNIT:
        class_desc->cs_desc.SelectorUnitDesc[class_desc->SelectorUnitNum++] = (AUDIO_SelectorDescTypeDef *)(void *)pdesc;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80081f2:	1c5a      	adds	r2, r3, #1
 80081f4:	b291      	uxth	r1, r2
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	3310      	adds	r3, #16
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	4413      	add	r3, r2
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	605a      	str	r2, [r3, #4]
        break;
 8008208:	e035      	b.n	8008276 <ParseCSDescriptors+0x12a>

      case UAC_MIXER_UNIT:
        class_desc->cs_desc.MixerUnitDesc[class_desc->MixerUnitNum++] = (AUDIO_MixerDescTypeDef *)(void *)pdesc;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8008210:	1c5a      	adds	r2, r3, #1
 8008212:	b291      	uxth	r1, r2
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	f8a2 1086 	strh.w	r1, [r2, #134]	; 0x86
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	330c      	adds	r3, #12
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	4413      	add	r3, r2
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	605a      	str	r2, [r3, #4]
        break;
 8008226:	e026      	b.n	8008276 <ParseCSDescriptors+0x12a>
        break;
    }
  }
  else
  {
    if (ac_subclass == USB_SUBCLASS_AUDIOSTREAMING)
 8008228:	7afb      	ldrb	r3, [r7, #11]
 800822a:	2b02      	cmp	r3, #2
 800822c:	d122      	bne.n	8008274 <ParseCSDescriptors+0x128>
    {
      switch (pdesc[2])
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	3302      	adds	r3, #2
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	2b01      	cmp	r3, #1
 8008236:	d002      	beq.n	800823e <ParseCSDescriptors+0xf2>
 8008238:	2b02      	cmp	r3, #2
 800823a:	d00a      	beq.n	8008252 <ParseCSDescriptors+0x106>
          break;
        case UAC_FORMAT_TYPE:
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
          break;
        default:
          break;
 800823c:	e01b      	b.n	8008276 <ParseCSDescriptors+0x12a>
          class_desc->as_desc[class_desc->ASNum].GeneralDesc = (AUDIO_ASGeneralDescTypeDef *)(void *)pdesc;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	330a      	adds	r3, #10
 8008248:	00db      	lsls	r3, r3, #3
 800824a:	4413      	add	r3, r2
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	605a      	str	r2, [r3, #4]
          break;
 8008250:	e011      	b.n	8008276 <ParseCSDescriptors+0x12a>
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8008258:	1c5a      	adds	r2, r3, #1
 800825a:	b291      	uxth	r1, r2
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	f8a2 107c 	strh.w	r1, [r2, #124]	; 0x7c
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	330a      	adds	r3, #10
 8008266:	00db      	lsls	r3, r3, #3
 8008268:	4413      	add	r3, r2
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	609a      	str	r2, [r3, #8]
          break;
 800826e:	e002      	b.n	8008276 <ParseCSDescriptors+0x12a>
        break;
 8008270:	bf00      	nop
 8008272:	e000      	b.n	8008276 <ParseCSDescriptors+0x12a>
      }
    }
 8008274:	bf00      	nop
  }

  return USBH_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3714      	adds	r7, #20
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <USBH_AUDIO_FindLinkedUnit>:
  * @param  phost: Host handle
  * @param  UnitID: Unit identifer
  * @retval UnitID, Index and Type of the associated Unit
  */
static uint32_t USBH_AUDIO_FindLinkedUnit(USBH_HandleTypeDef *phost, uint8_t UnitID)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	460b      	mov	r3, r1
 800828e:	70fb      	strb	r3, [r7, #3]
  uint8_t Index;
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008296:	69db      	ldr	r3, [r3, #28]
 8008298:	60bb      	str	r3, [r7, #8]

  /* Find Feature Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 800829a:	2300      	movs	r3, #0
 800829c:	73fb      	strb	r3, [r7, #15]
 800829e:	e01b      	b.n	80082d8 <USBH_AUDIO_FindLinkedUnit+0x54>
  {
    if (AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bSourceID == UnitID)
 80082a0:	7bfb      	ldrb	r3, [r7, #15]
 80082a2:	68ba      	ldr	r2, [r7, #8]
 80082a4:	3322      	adds	r3, #34	; 0x22
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4413      	add	r3, r2
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	791b      	ldrb	r3, [r3, #4]
 80082ae:	78fa      	ldrb	r2, [r7, #3]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d10e      	bne.n	80082d2 <USBH_AUDIO_FindLinkedUnit+0x4e>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bUnitID;
 80082b4:	7bfb      	ldrb	r3, [r7, #15]
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	3322      	adds	r3, #34	; 0x22
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	4413      	add	r3, r2
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	78db      	ldrb	r3, [r3, #3]
 80082c2:	70fb      	strb	r3, [r7, #3]

      return (((uint32_t)UnitID << 16U) | (UAC_FEATURE_UNIT << 8U) | (uint32_t)Index);
 80082c4:	78fb      	ldrb	r3, [r7, #3]
 80082c6:	041a      	lsls	r2, r3, #16
 80082c8:	7bfb      	ldrb	r3, [r7, #15]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80082d0:	e089      	b.n	80083e6 <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 80082d2:	7bfb      	ldrb	r3, [r7, #15]
 80082d4:	3301      	adds	r3, #1
 80082d6:	73fb      	strb	r3, [r7, #15]
 80082d8:	7bfb      	ldrb	r3, [r7, #15]
 80082da:	b29a      	uxth	r2, r3
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d3dc      	bcc.n	80082a0 <USBH_AUDIO_FindLinkedUnit+0x1c>
    }
  }

  /* Find Mixer Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 80082e6:	2300      	movs	r3, #0
 80082e8:	73fb      	strb	r3, [r7, #15]
 80082ea:	e026      	b.n	800833a <USBH_AUDIO_FindLinkedUnit+0xb6>
  {
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 80082ec:	7bfb      	ldrb	r3, [r7, #15]
 80082ee:	68ba      	ldr	r2, [r7, #8]
 80082f0:	3326      	adds	r3, #38	; 0x26
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	4413      	add	r3, r2
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	795b      	ldrb	r3, [r3, #5]
 80082fa:	78fa      	ldrb	r2, [r7, #3]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d009      	beq.n	8008314 <USBH_AUDIO_FindLinkedUnit+0x90>
        (AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID1 == UnitID))
 8008300:	7bfb      	ldrb	r3, [r7, #15]
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	3326      	adds	r3, #38	; 0x26
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	4413      	add	r3, r2
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	799b      	ldrb	r3, [r3, #6]
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 800830e:	78fa      	ldrb	r2, [r7, #3]
 8008310:	429a      	cmp	r2, r3
 8008312:	d10f      	bne.n	8008334 <USBH_AUDIO_FindLinkedUnit+0xb0>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bUnitID;
 8008314:	7bfb      	ldrb	r3, [r7, #15]
 8008316:	68ba      	ldr	r2, [r7, #8]
 8008318:	3326      	adds	r3, #38	; 0x26
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	4413      	add	r3, r2
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	78db      	ldrb	r3, [r3, #3]
 8008322:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_MIXER_UNIT << 8U) | Index);
 8008324:	78fb      	ldrb	r3, [r7, #3]
 8008326:	041b      	lsls	r3, r3, #16
 8008328:	461a      	mov	r2, r3
 800832a:	7bfb      	ldrb	r3, [r7, #15]
 800832c:	4313      	orrs	r3, r2
 800832e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008332:	e058      	b.n	80083e6 <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 8008334:	7bfb      	ldrb	r3, [r7, #15]
 8008336:	3301      	adds	r3, #1
 8008338:	73fb      	strb	r3, [r7, #15]
 800833a:	7bfb      	ldrb	r3, [r7, #15]
 800833c:	b29a      	uxth	r2, r3
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8008344:	429a      	cmp	r2, r3
 8008346:	d3d1      	bcc.n	80082ec <USBH_AUDIO_FindLinkedUnit+0x68>
    }
  }

  /* Find Selector Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 8008348:	2300      	movs	r3, #0
 800834a:	73fb      	strb	r3, [r7, #15]
 800834c:	e01c      	b.n	8008388 <USBH_AUDIO_FindLinkedUnit+0x104>
  {
    if (AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bSourceID0 == UnitID)
 800834e:	7bfb      	ldrb	r3, [r7, #15]
 8008350:	68ba      	ldr	r2, [r7, #8]
 8008352:	332a      	adds	r3, #42	; 0x2a
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	4413      	add	r3, r2
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	795b      	ldrb	r3, [r3, #5]
 800835c:	78fa      	ldrb	r2, [r7, #3]
 800835e:	429a      	cmp	r2, r3
 8008360:	d10f      	bne.n	8008382 <USBH_AUDIO_FindLinkedUnit+0xfe>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bUnitID;
 8008362:	7bfb      	ldrb	r3, [r7, #15]
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	332a      	adds	r3, #42	; 0x2a
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	4413      	add	r3, r2
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	78db      	ldrb	r3, [r3, #3]
 8008370:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_SELECTOR_UNIT << 8U) | Index);
 8008372:	78fb      	ldrb	r3, [r7, #3]
 8008374:	041b      	lsls	r3, r3, #16
 8008376:	461a      	mov	r2, r3
 8008378:	7bfb      	ldrb	r3, [r7, #15]
 800837a:	4313      	orrs	r3, r2
 800837c:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8008380:	e031      	b.n	80083e6 <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 8008382:	7bfb      	ldrb	r3, [r7, #15]
 8008384:	3301      	adds	r3, #1
 8008386:	73fb      	strb	r3, [r7, #15]
 8008388:	7bfb      	ldrb	r3, [r7, #15]
 800838a:	b29a      	uxth	r2, r3
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 8008392:	429a      	cmp	r2, r3
 8008394:	d3db      	bcc.n	800834e <USBH_AUDIO_FindLinkedUnit+0xca>
    }
  }

  /* Find OT Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 8008396:	2300      	movs	r3, #0
 8008398:	73fb      	strb	r3, [r7, #15]
 800839a:	e01c      	b.n	80083d6 <USBH_AUDIO_FindLinkedUnit+0x152>
  {
    if (AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bSourceID == UnitID)
 800839c:	7bfb      	ldrb	r3, [r7, #15]
 800839e:	68ba      	ldr	r2, [r7, #8]
 80083a0:	331e      	adds	r3, #30
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	4413      	add	r3, r2
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	79db      	ldrb	r3, [r3, #7]
 80083aa:	78fa      	ldrb	r2, [r7, #3]
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d10f      	bne.n	80083d0 <USBH_AUDIO_FindLinkedUnit+0x14c>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bTerminalID;
 80083b0:	7bfb      	ldrb	r3, [r7, #15]
 80083b2:	68ba      	ldr	r2, [r7, #8]
 80083b4:	331e      	adds	r3, #30
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	4413      	add	r3, r2
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	78db      	ldrb	r3, [r3, #3]
 80083be:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_OUTPUT_TERMINAL << 8U) | Index);
 80083c0:	78fb      	ldrb	r3, [r7, #3]
 80083c2:	041b      	lsls	r3, r3, #16
 80083c4:	461a      	mov	r2, r3
 80083c6:	7bfb      	ldrb	r3, [r7, #15]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80083ce:	e00a      	b.n	80083e6 <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 80083d0:	7bfb      	ldrb	r3, [r7, #15]
 80083d2:	3301      	adds	r3, #1
 80083d4:	73fb      	strb	r3, [r7, #15]
 80083d6:	7bfb      	ldrb	r3, [r7, #15]
 80083d8:	b29a      	uxth	r2, r3
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d3db      	bcc.n	800839c <USBH_AUDIO_FindLinkedUnit+0x118>
    }
  }

  /* No associated Unit found return undefined ID 0x00*/
  return 0U;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3714      	adds	r7, #20
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
	...

080083f4 <USBH_AUDIO_BuildMicrophonePath>:
  * @brief  Build full path for Microphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildMicrophonePath(USBH_HandleTypeDef *phost)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b086      	sub	sp, #24
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 80083fc:	2300      	movs	r3, #0
 80083fe:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 8008400:	2300      	movs	r3, #0
 8008402:	757b      	strb	r3, [r7, #21]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800840a:	69db      	ldr	r3, [r3, #28]
 800840c:	613b      	str	r3, [r7, #16]

  /*Find microphone IT*/
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 800840e:	2300      	movs	r3, #0
 8008410:	75bb      	strb	r3, [r7, #22]
 8008412:	e02c      	b.n	800846e <USBH_AUDIO_BuildMicrophonePath+0x7a>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x201)
 8008414:	7dbb      	ldrb	r3, [r7, #22]
 8008416:	693a      	ldr	r2, [r7, #16]
 8008418:	331a      	adds	r3, #26
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4413      	add	r3, r2
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	791b      	ldrb	r3, [r3, #4]
 8008422:	4619      	mov	r1, r3
 8008424:	7dbb      	ldrb	r3, [r7, #22]
 8008426:	693a      	ldr	r2, [r7, #16]
 8008428:	331a      	adds	r3, #26
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	4413      	add	r3, r2
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	795b      	ldrb	r3, [r3, #5]
 8008432:	b29b      	uxth	r3, r3
 8008434:	021b      	lsls	r3, r3, #8
 8008436:	b29b      	uxth	r3, r3
 8008438:	430b      	orrs	r3, r1
 800843a:	f240 2201 	movw	r2, #513	; 0x201
 800843e:	4293      	cmp	r3, r2
 8008440:	d112      	bne.n	8008468 <USBH_AUDIO_BuildMicrophonePath+0x74>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 8008442:	7dbb      	ldrb	r3, [r7, #22]
 8008444:	693a      	ldr	r2, [r7, #16]
 8008446:	331a      	adds	r3, #26
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	4413      	add	r3, r2
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	78db      	ldrb	r3, [r3, #3]
 8008450:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->microphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 8008452:	7dbb      	ldrb	r3, [r7, #22]
 8008454:	693a      	ldr	r2, [r7, #16]
 8008456:	331a      	adds	r3, #26
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	4413      	add	r3, r2
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	79da      	ldrb	r2, [r3, #7]
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
      break;
 8008466:	e009      	b.n	800847c <USBH_AUDIO_BuildMicrophonePath+0x88>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8008468:	7dbb      	ldrb	r3, [r7, #22]
 800846a:	3301      	adds	r3, #1
 800846c:	75bb      	strb	r3, [r7, #22]
 800846e:	7dbb      	ldrb	r3, [r7, #22]
 8008470:	b29a      	uxth	r2, r3
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 8008478:	429a      	cmp	r2, r3
 800847a:	d3cb      	bcc.n	8008414 <USBH_AUDIO_BuildMicrophonePath+0x20>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 800847c:	7dfb      	ldrb	r3, [r7, #23]
 800847e:	4619      	mov	r1, r3
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f7ff feff 	bl	8008284 <USBH_AUDIO_FindLinkedUnit>
 8008486:	60f8      	str	r0, [r7, #12]

    if (!value)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d101      	bne.n	8008492 <USBH_AUDIO_BuildMicrophonePath+0x9e>
    {
      return USBH_FAIL;
 800848e:	2302      	movs	r3, #2
 8008490:	e034      	b.n	80084fc <USBH_AUDIO_BuildMicrophonePath+0x108>
    }

    Index = (uint8_t)(value & 0xFFU);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	72fb      	strb	r3, [r7, #11]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	0a1b      	lsrs	r3, r3, #8
 800849a:	72bb      	strb	r3, [r7, #10]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	0c1b      	lsrs	r3, r3, #16
 80084a0:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 80084a2:	7abb      	ldrb	r3, [r7, #10]
 80084a4:	3b03      	subs	r3, #3
 80084a6:	2b03      	cmp	r3, #3
 80084a8:	d81e      	bhi.n	80084e8 <USBH_AUDIO_BuildMicrophonePath+0xf4>
 80084aa:	a201      	add	r2, pc, #4	; (adr r2, 80084b0 <USBH_AUDIO_BuildMicrophonePath+0xbc>)
 80084ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b0:	080084df 	.word	0x080084df
 80084b4:	080084cb 	.word	0x080084cb
 80084b8:	080084d5 	.word	0x080084d5
 80084bc:	080084c1 	.word	0x080084c1
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->microphone.asociated_feature = Index;
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	7afa      	ldrb	r2, [r7, #11]
 80084c4:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
        break;
 80084c8:	e011      	b.n	80084ee <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->microphone.asociated_mixer = Index;
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	7afa      	ldrb	r2, [r7, #11]
 80084ce:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
        break;
 80084d2:	e00c      	b.n	80084ee <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->microphone.asociated_selector = Index;
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	7afa      	ldrb	r2, [r7, #11]
 80084d8:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
        break;
 80084dc:	e007      	b.n	80084ee <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->microphone.asociated_terminal = Index;
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	7afa      	ldrb	r2, [r7, #11]
 80084e2:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
        break;
 80084e6:	e002      	b.n	80084ee <USBH_AUDIO_BuildMicrophonePath+0xfa>

      default:
        ret = USBH_FAIL;
 80084e8:	2302      	movs	r3, #2
 80084ea:	757b      	strb	r3, [r7, #21]
        break;
 80084ec:	bf00      	nop
    }
  }
  while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 80084ee:	7abb      	ldrb	r3, [r7, #10]
 80084f0:	2b03      	cmp	r3, #3
 80084f2:	d002      	beq.n	80084fa <USBH_AUDIO_BuildMicrophonePath+0x106>
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1c0      	bne.n	800847c <USBH_AUDIO_BuildMicrophonePath+0x88>

  return ret;
 80084fa:	7d7b      	ldrb	r3, [r7, #21]
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3718      	adds	r7, #24
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <USBH_AUDIO_BuildHeadphonePath>:
  * @brief  Build full path for Headphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildHeadphonePath(USBH_HandleTypeDef *phost)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 800850c:	2300      	movs	r3, #0
 800850e:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 8008510:	2300      	movs	r3, #0
 8008512:	753b      	strb	r3, [r7, #20]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800851a:	69db      	ldr	r3, [r3, #28]
 800851c:	613b      	str	r3, [r7, #16]

  /* Find association between audio streaming and microphone */
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 800851e:	2300      	movs	r3, #0
 8008520:	757b      	strb	r3, [r7, #21]
 8008522:	e02c      	b.n	800857e <USBH_AUDIO_BuildHeadphonePath+0x7a>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x101)
 8008524:	7d7b      	ldrb	r3, [r7, #21]
 8008526:	693a      	ldr	r2, [r7, #16]
 8008528:	331a      	adds	r3, #26
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	4413      	add	r3, r2
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	791b      	ldrb	r3, [r3, #4]
 8008532:	4619      	mov	r1, r3
 8008534:	7d7b      	ldrb	r3, [r7, #21]
 8008536:	693a      	ldr	r2, [r7, #16]
 8008538:	331a      	adds	r3, #26
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	4413      	add	r3, r2
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	795b      	ldrb	r3, [r3, #5]
 8008542:	b29b      	uxth	r3, r3
 8008544:	021b      	lsls	r3, r3, #8
 8008546:	b29b      	uxth	r3, r3
 8008548:	430b      	orrs	r3, r1
 800854a:	f240 1201 	movw	r2, #257	; 0x101
 800854e:	4293      	cmp	r3, r2
 8008550:	d112      	bne.n	8008578 <USBH_AUDIO_BuildHeadphonePath+0x74>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 8008552:	7d7b      	ldrb	r3, [r7, #21]
 8008554:	693a      	ldr	r2, [r7, #16]
 8008556:	331a      	adds	r3, #26
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	4413      	add	r3, r2
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	78db      	ldrb	r3, [r3, #3]
 8008560:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->headphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 8008562:	7d7b      	ldrb	r3, [r7, #21]
 8008564:	693a      	ldr	r2, [r7, #16]
 8008566:	331a      	adds	r3, #26
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	79da      	ldrb	r2, [r3, #7]
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
      break;
 8008576:	e009      	b.n	800858c <USBH_AUDIO_BuildHeadphonePath+0x88>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8008578:	7d7b      	ldrb	r3, [r7, #21]
 800857a:	3301      	adds	r3, #1
 800857c:	757b      	strb	r3, [r7, #21]
 800857e:	7d7b      	ldrb	r3, [r7, #21]
 8008580:	b29a      	uxth	r2, r3
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 8008588:	429a      	cmp	r2, r3
 800858a:	d3cb      	bcc.n	8008524 <USBH_AUDIO_BuildHeadphonePath+0x20>
    }
  }

  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 800858c:	2300      	movs	r3, #0
 800858e:	75bb      	strb	r3, [r7, #22]
 8008590:	e011      	b.n	80085b6 <USBH_AUDIO_BuildHeadphonePath+0xb2>
  {
    if (AUDIO_Handle->class_desc.as_desc[Index].GeneralDesc->bTerminalLink == UnitID)
 8008592:	7dbb      	ldrb	r3, [r7, #22]
 8008594:	693a      	ldr	r2, [r7, #16]
 8008596:	3317      	adds	r3, #23
 8008598:	00db      	lsls	r3, r3, #3
 800859a:	4413      	add	r3, r2
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	78db      	ldrb	r3, [r3, #3]
 80085a0:	7dfa      	ldrb	r2, [r7, #23]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d104      	bne.n	80085b0 <USBH_AUDIO_BuildHeadphonePath+0xac>
    {
      AUDIO_Handle->headphone.asociated_as = Index;
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	7dba      	ldrb	r2, [r7, #22]
 80085aa:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
      break;
 80085ae:	e009      	b.n	80085c4 <USBH_AUDIO_BuildHeadphonePath+0xc0>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 80085b0:	7dbb      	ldrb	r3, [r7, #22]
 80085b2:	3301      	adds	r3, #1
 80085b4:	75bb      	strb	r3, [r7, #22]
 80085b6:	7dbb      	ldrb	r3, [r7, #22]
 80085b8:	b29a      	uxth	r2, r3
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d3e6      	bcc.n	8008592 <USBH_AUDIO_BuildHeadphonePath+0x8e>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 80085c4:	7dfb      	ldrb	r3, [r7, #23]
 80085c6:	4619      	mov	r1, r3
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f7ff fe5b 	bl	8008284 <USBH_AUDIO_FindLinkedUnit>
 80085ce:	60f8      	str	r0, [r7, #12]

    if (!value)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d101      	bne.n	80085da <USBH_AUDIO_BuildHeadphonePath+0xd6>
    {
      return USBH_FAIL;
 80085d6:	2302      	movs	r3, #2
 80085d8:	e053      	b.n	8008682 <USBH_AUDIO_BuildHeadphonePath+0x17e>
    }

    Index = (uint8_t)(value & 0xFFU);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	75bb      	strb	r3, [r7, #22]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	0a1b      	lsrs	r3, r3, #8
 80085e2:	72fb      	strb	r3, [r7, #11]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	0c1b      	lsrs	r3, r3, #16
 80085e8:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 80085ea:	7afb      	ldrb	r3, [r7, #11]
 80085ec:	3b03      	subs	r3, #3
 80085ee:	2b03      	cmp	r3, #3
 80085f0:	d83c      	bhi.n	800866c <USBH_AUDIO_BuildHeadphonePath+0x168>
 80085f2:	a201      	add	r2, pc, #4	; (adr r2, 80085f8 <USBH_AUDIO_BuildHeadphonePath+0xf4>)
 80085f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f8:	08008627 	.word	0x08008627
 80085fc:	08008613 	.word	0x08008613
 8008600:	0800861d 	.word	0x0800861d
 8008604:	08008609 	.word	0x08008609
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->headphone.asociated_feature = Index;
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	7dba      	ldrb	r2, [r7, #22]
 800860c:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
        break;
 8008610:	e030      	b.n	8008674 <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->headphone.asociated_mixer = Index;
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	7dba      	ldrb	r2, [r7, #22]
 8008616:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
        break;
 800861a:	e02b      	b.n	8008674 <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->headphone.asociated_selector = Index;
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	7dba      	ldrb	r2, [r7, #22]
 8008620:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
        break;
 8008624:	e026      	b.n	8008674 <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->headphone.asociated_terminal = Index;
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	7dba      	ldrb	r2, [r7, #22]
 800862a:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
        if (Index < AUDIO_MAX_NUM_OUT_TERMINAL)
 800862e:	7dbb      	ldrb	r3, [r7, #22]
 8008630:	2b03      	cmp	r3, #3
 8008632:	d818      	bhi.n	8008666 <USBH_AUDIO_BuildHeadphonePath+0x162>
        {
          if (LE16(AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->wTerminalType) != 0x103)
 8008634:	7dbb      	ldrb	r3, [r7, #22]
 8008636:	693a      	ldr	r2, [r7, #16]
 8008638:	331e      	adds	r3, #30
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	4413      	add	r3, r2
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	791b      	ldrb	r3, [r3, #4]
 8008642:	4619      	mov	r1, r3
 8008644:	7dbb      	ldrb	r3, [r7, #22]
 8008646:	693a      	ldr	r2, [r7, #16]
 8008648:	331e      	adds	r3, #30
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	4413      	add	r3, r2
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	795b      	ldrb	r3, [r3, #5]
 8008652:	b29b      	uxth	r3, r3
 8008654:	021b      	lsls	r3, r3, #8
 8008656:	b29b      	uxth	r3, r3
 8008658:	430b      	orrs	r3, r1
 800865a:	f240 1203 	movw	r2, #259	; 0x103
 800865e:	4293      	cmp	r3, r2
 8008660:	d007      	beq.n	8008672 <USBH_AUDIO_BuildHeadphonePath+0x16e>
          {
            return  USBH_OK;
 8008662:	2300      	movs	r3, #0
 8008664:	e00d      	b.n	8008682 <USBH_AUDIO_BuildHeadphonePath+0x17e>
          }
        }
        else
        {
          ret = USBH_FAIL;
 8008666:	2302      	movs	r3, #2
 8008668:	753b      	strb	r3, [r7, #20]
        }
        break;
 800866a:	e002      	b.n	8008672 <USBH_AUDIO_BuildHeadphonePath+0x16e>

      default:
        ret = USBH_FAIL;
 800866c:	2302      	movs	r3, #2
 800866e:	753b      	strb	r3, [r7, #20]
        break;
 8008670:	e000      	b.n	8008674 <USBH_AUDIO_BuildHeadphonePath+0x170>
        break;
 8008672:	bf00      	nop
    }
  }
  while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 8008674:	7afb      	ldrb	r3, [r7, #11]
 8008676:	2b03      	cmp	r3, #3
 8008678:	d002      	beq.n	8008680 <USBH_AUDIO_BuildHeadphonePath+0x17c>
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d1a1      	bne.n	80085c4 <USBH_AUDIO_BuildHeadphonePath+0xc0>

  return ret;
 8008680:	7d3b      	ldrb	r3, [r7, #20]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3718      	adds	r7, #24
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop

0800868c <USBH_AC_SetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b086      	sub	sp, #24
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	4608      	mov	r0, r1
 8008696:	4611      	mov	r1, r2
 8008698:	461a      	mov	r2, r3
 800869a:	4603      	mov	r3, r0
 800869c:	70fb      	strb	r3, [r7, #3]
 800869e:	460b      	mov	r3, r1
 80086a0:	70bb      	strb	r3, [r7, #2]
 80086a2:	4613      	mov	r3, r2
 80086a4:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 80086a6:	2300      	movs	r3, #0
 80086a8:	82fb      	strh	r3, [r7, #22]
 80086aa:	2300      	movs	r3, #0
 80086ac:	82bb      	strh	r3, [r7, #20]
 80086ae:	2300      	movs	r3, #0
 80086b0:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID, InterfaceNum;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80086b8:	69db      	ldr	r3, [r3, #28]
 80086ba:	60fb      	str	r3, [r7, #12]
  USBH_StatusTypeDef ret = USBH_OK;
 80086bc:	2300      	movs	r3, #0
 80086be:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 80086c0:	78fb      	ldrb	r3, [r7, #3]
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	d002      	beq.n	80086cc <USBH_AC_SetCur+0x40>
 80086c6:	2b06      	cmp	r3, #6
 80086c8:	d018      	beq.n	80086fc <USBH_AC_SetCur+0x70>
 80086ca:	e035      	b.n	8008738 <USBH_AC_SetCur+0xac>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086d0:	78db      	ldrb	r3, [r3, #3]
 80086d2:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80086d4:	2300      	movs	r3, #0
 80086d6:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80086d8:	7afb      	ldrb	r3, [r7, #11]
 80086da:	b29b      	uxth	r3, r3
 80086dc:	021b      	lsls	r3, r3, #8
 80086de:	b29a      	uxth	r2, r3
 80086e0:	7abb      	ldrb	r3, [r7, #10]
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	4313      	orrs	r3, r2
 80086e6:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 80086e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086ec:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 80086f6:	2301      	movs	r3, #1
 80086f8:	827b      	strh	r3, [r7, #18]
      break;
 80086fa:	e020      	b.n	800873e <USBH_AC_SetCur+0xb2>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 80086fc:	78bb      	ldrb	r3, [r7, #2]
 80086fe:	68fa      	ldr	r2, [r7, #12]
 8008700:	3322      	adds	r3, #34	; 0x22
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	4413      	add	r3, r2
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	78db      	ldrb	r3, [r3, #3]
 800870a:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800870c:	2300      	movs	r3, #0
 800870e:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 8008710:	7afb      	ldrb	r3, [r7, #11]
 8008712:	b29b      	uxth	r3, r3
 8008714:	021b      	lsls	r3, r3, #8
 8008716:	b29a      	uxth	r2, r3
 8008718:	7abb      	ldrb	r3, [r7, #10]
 800871a:	b29b      	uxth	r3, r3
 800871c:	4313      	orrs	r3, r2
 800871e:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8008720:	787b      	ldrb	r3, [r7, #1]
 8008722:	b29b      	uxth	r3, r3
 8008724:	021b      	lsls	r3, r3, #8
 8008726:	b29a      	uxth	r2, r3
 8008728:	f897 3020 	ldrb.w	r3, [r7, #32]
 800872c:	b29b      	uxth	r3, r3
 800872e:	4313      	orrs	r3, r2
 8008730:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8008732:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008734:	827b      	strh	r3, [r7, #18]
      break;
 8008736:	e002      	b.n	800873e <USBH_AC_SetCur+0xb2>

    default:
      ret = USBH_FAIL;
 8008738:	2302      	movs	r3, #2
 800873a:	747b      	strb	r3, [r7, #17]
      break;
 800873c:	bf00      	nop
  }

  if (ret != USBH_OK)
 800873e:	7c7b      	ldrb	r3, [r7, #17]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d001      	beq.n	8008748 <USBH_AC_SetCur+0xbc>
  {
    return ret;
 8008744:	7c7b      	ldrb	r3, [r7, #17]
 8008746:	e017      	b.n	8008778 <USBH_AC_SetCur+0xec>
  }

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2221      	movs	r2, #33	; 0x21
 800874c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2201      	movs	r2, #1
 8008752:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	8afa      	ldrh	r2, [r7, #22]
 8008758:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	8aba      	ldrh	r2, [r7, #20]
 800875e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	8a7a      	ldrh	r2, [r7, #18]
 8008764:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800876c:	8a7a      	ldrh	r2, [r7, #18]
 800876e:	4619      	mov	r1, r3
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f001 fdc3 	bl	800a2fc <USBH_CtlReq>
 8008776:	4603      	mov	r3, r0
}
 8008778:	4618      	mov	r0, r3
 800877a:	3718      	adds	r7, #24
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <USBH_AC_GetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	4608      	mov	r0, r1
 800878a:	4611      	mov	r1, r2
 800878c:	461a      	mov	r2, r3
 800878e:	4603      	mov	r3, r0
 8008790:	70fb      	strb	r3, [r7, #3]
 8008792:	460b      	mov	r3, r1
 8008794:	70bb      	strb	r3, [r7, #2]
 8008796:	4613      	mov	r3, r2
 8008798:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 800879a:	2300      	movs	r3, #0
 800879c:	82fb      	strh	r3, [r7, #22]
 800879e:	2300      	movs	r3, #0
 80087a0:	82bb      	strh	r3, [r7, #20]
 80087a2:	2300      	movs	r3, #0
 80087a4:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 80087a6:	2300      	movs	r3, #0
 80087a8:	743b      	strb	r3, [r7, #16]
 80087aa:	2300      	movs	r3, #0
 80087ac:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80087b4:	69db      	ldr	r3, [r3, #28]
 80087b6:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 80087b8:	2300      	movs	r3, #0
 80087ba:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 80087bc:	78fb      	ldrb	r3, [r7, #3]
 80087be:	2b06      	cmp	r3, #6
 80087c0:	d01e      	beq.n	8008800 <USBH_AC_GetCur+0x80>
 80087c2:	2b06      	cmp	r3, #6
 80087c4:	dc4f      	bgt.n	8008866 <USBH_AC_GetCur+0xe6>
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d002      	beq.n	80087d0 <USBH_AC_GetCur+0x50>
 80087ca:	2b03      	cmp	r3, #3
 80087cc:	d036      	beq.n	800883c <USBH_AC_GetCur+0xbc>
 80087ce:	e04a      	b.n	8008866 <USBH_AC_GetCur+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087d4:	78db      	ldrb	r3, [r3, #3]
 80087d6:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80087d8:	2300      	movs	r3, #0
 80087da:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80087dc:	7c3b      	ldrb	r3, [r7, #16]
 80087de:	b29b      	uxth	r3, r3
 80087e0:	021b      	lsls	r3, r3, #8
 80087e2:	b29a      	uxth	r2, r3
 80087e4:	7bfb      	ldrb	r3, [r7, #15]
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	4313      	orrs	r3, r2
 80087ea:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 80087ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087f0:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 80087fa:	2301      	movs	r3, #1
 80087fc:	827b      	strh	r3, [r7, #18]
      break;
 80087fe:	e035      	b.n	800886c <USBH_AC_GetCur+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8008800:	78bb      	ldrb	r3, [r7, #2]
 8008802:	68ba      	ldr	r2, [r7, #8]
 8008804:	3322      	adds	r3, #34	; 0x22
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	4413      	add	r3, r2
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	78db      	ldrb	r3, [r3, #3]
 800880e:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008810:	2300      	movs	r3, #0
 8008812:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8008814:	7c3b      	ldrb	r3, [r7, #16]
 8008816:	b29b      	uxth	r3, r3
 8008818:	021b      	lsls	r3, r3, #8
 800881a:	b29a      	uxth	r2, r3
 800881c:	7bfb      	ldrb	r3, [r7, #15]
 800881e:	b29b      	uxth	r3, r3
 8008820:	4313      	orrs	r3, r2
 8008822:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8008824:	787b      	ldrb	r3, [r7, #1]
 8008826:	b29b      	uxth	r3, r3
 8008828:	021b      	lsls	r3, r3, #8
 800882a:	b29a      	uxth	r2, r3
 800882c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008830:	b29b      	uxth	r3, r3
 8008832:	4313      	orrs	r3, r2
 8008834:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8008836:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008838:	827b      	strh	r3, [r7, #18]
      break;
 800883a:	e017      	b.n	800886c <USBH_AC_GetCur+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008842:	78db      	ldrb	r3, [r3, #3]
 8008844:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008846:	2300      	movs	r3, #0
 8008848:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800884a:	7c3b      	ldrb	r3, [r7, #16]
 800884c:	b29b      	uxth	r3, r3
 800884e:	021b      	lsls	r3, r3, #8
 8008850:	b29a      	uxth	r2, r3
 8008852:	7bfb      	ldrb	r3, [r7, #15]
 8008854:	b29b      	uxth	r3, r3
 8008856:	4313      	orrs	r3, r2
 8008858:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 800885a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800885e:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8008860:	2301      	movs	r3, #1
 8008862:	827b      	strh	r3, [r7, #18]
      break;
 8008864:	e002      	b.n	800886c <USBH_AC_GetCur+0xec>

    default:
      ret = USBH_FAIL;
 8008866:	2302      	movs	r3, #2
 8008868:	747b      	strb	r3, [r7, #17]
      break;
 800886a:	bf00      	nop
  }

  if (ret != USBH_OK)
 800886c:	7c7b      	ldrb	r3, [r7, #17]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d001      	beq.n	8008876 <USBH_AC_GetCur+0xf6>
  {
    return ret;
 8008872:	7c7b      	ldrb	r3, [r7, #17]
 8008874:	e017      	b.n	80088a6 <USBH_AC_GetCur+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	22a1      	movs	r2, #161	; 0xa1
 800887a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_CUR;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2281      	movs	r2, #129	; 0x81
 8008880:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	8afa      	ldrh	r2, [r7, #22]
 8008886:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	8aba      	ldrh	r2, [r7, #20]
 800888c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	8a7a      	ldrh	r2, [r7, #18]
 8008892:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800889a:	8a7a      	ldrh	r2, [r7, #18]
 800889c:	4619      	mov	r1, r3
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f001 fd2c 	bl	800a2fc <USBH_CtlReq>
 80088a4:	4603      	mov	r3, r0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3718      	adds	r7, #24
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <USBH_AC_GetMax>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b086      	sub	sp, #24
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
 80088b6:	4608      	mov	r0, r1
 80088b8:	4611      	mov	r1, r2
 80088ba:	461a      	mov	r2, r3
 80088bc:	4603      	mov	r3, r0
 80088be:	70fb      	strb	r3, [r7, #3]
 80088c0:	460b      	mov	r3, r1
 80088c2:	70bb      	strb	r3, [r7, #2]
 80088c4:	4613      	mov	r3, r2
 80088c6:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 80088c8:	2300      	movs	r3, #0
 80088ca:	82fb      	strh	r3, [r7, #22]
 80088cc:	2300      	movs	r3, #0
 80088ce:	82bb      	strh	r3, [r7, #20]
 80088d0:	2300      	movs	r3, #0
 80088d2:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 80088d4:	2300      	movs	r3, #0
 80088d6:	743b      	strb	r3, [r7, #16]
 80088d8:	2300      	movs	r3, #0
 80088da:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80088e2:	69db      	ldr	r3, [r3, #28]
 80088e4:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 80088e6:	2300      	movs	r3, #0
 80088e8:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 80088ea:	78fb      	ldrb	r3, [r7, #3]
 80088ec:	2b06      	cmp	r3, #6
 80088ee:	d01e      	beq.n	800892e <USBH_AC_GetMax+0x80>
 80088f0:	2b06      	cmp	r3, #6
 80088f2:	dc4f      	bgt.n	8008994 <USBH_AC_GetMax+0xe6>
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d002      	beq.n	80088fe <USBH_AC_GetMax+0x50>
 80088f8:	2b03      	cmp	r3, #3
 80088fa:	d036      	beq.n	800896a <USBH_AC_GetMax+0xbc>
 80088fc:	e04a      	b.n	8008994 <USBH_AC_GetMax+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008902:	78db      	ldrb	r3, [r3, #3]
 8008904:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008906:	2300      	movs	r3, #0
 8008908:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800890a:	7c3b      	ldrb	r3, [r7, #16]
 800890c:	b29b      	uxth	r3, r3
 800890e:	021b      	lsls	r3, r3, #8
 8008910:	b29a      	uxth	r2, r3
 8008912:	7bfb      	ldrb	r3, [r7, #15]
 8008914:	b29b      	uxth	r3, r3
 8008916:	4313      	orrs	r3, r2
 8008918:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 800891a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800891e:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	2200      	movs	r2, #0
 8008924:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8008928:	2301      	movs	r3, #1
 800892a:	827b      	strh	r3, [r7, #18]
      break;
 800892c:	e035      	b.n	800899a <USBH_AC_GetMax+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 800892e:	78bb      	ldrb	r3, [r7, #2]
 8008930:	68ba      	ldr	r2, [r7, #8]
 8008932:	3322      	adds	r3, #34	; 0x22
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	4413      	add	r3, r2
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	78db      	ldrb	r3, [r3, #3]
 800893c:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800893e:	2300      	movs	r3, #0
 8008940:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 8008942:	7c3b      	ldrb	r3, [r7, #16]
 8008944:	b29b      	uxth	r3, r3
 8008946:	021b      	lsls	r3, r3, #8
 8008948:	b29a      	uxth	r2, r3
 800894a:	7bfb      	ldrb	r3, [r7, #15]
 800894c:	b29b      	uxth	r3, r3
 800894e:	4313      	orrs	r3, r2
 8008950:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8008952:	787b      	ldrb	r3, [r7, #1]
 8008954:	b29b      	uxth	r3, r3
 8008956:	021b      	lsls	r3, r3, #8
 8008958:	b29a      	uxth	r2, r3
 800895a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800895e:	b29b      	uxth	r3, r3
 8008960:	4313      	orrs	r3, r2
 8008962:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8008964:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008966:	827b      	strh	r3, [r7, #18]
      break;
 8008968:	e017      	b.n	800899a <USBH_AC_GetMax+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008970:	78db      	ldrb	r3, [r3, #3]
 8008972:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008974:	2300      	movs	r3, #0
 8008976:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 8008978:	7c3b      	ldrb	r3, [r7, #16]
 800897a:	b29b      	uxth	r3, r3
 800897c:	021b      	lsls	r3, r3, #8
 800897e:	b29a      	uxth	r2, r3
 8008980:	7bfb      	ldrb	r3, [r7, #15]
 8008982:	b29b      	uxth	r3, r3
 8008984:	4313      	orrs	r3, r2
 8008986:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 8008988:	f44f 7380 	mov.w	r3, #256	; 0x100
 800898c:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 800898e:	2301      	movs	r3, #1
 8008990:	827b      	strh	r3, [r7, #18]
      break;
 8008992:	e002      	b.n	800899a <USBH_AC_GetMax+0xec>

    default:
      ret = USBH_FAIL;
 8008994:	2302      	movs	r3, #2
 8008996:	747b      	strb	r3, [r7, #17]
      break;
 8008998:	bf00      	nop
  }

  if (ret != USBH_OK)
 800899a:	7c7b      	ldrb	r3, [r7, #17]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d001      	beq.n	80089a4 <USBH_AC_GetMax+0xf6>
  {
    return ret;
 80089a0:	7c7b      	ldrb	r3, [r7, #17]
 80089a2:	e017      	b.n	80089d4 <USBH_AC_GetMax+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	22a1      	movs	r2, #161	; 0xa1
 80089a8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MAX;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2283      	movs	r2, #131	; 0x83
 80089ae:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	8afa      	ldrh	r2, [r7, #22]
 80089b4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	8aba      	ldrh	r2, [r7, #20]
 80089ba:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	8a7a      	ldrh	r2, [r7, #18]
 80089c0:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80089c8:	8a7a      	ldrh	r2, [r7, #18]
 80089ca:	4619      	mov	r1, r3
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f001 fc95 	bl	800a2fc <USBH_CtlReq>
 80089d2:	4603      	mov	r3, r0

}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3718      	adds	r7, #24
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <USBH_AC_GetRes>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b086      	sub	sp, #24
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	4608      	mov	r0, r1
 80089e6:	4611      	mov	r1, r2
 80089e8:	461a      	mov	r2, r3
 80089ea:	4603      	mov	r3, r0
 80089ec:	70fb      	strb	r3, [r7, #3]
 80089ee:	460b      	mov	r3, r1
 80089f0:	70bb      	strb	r3, [r7, #2]
 80089f2:	4613      	mov	r3, r2
 80089f4:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 80089f6:	2300      	movs	r3, #0
 80089f8:	82fb      	strh	r3, [r7, #22]
 80089fa:	2300      	movs	r3, #0
 80089fc:	82bb      	strh	r3, [r7, #20]
 80089fe:	2300      	movs	r3, #0
 8008a00:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8008a02:	2300      	movs	r3, #0
 8008a04:	743b      	strb	r3, [r7, #16]
 8008a06:	2300      	movs	r3, #0
 8008a08:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008a10:	69db      	ldr	r3, [r3, #28]
 8008a12:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8008a14:	2300      	movs	r3, #0
 8008a16:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8008a18:	78fb      	ldrb	r3, [r7, #3]
 8008a1a:	2b06      	cmp	r3, #6
 8008a1c:	d01e      	beq.n	8008a5c <USBH_AC_GetRes+0x80>
 8008a1e:	2b06      	cmp	r3, #6
 8008a20:	dc4f      	bgt.n	8008ac2 <USBH_AC_GetRes+0xe6>
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	d002      	beq.n	8008a2c <USBH_AC_GetRes+0x50>
 8008a26:	2b03      	cmp	r3, #3
 8008a28:	d036      	beq.n	8008a98 <USBH_AC_GetRes+0xbc>
 8008a2a:	e04a      	b.n	8008ac2 <USBH_AC_GetRes+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a30:	78db      	ldrb	r3, [r3, #3]
 8008a32:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008a34:	2300      	movs	r3, #0
 8008a36:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8008a38:	7c3b      	ldrb	r3, [r7, #16]
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	021b      	lsls	r3, r3, #8
 8008a3e:	b29a      	uxth	r2, r3
 8008a40:	7bfb      	ldrb	r3, [r7, #15]
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	4313      	orrs	r3, r2
 8008a46:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 8008a48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a4c:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8008a56:	2301      	movs	r3, #1
 8008a58:	827b      	strh	r3, [r7, #18]
      break;
 8008a5a:	e035      	b.n	8008ac8 <USBH_AC_GetRes+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8008a5c:	78bb      	ldrb	r3, [r7, #2]
 8008a5e:	68ba      	ldr	r2, [r7, #8]
 8008a60:	3322      	adds	r3, #34	; 0x22
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	4413      	add	r3, r2
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	78db      	ldrb	r3, [r3, #3]
 8008a6a:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8008a70:	7c3b      	ldrb	r3, [r7, #16]
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	021b      	lsls	r3, r3, #8
 8008a76:	b29a      	uxth	r2, r3
 8008a78:	7bfb      	ldrb	r3, [r7, #15]
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8008a80:	787b      	ldrb	r3, [r7, #1]
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	021b      	lsls	r3, r3, #8
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8008a92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a94:	827b      	strh	r3, [r7, #18]
      break;
 8008a96:	e017      	b.n	8008ac8 <USBH_AC_GetRes+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a9e:	78db      	ldrb	r3, [r3, #3]
 8008aa0:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8008aa6:	7c3b      	ldrb	r3, [r7, #16]
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	021b      	lsls	r3, r3, #8
 8008aac:	b29a      	uxth	r2, r3
 8008aae:	7bfb      	ldrb	r3, [r7, #15]
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 8008ab6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008aba:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8008abc:	2301      	movs	r3, #1
 8008abe:	827b      	strh	r3, [r7, #18]
      break;
 8008ac0:	e002      	b.n	8008ac8 <USBH_AC_GetRes+0xec>

    default:
      ret = USBH_FAIL;
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	747b      	strb	r3, [r7, #17]
      break;
 8008ac6:	bf00      	nop
  }

  if (ret != USBH_OK)
 8008ac8:	7c7b      	ldrb	r3, [r7, #17]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d001      	beq.n	8008ad2 <USBH_AC_GetRes+0xf6>
  {
    return ret;
 8008ace:	7c7b      	ldrb	r3, [r7, #17]
 8008ad0:	e017      	b.n	8008b02 <USBH_AC_GetRes+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	22a1      	movs	r2, #161	; 0xa1
 8008ad6:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_RES;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2284      	movs	r2, #132	; 0x84
 8008adc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	8afa      	ldrh	r2, [r7, #22]
 8008ae2:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	8aba      	ldrh	r2, [r7, #20]
 8008ae8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	8a7a      	ldrh	r2, [r7, #18]
 8008aee:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008af6:	8a7a      	ldrh	r2, [r7, #18]
 8008af8:	4619      	mov	r1, r3
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f001 fbfe 	bl	800a2fc <USBH_CtlReq>
 8008b00:	4603      	mov	r3, r0

}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3718      	adds	r7, #24
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <USBH_AC_GetMin>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b086      	sub	sp, #24
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	4608      	mov	r0, r1
 8008b14:	4611      	mov	r1, r2
 8008b16:	461a      	mov	r2, r3
 8008b18:	4603      	mov	r3, r0
 8008b1a:	70fb      	strb	r3, [r7, #3]
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	70bb      	strb	r3, [r7, #2]
 8008b20:	4613      	mov	r3, r2
 8008b22:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8008b24:	2300      	movs	r3, #0
 8008b26:	82fb      	strh	r3, [r7, #22]
 8008b28:	2300      	movs	r3, #0
 8008b2a:	82bb      	strh	r3, [r7, #20]
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8008b30:	2300      	movs	r3, #0
 8008b32:	743b      	strb	r3, [r7, #16]
 8008b34:	2300      	movs	r3, #0
 8008b36:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008b3e:	69db      	ldr	r3, [r3, #28]
 8008b40:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8008b42:	2300      	movs	r3, #0
 8008b44:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8008b46:	78fb      	ldrb	r3, [r7, #3]
 8008b48:	2b06      	cmp	r3, #6
 8008b4a:	d01e      	beq.n	8008b8a <USBH_AC_GetMin+0x80>
 8008b4c:	2b06      	cmp	r3, #6
 8008b4e:	dc4f      	bgt.n	8008bf0 <USBH_AC_GetMin+0xe6>
 8008b50:	2b02      	cmp	r3, #2
 8008b52:	d002      	beq.n	8008b5a <USBH_AC_GetMin+0x50>
 8008b54:	2b03      	cmp	r3, #3
 8008b56:	d036      	beq.n	8008bc6 <USBH_AC_GetMin+0xbc>
 8008b58:	e04a      	b.n	8008bf0 <USBH_AC_GetMin+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b5e:	78db      	ldrb	r3, [r3, #3]
 8008b60:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008b62:	2300      	movs	r3, #0
 8008b64:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8008b66:	7c3b      	ldrb	r3, [r7, #16]
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	021b      	lsls	r3, r3, #8
 8008b6c:	b29a      	uxth	r2, r3
 8008b6e:	7bfb      	ldrb	r3, [r7, #15]
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	4313      	orrs	r3, r2
 8008b74:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8008b76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b7a:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8008b84:	2301      	movs	r3, #1
 8008b86:	827b      	strh	r3, [r7, #18]
      break;
 8008b88:	e035      	b.n	8008bf6 <USBH_AC_GetMin+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8008b8a:	78bb      	ldrb	r3, [r7, #2]
 8008b8c:	68ba      	ldr	r2, [r7, #8]
 8008b8e:	3322      	adds	r3, #34	; 0x22
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	4413      	add	r3, r2
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	78db      	ldrb	r3, [r3, #3]
 8008b98:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8008b9e:	7c3b      	ldrb	r3, [r7, #16]
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	021b      	lsls	r3, r3, #8
 8008ba4:	b29a      	uxth	r2, r3
 8008ba6:	7bfb      	ldrb	r3, [r7, #15]
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	4313      	orrs	r3, r2
 8008bac:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8008bae:	787b      	ldrb	r3, [r7, #1]
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	021b      	lsls	r3, r3, #8
 8008bb4:	b29a      	uxth	r2, r3
 8008bb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8008bc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bc2:	827b      	strh	r3, [r7, #18]
      break;
 8008bc4:	e017      	b.n	8008bf6 <USBH_AC_GetMin+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bcc:	78db      	ldrb	r3, [r3, #3]
 8008bce:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8008bd4:	7c3b      	ldrb	r3, [r7, #16]
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	021b      	lsls	r3, r3, #8
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	7bfb      	ldrb	r3, [r7, #15]
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	4313      	orrs	r3, r2
 8008be2:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8008be4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008be8:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8008bea:	2301      	movs	r3, #1
 8008bec:	827b      	strh	r3, [r7, #18]
      break;
 8008bee:	e002      	b.n	8008bf6 <USBH_AC_GetMin+0xec>

    default:
      ret = USBH_FAIL;
 8008bf0:	2302      	movs	r3, #2
 8008bf2:	747b      	strb	r3, [r7, #17]
      break;
 8008bf4:	bf00      	nop
  }

  if (ret != USBH_OK)
 8008bf6:	7c7b      	ldrb	r3, [r7, #17]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d001      	beq.n	8008c00 <USBH_AC_GetMin+0xf6>
  {
    return ret;
 8008bfc:	7c7b      	ldrb	r3, [r7, #17]
 8008bfe:	e017      	b.n	8008c30 <USBH_AC_GetMin+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	22a1      	movs	r2, #161	; 0xa1
 8008c04:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MIN;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2282      	movs	r2, #130	; 0x82
 8008c0a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	8afa      	ldrh	r2, [r7, #22]
 8008c10:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	8aba      	ldrh	r2, [r7, #20]
 8008c16:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	8a7a      	ldrh	r2, [r7, #18]
 8008c1c:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008c24:	8a7a      	ldrh	r2, [r7, #18]
 8008c26:	4619      	mov	r1, r3
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f001 fb67 	bl	800a2fc <USBH_CtlReq>
 8008c2e:	4603      	mov	r3, r0

}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3718      	adds	r7, #24
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <USBH_AUDIO_SetEndpointControls>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetEndpointControls(USBH_HandleTypeDef *phost,
                                                         uint8_t  Ep,
                                                         uint8_t *buff)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b086      	sub	sp, #24
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	460b      	mov	r3, r1
 8008c42:	607a      	str	r2, [r7, #4]
 8008c44:	72fb      	strb	r3, [r7, #11]
  uint16_t wValue, wIndex, wLength;

  wValue = SAMPLING_FREQ_CONTROL << 8U;
 8008c46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c4a:	82fb      	strh	r3, [r7, #22]
  wIndex = Ep;
 8008c4c:	7afb      	ldrb	r3, [r7, #11]
 8008c4e:	82bb      	strh	r3, [r7, #20]
  wLength = 3U; /*length of the frequency parameter*/
 8008c50:	2303      	movs	r3, #3
 8008c52:	827b      	strh	r3, [r7, #18]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT | \
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2222      	movs	r2, #34	; 0x22
 8008c58:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	8afa      	ldrh	r2, [r7, #22]
 8008c64:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	8aba      	ldrh	r2, [r7, #20]
 8008c6a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	8a7a      	ldrh	r2, [r7, #18]
 8008c70:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)buff, wLength));
 8008c72:	8a7b      	ldrh	r3, [r7, #18]
 8008c74:	461a      	mov	r2, r3
 8008c76:	6879      	ldr	r1, [r7, #4]
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	f001 fb3f 	bl	800a2fc <USBH_CtlReq>
 8008c7e:	4603      	mov	r3, r0

}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3718      	adds	r7, #24
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <USBH_AUDIO_InputStream>:
  * @brief  Handle Input stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InputStream(USBH_HandleTypeDef *phost)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  USBH_StatusTypeDef status = USBH_BUSY;
 8008c90:	2301      	movs	r3, #1
 8008c92:	73fb      	strb	r3, [r7, #15]

  return status;
 8008c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3714      	adds	r7, #20
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr
	...

08008ca4 <USBH_AUDIO_Control>:
  * @brief  Handle HID Control process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Control(USBH_HandleTypeDef *phost)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b086      	sub	sp, #24
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8008cac:	2301      	movs	r3, #1
 8008cae:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008cb6:	69db      	ldr	r3, [r3, #28]
 8008cb8:	613b      	str	r3, [r7, #16]
  uint16_t attribute  = 0U;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	81fb      	strh	r3, [r7, #14]

  switch (AUDIO_Handle->control_state)
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	78db      	ldrb	r3, [r3, #3]
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	2b04      	cmp	r3, #4
 8008cc6:	f200 8090 	bhi.w	8008dea <USBH_AUDIO_Control+0x146>
 8008cca:	a201      	add	r2, pc, #4	; (adr r2, 8008cd0 <USBH_AUDIO_Control+0x2c>)
 8008ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd0:	08008ce5 	.word	0x08008ce5
 8008cd4:	08008d39 	.word	0x08008d39
 8008cd8:	08008deb 	.word	0x08008deb
 8008cdc:	08008db7 	.word	0x08008db7
 8008ce0:	08008dd1 	.word	0x08008dd1
  {
    case AUDIO_CONTROL_INIT:
      if ((phost->Timer & 1U) == 0U)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8008cea:	f003 0301 	and.w	r3, r3, #1
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d17d      	bne.n	8008dee <USBH_AUDIO_Control+0x14a>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
        USBH_InterruptReceiveData(phost,
                                  (uint8_t *)(void *)(AUDIO_Handle->mem),
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                  (uint8_t)AUDIO_Handle->control.EpSize,
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
        USBH_InterruptReceiveData(phost,
 8008d0a:	b2da      	uxtb	r2, r3
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f001 fd01 	bl	800a71a <USBH_InterruptReceiveData>
                                  AUDIO_Handle->control.Pipe);

        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1

        AUDIO_Handle->control_state = AUDIO_CONTROL_CHANGE ;
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	2202      	movs	r2, #2
 8008d34:	70da      	strb	r2, [r3, #3]
      }
      break;
 8008d36:	e05a      	b.n	8008dee <USBH_AUDIO_Control+0x14a>

    case AUDIO_CONTROL_CHANGE:
      if (USBH_LL_GetURBState(phost, AUDIO_Handle->control.Pipe) == USBH_URB_DONE)
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8008d3e:	4619      	mov	r1, r3
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f002 f806 	bl	800ad52 <USBH_LL_GetURBState>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d114      	bne.n	8008d76 <USBH_AUDIO_Control+0xd2>
      {
        attribute = LE16(&AUDIO_Handle->mem[0]);
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008d58:	3302      	adds	r3, #2
 8008d5a:	881b      	ldrh	r3, [r3, #0]
 8008d5c:	021b      	lsls	r3, r3, #8
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	4313      	orrs	r3, r2
 8008d62:	81fb      	strh	r3, [r7, #14]
        if (USBH_AUDIO_SetControlAttribute(phost, (uint8_t)attribute) == USBH_BUSY)
 8008d64:	89fb      	ldrh	r3, [r7, #14]
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	4619      	mov	r1, r3
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 f97a 	bl	8009064 <USBH_AUDIO_SetControlAttribute>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d03d      	beq.n	8008df2 <USBH_AUDIO_Control+0x14e>
        {
          break;
        }
      }

      if ((phost->Timer - AUDIO_Handle->control.timer) >= AUDIO_Handle->control.Poll)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	693a      	ldr	r2, [r7, #16]
 8008d86:	f892 218b 	ldrb.w	r2, [r2, #395]	; 0x18b
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d333      	bcc.n	8008df6 <USBH_AUDIO_Control+0x152>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

        USBH_InterruptReceiveData(phost,
                                  (uint8_t *)(void *)(AUDIO_Handle->mem),
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                  (uint8_t)AUDIO_Handle->control.EpSize,
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
        USBH_InterruptReceiveData(phost,
 8008da6:	b2da      	uxtb	r2, r3
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f001 fcb3 	bl	800a71a <USBH_InterruptReceiveData>
                                  AUDIO_Handle->control.Pipe);

      }
      break;
 8008db4:	e01f      	b.n	8008df6 <USBH_AUDIO_Control+0x152>

    case AUDIO_CONTROL_VOLUME_UP:
      if (USBH_AUDIO_SetControlAttribute(phost, 1U) == USBH_OK)
 8008db6:	2101      	movs	r1, #1
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 f953 	bl	8009064 <USBH_AUDIO_SetControlAttribute>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d11a      	bne.n	8008dfa <USBH_AUDIO_Control+0x156>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008dce:	e014      	b.n	8008dfa <USBH_AUDIO_Control+0x156>

    case AUDIO_CONTROL_VOLUME_DOWN:
      if (USBH_AUDIO_SetControlAttribute(phost, 2U) == USBH_OK)
 8008dd0:	2102      	movs	r1, #2
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 f946 	bl	8009064 <USBH_AUDIO_SetControlAttribute>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d10f      	bne.n	8008dfe <USBH_AUDIO_Control+0x15a>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	2201      	movs	r2, #1
 8008de2:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 8008de4:	2300      	movs	r3, #0
 8008de6:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008de8:	e009      	b.n	8008dfe <USBH_AUDIO_Control+0x15a>

    case AUDIO_CONTROL_IDLE:
    default:
      break;
 8008dea:	bf00      	nop
 8008dec:	e008      	b.n	8008e00 <USBH_AUDIO_Control+0x15c>
      break;
 8008dee:	bf00      	nop
 8008df0:	e006      	b.n	8008e00 <USBH_AUDIO_Control+0x15c>
          break;
 8008df2:	bf00      	nop
 8008df4:	e004      	b.n	8008e00 <USBH_AUDIO_Control+0x15c>
      break;
 8008df6:	bf00      	nop
 8008df8:	e002      	b.n	8008e00 <USBH_AUDIO_Control+0x15c>
      break;
 8008dfa:	bf00      	nop
 8008dfc:	e000      	b.n	8008e00 <USBH_AUDIO_Control+0x15c>
      break;
 8008dfe:	bf00      	nop
  }

  return status;
 8008e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3718      	adds	r7, #24
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop

08008e0c <USBH_AUDIO_OutputStream>:
  * @brief  Handle Output stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_OutputStream(USBH_HandleTypeDef *phost)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b086      	sub	sp, #24
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8008e14:	2301      	movs	r3, #1
 8008e16:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008e1e:	69db      	ldr	r3, [r3, #28]
 8008e20:	613b      	str	r3, [r7, #16]
  uint8_t *buff;


  switch (AUDIO_Handle->play_state)
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	789b      	ldrb	r3, [r3, #2]
 8008e26:	3b01      	subs	r3, #1
 8008e28:	2b04      	cmp	r3, #4
 8008e2a:	d85c      	bhi.n	8008ee6 <USBH_AUDIO_OutputStream+0xda>
 8008e2c:	a201      	add	r2, pc, #4	; (adr r2, 8008e34 <USBH_AUDIO_OutputStream+0x28>)
 8008e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e32:	bf00      	nop
 8008e34:	08008e49 	.word	0x08008e49
 8008e38:	08008ea5 	.word	0x08008ea5
 8008e3c:	08008e6f 	.word	0x08008e6f
 8008e40:	08008edb 	.word	0x08008edb
 8008e44:	08008ed5 	.word	0x08008ed5
  {
    case AUDIO_PLAYBACK_INIT:

      if (AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->bSamFreqType == 0U)
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008e4e:	693a      	ldr	r2, [r7, #16]
 8008e50:	3317      	adds	r3, #23
 8008e52:	00db      	lsls	r3, r3, #3
 8008e54:	4413      	add	r3, r2
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	79db      	ldrb	r3, [r3, #7]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d103      	bne.n	8008e66 <USBH_AUDIO_OutputStream+0x5a>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP_FREQ;
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	2203      	movs	r2, #3
 8008e62:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008e64:	e044      	b.n	8008ef0 <USBH_AUDIO_OutputStream+0xe4>
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP;
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	2202      	movs	r2, #2
 8008e6a:	709a      	strb	r2, [r3, #2]
      break;
 8008e6c:	e040      	b.n	8008ef0 <USBH_AUDIO_OutputStream+0xe4>

    case AUDIO_PLAYBACK_SET_EP_FREQ:

      buff = (uint8_t *)AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->tSamFreq[0];
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	3317      	adds	r3, #23
 8008e78:	00db      	lsls	r3, r3, #3
 8008e7a:	4413      	add	r3, r2
 8008e7c:	68db      	ldr	r3, [r3, #12]
 8008e7e:	3308      	adds	r3, #8
 8008e80:	60fb      	str	r3, [r7, #12]

      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f7ff fed3 	bl	8008c38 <USBH_AUDIO_SetEndpointControls>
 8008e92:	4603      	mov	r3, r0
 8008e94:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8008e96:	7dfb      	ldrb	r3, [r7, #23]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d126      	bne.n	8008eea <USBH_AUDIO_OutputStream+0xde>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	2205      	movs	r2, #5
 8008ea0:	709a      	strb	r2, [r3, #2]
      }
      break;
 8008ea2:	e022      	b.n	8008eea <USBH_AUDIO_OutputStream+0xde>

    case AUDIO_PLAYBACK_SET_EP:
      buff = (uint8_t *)(void *)&AUDIO_Handle->headphone.frequency;
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8008eaa:	60fb      	str	r3, [r7, #12]
      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f7ff febe 	bl	8008c38 <USBH_AUDIO_SetEndpointControls>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8008ec0:	7dfb      	ldrb	r3, [r7, #23]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d113      	bne.n	8008eee <USBH_AUDIO_OutputStream+0xe2>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	2205      	movs	r2, #5
 8008eca:	709a      	strb	r2, [r3, #2]
        USBH_AUDIO_FrequencySet(phost);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 f96e 	bl	80091ae <USBH_AUDIO_FrequencySet>
      }
      break;
 8008ed2:	e00c      	b.n	8008eee <USBH_AUDIO_OutputStream+0xe2>

    case AUDIO_PLAYBACK_IDLE:
      status = USBH_OK;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008ed8:	e00a      	b.n	8008ef0 <USBH_AUDIO_OutputStream+0xe4>

    case AUDIO_PLAYBACK_PLAY:
      USBH_AUDIO_Transmit(phost);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 f80e 	bl	8008efc <USBH_AUDIO_Transmit>
      status = USBH_OK;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ee4:	e004      	b.n	8008ef0 <USBH_AUDIO_OutputStream+0xe4>

    default:
      break;
 8008ee6:	bf00      	nop
 8008ee8:	e002      	b.n	8008ef0 <USBH_AUDIO_OutputStream+0xe4>
      break;
 8008eea:	bf00      	nop
 8008eec:	e000      	b.n	8008ef0 <USBH_AUDIO_OutputStream+0xe4>
      break;
 8008eee:	bf00      	nop
  }

  return status;
 8008ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3718      	adds	r7, #24
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop

08008efc <USBH_AUDIO_Transmit>:
  * @brief  Handle Transmission process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Transmit(USBH_HandleTypeDef *phost)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8008f04:	2301      	movs	r3, #1
 8008f06:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008f0e:	69db      	ldr	r3, [r3, #28]
 8008f10:	60bb      	str	r3, [r7, #8]

  switch (AUDIO_Handle->processing_state)
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	791b      	ldrb	r3, [r3, #4]
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d002      	beq.n	8008f20 <USBH_AUDIO_Transmit+0x24>
 8008f1a:	2b02      	cmp	r3, #2
 8008f1c:	d033      	beq.n	8008f86 <USBH_AUDIO_Transmit+0x8a>
 8008f1e:	e096      	b.n	800904e <USBH_AUDIO_Transmit+0x152>
  {
    case AUDIO_DATA_START_OUT:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) == 0U)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8008f26:	f003 0301 	and.w	r3, r3, #1
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	f040 8092 	bne.w	8009054 <USBH_AUDIO_Transmit+0x158>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        AUDIO_Handle->processing_state = AUDIO_DATA_OUT;
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	2202      	movs	r2, #2
 8008f40:	711a      	strb	r2, [r3, #4]
        USBH_IsocSendData(phost,
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
                          AUDIO_Handle->headphone.buf,
                          (uint32_t)AUDIO_Handle->headphone.frame_length,
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
        USBH_IsocSendData(phost,
 8008f4e:	461a      	mov	r2, r3
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f001 fbfe 	bl	800a758 <USBH_IsocSendData>
                          AUDIO_Handle->headphone.Pipe);

        AUDIO_Handle->headphone.partial_ptr = AUDIO_Handle->headphone.frame_length;
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8008f62:	461a      	mov	r2, r3
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        AUDIO_Handle->headphone.global_ptr = AUDIO_Handle->headphone.frame_length;
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8008f70:	461a      	mov	r2, r3
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        AUDIO_Handle->headphone.cbuf = AUDIO_Handle->headphone.buf;
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008f84:	e066      	b.n	8009054 <USBH_AUDIO_Transmit+0x158>

    case AUDIO_DATA_OUT:
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f001 fedf 	bl	800ad52 <USBH_LL_GetURBState>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d15e      	bne.n	8009058 <USBH_AUDIO_Transmit+0x15c>
          ((phost->Timer - AUDIO_Handle->headphone.timer) >= AUDIO_Handle->headphone.Poll))
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008fa6:	1ad3      	subs	r3, r2, r3
 8008fa8:	68ba      	ldr	r2, [r7, #8]
 8008faa:	f892 20fc 	ldrb.w	r2, [r2, #252]	; 0xfc
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d352      	bcc.n	8009058 <USBH_AUDIO_Transmit+0x15c>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

        if (AUDIO_Handle->control.supported == 1U)
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d102      	bne.n	8008fce <USBH_AUDIO_Transmit+0xd2>
        {
          USBH_AUDIO_Control(phost);
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f7ff fe6b 	bl	8008ca4 <USBH_AUDIO_Control>
        }

        if (AUDIO_Handle->headphone.global_ptr <= AUDIO_Handle->headphone.total_length)
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d82b      	bhi.n	8009036 <USBH_AUDIO_Transmit+0x13a>
        {
          USBH_IsocSendData(phost,
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
                            AUDIO_Handle->headphone.cbuf,
                            (uint32_t)AUDIO_Handle->headphone.frame_length,
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
          USBH_IsocSendData(phost,
 8008fea:	461a      	mov	r2, r3
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f001 fbb0 	bl	800a758 <USBH_IsocSendData>
                            AUDIO_Handle->headphone.Pipe);

          AUDIO_Handle->headphone.cbuf += AUDIO_Handle->headphone.frame_length;
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8008ffe:	68ba      	ldr	r2, [r7, #8]
 8009000:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8009004:	441a      	add	r2, r3
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
          AUDIO_Handle->headphone.partial_ptr += AUDIO_Handle->headphone.frame_length;
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009012:	68ba      	ldr	r2, [r7, #8]
 8009014:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8009018:	441a      	add	r2, r3
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
          AUDIO_Handle->headphone.global_ptr += AUDIO_Handle->headphone.frame_length;
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 800902c:	441a      	add	r2, r3
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
          USBH_AUDIO_BufferEmptyCallback(phost);
        }
      }
      break;
 8009034:	e010      	b.n	8009058 <USBH_AUDIO_Transmit+0x15c>
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	f04f 32ff 	mov.w	r2, #4294967295
 800903c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	2205      	movs	r2, #5
 8009044:	709a      	strb	r2, [r3, #2]
          USBH_AUDIO_BufferEmptyCallback(phost);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 f8bb 	bl	80091c2 <USBH_AUDIO_BufferEmptyCallback>
      break;
 800904c:	e004      	b.n	8009058 <USBH_AUDIO_Transmit+0x15c>

    default:
      status = USBH_FAIL;
 800904e:	2302      	movs	r3, #2
 8009050:	73fb      	strb	r3, [r7, #15]
      break;
 8009052:	e002      	b.n	800905a <USBH_AUDIO_Transmit+0x15e>
      break;
 8009054:	bf00      	nop
 8009056:	e000      	b.n	800905a <USBH_AUDIO_Transmit+0x15e>
      break;
 8009058:	bf00      	nop
  }
  return status;
 800905a:	7bfb      	ldrb	r3, [r7, #15]
}
 800905c:	4618      	mov	r0, r3
 800905e:	3710      	adds	r7, #16
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <USBH_AUDIO_SetControlAttribute>:
  * @param  phost: Host handle
  * @param  attrib: control attribute
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetControlAttribute(USBH_HandleTypeDef *phost, uint8_t attrib)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	460b      	mov	r3, r1
 800906e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009070:	2301      	movs	r3, #1
 8009072:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800907a:	69db      	ldr	r3, [r3, #28]
 800907c:	60bb      	str	r3, [r7, #8]

  switch (attrib)
 800907e:	78fb      	ldrb	r3, [r7, #3]
 8009080:	2b01      	cmp	r3, #1
 8009082:	d002      	beq.n	800908a <USBH_AUDIO_SetControlAttribute+0x26>
 8009084:	2b02      	cmp	r3, #2
 8009086:	d00b      	beq.n	80090a0 <USBH_AUDIO_SetControlAttribute+0x3c>
 8009088:	e015      	b.n	80090b6 <USBH_AUDIO_SetControlAttribute+0x52>
  {
    case 0x01:
      AUDIO_Handle->headphone.attribute.volume += AUDIO_Handle->headphone.attribute.resolution;
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8009096:	441a      	add	r2, r3
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      break;
 800909e:	e00d      	b.n	80090bc <USBH_AUDIO_SetControlAttribute+0x58>

    case 0x02:
      AUDIO_Handle->headphone.attribute.volume -= AUDIO_Handle->headphone.attribute.resolution;
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80090ac:	1ad2      	subs	r2, r2, r3
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      break;
 80090b4:	e002      	b.n	80090bc <USBH_AUDIO_SetControlAttribute+0x58>

    default :
      status = USBH_FAIL;
 80090b6:	2302      	movs	r3, #2
 80090b8:	73fb      	strb	r3, [r7, #15]
      break;
 80090ba:	bf00      	nop
  }

  if (AUDIO_Handle->headphone.attribute.volume > AUDIO_Handle->headphone.attribute.volumeMax)
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d905      	bls.n	80090d8 <USBH_AUDIO_SetControlAttribute+0x74>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMax;
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if (AUDIO_Handle->headphone.attribute.volume < AUDIO_Handle->headphone.attribute.volumeMin)
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d205      	bcs.n	80090f4 <USBH_AUDIO_SetControlAttribute+0x90>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMin;
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if (AUDIO_SetVolume(phost,
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
                      AUDIO_Handle->temp_feature,
                      (uint8_t)AUDIO_Handle->temp_channels,
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	f893 21a1 	ldrb.w	r2, [r3, #417]	; 0x1a1
                      (uint16_t)AUDIO_Handle->headphone.attribute.volume) != USBH_BUSY)
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
  if (AUDIO_SetVolume(phost,
 8009106:	b29b      	uxth	r3, r3
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f827 	bl	800915c <AUDIO_SetVolume>
 800910e:	4603      	mov	r3, r0
 8009110:	2b01      	cmp	r3, #1
 8009112:	d01e      	beq.n	8009152 <USBH_AUDIO_SetControlAttribute+0xee>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800911a:	2b01      	cmp	r3, #1
 800911c:	d10e      	bne.n	800913c <USBH_AUDIO_SetControlAttribute+0xd8>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
      status = USBH_OK;
 8009136:	2300      	movs	r3, #0
 8009138:	73fb      	strb	r3, [r7, #15]
 800913a:	e007      	b.n	800914c <USBH_AUDIO_SetControlAttribute+0xe8>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8009142:	3b01      	subs	r3, #1
 8009144:	b2da      	uxtb	r2, r3
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	2206      	movs	r2, #6
 8009150:	705a      	strb	r2, [r3, #1]
  }


  return status;
 8009152:	7bfb      	ldrb	r3, [r7, #15]
}
 8009154:	4618      	mov	r0, r3
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <AUDIO_SetVolume>:
  * @param  channel: channel index
  * @param  volume: new volume
  * @retval USBH Status
  */
static USBH_StatusTypeDef AUDIO_SetVolume(USBH_HandleTypeDef *phost, uint8_t feature, uint8_t channel, uint16_t volume)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b086      	sub	sp, #24
 8009160:	af02      	add	r7, sp, #8
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	4608      	mov	r0, r1
 8009166:	4611      	mov	r1, r2
 8009168:	461a      	mov	r2, r3
 800916a:	4603      	mov	r3, r0
 800916c:	70fb      	strb	r3, [r7, #3]
 800916e:	460b      	mov	r3, r1
 8009170:	70bb      	strb	r3, [r7, #2]
 8009172:	4613      	mov	r3, r2
 8009174:	803b      	strh	r3, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8009176:	2301      	movs	r3, #1
 8009178:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8009180:	69db      	ldr	r3, [r3, #28]
 8009182:	60bb      	str	r3, [r7, #8]

  AUDIO_Handle->mem[0] = volume;
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	883a      	ldrh	r2, [r7, #0]
 8009188:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

  status = USBH_AC_SetCur(phost, UAC_FEATURE_UNIT, feature,
 800918c:	78fa      	ldrb	r2, [r7, #3]
 800918e:	2302      	movs	r3, #2
 8009190:	9301      	str	r3, [sp, #4]
 8009192:	78bb      	ldrb	r3, [r7, #2]
 8009194:	9300      	str	r3, [sp, #0]
 8009196:	2302      	movs	r3, #2
 8009198:	2106      	movs	r1, #6
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f7ff fa76 	bl	800868c <USBH_AC_SetCur>
 80091a0:	4603      	mov	r3, r0
 80091a2:	73fb      	strb	r3, [r7, #15]
                          VOLUME_CONTROL, channel, 2U);

  return status;
 80091a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <USBH_AUDIO_FrequencySet>:
  * @brief  The function informs user that Settings have been changed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void USBH_AUDIO_FrequencySet(USBH_HandleTypeDef *phost)
{
 80091ae:	b480      	push	{r7}
 80091b0:	b083      	sub	sp, #12
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80091b6:	bf00      	nop
 80091b8:	370c      	adds	r7, #12
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr

080091c2 <USBH_AUDIO_BufferEmptyCallback>:
  * @brief  The function informs user that User data are processed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void  USBH_AUDIO_BufferEmptyCallback(USBH_HandleTypeDef *phost)
{
 80091c2:	b480      	push	{r7}
 80091c4:	b083      	sub	sp, #12
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80091ca:	bf00      	nop
 80091cc:	370c      	adds	r7, #12
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr

080091d6 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b084      	sub	sp, #16
 80091da:	af00      	add	r7, sp, #0
 80091dc:	60f8      	str	r0, [r7, #12]
 80091de:	60b9      	str	r1, [r7, #8]
 80091e0:	4613      	mov	r3, r2
 80091e2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d101      	bne.n	80091ee <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80091ea:	2302      	movs	r3, #2
 80091ec:	e029      	b.n	8009242 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	79fa      	ldrb	r2, [r7, #7]
 80091f2:	f883 249c 	strb.w	r2, [r3, #1180]	; 0x49c

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
  phost->ClassNumber = 0U;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2200      	movs	r2, #0
 8009202:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009206:	68f8      	ldr	r0, [r7, #12]
 8009208:	f000 f81f 	bl	800924a <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2200      	movs	r2, #0
 8009210:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2200      	movs	r2, #0
 8009218:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d003      	beq.n	800923a <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	68ba      	ldr	r2, [r7, #8]
 8009236:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800923a:	68f8      	ldr	r0, [r7, #12]
 800923c:	f001 fc56 	bl	800aaec <USBH_LL_Init>

  return USBH_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}

0800924a <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800924a:	b480      	push	{r7}
 800924c:	b085      	sub	sp, #20
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009252:	2300      	movs	r3, #0
 8009254:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009256:	2300      	movs	r3, #0
 8009258:	60fb      	str	r3, [r7, #12]
 800925a:	e00a      	b.n	8009272 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	4413      	add	r3, r2
 8009268:	2200      	movs	r2, #0
 800926a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	3301      	adds	r3, #1
 8009270:	60fb      	str	r3, [r7, #12]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2b0e      	cmp	r3, #14
 8009276:	d9f1      	bls.n	800925c <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009278:	2300      	movs	r3, #0
 800927a:	60fb      	str	r3, [r7, #12]
 800927c:	e009      	b.n	8009292 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	4413      	add	r3, r2
 8009284:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009288:	2200      	movs	r2, #0
 800928a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	3301      	adds	r3, #1
 8009290:	60fb      	str	r3, [r7, #12]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009298:	d3f1      	bcc.n	800927e <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2201      	movs	r2, #1
 80092aa:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

  phost->Control.state = CTRL_SETUP;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2240      	movs	r2, #64	; 0x40
 80092be:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2201      	movs	r2, #1
 80092d2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80092e6:	2300      	movs	r3, #0
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3714      	adds	r7, #20
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr

080092f4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80092fe:	2300      	movs	r3, #0
 8009300:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d017      	beq.n	8009338 <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 800930e:	2b00      	cmp	r3, #0
 8009310:	d10f      	bne.n	8009332 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8009318:	1c59      	adds	r1, r3, #1
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	f503 7389 	add.w	r3, r3, #274	; 0x112
 8009326:	6839      	ldr	r1, [r7, #0]
 8009328:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800932c:	2300      	movs	r3, #0
 800932e:	73fb      	strb	r3, [r7, #15]
 8009330:	e004      	b.n	800933c <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009332:	2302      	movs	r3, #2
 8009334:	73fb      	strb	r3, [r7, #15]
 8009336:	e001      	b.n	800933c <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009338:	2302      	movs	r3, #2
 800933a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800933c:	7bfb      	ldrb	r3, [r7, #15]
}
 800933e:	4618      	mov	r0, r3
 8009340:	3714      	adds	r7, #20
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr

0800934a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800934a:	b480      	push	{r7}
 800934c:	b087      	sub	sp, #28
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
 8009352:	4608      	mov	r0, r1
 8009354:	4611      	mov	r1, r2
 8009356:	461a      	mov	r2, r3
 8009358:	4603      	mov	r3, r0
 800935a:	70fb      	strb	r3, [r7, #3]
 800935c:	460b      	mov	r3, r1
 800935e:	70bb      	strb	r3, [r7, #2]
 8009360:	4613      	mov	r3, r2
 8009362:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009364:	2300      	movs	r3, #0
 8009366:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009368:	2300      	movs	r3, #0
 800936a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009372:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009374:	e025      	b.n	80093c2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009376:	7dfb      	ldrb	r3, [r7, #23]
 8009378:	221a      	movs	r2, #26
 800937a:	fb02 f303 	mul.w	r3, r2, r3
 800937e:	3308      	adds	r3, #8
 8009380:	68fa      	ldr	r2, [r7, #12]
 8009382:	4413      	add	r3, r2
 8009384:	3302      	adds	r3, #2
 8009386:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	795b      	ldrb	r3, [r3, #5]
 800938c:	78fa      	ldrb	r2, [r7, #3]
 800938e:	429a      	cmp	r2, r3
 8009390:	d002      	beq.n	8009398 <USBH_FindInterface+0x4e>
 8009392:	78fb      	ldrb	r3, [r7, #3]
 8009394:	2bff      	cmp	r3, #255	; 0xff
 8009396:	d111      	bne.n	80093bc <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800939c:	78ba      	ldrb	r2, [r7, #2]
 800939e:	429a      	cmp	r2, r3
 80093a0:	d002      	beq.n	80093a8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80093a2:	78bb      	ldrb	r3, [r7, #2]
 80093a4:	2bff      	cmp	r3, #255	; 0xff
 80093a6:	d109      	bne.n	80093bc <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80093ac:	787a      	ldrb	r2, [r7, #1]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d002      	beq.n	80093b8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80093b2:	787b      	ldrb	r3, [r7, #1]
 80093b4:	2bff      	cmp	r3, #255	; 0xff
 80093b6:	d101      	bne.n	80093bc <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80093b8:	7dfb      	ldrb	r3, [r7, #23]
 80093ba:	e006      	b.n	80093ca <USBH_FindInterface+0x80>
    }
    if_ix++;
 80093bc:	7dfb      	ldrb	r3, [r7, #23]
 80093be:	3301      	adds	r3, #1
 80093c0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80093c2:	7dfb      	ldrb	r3, [r7, #23]
 80093c4:	2b09      	cmp	r3, #9
 80093c6:	d9d6      	bls.n	8009376 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80093c8:	23ff      	movs	r3, #255	; 0xff
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	371c      	adds	r7, #28
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr

080093d6 <USBH_FindInterfaceIndex>:
  * @param  alt_settings    : alternate setting number
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterfaceIndex(USBH_HandleTypeDef *phost, uint8_t interface_number, uint8_t alt_settings)
{
 80093d6:	b480      	push	{r7}
 80093d8:	b087      	sub	sp, #28
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
 80093de:	460b      	mov	r3, r1
 80093e0:	70fb      	strb	r3, [r7, #3]
 80093e2:	4613      	mov	r3, r2
 80093e4:	70bb      	strb	r3, [r7, #2]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80093e6:	2300      	movs	r3, #0
 80093e8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80093ea:	2300      	movs	r3, #0
 80093ec:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80093f4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80093f6:	e017      	b.n	8009428 <USBH_FindInterfaceIndex+0x52>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80093f8:	7dfb      	ldrb	r3, [r7, #23]
 80093fa:	221a      	movs	r2, #26
 80093fc:	fb02 f303 	mul.w	r3, r2, r3
 8009400:	3308      	adds	r3, #8
 8009402:	68fa      	ldr	r2, [r7, #12]
 8009404:	4413      	add	r3, r2
 8009406:	3302      	adds	r3, #2
 8009408:	613b      	str	r3, [r7, #16]
    if ((pif->bInterfaceNumber == interface_number) && (pif->bAlternateSetting == alt_settings))
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	789b      	ldrb	r3, [r3, #2]
 800940e:	78fa      	ldrb	r2, [r7, #3]
 8009410:	429a      	cmp	r2, r3
 8009412:	d106      	bne.n	8009422 <USBH_FindInterfaceIndex+0x4c>
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	78db      	ldrb	r3, [r3, #3]
 8009418:	78ba      	ldrb	r2, [r7, #2]
 800941a:	429a      	cmp	r2, r3
 800941c:	d101      	bne.n	8009422 <USBH_FindInterfaceIndex+0x4c>
    {
      return  if_ix;
 800941e:	7dfb      	ldrb	r3, [r7, #23]
 8009420:	e006      	b.n	8009430 <USBH_FindInterfaceIndex+0x5a>
    }
    if_ix++;
 8009422:	7dfb      	ldrb	r3, [r7, #23]
 8009424:	3301      	adds	r3, #1
 8009426:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009428:	7dfb      	ldrb	r3, [r7, #23]
 800942a:	2b09      	cmp	r3, #9
 800942c:	d9e4      	bls.n	80093f8 <USBH_FindInterfaceIndex+0x22>
  }
  return 0xFFU;
 800942e:	23ff      	movs	r3, #255	; 0xff
}
 8009430:	4618      	mov	r0, r3
 8009432:	371c      	adds	r7, #28
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f001 fb8d 	bl	800ab64 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800944a:	2101      	movs	r1, #1
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f001 fc93 	bl	800ad78 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	3708      	adds	r7, #8
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b088      	sub	sp, #32
 8009460:	af04      	add	r7, sp, #16
 8009462:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009464:	2302      	movs	r3, #2
 8009466:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009468:	2300      	movs	r3, #0
 800946a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009472:	b2db      	uxtb	r3, r3
 8009474:	2b01      	cmp	r3, #1
 8009476:	d102      	bne.n	800947e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2203      	movs	r2, #3
 800947c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	b2db      	uxtb	r3, r3
 8009484:	2b0b      	cmp	r3, #11
 8009486:	f200 81b5 	bhi.w	80097f4 <USBH_Process+0x398>
 800948a:	a201      	add	r2, pc, #4	; (adr r2, 8009490 <USBH_Process+0x34>)
 800948c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009490:	080094c1 	.word	0x080094c1
 8009494:	080094f3 	.word	0x080094f3
 8009498:	0800955b 	.word	0x0800955b
 800949c:	0800978f 	.word	0x0800978f
 80094a0:	080097f5 	.word	0x080097f5
 80094a4:	080095ff 	.word	0x080095ff
 80094a8:	08009735 	.word	0x08009735
 80094ac:	08009635 	.word	0x08009635
 80094b0:	08009655 	.word	0x08009655
 80094b4:	08009675 	.word	0x08009675
 80094b8:	080096a3 	.word	0x080096a3
 80094bc:	08009777 	.word	0x08009777
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f000 8195 	beq.w	80097f8 <USBH_Process+0x39c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2201      	movs	r2, #1
 80094d2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80094d4:	20c8      	movs	r0, #200	; 0xc8
 80094d6:	f001 fc96 	bl	800ae06 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f001 fb9f 	bl	800ac1e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80094f0:	e182      	b.n	80097f8 <USBH_Process+0x39c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d107      	bne.n	800950c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2202      	movs	r2, #2
 8009508:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800950a:	e184      	b.n	8009816 <USBH_Process+0x3ba>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8009512:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009516:	d914      	bls.n	8009542 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800951e:	3301      	adds	r3, #1
 8009520:	b2da      	uxtb	r2, r3
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800952e:	2b03      	cmp	r3, #3
 8009530:	d903      	bls.n	800953a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	220d      	movs	r2, #13
 8009536:	701a      	strb	r2, [r3, #0]
      break;
 8009538:	e16d      	b.n	8009816 <USBH_Process+0x3ba>
            phost->gState = HOST_IDLE;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	701a      	strb	r2, [r3, #0]
      break;
 8009540:	e169      	b.n	8009816 <USBH_Process+0x3ba>
          phost->Timeout += 10U;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8009548:	f103 020a 	add.w	r2, r3, #10
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
          USBH_Delay(10U);
 8009552:	200a      	movs	r0, #10
 8009554:	f001 fc57 	bl	800ae06 <USBH_Delay>
      break;
 8009558:	e15d      	b.n	8009816 <USBH_Process+0x3ba>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8009560:	2b00      	cmp	r3, #0
 8009562:	d005      	beq.n	8009570 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800956a:	2104      	movs	r1, #4
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009570:	2064      	movs	r0, #100	; 0x64
 8009572:	f001 fc48 	bl	800ae06 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f001 fb2a 	bl	800abd0 <USBH_LL_GetSpeed>
 800957c:	4603      	mov	r3, r0
 800957e:	461a      	mov	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2205      	movs	r2, #5
 800958a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800958c:	2100      	movs	r1, #0
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f001 f92c 	bl	800a7ec <USBH_AllocPipe>
 8009594:	4603      	mov	r3, r0
 8009596:	461a      	mov	r2, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800959c:	2180      	movs	r1, #128	; 0x80
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f001 f924 	bl	800a7ec <USBH_AllocPipe>
 80095a4:	4603      	mov	r3, r0
 80095a6:	461a      	mov	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	7919      	ldrb	r1, [r3, #4]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80095c0:	b292      	uxth	r2, r2
 80095c2:	9202      	str	r2, [sp, #8]
 80095c4:	2200      	movs	r2, #0
 80095c6:	9201      	str	r2, [sp, #4]
 80095c8:	9300      	str	r3, [sp, #0]
 80095ca:	4603      	mov	r3, r0
 80095cc:	2280      	movs	r2, #128	; 0x80
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f001 f8dd 	bl	800a78e <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	7959      	ldrb	r1, [r3, #5]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80095e8:	b292      	uxth	r2, r2
 80095ea:	9202      	str	r2, [sp, #8]
 80095ec:	2200      	movs	r2, #0
 80095ee:	9201      	str	r2, [sp, #4]
 80095f0:	9300      	str	r3, [sp, #0]
 80095f2:	4603      	mov	r3, r0
 80095f4:	2200      	movs	r2, #0
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f001 f8c9 	bl	800a78e <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80095fc:	e10b      	b.n	8009816 <USBH_Process+0x3ba>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 f90e 	bl	8009820 <USBH_HandleEnum>
 8009604:	4603      	mov	r3, r0
 8009606:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009608:	7bbb      	ldrb	r3, [r7, #14]
 800960a:	b2db      	uxtb	r3, r3
 800960c:	2b00      	cmp	r3, #0
 800960e:	f040 80f5 	bne.w	80097fc <USBH_Process+0x3a0>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2200      	movs	r2, #0
 8009616:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009620:	2b01      	cmp	r3, #1
 8009622:	d103      	bne.n	800962c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2208      	movs	r2, #8
 8009628:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800962a:	e0e7      	b.n	80097fc <USBH_Process+0x3a0>
          phost->gState = HOST_INPUT;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2207      	movs	r2, #7
 8009630:	701a      	strb	r2, [r3, #0]
      break;
 8009632:	e0e3      	b.n	80097fc <USBH_Process+0x3a0>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800963a:	2b00      	cmp	r3, #0
 800963c:	f000 80e0 	beq.w	8009800 <USBH_Process+0x3a4>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8009646:	2101      	movs	r1, #1
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2208      	movs	r2, #8
 8009650:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009652:	e0d5      	b.n	8009800 <USBH_Process+0x3a4>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800965a:	b29b      	uxth	r3, r3
 800965c:	4619      	mov	r1, r3
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 fc22 	bl	8009ea8 <USBH_SetCfg>
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	f040 80cc 	bne.w	8009804 <USBH_Process+0x3a8>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2209      	movs	r2, #9
 8009670:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009672:	e0c7      	b.n	8009804 <USBH_Process+0x3a8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800967a:	f003 0320 	and.w	r3, r3, #32
 800967e:	2b00      	cmp	r3, #0
 8009680:	d00b      	beq.n	800969a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009682:	2101      	movs	r1, #1
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 fc59 	bl	8009f3c <USBH_SetFeature>
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	f040 80bb 	bne.w	8009808 <USBH_Process+0x3ac>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	220a      	movs	r2, #10
 8009696:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009698:	e0b6      	b.n	8009808 <USBH_Process+0x3ac>
        phost->gState = HOST_CHECK_CLASS;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	220a      	movs	r2, #10
 800969e:	701a      	strb	r2, [r3, #0]
      break;
 80096a0:	e0b2      	b.n	8009808 <USBH_Process+0x3ac>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f000 80af 	beq.w	800980c <USBH_Process+0x3b0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80096b6:	2300      	movs	r3, #0
 80096b8:	73fb      	strb	r3, [r7, #15]
 80096ba:	e018      	b.n	80096ee <USBH_Process+0x292>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80096bc:	7bfa      	ldrb	r2, [r7, #15]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f502 7289 	add.w	r2, r2, #274	; 0x112
 80096c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096c8:	791a      	ldrb	r2, [r3, #4]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d109      	bne.n	80096e8 <USBH_Process+0x28c>
          {
            phost->pActiveClass = phost->pClass[idx];
 80096d4:	7bfa      	ldrb	r2, [r7, #15]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f502 7289 	add.w	r2, r2, #274	; 0x112
 80096dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
            break;
 80096e6:	e005      	b.n	80096f4 <USBH_Process+0x298>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80096e8:	7bfb      	ldrb	r3, [r7, #15]
 80096ea:	3301      	adds	r3, #1
 80096ec:	73fb      	strb	r3, [r7, #15]
 80096ee:	7bfb      	ldrb	r3, [r7, #15]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d0e3      	beq.n	80096bc <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d016      	beq.n	800972c <USBH_Process+0x2d0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	4798      	blx	r3
 800970a:	4603      	mov	r3, r0
 800970c:	2b00      	cmp	r3, #0
 800970e:	d109      	bne.n	8009724 <USBH_Process+0x2c8>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2206      	movs	r2, #6
 8009714:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800971c:	2103      	movs	r1, #3
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009722:	e073      	b.n	800980c <USBH_Process+0x3b0>
            phost->gState = HOST_ABORT_STATE;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	220d      	movs	r2, #13
 8009728:	701a      	strb	r2, [r3, #0]
      break;
 800972a:	e06f      	b.n	800980c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	220d      	movs	r2, #13
 8009730:	701a      	strb	r2, [r3, #0]
      break;
 8009732:	e06b      	b.n	800980c <USBH_Process+0x3b0>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800973a:	2b00      	cmp	r3, #0
 800973c:	d017      	beq.n	800976e <USBH_Process+0x312>
      {
        status = phost->pActiveClass->Requests(phost);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8009744:	691b      	ldr	r3, [r3, #16]
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	4798      	blx	r3
 800974a:	4603      	mov	r3, r0
 800974c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800974e:	7bbb      	ldrb	r3, [r7, #14]
 8009750:	b2db      	uxtb	r3, r3
 8009752:	2b00      	cmp	r3, #0
 8009754:	d103      	bne.n	800975e <USBH_Process+0x302>
        {
          phost->gState = HOST_CLASS;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	220b      	movs	r2, #11
 800975a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800975c:	e058      	b.n	8009810 <USBH_Process+0x3b4>
        else if (status == USBH_FAIL)
 800975e:	7bbb      	ldrb	r3, [r7, #14]
 8009760:	b2db      	uxtb	r3, r3
 8009762:	2b02      	cmp	r3, #2
 8009764:	d154      	bne.n	8009810 <USBH_Process+0x3b4>
          phost->gState = HOST_ABORT_STATE;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	220d      	movs	r2, #13
 800976a:	701a      	strb	r2, [r3, #0]
      break;
 800976c:	e050      	b.n	8009810 <USBH_Process+0x3b4>
        phost->gState = HOST_ABORT_STATE;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	220d      	movs	r2, #13
 8009772:	701a      	strb	r2, [r3, #0]
      break;
 8009774:	e04c      	b.n	8009810 <USBH_Process+0x3b4>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800977c:	2b00      	cmp	r3, #0
 800977e:	d049      	beq.n	8009814 <USBH_Process+0x3b8>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8009786:	695b      	ldr	r3, [r3, #20]
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	4798      	blx	r3
      }
      break;
 800978c:	e042      	b.n	8009814 <USBH_Process+0x3b8>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f7ff fd57 	bl	800924a <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d009      	beq.n	80097ba <USBH_Process+0x35e>
      {
        phost->pActiveClass->DeInit(phost);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
      }

      if (phost->pUser != NULL)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d005      	beq.n	80097d0 <USBH_Process+0x374>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80097ca:	2105      	movs	r1, #5
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d107      	bne.n	80097ec <USBH_Process+0x390>
      {
        phost->device.is_ReEnumerated = 0U;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f7ff fe29 	bl	800943c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80097ea:	e014      	b.n	8009816 <USBH_Process+0x3ba>
        USBH_LL_Start(phost);
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f001 f9b9 	bl	800ab64 <USBH_LL_Start>
      break;
 80097f2:	e010      	b.n	8009816 <USBH_Process+0x3ba>

    case HOST_ABORT_STATE:
    default :
      break;
 80097f4:	bf00      	nop
 80097f6:	e00e      	b.n	8009816 <USBH_Process+0x3ba>
      break;
 80097f8:	bf00      	nop
 80097fa:	e00c      	b.n	8009816 <USBH_Process+0x3ba>
      break;
 80097fc:	bf00      	nop
 80097fe:	e00a      	b.n	8009816 <USBH_Process+0x3ba>
    break;
 8009800:	bf00      	nop
 8009802:	e008      	b.n	8009816 <USBH_Process+0x3ba>
      break;
 8009804:	bf00      	nop
 8009806:	e006      	b.n	8009816 <USBH_Process+0x3ba>
      break;
 8009808:	bf00      	nop
 800980a:	e004      	b.n	8009816 <USBH_Process+0x3ba>
      break;
 800980c:	bf00      	nop
 800980e:	e002      	b.n	8009816 <USBH_Process+0x3ba>
      break;
 8009810:	bf00      	nop
 8009812:	e000      	b.n	8009816 <USBH_Process+0x3ba>
      break;
 8009814:	bf00      	nop
  }
  return USBH_OK;
 8009816:	2300      	movs	r3, #0
}
 8009818:	4618      	mov	r0, r3
 800981a:	3710      	adds	r7, #16
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b088      	sub	sp, #32
 8009824:	af04      	add	r7, sp, #16
 8009826:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009828:	2301      	movs	r3, #1
 800982a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800982c:	2301      	movs	r3, #1
 800982e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	785b      	ldrb	r3, [r3, #1]
 8009834:	2b07      	cmp	r3, #7
 8009836:	f200 81c1 	bhi.w	8009bbc <USBH_HandleEnum+0x39c>
 800983a:	a201      	add	r2, pc, #4	; (adr r2, 8009840 <USBH_HandleEnum+0x20>)
 800983c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009840:	08009861 	.word	0x08009861
 8009844:	0800991f 	.word	0x0800991f
 8009848:	08009989 	.word	0x08009989
 800984c:	08009a17 	.word	0x08009a17
 8009850:	08009a81 	.word	0x08009a81
 8009854:	08009af1 	.word	0x08009af1
 8009858:	08009b37 	.word	0x08009b37
 800985c:	08009b7d 	.word	0x08009b7d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009860:	2108      	movs	r1, #8
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 fa50 	bl	8009d08 <USBH_Get_DevDesc>
 8009868:	4603      	mov	r3, r0
 800986a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800986c:	7bbb      	ldrb	r3, [r7, #14]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d130      	bne.n	80098d4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2201      	movs	r2, #1
 8009880:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	7919      	ldrb	r1, [r3, #4]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009896:	b292      	uxth	r2, r2
 8009898:	9202      	str	r2, [sp, #8]
 800989a:	2200      	movs	r2, #0
 800989c:	9201      	str	r2, [sp, #4]
 800989e:	9300      	str	r3, [sp, #0]
 80098a0:	4603      	mov	r3, r0
 80098a2:	2280      	movs	r2, #128	; 0x80
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 ff72 	bl	800a78e <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	7959      	ldrb	r1, [r3, #5]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80098be:	b292      	uxth	r2, r2
 80098c0:	9202      	str	r2, [sp, #8]
 80098c2:	2200      	movs	r2, #0
 80098c4:	9201      	str	r2, [sp, #4]
 80098c6:	9300      	str	r3, [sp, #0]
 80098c8:	4603      	mov	r3, r0
 80098ca:	2200      	movs	r2, #0
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 ff5e 	bl	800a78e <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80098d2:	e175      	b.n	8009bc0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80098d4:	7bbb      	ldrb	r3, [r7, #14]
 80098d6:	2b03      	cmp	r3, #3
 80098d8:	f040 8172 	bne.w	8009bc0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80098e2:	3301      	adds	r3, #1
 80098e4:	b2da      	uxtb	r2, r3
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80098f2:	2b03      	cmp	r3, #3
 80098f4:	d903      	bls.n	80098fe <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	220d      	movs	r2, #13
 80098fa:	701a      	strb	r2, [r3, #0]
      break;
 80098fc:	e160      	b.n	8009bc0 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	795b      	ldrb	r3, [r3, #5]
 8009902:	4619      	mov	r1, r3
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 ff93 	bl	800a830 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	791b      	ldrb	r3, [r3, #4]
 800990e:	4619      	mov	r1, r3
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 ff8d 	bl	800a830 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	701a      	strb	r2, [r3, #0]
      break;
 800991c:	e150      	b.n	8009bc0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800991e:	2112      	movs	r1, #18
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 f9f1 	bl	8009d08 <USBH_Get_DevDesc>
 8009926:	4603      	mov	r3, r0
 8009928:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800992a:	7bbb      	ldrb	r3, [r7, #14]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d103      	bne.n	8009938 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2202      	movs	r2, #2
 8009934:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009936:	e145      	b.n	8009bc4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009938:	7bbb      	ldrb	r3, [r7, #14]
 800993a:	2b03      	cmp	r3, #3
 800993c:	f040 8142 	bne.w	8009bc4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009946:	3301      	adds	r3, #1
 8009948:	b2da      	uxtb	r2, r3
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009956:	2b03      	cmp	r3, #3
 8009958:	d903      	bls.n	8009962 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	220d      	movs	r2, #13
 800995e:	701a      	strb	r2, [r3, #0]
      break;
 8009960:	e130      	b.n	8009bc4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	795b      	ldrb	r3, [r3, #5]
 8009966:	4619      	mov	r1, r3
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 ff61 	bl	800a830 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	791b      	ldrb	r3, [r3, #4]
 8009972:	4619      	mov	r1, r3
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 ff5b 	bl	800a830 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	701a      	strb	r2, [r3, #0]
      break;
 8009986:	e11d      	b.n	8009bc4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009988:	2101      	movs	r1, #1
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 fa68 	bl	8009e60 <USBH_SetAddress>
 8009990:	4603      	mov	r3, r0
 8009992:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009994:	7bbb      	ldrb	r3, [r7, #14]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d132      	bne.n	8009a00 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800999a:	2002      	movs	r0, #2
 800999c:	f001 fa33 	bl	800ae06 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2203      	movs	r2, #3
 80099ac:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	7919      	ldrb	r1, [r3, #4]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80099c2:	b292      	uxth	r2, r2
 80099c4:	9202      	str	r2, [sp, #8]
 80099c6:	2200      	movs	r2, #0
 80099c8:	9201      	str	r2, [sp, #4]
 80099ca:	9300      	str	r3, [sp, #0]
 80099cc:	4603      	mov	r3, r0
 80099ce:	2280      	movs	r2, #128	; 0x80
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 fedc 	bl	800a78e <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	7959      	ldrb	r1, [r3, #5]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80099ea:	b292      	uxth	r2, r2
 80099ec:	9202      	str	r2, [sp, #8]
 80099ee:	2200      	movs	r2, #0
 80099f0:	9201      	str	r2, [sp, #4]
 80099f2:	9300      	str	r3, [sp, #0]
 80099f4:	4603      	mov	r3, r0
 80099f6:	2200      	movs	r2, #0
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 fec8 	bl	800a78e <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80099fe:	e0e3      	b.n	8009bc8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a00:	7bbb      	ldrb	r3, [r7, #14]
 8009a02:	2b03      	cmp	r3, #3
 8009a04:	f040 80e0 	bne.w	8009bc8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	220d      	movs	r2, #13
 8009a0c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2200      	movs	r2, #0
 8009a12:	705a      	strb	r2, [r3, #1]
      break;
 8009a14:	e0d8      	b.n	8009bc8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009a16:	2109      	movs	r1, #9
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 f99d 	bl	8009d58 <USBH_Get_CfgDesc>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a22:	7bbb      	ldrb	r3, [r7, #14]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d103      	bne.n	8009a30 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2204      	movs	r2, #4
 8009a2c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009a2e:	e0cd      	b.n	8009bcc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a30:	7bbb      	ldrb	r3, [r7, #14]
 8009a32:	2b03      	cmp	r3, #3
 8009a34:	f040 80ca 	bne.w	8009bcc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a3e:	3301      	adds	r3, #1
 8009a40:	b2da      	uxtb	r2, r3
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a4e:	2b03      	cmp	r3, #3
 8009a50:	d903      	bls.n	8009a5a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	220d      	movs	r2, #13
 8009a56:	701a      	strb	r2, [r3, #0]
      break;
 8009a58:	e0b8      	b.n	8009bcc <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	795b      	ldrb	r3, [r3, #5]
 8009a5e:	4619      	mov	r1, r3
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 fee5 	bl	800a830 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	791b      	ldrb	r3, [r3, #4]
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 fedf 	bl	800a830 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	701a      	strb	r2, [r3, #0]
      break;
 8009a7e:	e0a5      	b.n	8009bcc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009a86:	4619      	mov	r1, r3
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 f965 	bl	8009d58 <USBH_Get_CfgDesc>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a92:	7bbb      	ldrb	r3, [r7, #14]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d103      	bne.n	8009aa0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2205      	movs	r2, #5
 8009a9c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009a9e:	e097      	b.n	8009bd0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009aa0:	7bbb      	ldrb	r3, [r7, #14]
 8009aa2:	2b03      	cmp	r3, #3
 8009aa4:	f040 8094 	bne.w	8009bd0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009aae:	3301      	adds	r3, #1
 8009ab0:	b2da      	uxtb	r2, r3
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009abe:	2b03      	cmp	r3, #3
 8009ac0:	d903      	bls.n	8009aca <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	220d      	movs	r2, #13
 8009ac6:	701a      	strb	r2, [r3, #0]
      break;
 8009ac8:	e082      	b.n	8009bd0 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	795b      	ldrb	r3, [r3, #5]
 8009ace:	4619      	mov	r1, r3
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 fead 	bl	800a830 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	791b      	ldrb	r3, [r3, #4]
 8009ada:	4619      	mov	r1, r3
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 fea7 	bl	800a830 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2200      	movs	r2, #0
 8009aec:	701a      	strb	r2, [r3, #0]
      break;
 8009aee:	e06f      	b.n	8009bd0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d019      	beq.n	8009b2e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009b06:	23ff      	movs	r3, #255	; 0xff
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 f949 	bl	8009da0 <USBH_Get_StringDesc>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009b12:	7bbb      	ldrb	r3, [r7, #14]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d103      	bne.n	8009b20 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2206      	movs	r2, #6
 8009b1c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009b1e:	e059      	b.n	8009bd4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b20:	7bbb      	ldrb	r3, [r7, #14]
 8009b22:	2b03      	cmp	r3, #3
 8009b24:	d156      	bne.n	8009bd4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2206      	movs	r2, #6
 8009b2a:	705a      	strb	r2, [r3, #1]
      break;
 8009b2c:	e052      	b.n	8009bd4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2206      	movs	r2, #6
 8009b32:	705a      	strb	r2, [r3, #1]
      break;
 8009b34:	e04e      	b.n	8009bd4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d019      	beq.n	8009b74 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009b4c:	23ff      	movs	r3, #255	; 0xff
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 f926 	bl	8009da0 <USBH_Get_StringDesc>
 8009b54:	4603      	mov	r3, r0
 8009b56:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009b58:	7bbb      	ldrb	r3, [r7, #14]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d103      	bne.n	8009b66 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2207      	movs	r2, #7
 8009b62:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009b64:	e038      	b.n	8009bd8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b66:	7bbb      	ldrb	r3, [r7, #14]
 8009b68:	2b03      	cmp	r3, #3
 8009b6a:	d135      	bne.n	8009bd8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2207      	movs	r2, #7
 8009b70:	705a      	strb	r2, [r3, #1]
      break;
 8009b72:	e031      	b.n	8009bd8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2207      	movs	r2, #7
 8009b78:	705a      	strb	r2, [r3, #1]
      break;
 8009b7a:	e02d      	b.n	8009bd8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d017      	beq.n	8009bb6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009b92:	23ff      	movs	r3, #255	; 0xff
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 f903 	bl	8009da0 <USBH_Get_StringDesc>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009b9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d102      	bne.n	8009baa <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009ba8:	e018      	b.n	8009bdc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009baa:	7bbb      	ldrb	r3, [r7, #14]
 8009bac:	2b03      	cmp	r3, #3
 8009bae:	d115      	bne.n	8009bdc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8009bb4:	e012      	b.n	8009bdc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	73fb      	strb	r3, [r7, #15]
      break;
 8009bba:	e00f      	b.n	8009bdc <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009bbc:	bf00      	nop
 8009bbe:	e00e      	b.n	8009bde <USBH_HandleEnum+0x3be>
      break;
 8009bc0:	bf00      	nop
 8009bc2:	e00c      	b.n	8009bde <USBH_HandleEnum+0x3be>
      break;
 8009bc4:	bf00      	nop
 8009bc6:	e00a      	b.n	8009bde <USBH_HandleEnum+0x3be>
      break;
 8009bc8:	bf00      	nop
 8009bca:	e008      	b.n	8009bde <USBH_HandleEnum+0x3be>
      break;
 8009bcc:	bf00      	nop
 8009bce:	e006      	b.n	8009bde <USBH_HandleEnum+0x3be>
      break;
 8009bd0:	bf00      	nop
 8009bd2:	e004      	b.n	8009bde <USBH_HandleEnum+0x3be>
      break;
 8009bd4:	bf00      	nop
 8009bd6:	e002      	b.n	8009bde <USBH_HandleEnum+0x3be>
      break;
 8009bd8:	bf00      	nop
 8009bda:	e000      	b.n	8009bde <USBH_HandleEnum+0x3be>
      break;
 8009bdc:	bf00      	nop
  }
  return Status;
 8009bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3710      	adds	r7, #16
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	683a      	ldr	r2, [r7, #0]
 8009bf6:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
}
 8009bfa:	bf00      	nop
 8009bfc:	370c      	adds	r7, #12
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr

08009c06 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b082      	sub	sp, #8
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8009c14:	1c5a      	adds	r2, r3, #1
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
  USBH_HandleSof(phost);
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 f804 	bl	8009c2a <USBH_HandleSof>
}
 8009c22:	bf00      	nop
 8009c24:	3708      	adds	r7, #8
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b082      	sub	sp, #8
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	2b0b      	cmp	r3, #11
 8009c3a:	d10a      	bne.n	8009c52 <USBH_HandleSof+0x28>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d005      	beq.n	8009c52 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8009c4c:	699b      	ldr	r3, [r3, #24]
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	4798      	blx	r3
  }
}
 8009c52:	bf00      	nop
 8009c54:	3708      	adds	r7, #8
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009c5a:	b480      	push	{r7}
 8009c5c:	b083      	sub	sp, #12
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2201      	movs	r2, #1
 8009c66:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8009c6a:	bf00      	nop
}
 8009c6c:	370c      	adds	r7, #12
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr

08009c76 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009c76:	b480      	push	{r7}
 8009c78:	b083      	sub	sp, #12
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009c86:	bf00      	nop
}
 8009c88:	370c      	adds	r7, #12
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr

08009c92 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009c92:	b480      	push	{r7}
 8009c94:	b083      	sub	sp, #12
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2200      	movs	r2, #0
 8009cae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009cb2:	2300      	movs	r3, #0
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	370c      	adds	r7, #12
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr

08009cc0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 ff5a 	bl	800ab9a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	791b      	ldrb	r3, [r3, #4]
 8009cea:	4619      	mov	r1, r3
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 fd9f 	bl	800a830 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	795b      	ldrb	r3, [r3, #5]
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 fd99 	bl	800a830 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009cfe:	2300      	movs	r3, #0
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3708      	adds	r7, #8
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b086      	sub	sp, #24
 8009d0c:	af02      	add	r7, sp, #8
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	460b      	mov	r3, r1
 8009d12:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009d1a:	78fb      	ldrb	r3, [r7, #3]
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	9300      	str	r3, [sp, #0]
 8009d20:	4613      	mov	r3, r2
 8009d22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d26:	2100      	movs	r1, #0
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 f864 	bl	8009df6 <USBH_GetDescriptor>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	73fb      	strb	r3, [r7, #15]
 8009d32:	7bfb      	ldrb	r3, [r7, #15]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d10a      	bne.n	8009d4e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009d44:	78fa      	ldrb	r2, [r7, #3]
 8009d46:	b292      	uxth	r2, r2
 8009d48:	4619      	mov	r1, r3
 8009d4a:	f000 f91b 	bl	8009f84 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3710      	adds	r7, #16
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b086      	sub	sp, #24
 8009d5c:	af02      	add	r7, sp, #8
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	460b      	mov	r3, r1
 8009d62:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	331c      	adds	r3, #28
 8009d68:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009d6a:	887b      	ldrh	r3, [r7, #2]
 8009d6c:	9300      	str	r3, [sp, #0]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d74:	2100      	movs	r1, #0
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 f83d 	bl	8009df6 <USBH_GetDescriptor>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	72fb      	strb	r3, [r7, #11]
 8009d80:	7afb      	ldrb	r3, [r7, #11]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d107      	bne.n	8009d96 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009d8c:	887a      	ldrh	r2, [r7, #2]
 8009d8e:	68f9      	ldr	r1, [r7, #12]
 8009d90:	4618      	mov	r0, r3
 8009d92:	f000 f967 	bl	800a064 <USBH_ParseCfgDesc>
  }

  return status;
 8009d96:	7afb      	ldrb	r3, [r7, #11]
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3710      	adds	r7, #16
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b088      	sub	sp, #32
 8009da4:	af02      	add	r7, sp, #8
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	607a      	str	r2, [r7, #4]
 8009daa:	461a      	mov	r2, r3
 8009dac:	460b      	mov	r3, r1
 8009dae:	72fb      	strb	r3, [r7, #11]
 8009db0:	4613      	mov	r3, r2
 8009db2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8009db4:	7afb      	ldrb	r3, [r7, #11]
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009dbc:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009dc4:	893b      	ldrh	r3, [r7, #8]
 8009dc6:	9300      	str	r3, [sp, #0]
 8009dc8:	460b      	mov	r3, r1
 8009dca:	2100      	movs	r1, #0
 8009dcc:	68f8      	ldr	r0, [r7, #12]
 8009dce:	f000 f812 	bl	8009df6 <USBH_GetDescriptor>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	75fb      	strb	r3, [r7, #23]
 8009dd6:	7dfb      	ldrb	r3, [r7, #23]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d107      	bne.n	8009dec <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009de2:	893a      	ldrh	r2, [r7, #8]
 8009de4:	6879      	ldr	r1, [r7, #4]
 8009de6:	4618      	mov	r0, r3
 8009de8:	f000 fa3a 	bl	800a260 <USBH_ParseStringDesc>
  }

  return status;
 8009dec:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3718      	adds	r7, #24
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}

08009df6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009df6:	b580      	push	{r7, lr}
 8009df8:	b084      	sub	sp, #16
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	60f8      	str	r0, [r7, #12]
 8009dfe:	607b      	str	r3, [r7, #4]
 8009e00:	460b      	mov	r3, r1
 8009e02:	72fb      	strb	r3, [r7, #11]
 8009e04:	4613      	mov	r3, r2
 8009e06:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	789b      	ldrb	r3, [r3, #2]
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d11c      	bne.n	8009e4a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009e10:	7afb      	ldrb	r3, [r7, #11]
 8009e12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009e16:	b2da      	uxtb	r2, r3
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2206      	movs	r2, #6
 8009e20:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	893a      	ldrh	r2, [r7, #8]
 8009e26:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009e28:	893b      	ldrh	r3, [r7, #8]
 8009e2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009e2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e32:	d104      	bne.n	8009e3e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f240 4209 	movw	r2, #1033	; 0x409
 8009e3a:	829a      	strh	r2, [r3, #20]
 8009e3c:	e002      	b.n	8009e44 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2200      	movs	r2, #0
 8009e42:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	8b3a      	ldrh	r2, [r7, #24]
 8009e48:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009e4a:	8b3b      	ldrh	r3, [r7, #24]
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	6879      	ldr	r1, [r7, #4]
 8009e50:	68f8      	ldr	r0, [r7, #12]
 8009e52:	f000 fa53 	bl	800a2fc <USBH_CtlReq>
 8009e56:	4603      	mov	r3, r0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3710      	adds	r7, #16
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	460b      	mov	r3, r1
 8009e6a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	789b      	ldrb	r3, [r3, #2]
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d10f      	bne.n	8009e94 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2205      	movs	r2, #5
 8009e7e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009e80:	78fb      	ldrb	r3, [r7, #3]
 8009e82:	b29a      	uxth	r2, r3
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2200      	movs	r2, #0
 8009e92:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009e94:	2200      	movs	r2, #0
 8009e96:	2100      	movs	r1, #0
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 fa2f 	bl	800a2fc <USBH_CtlReq>
 8009e9e:	4603      	mov	r3, r0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3708      	adds	r7, #8
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	789b      	ldrb	r3, [r3, #2]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d10e      	bne.n	8009eda <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2209      	movs	r2, #9
 8009ec6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	887a      	ldrh	r2, [r7, #2]
 8009ecc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009eda:	2200      	movs	r2, #0
 8009edc:	2100      	movs	r1, #0
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 fa0c 	bl	800a2fc <USBH_CtlReq>
 8009ee4:	4603      	mov	r3, r0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3708      	adds	r7, #8
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <USBH_SetInterface>:
  * @param  altSetting: Interface value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetInterface(USBH_HandleTypeDef *phost, uint8_t ep_num,
                                     uint8_t altSetting)
{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b082      	sub	sp, #8
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	70fb      	strb	r3, [r7, #3]
 8009efa:	4613      	mov	r3, r2
 8009efc:	70bb      	strb	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	789b      	ldrb	r3, [r3, #2]
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d110      	bne.n	8009f28 <USBH_SetInterface+0x3a>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2201      	movs	r2, #1
 8009f0a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_INTERFACE;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	220b      	movs	r2, #11
 8009f10:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = altSetting;
 8009f12:	78bb      	ldrb	r3, [r7, #2]
 8009f14:	b29a      	uxth	r2, r3
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009f1a:	78fb      	ldrb	r3, [r7, #3]
 8009f1c:	b29a      	uxth	r2, r3
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2200      	movs	r2, #0
 8009f26:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009f28:	2200      	movs	r2, #0
 8009f2a:	2100      	movs	r1, #0
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 f9e5 	bl	800a2fc <USBH_CtlReq>
 8009f32:	4603      	mov	r3, r0
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3708      	adds	r7, #8
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b082      	sub	sp, #8
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	460b      	mov	r3, r1
 8009f46:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	789b      	ldrb	r3, [r3, #2]
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d10f      	bne.n	8009f70 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2203      	movs	r2, #3
 8009f5a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009f5c:	78fb      	ldrb	r3, [r7, #3]
 8009f5e:	b29a      	uxth	r2, r3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009f70:	2200      	movs	r2, #0
 8009f72:	2100      	movs	r1, #0
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 f9c1 	bl	800a2fc <USBH_CtlReq>
 8009f7a:	4603      	mov	r3, r0
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3708      	adds	r7, #8
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b085      	sub	sp, #20
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	4613      	mov	r3, r2
 8009f90:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	781a      	ldrb	r2, [r3, #0]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	785a      	ldrb	r2, [r3, #1]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	3302      	adds	r3, #2
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	b29a      	uxth	r2, r3
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	3303      	adds	r3, #3
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	021b      	lsls	r3, r3, #8
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	b29a      	uxth	r2, r3
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	791a      	ldrb	r2, [r3, #4]
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	795a      	ldrb	r2, [r3, #5]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	799a      	ldrb	r2, [r3, #6]
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	79da      	ldrb	r2, [r3, #7]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009fde:	88fb      	ldrh	r3, [r7, #6]
 8009fe0:	2b08      	cmp	r3, #8
 8009fe2:	d939      	bls.n	800a058 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	3308      	adds	r3, #8
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	b29a      	uxth	r2, r3
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	3309      	adds	r3, #9
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	021b      	lsls	r3, r3, #8
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	b29a      	uxth	r2, r3
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	330a      	adds	r3, #10
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	b29a      	uxth	r2, r3
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	330b      	adds	r3, #11
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	b29b      	uxth	r3, r3
 800a010:	021b      	lsls	r3, r3, #8
 800a012:	b29b      	uxth	r3, r3
 800a014:	4313      	orrs	r3, r2
 800a016:	b29a      	uxth	r2, r3
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	330c      	adds	r3, #12
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	b29a      	uxth	r2, r3
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	330d      	adds	r3, #13
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	021b      	lsls	r3, r3, #8
 800a02e:	b29b      	uxth	r3, r3
 800a030:	4313      	orrs	r3, r2
 800a032:	b29a      	uxth	r2, r3
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	7b9a      	ldrb	r2, [r3, #14]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	7bda      	ldrb	r2, [r3, #15]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	7c1a      	ldrb	r2, [r3, #16]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	7c5a      	ldrb	r2, [r3, #17]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	745a      	strb	r2, [r3, #17]
  }
}
 800a058:	bf00      	nop
 800a05a:	3714      	adds	r7, #20
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr

0800a064 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b08a      	sub	sp, #40	; 0x28
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	4613      	mov	r3, r2
 800a070:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a076:	2300      	movs	r3, #0
 800a078:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a07c:	2300      	movs	r3, #0
 800a07e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	781a      	ldrb	r2, [r3, #0]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	785a      	ldrb	r2, [r3, #1]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	3302      	adds	r3, #2
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	b29a      	uxth	r2, r3
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	3303      	adds	r3, #3
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	021b      	lsls	r3, r3, #8
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	b29a      	uxth	r2, r3
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	791a      	ldrb	r2, [r3, #4]
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	795a      	ldrb	r2, [r3, #5]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	799a      	ldrb	r2, [r3, #6]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	79da      	ldrb	r2, [r3, #7]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	7a1a      	ldrb	r2, [r3, #8]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a0da:	88fb      	ldrh	r3, [r7, #6]
 800a0dc:	2b09      	cmp	r3, #9
 800a0de:	d95f      	bls.n	800a1a0 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a0e0:	2309      	movs	r3, #9
 800a0e2:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a0e8:	e051      	b.n	800a18e <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a0ea:	f107 0316 	add.w	r3, r7, #22
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0f2:	f000 f8e8 	bl	800a2c6 <USBH_GetNextDesc>
 800a0f6:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fa:	785b      	ldrb	r3, [r3, #1]
 800a0fc:	2b04      	cmp	r3, #4
 800a0fe:	d146      	bne.n	800a18e <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a100:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a104:	221a      	movs	r2, #26
 800a106:	fb02 f303 	mul.w	r3, r2, r3
 800a10a:	3308      	adds	r3, #8
 800a10c:	68fa      	ldr	r2, [r7, #12]
 800a10e:	4413      	add	r3, r2
 800a110:	3302      	adds	r3, #2
 800a112:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a114:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a116:	69f8      	ldr	r0, [r7, #28]
 800a118:	f000 f846 	bl	800a1a8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a11c:	2300      	movs	r3, #0
 800a11e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a122:	2300      	movs	r3, #0
 800a124:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a126:	e022      	b.n	800a16e <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a128:	f107 0316 	add.w	r3, r7, #22
 800a12c:	4619      	mov	r1, r3
 800a12e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a130:	f000 f8c9 	bl	800a2c6 <USBH_GetNextDesc>
 800a134:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a138:	785b      	ldrb	r3, [r3, #1]
 800a13a:	2b05      	cmp	r3, #5
 800a13c:	d117      	bne.n	800a16e <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a13e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a142:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a146:	3201      	adds	r2, #1
 800a148:	00d2      	lsls	r2, r2, #3
 800a14a:	211a      	movs	r1, #26
 800a14c:	fb01 f303 	mul.w	r3, r1, r3
 800a150:	4413      	add	r3, r2
 800a152:	3308      	adds	r3, #8
 800a154:	68fa      	ldr	r2, [r7, #12]
 800a156:	4413      	add	r3, r2
 800a158:	3304      	adds	r3, #4
 800a15a:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800a15c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a15e:	69b8      	ldr	r0, [r7, #24]
 800a160:	f000 f851 	bl	800a206 <USBH_ParseEPDesc>
            ep_ix++;
 800a164:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a168:	3301      	adds	r3, #1
 800a16a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a16e:	69fb      	ldr	r3, [r7, #28]
 800a170:	791b      	ldrb	r3, [r3, #4]
 800a172:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a176:	429a      	cmp	r2, r3
 800a178:	d204      	bcs.n	800a184 <USBH_ParseCfgDesc+0x120>
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	885a      	ldrh	r2, [r3, #2]
 800a17e:	8afb      	ldrh	r3, [r7, #22]
 800a180:	429a      	cmp	r2, r3
 800a182:	d8d1      	bhi.n	800a128 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a184:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a188:	3301      	adds	r3, #1
 800a18a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a18e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a192:	2b09      	cmp	r3, #9
 800a194:	d804      	bhi.n	800a1a0 <USBH_ParseCfgDesc+0x13c>
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	885a      	ldrh	r2, [r3, #2]
 800a19a:	8afb      	ldrh	r3, [r7, #22]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d8a4      	bhi.n	800a0ea <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a1a0:	bf00      	nop
 800a1a2:	3728      	adds	r7, #40	; 0x28
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	781a      	ldrb	r2, [r3, #0]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	785a      	ldrb	r2, [r3, #1]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	789a      	ldrb	r2, [r3, #2]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	78da      	ldrb	r2, [r3, #3]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	791a      	ldrb	r2, [r3, #4]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	795a      	ldrb	r2, [r3, #5]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	799a      	ldrb	r2, [r3, #6]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	79da      	ldrb	r2, [r3, #7]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	7a1a      	ldrb	r2, [r3, #8]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	721a      	strb	r2, [r3, #8]
}
 800a1fa:	bf00      	nop
 800a1fc:	370c      	adds	r7, #12
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr

0800a206 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800a206:	b480      	push	{r7}
 800a208:	b083      	sub	sp, #12
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
 800a20e:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	781a      	ldrb	r2, [r3, #0]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	785a      	ldrb	r2, [r3, #1]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	789a      	ldrb	r2, [r3, #2]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	78da      	ldrb	r2, [r3, #3]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	3304      	adds	r3, #4
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	b29a      	uxth	r2, r3
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	3305      	adds	r3, #5
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	b29b      	uxth	r3, r3
 800a240:	021b      	lsls	r3, r3, #8
 800a242:	b29b      	uxth	r3, r3
 800a244:	4313      	orrs	r3, r2
 800a246:	b29a      	uxth	r2, r3
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	799a      	ldrb	r2, [r3, #6]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	719a      	strb	r2, [r3, #6]
}
 800a254:	bf00      	nop
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a260:	b480      	push	{r7}
 800a262:	b087      	sub	sp, #28
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	4613      	mov	r3, r2
 800a26c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	3301      	adds	r3, #1
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	2b03      	cmp	r3, #3
 800a276:	d120      	bne.n	800a2ba <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	1e9a      	subs	r2, r3, #2
 800a27e:	88fb      	ldrh	r3, [r7, #6]
 800a280:	4293      	cmp	r3, r2
 800a282:	bf28      	it	cs
 800a284:	4613      	movcs	r3, r2
 800a286:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	3302      	adds	r3, #2
 800a28c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a28e:	2300      	movs	r3, #0
 800a290:	82fb      	strh	r3, [r7, #22]
 800a292:	e00b      	b.n	800a2ac <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a294:	8afb      	ldrh	r3, [r7, #22]
 800a296:	68fa      	ldr	r2, [r7, #12]
 800a298:	4413      	add	r3, r2
 800a29a:	781a      	ldrb	r2, [r3, #0]
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a2a6:	8afb      	ldrh	r3, [r7, #22]
 800a2a8:	3302      	adds	r3, #2
 800a2aa:	82fb      	strh	r3, [r7, #22]
 800a2ac:	8afa      	ldrh	r2, [r7, #22]
 800a2ae:	8abb      	ldrh	r3, [r7, #20]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d3ef      	bcc.n	800a294 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	701a      	strb	r2, [r3, #0]
  }
}
 800a2ba:	bf00      	nop
 800a2bc:	371c      	adds	r7, #28
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c4:	4770      	bx	lr

0800a2c6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a2c6:	b480      	push	{r7}
 800a2c8:	b085      	sub	sp, #20
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
 800a2ce:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	881a      	ldrh	r2, [r3, #0]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	4413      	add	r3, r2
 800a2dc:	b29a      	uxth	r2, r3
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	4413      	add	r3, r2
 800a2ec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3714      	adds	r7, #20
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b086      	sub	sp, #24
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	4613      	mov	r3, r2
 800a308:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a30a:	2301      	movs	r3, #1
 800a30c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	789b      	ldrb	r3, [r3, #2]
 800a312:	2b01      	cmp	r3, #1
 800a314:	d002      	beq.n	800a31c <USBH_CtlReq+0x20>
 800a316:	2b02      	cmp	r3, #2
 800a318:	d00f      	beq.n	800a33a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a31a:	e027      	b.n	800a36c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	68ba      	ldr	r2, [r7, #8]
 800a320:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	88fa      	ldrh	r2, [r7, #6]
 800a326:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2201      	movs	r2, #1
 800a32c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2202      	movs	r2, #2
 800a332:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a334:	2301      	movs	r3, #1
 800a336:	75fb      	strb	r3, [r7, #23]
      break;
 800a338:	e018      	b.n	800a36c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a33a:	68f8      	ldr	r0, [r7, #12]
 800a33c:	f000 f81c 	bl	800a378 <USBH_HandleControl>
 800a340:	4603      	mov	r3, r0
 800a342:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a344:	7dfb      	ldrb	r3, [r7, #23]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d002      	beq.n	800a350 <USBH_CtlReq+0x54>
 800a34a:	7dfb      	ldrb	r3, [r7, #23]
 800a34c:	2b03      	cmp	r3, #3
 800a34e:	d106      	bne.n	800a35e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2201      	movs	r2, #1
 800a354:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2200      	movs	r2, #0
 800a35a:	761a      	strb	r2, [r3, #24]
      break;
 800a35c:	e005      	b.n	800a36a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a35e:	7dfb      	ldrb	r3, [r7, #23]
 800a360:	2b02      	cmp	r3, #2
 800a362:	d102      	bne.n	800a36a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2201      	movs	r2, #1
 800a368:	709a      	strb	r2, [r3, #2]
      break;
 800a36a:	bf00      	nop
  }
  return status;
 800a36c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3718      	adds	r7, #24
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
	...

0800a378 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b086      	sub	sp, #24
 800a37c:	af02      	add	r7, sp, #8
 800a37e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a380:	2301      	movs	r3, #1
 800a382:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a384:	2300      	movs	r3, #0
 800a386:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	7e1b      	ldrb	r3, [r3, #24]
 800a38c:	3b01      	subs	r3, #1
 800a38e:	2b0a      	cmp	r3, #10
 800a390:	f200 8156 	bhi.w	800a640 <USBH_HandleControl+0x2c8>
 800a394:	a201      	add	r2, pc, #4	; (adr r2, 800a39c <USBH_HandleControl+0x24>)
 800a396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a39a:	bf00      	nop
 800a39c:	0800a3c9 	.word	0x0800a3c9
 800a3a0:	0800a3e3 	.word	0x0800a3e3
 800a3a4:	0800a44d 	.word	0x0800a44d
 800a3a8:	0800a473 	.word	0x0800a473
 800a3ac:	0800a4ab 	.word	0x0800a4ab
 800a3b0:	0800a4d5 	.word	0x0800a4d5
 800a3b4:	0800a527 	.word	0x0800a527
 800a3b8:	0800a549 	.word	0x0800a549
 800a3bc:	0800a585 	.word	0x0800a585
 800a3c0:	0800a5ab 	.word	0x0800a5ab
 800a3c4:	0800a5e9 	.word	0x0800a5e9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f103 0110 	add.w	r1, r3, #16
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	795b      	ldrb	r3, [r3, #5]
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f000 f943 	bl	800a660 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2202      	movs	r2, #2
 800a3de:	761a      	strb	r2, [r3, #24]
      break;
 800a3e0:	e139      	b.n	800a656 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	795b      	ldrb	r3, [r3, #5]
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 fcb2 	bl	800ad52 <USBH_LL_GetURBState>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a3f2:	7bbb      	ldrb	r3, [r7, #14]
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d11e      	bne.n	800a436 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	7c1b      	ldrb	r3, [r3, #16]
 800a3fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a400:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	8adb      	ldrh	r3, [r3, #22]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d00a      	beq.n	800a420 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a40a:	7b7b      	ldrb	r3, [r7, #13]
 800a40c:	2b80      	cmp	r3, #128	; 0x80
 800a40e:	d103      	bne.n	800a418 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2203      	movs	r2, #3
 800a414:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a416:	e115      	b.n	800a644 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2205      	movs	r2, #5
 800a41c:	761a      	strb	r2, [r3, #24]
      break;
 800a41e:	e111      	b.n	800a644 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a420:	7b7b      	ldrb	r3, [r7, #13]
 800a422:	2b80      	cmp	r3, #128	; 0x80
 800a424:	d103      	bne.n	800a42e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2209      	movs	r2, #9
 800a42a:	761a      	strb	r2, [r3, #24]
      break;
 800a42c:	e10a      	b.n	800a644 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2207      	movs	r2, #7
 800a432:	761a      	strb	r2, [r3, #24]
      break;
 800a434:	e106      	b.n	800a644 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a436:	7bbb      	ldrb	r3, [r7, #14]
 800a438:	2b04      	cmp	r3, #4
 800a43a:	d003      	beq.n	800a444 <USBH_HandleControl+0xcc>
 800a43c:	7bbb      	ldrb	r3, [r7, #14]
 800a43e:	2b02      	cmp	r3, #2
 800a440:	f040 8100 	bne.w	800a644 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	220b      	movs	r2, #11
 800a448:	761a      	strb	r2, [r3, #24]
      break;
 800a44a:	e0fb      	b.n	800a644 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800a452:	b29a      	uxth	r2, r3
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6899      	ldr	r1, [r3, #8]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	899a      	ldrh	r2, [r3, #12]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	791b      	ldrb	r3, [r3, #4]
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 f93a 	bl	800a6de <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2204      	movs	r2, #4
 800a46e:	761a      	strb	r2, [r3, #24]
      break;
 800a470:	e0f1      	b.n	800a656 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	791b      	ldrb	r3, [r3, #4]
 800a476:	4619      	mov	r1, r3
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 fc6a 	bl	800ad52 <USBH_LL_GetURBState>
 800a47e:	4603      	mov	r3, r0
 800a480:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a482:	7bbb      	ldrb	r3, [r7, #14]
 800a484:	2b01      	cmp	r3, #1
 800a486:	d102      	bne.n	800a48e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2209      	movs	r2, #9
 800a48c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a48e:	7bbb      	ldrb	r3, [r7, #14]
 800a490:	2b05      	cmp	r3, #5
 800a492:	d102      	bne.n	800a49a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a494:	2303      	movs	r3, #3
 800a496:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a498:	e0d6      	b.n	800a648 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a49a:	7bbb      	ldrb	r3, [r7, #14]
 800a49c:	2b04      	cmp	r3, #4
 800a49e:	f040 80d3 	bne.w	800a648 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	220b      	movs	r2, #11
 800a4a6:	761a      	strb	r2, [r3, #24]
      break;
 800a4a8:	e0ce      	b.n	800a648 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6899      	ldr	r1, [r3, #8]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	899a      	ldrh	r2, [r3, #12]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	795b      	ldrb	r3, [r3, #5]
 800a4b6:	2001      	movs	r0, #1
 800a4b8:	9000      	str	r0, [sp, #0]
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 f8ea 	bl	800a694 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800a4c6:	b29a      	uxth	r2, r3
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2206      	movs	r2, #6
 800a4d0:	761a      	strb	r2, [r3, #24]
      break;
 800a4d2:	e0c0      	b.n	800a656 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	795b      	ldrb	r3, [r3, #5]
 800a4d8:	4619      	mov	r1, r3
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 fc39 	bl	800ad52 <USBH_LL_GetURBState>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a4e4:	7bbb      	ldrb	r3, [r7, #14]
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d103      	bne.n	800a4f2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2207      	movs	r2, #7
 800a4ee:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a4f0:	e0ac      	b.n	800a64c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a4f2:	7bbb      	ldrb	r3, [r7, #14]
 800a4f4:	2b05      	cmp	r3, #5
 800a4f6:	d105      	bne.n	800a504 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	220c      	movs	r2, #12
 800a4fc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a4fe:	2303      	movs	r3, #3
 800a500:	73fb      	strb	r3, [r7, #15]
      break;
 800a502:	e0a3      	b.n	800a64c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a504:	7bbb      	ldrb	r3, [r7, #14]
 800a506:	2b02      	cmp	r3, #2
 800a508:	d103      	bne.n	800a512 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2205      	movs	r2, #5
 800a50e:	761a      	strb	r2, [r3, #24]
      break;
 800a510:	e09c      	b.n	800a64c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a512:	7bbb      	ldrb	r3, [r7, #14]
 800a514:	2b04      	cmp	r3, #4
 800a516:	f040 8099 	bne.w	800a64c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	220b      	movs	r2, #11
 800a51e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a520:	2302      	movs	r3, #2
 800a522:	73fb      	strb	r3, [r7, #15]
      break;
 800a524:	e092      	b.n	800a64c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	791b      	ldrb	r3, [r3, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	2100      	movs	r1, #0
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 f8d5 	bl	800a6de <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800a53a:	b29a      	uxth	r2, r3
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2208      	movs	r2, #8
 800a544:	761a      	strb	r2, [r3, #24]

      break;
 800a546:	e086      	b.n	800a656 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	791b      	ldrb	r3, [r3, #4]
 800a54c:	4619      	mov	r1, r3
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 fbff 	bl	800ad52 <USBH_LL_GetURBState>
 800a554:	4603      	mov	r3, r0
 800a556:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a558:	7bbb      	ldrb	r3, [r7, #14]
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d105      	bne.n	800a56a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	220d      	movs	r2, #13
 800a562:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a564:	2300      	movs	r3, #0
 800a566:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a568:	e072      	b.n	800a650 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a56a:	7bbb      	ldrb	r3, [r7, #14]
 800a56c:	2b04      	cmp	r3, #4
 800a56e:	d103      	bne.n	800a578 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	220b      	movs	r2, #11
 800a574:	761a      	strb	r2, [r3, #24]
      break;
 800a576:	e06b      	b.n	800a650 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a578:	7bbb      	ldrb	r3, [r7, #14]
 800a57a:	2b05      	cmp	r3, #5
 800a57c:	d168      	bne.n	800a650 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a57e:	2303      	movs	r3, #3
 800a580:	73fb      	strb	r3, [r7, #15]
      break;
 800a582:	e065      	b.n	800a650 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	795b      	ldrb	r3, [r3, #5]
 800a588:	2201      	movs	r2, #1
 800a58a:	9200      	str	r2, [sp, #0]
 800a58c:	2200      	movs	r2, #0
 800a58e:	2100      	movs	r1, #0
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 f87f 	bl	800a694 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800a59c:	b29a      	uxth	r2, r3
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	220a      	movs	r2, #10
 800a5a6:	761a      	strb	r2, [r3, #24]
      break;
 800a5a8:	e055      	b.n	800a656 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	795b      	ldrb	r3, [r3, #5]
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 fbce 	bl	800ad52 <USBH_LL_GetURBState>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a5ba:	7bbb      	ldrb	r3, [r7, #14]
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d105      	bne.n	800a5cc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	220d      	movs	r2, #13
 800a5c8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a5ca:	e043      	b.n	800a654 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a5cc:	7bbb      	ldrb	r3, [r7, #14]
 800a5ce:	2b02      	cmp	r3, #2
 800a5d0:	d103      	bne.n	800a5da <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2209      	movs	r2, #9
 800a5d6:	761a      	strb	r2, [r3, #24]
      break;
 800a5d8:	e03c      	b.n	800a654 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a5da:	7bbb      	ldrb	r3, [r7, #14]
 800a5dc:	2b04      	cmp	r3, #4
 800a5de:	d139      	bne.n	800a654 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	220b      	movs	r2, #11
 800a5e4:	761a      	strb	r2, [r3, #24]
      break;
 800a5e6:	e035      	b.n	800a654 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	7e5b      	ldrb	r3, [r3, #25]
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	b2da      	uxtb	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	765a      	strb	r2, [r3, #25]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	7e5b      	ldrb	r3, [r3, #25]
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	d806      	bhi.n	800a60a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2201      	movs	r2, #1
 800a600:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2201      	movs	r2, #1
 800a606:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a608:	e025      	b.n	800a656 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800a610:	2106      	movs	r1, #6
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2200      	movs	r2, #0
 800a61a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	795b      	ldrb	r3, [r3, #5]
 800a620:	4619      	mov	r1, r3
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 f904 	bl	800a830 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	791b      	ldrb	r3, [r3, #4]
 800a62c:	4619      	mov	r1, r3
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 f8fe 	bl	800a830 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2200      	movs	r2, #0
 800a638:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a63a:	2302      	movs	r3, #2
 800a63c:	73fb      	strb	r3, [r7, #15]
      break;
 800a63e:	e00a      	b.n	800a656 <USBH_HandleControl+0x2de>

    default:
      break;
 800a640:	bf00      	nop
 800a642:	e008      	b.n	800a656 <USBH_HandleControl+0x2de>
      break;
 800a644:	bf00      	nop
 800a646:	e006      	b.n	800a656 <USBH_HandleControl+0x2de>
      break;
 800a648:	bf00      	nop
 800a64a:	e004      	b.n	800a656 <USBH_HandleControl+0x2de>
      break;
 800a64c:	bf00      	nop
 800a64e:	e002      	b.n	800a656 <USBH_HandleControl+0x2de>
      break;
 800a650:	bf00      	nop
 800a652:	e000      	b.n	800a656 <USBH_HandleControl+0x2de>
      break;
 800a654:	bf00      	nop
  }

  return status;
 800a656:	7bfb      	ldrb	r3, [r7, #15]
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3710      	adds	r7, #16
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b088      	sub	sp, #32
 800a664:	af04      	add	r7, sp, #16
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	4613      	mov	r3, r2
 800a66c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a66e:	79f9      	ldrb	r1, [r7, #7]
 800a670:	2300      	movs	r3, #0
 800a672:	9303      	str	r3, [sp, #12]
 800a674:	2308      	movs	r3, #8
 800a676:	9302      	str	r3, [sp, #8]
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	9301      	str	r3, [sp, #4]
 800a67c:	2300      	movs	r3, #0
 800a67e:	9300      	str	r3, [sp, #0]
 800a680:	2300      	movs	r3, #0
 800a682:	2200      	movs	r2, #0
 800a684:	68f8      	ldr	r0, [r7, #12]
 800a686:	f000 fb33 	bl	800acf0 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3710      	adds	r7, #16
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b088      	sub	sp, #32
 800a698:	af04      	add	r7, sp, #16
 800a69a:	60f8      	str	r0, [r7, #12]
 800a69c:	60b9      	str	r1, [r7, #8]
 800a69e:	4611      	mov	r1, r2
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	80fb      	strh	r3, [r7, #6]
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d001      	beq.n	800a6b8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a6b8:	7979      	ldrb	r1, [r7, #5]
 800a6ba:	7e3b      	ldrb	r3, [r7, #24]
 800a6bc:	9303      	str	r3, [sp, #12]
 800a6be:	88fb      	ldrh	r3, [r7, #6]
 800a6c0:	9302      	str	r3, [sp, #8]
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	9301      	str	r3, [sp, #4]
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	9300      	str	r3, [sp, #0]
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	f000 fb0e 	bl	800acf0 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a6d4:	2300      	movs	r3, #0
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3710      	adds	r7, #16
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b088      	sub	sp, #32
 800a6e2:	af04      	add	r7, sp, #16
 800a6e4:	60f8      	str	r0, [r7, #12]
 800a6e6:	60b9      	str	r1, [r7, #8]
 800a6e8:	4611      	mov	r1, r2
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	80fb      	strh	r3, [r7, #6]
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a6f4:	7979      	ldrb	r1, [r7, #5]
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	9303      	str	r3, [sp, #12]
 800a6fa:	88fb      	ldrh	r3, [r7, #6]
 800a6fc:	9302      	str	r3, [sp, #8]
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	9301      	str	r3, [sp, #4]
 800a702:	2301      	movs	r3, #1
 800a704:	9300      	str	r3, [sp, #0]
 800a706:	2300      	movs	r3, #0
 800a708:	2201      	movs	r2, #1
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f000 faf0 	bl	800acf0 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a710:	2300      	movs	r3, #0

}
 800a712:	4618      	mov	r0, r3
 800a714:	3710      	adds	r7, #16
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800a71a:	b580      	push	{r7, lr}
 800a71c:	b088      	sub	sp, #32
 800a71e:	af04      	add	r7, sp, #16
 800a720:	60f8      	str	r0, [r7, #12]
 800a722:	60b9      	str	r1, [r7, #8]
 800a724:	4611      	mov	r1, r2
 800a726:	461a      	mov	r2, r3
 800a728:	460b      	mov	r3, r1
 800a72a:	71fb      	strb	r3, [r7, #7]
 800a72c:	4613      	mov	r3, r2
 800a72e:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a730:	79fb      	ldrb	r3, [r7, #7]
 800a732:	b29b      	uxth	r3, r3
 800a734:	79b9      	ldrb	r1, [r7, #6]
 800a736:	2200      	movs	r2, #0
 800a738:	9203      	str	r2, [sp, #12]
 800a73a:	9302      	str	r3, [sp, #8]
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	9301      	str	r3, [sp, #4]
 800a740:	2301      	movs	r3, #1
 800a742:	9300      	str	r3, [sp, #0]
 800a744:	2303      	movs	r3, #3
 800a746:	2201      	movs	r2, #1
 800a748:	68f8      	ldr	r0, [r7, #12]
 800a74a:	f000 fad1 	bl	800acf0 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 800a74e:	2300      	movs	r3, #0
}
 800a750:	4618      	mov	r0, r3
 800a752:	3710      	adds	r7, #16
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}

0800a758 <USBH_IsocSendData>:
  */
USBH_StatusTypeDef USBH_IsocSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint32_t length,
                                     uint8_t pipe_num)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b088      	sub	sp, #32
 800a75c:	af04      	add	r7, sp, #16
 800a75e:	60f8      	str	r0, [r7, #12]
 800a760:	60b9      	str	r1, [r7, #8]
 800a762:	607a      	str	r2, [r7, #4]
 800a764:	70fb      	strb	r3, [r7, #3]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	b29b      	uxth	r3, r3
 800a76a:	78f9      	ldrb	r1, [r7, #3]
 800a76c:	2200      	movs	r2, #0
 800a76e:	9203      	str	r2, [sp, #12]
 800a770:	9302      	str	r3, [sp, #8]
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	9301      	str	r3, [sp, #4]
 800a776:	2301      	movs	r3, #1
 800a778:	9300      	str	r3, [sp, #0]
 800a77a:	2301      	movs	r3, #1
 800a77c:	2200      	movs	r2, #0
 800a77e:	68f8      	ldr	r0, [r7, #12]
 800a780:	f000 fab6 	bl	800acf0 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 800a784:	2300      	movs	r3, #0
}
 800a786:	4618      	mov	r0, r3
 800a788:	3710      	adds	r7, #16
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}

0800a78e <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a78e:	b580      	push	{r7, lr}
 800a790:	b086      	sub	sp, #24
 800a792:	af04      	add	r7, sp, #16
 800a794:	6078      	str	r0, [r7, #4]
 800a796:	4608      	mov	r0, r1
 800a798:	4611      	mov	r1, r2
 800a79a:	461a      	mov	r2, r3
 800a79c:	4603      	mov	r3, r0
 800a79e:	70fb      	strb	r3, [r7, #3]
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	70bb      	strb	r3, [r7, #2]
 800a7a4:	4613      	mov	r3, r2
 800a7a6:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a7a8:	7878      	ldrb	r0, [r7, #1]
 800a7aa:	78ba      	ldrb	r2, [r7, #2]
 800a7ac:	78f9      	ldrb	r1, [r7, #3]
 800a7ae:	8b3b      	ldrh	r3, [r7, #24]
 800a7b0:	9302      	str	r3, [sp, #8]
 800a7b2:	7d3b      	ldrb	r3, [r7, #20]
 800a7b4:	9301      	str	r3, [sp, #4]
 800a7b6:	7c3b      	ldrb	r3, [r7, #16]
 800a7b8:	9300      	str	r3, [sp, #0]
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f000 fa49 	bl	800ac54 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a7c2:	2300      	movs	r3, #0
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3708      	adds	r7, #8
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a7d8:	78fb      	ldrb	r3, [r7, #3]
 800a7da:	4619      	mov	r1, r3
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 fa68 	bl	800acb2 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a7e2:	2300      	movs	r3, #0
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3708      	adds	r7, #8
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	460b      	mov	r3, r1
 800a7f6:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f000 f839 	bl	800a870 <USBH_GetFreePipe>
 800a7fe:	4603      	mov	r3, r0
 800a800:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a802:	89fb      	ldrh	r3, [r7, #14]
 800a804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a808:	4293      	cmp	r3, r2
 800a80a:	d00b      	beq.n	800a824 <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a80c:	78fa      	ldrb	r2, [r7, #3]
 800a80e:	89fb      	ldrh	r3, [r7, #14]
 800a810:	f003 030f 	and.w	r3, r3, #15
 800a814:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a818:	6879      	ldr	r1, [r7, #4]
 800a81a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	440b      	add	r3, r1
 800a822:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a824:	89fb      	ldrh	r3, [r7, #14]
 800a826:	b2db      	uxtb	r3, r3
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3710      	adds	r7, #16
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	460b      	mov	r3, r1
 800a83a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a83c:	78fb      	ldrb	r3, [r7, #3]
 800a83e:	2b0a      	cmp	r3, #10
 800a840:	d80f      	bhi.n	800a862 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a842:	78fb      	ldrb	r3, [r7, #3]
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800a84a:	009b      	lsls	r3, r3, #2
 800a84c:	4413      	add	r3, r2
 800a84e:	685a      	ldr	r2, [r3, #4]
 800a850:	78fb      	ldrb	r3, [r7, #3]
 800a852:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a856:	6879      	ldr	r1, [r7, #4]
 800a858:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	440b      	add	r3, r1
 800a860:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a862:	2300      	movs	r3, #0
}
 800a864:	4618      	mov	r0, r3
 800a866:	370c      	adds	r7, #12
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr

0800a870 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a870:	b480      	push	{r7}
 800a872:	b085      	sub	sp, #20
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a878:	2300      	movs	r3, #0
 800a87a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a87c:	2300      	movs	r3, #0
 800a87e:	73fb      	strb	r3, [r7, #15]
 800a880:	e010      	b.n	800a8a4 <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a882:	7bfb      	ldrb	r3, [r7, #15]
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	4413      	add	r3, r2
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a894:	2b00      	cmp	r3, #0
 800a896:	d102      	bne.n	800a89e <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 800a898:	7bfb      	ldrb	r3, [r7, #15]
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	e007      	b.n	800a8ae <USBH_GetFreePipe+0x3e>
  for (idx = 0U ; idx < 11U ; idx++)
 800a89e:	7bfb      	ldrb	r3, [r7, #15]
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	73fb      	strb	r3, [r7, #15]
 800a8a4:	7bfb      	ldrb	r3, [r7, #15]
 800a8a6:	2b0a      	cmp	r3, #10
 800a8a8:	d9eb      	bls.n	800a882 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a8aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3714      	adds	r7, #20
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr
	...

0800a8bc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	490e      	ldr	r1, [pc, #56]	; (800a8fc <MX_USB_HOST_Init+0x40>)
 800a8c4:	480e      	ldr	r0, [pc, #56]	; (800a900 <MX_USB_HOST_Init+0x44>)
 800a8c6:	f7fe fc86 	bl	80091d6 <USBH_Init>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d001      	beq.n	800a8d4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a8d0:	f7f6 f8de 	bl	8000a90 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_AUDIO_CLASS) != USBH_OK)
 800a8d4:	490b      	ldr	r1, [pc, #44]	; (800a904 <MX_USB_HOST_Init+0x48>)
 800a8d6:	480a      	ldr	r0, [pc, #40]	; (800a900 <MX_USB_HOST_Init+0x44>)
 800a8d8:	f7fe fd0c 	bl	80092f4 <USBH_RegisterClass>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d001      	beq.n	800a8e6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a8e2:	f7f6 f8d5 	bl	8000a90 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a8e6:	4806      	ldr	r0, [pc, #24]	; (800a900 <MX_USB_HOST_Init+0x44>)
 800a8e8:	f7fe fda8 	bl	800943c <USBH_Start>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d001      	beq.n	800a8f6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a8f2:	f7f6 f8cd 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a8f6:	bf00      	nop
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	0800a91d 	.word	0x0800a91d
 800a900:	200001d0 	.word	0x200001d0
 800a904:	2000000c 	.word	0x2000000c

0800a908 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a90c:	4802      	ldr	r0, [pc, #8]	; (800a918 <MX_USB_HOST_Process+0x10>)
 800a90e:	f7fe fda5 	bl	800945c <USBH_Process>
}
 800a912:	bf00      	nop
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	200001d0 	.word	0x200001d0

0800a91c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b083      	sub	sp, #12
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	460b      	mov	r3, r1
 800a926:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a928:	78fb      	ldrb	r3, [r7, #3]
 800a92a:	3b01      	subs	r3, #1
 800a92c:	2b04      	cmp	r3, #4
 800a92e:	d819      	bhi.n	800a964 <USBH_UserProcess+0x48>
 800a930:	a201      	add	r2, pc, #4	; (adr r2, 800a938 <USBH_UserProcess+0x1c>)
 800a932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a936:	bf00      	nop
 800a938:	0800a965 	.word	0x0800a965
 800a93c:	0800a955 	.word	0x0800a955
 800a940:	0800a965 	.word	0x0800a965
 800a944:	0800a95d 	.word	0x0800a95d
 800a948:	0800a94d 	.word	0x0800a94d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a94c:	4b09      	ldr	r3, [pc, #36]	; (800a974 <USBH_UserProcess+0x58>)
 800a94e:	2203      	movs	r2, #3
 800a950:	701a      	strb	r2, [r3, #0]
  break;
 800a952:	e008      	b.n	800a966 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a954:	4b07      	ldr	r3, [pc, #28]	; (800a974 <USBH_UserProcess+0x58>)
 800a956:	2202      	movs	r2, #2
 800a958:	701a      	strb	r2, [r3, #0]
  break;
 800a95a:	e004      	b.n	800a966 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a95c:	4b05      	ldr	r3, [pc, #20]	; (800a974 <USBH_UserProcess+0x58>)
 800a95e:	2201      	movs	r2, #1
 800a960:	701a      	strb	r2, [r3, #0]
  break;
 800a962:	e000      	b.n	800a966 <USBH_UserProcess+0x4a>

  default:
  break;
 800a964:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a966:	bf00      	nop
 800a968:	370c      	adds	r7, #12
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr
 800a972:	bf00      	nop
 800a974:	200000b0 	.word	0x200000b0

0800a978 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b08a      	sub	sp, #40	; 0x28
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a980:	f107 0314 	add.w	r3, r7, #20
 800a984:	2200      	movs	r2, #0
 800a986:	601a      	str	r2, [r3, #0]
 800a988:	605a      	str	r2, [r3, #4]
 800a98a:	609a      	str	r2, [r3, #8]
 800a98c:	60da      	str	r2, [r3, #12]
 800a98e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a998:	d14e      	bne.n	800aa38 <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a99a:	4b29      	ldr	r3, [pc, #164]	; (800aa40 <HAL_HCD_MspInit+0xc8>)
 800a99c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a99e:	4a28      	ldr	r2, [pc, #160]	; (800aa40 <HAL_HCD_MspInit+0xc8>)
 800a9a0:	f043 0301 	orr.w	r3, r3, #1
 800a9a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a9a6:	4b26      	ldr	r3, [pc, #152]	; (800aa40 <HAL_HCD_MspInit+0xc8>)
 800a9a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9aa:	f003 0301 	and.w	r3, r3, #1
 800a9ae:	613b      	str	r3, [r7, #16]
 800a9b0:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800a9b2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800a9b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9b8:	2302      	movs	r3, #2
 800a9ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a9c0:	2303      	movs	r3, #3
 800a9c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a9c4:	230a      	movs	r3, #10
 800a9c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9c8:	f107 0314 	add.w	r3, r7, #20
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a9d2:	f7f7 fe63 	bl	800269c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a9d6:	4b1a      	ldr	r3, [pc, #104]	; (800aa40 <HAL_HCD_MspInit+0xc8>)
 800a9d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9da:	4a19      	ldr	r2, [pc, #100]	; (800aa40 <HAL_HCD_MspInit+0xc8>)
 800a9dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a9e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a9e2:	4b17      	ldr	r3, [pc, #92]	; (800aa40 <HAL_HCD_MspInit+0xc8>)
 800a9e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a9ea:	60fb      	str	r3, [r7, #12]
 800a9ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a9ee:	4b14      	ldr	r3, [pc, #80]	; (800aa40 <HAL_HCD_MspInit+0xc8>)
 800a9f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d114      	bne.n	800aa24 <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a9fa:	4b11      	ldr	r3, [pc, #68]	; (800aa40 <HAL_HCD_MspInit+0xc8>)
 800a9fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9fe:	4a10      	ldr	r2, [pc, #64]	; (800aa40 <HAL_HCD_MspInit+0xc8>)
 800aa00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa04:	6593      	str	r3, [r2, #88]	; 0x58
 800aa06:	4b0e      	ldr	r3, [pc, #56]	; (800aa40 <HAL_HCD_MspInit+0xc8>)
 800aa08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa0e:	60bb      	str	r3, [r7, #8]
 800aa10:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800aa12:	f7f9 fd63 	bl	80044dc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa16:	4b0a      	ldr	r3, [pc, #40]	; (800aa40 <HAL_HCD_MspInit+0xc8>)
 800aa18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa1a:	4a09      	ldr	r2, [pc, #36]	; (800aa40 <HAL_HCD_MspInit+0xc8>)
 800aa1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa20:	6593      	str	r3, [r2, #88]	; 0x58
 800aa22:	e001      	b.n	800aa28 <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800aa24:	f7f9 fd5a 	bl	80044dc <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800aa28:	2200      	movs	r2, #0
 800aa2a:	2100      	movs	r1, #0
 800aa2c:	2043      	movs	r0, #67	; 0x43
 800aa2e:	f7f7 fdfe 	bl	800262e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800aa32:	2043      	movs	r0, #67	; 0x43
 800aa34:	f7f7 fe17 	bl	8002666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aa38:	bf00      	nop
 800aa3a:	3728      	adds	r7, #40	; 0x28
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}
 800aa40:	40021000 	.word	0x40021000

0800aa44 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aa52:	4618      	mov	r0, r3
 800aa54:	f7ff f8d7 	bl	8009c06 <USBH_LL_IncTimer>
}
 800aa58:	bf00      	nop
 800aa5a:	3708      	adds	r7, #8
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b082      	sub	sp, #8
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7ff f90f 	bl	8009c92 <USBH_LL_Connect>
}
 800aa74:	bf00      	nop
 800aa76:	3708      	adds	r7, #8
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7ff f918 	bl	8009cc0 <USBH_LL_Disconnect>
}
 800aa90:	bf00      	nop
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b083      	sub	sp, #12
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	70fb      	strb	r3, [r7, #3]
 800aaa4:	4613      	mov	r3, r2
 800aaa6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800aaa8:	bf00      	nop
 800aaaa:	370c      	adds	r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr

0800aab4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b082      	sub	sp, #8
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7ff f8c9 	bl	8009c5a <USBH_LL_PortEnabled>
}
 800aac8:	bf00      	nop
 800aaca:	3708      	adds	r7, #8
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b082      	sub	sp, #8
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aade:	4618      	mov	r0, r3
 800aae0:	f7ff f8c9 	bl	8009c76 <USBH_LL_PortDisabled>
}
 800aae4:	bf00      	nop
 800aae6:	3708      	adds	r7, #8
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d12a      	bne.n	800ab54 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800aafe:	4a18      	ldr	r2, [pc, #96]	; (800ab60 <USBH_LL_Init+0x74>)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	4a15      	ldr	r2, [pc, #84]	; (800ab60 <USBH_LL_Init+0x74>)
 800ab0a:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ab0e:	4b14      	ldr	r3, [pc, #80]	; (800ab60 <USBH_LL_Init+0x74>)
 800ab10:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ab14:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800ab16:	4b12      	ldr	r3, [pc, #72]	; (800ab60 <USBH_LL_Init+0x74>)
 800ab18:	220c      	movs	r2, #12
 800ab1a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ab1c:	4b10      	ldr	r3, [pc, #64]	; (800ab60 <USBH_LL_Init+0x74>)
 800ab1e:	2201      	movs	r2, #1
 800ab20:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ab22:	4b0f      	ldr	r3, [pc, #60]	; (800ab60 <USBH_LL_Init+0x74>)
 800ab24:	2200      	movs	r2, #0
 800ab26:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ab28:	4b0d      	ldr	r3, [pc, #52]	; (800ab60 <USBH_LL_Init+0x74>)
 800ab2a:	2202      	movs	r2, #2
 800ab2c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ab2e:	4b0c      	ldr	r3, [pc, #48]	; (800ab60 <USBH_LL_Init+0x74>)
 800ab30:	2200      	movs	r2, #0
 800ab32:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ab34:	480a      	ldr	r0, [pc, #40]	; (800ab60 <USBH_LL_Init+0x74>)
 800ab36:	f7f7 ff98 	bl	8002a6a <HAL_HCD_Init>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d001      	beq.n	800ab44 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ab40:	f7f5 ffa6 	bl	8000a90 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ab44:	4806      	ldr	r0, [pc, #24]	; (800ab60 <USBH_LL_Init+0x74>)
 800ab46:	f7f8 fb5d 	bl	8003204 <HAL_HCD_GetCurrentFrame>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f7ff f84a 	bl	8009be8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ab54:	2300      	movs	r3, #0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3708      	adds	r7, #8
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
 800ab5e:	bf00      	nop
 800ab60:	20000678 	.word	0x20000678

0800ab64 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b084      	sub	sp, #16
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab70:	2300      	movs	r3, #0
 800ab72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f7f8 fae0 	bl	8003140 <HAL_HCD_Start>
 800ab80:	4603      	mov	r3, r0
 800ab82:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ab84:	7bfb      	ldrb	r3, [r7, #15]
 800ab86:	4618      	mov	r0, r3
 800ab88:	f000 f948 	bl	800ae1c <USBH_Get_USB_Status>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab90:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3710      	adds	r7, #16
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}

0800ab9a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ab9a:	b580      	push	{r7, lr}
 800ab9c:	b084      	sub	sp, #16
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aba2:	2300      	movs	r3, #0
 800aba4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aba6:	2300      	movs	r3, #0
 800aba8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800abb0:	4618      	mov	r0, r3
 800abb2:	f7f8 fae8 	bl	8003186 <HAL_HCD_Stop>
 800abb6:	4603      	mov	r3, r0
 800abb8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800abba:	7bfb      	ldrb	r3, [r7, #15]
 800abbc:	4618      	mov	r0, r3
 800abbe:	f000 f92d 	bl	800ae1c <USBH_Get_USB_Status>
 800abc2:	4603      	mov	r3, r0
 800abc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abc6:	7bbb      	ldrb	r3, [r7, #14]
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3710      	adds	r7, #16
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800abd8:	2301      	movs	r3, #1
 800abda:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800abe2:	4618      	mov	r0, r3
 800abe4:	f7f8 fb1c 	bl	8003220 <HAL_HCD_GetCurrentSpeed>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b02      	cmp	r3, #2
 800abec:	d00c      	beq.n	800ac08 <USBH_LL_GetSpeed+0x38>
 800abee:	2b02      	cmp	r3, #2
 800abf0:	d80d      	bhi.n	800ac0e <USBH_LL_GetSpeed+0x3e>
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d002      	beq.n	800abfc <USBH_LL_GetSpeed+0x2c>
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d003      	beq.n	800ac02 <USBH_LL_GetSpeed+0x32>
 800abfa:	e008      	b.n	800ac0e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800abfc:	2300      	movs	r3, #0
 800abfe:	73fb      	strb	r3, [r7, #15]
    break;
 800ac00:	e008      	b.n	800ac14 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ac02:	2301      	movs	r3, #1
 800ac04:	73fb      	strb	r3, [r7, #15]
    break;
 800ac06:	e005      	b.n	800ac14 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ac08:	2302      	movs	r3, #2
 800ac0a:	73fb      	strb	r3, [r7, #15]
    break;
 800ac0c:	e002      	b.n	800ac14 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	73fb      	strb	r3, [r7, #15]
    break;
 800ac12:	bf00      	nop
  }
  return  speed;
 800ac14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3710      	adds	r7, #16
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}

0800ac1e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ac1e:	b580      	push	{r7, lr}
 800ac20:	b084      	sub	sp, #16
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac26:	2300      	movs	r3, #0
 800ac28:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800ac34:	4618      	mov	r0, r3
 800ac36:	f7f8 fac3 	bl	80031c0 <HAL_HCD_ResetPort>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ac3e:	7bfb      	ldrb	r3, [r7, #15]
 800ac40:	4618      	mov	r0, r3
 800ac42:	f000 f8eb 	bl	800ae1c <USBH_Get_USB_Status>
 800ac46:	4603      	mov	r3, r0
 800ac48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3710      	adds	r7, #16
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ac54:	b590      	push	{r4, r7, lr}
 800ac56:	b089      	sub	sp, #36	; 0x24
 800ac58:	af04      	add	r7, sp, #16
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	4608      	mov	r0, r1
 800ac5e:	4611      	mov	r1, r2
 800ac60:	461a      	mov	r2, r3
 800ac62:	4603      	mov	r3, r0
 800ac64:	70fb      	strb	r3, [r7, #3]
 800ac66:	460b      	mov	r3, r1
 800ac68:	70bb      	strb	r3, [r7, #2]
 800ac6a:	4613      	mov	r3, r2
 800ac6c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac72:	2300      	movs	r3, #0
 800ac74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 800ac7c:	787c      	ldrb	r4, [r7, #1]
 800ac7e:	78ba      	ldrb	r2, [r7, #2]
 800ac80:	78f9      	ldrb	r1, [r7, #3]
 800ac82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ac84:	9302      	str	r3, [sp, #8]
 800ac86:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ac8a:	9301      	str	r3, [sp, #4]
 800ac8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ac90:	9300      	str	r3, [sp, #0]
 800ac92:	4623      	mov	r3, r4
 800ac94:	f7f7 ff4b 	bl	8002b2e <HAL_HCD_HC_Init>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ac9c:	7bfb      	ldrb	r3, [r7, #15]
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f000 f8bc 	bl	800ae1c <USBH_Get_USB_Status>
 800aca4:	4603      	mov	r3, r0
 800aca6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aca8:	7bbb      	ldrb	r3, [r7, #14]
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3714      	adds	r7, #20
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd90      	pop	{r4, r7, pc}

0800acb2 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b084      	sub	sp, #16
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
 800acba:	460b      	mov	r3, r1
 800acbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acbe:	2300      	movs	r3, #0
 800acc0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800acc2:	2300      	movs	r3, #0
 800acc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800accc:	78fa      	ldrb	r2, [r7, #3]
 800acce:	4611      	mov	r1, r2
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7f7 ffbb 	bl	8002c4c <HAL_HCD_HC_Halt>
 800acd6:	4603      	mov	r3, r0
 800acd8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800acda:	7bfb      	ldrb	r3, [r7, #15]
 800acdc:	4618      	mov	r0, r3
 800acde:	f000 f89d 	bl	800ae1c <USBH_Get_USB_Status>
 800ace2:	4603      	mov	r3, r0
 800ace4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ace6:	7bbb      	ldrb	r3, [r7, #14]
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3710      	adds	r7, #16
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800acf0:	b590      	push	{r4, r7, lr}
 800acf2:	b089      	sub	sp, #36	; 0x24
 800acf4:	af04      	add	r7, sp, #16
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	4608      	mov	r0, r1
 800acfa:	4611      	mov	r1, r2
 800acfc:	461a      	mov	r2, r3
 800acfe:	4603      	mov	r3, r0
 800ad00:	70fb      	strb	r3, [r7, #3]
 800ad02:	460b      	mov	r3, r1
 800ad04:	70bb      	strb	r3, [r7, #2]
 800ad06:	4613      	mov	r3, r2
 800ad08:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 800ad18:	787c      	ldrb	r4, [r7, #1]
 800ad1a:	78ba      	ldrb	r2, [r7, #2]
 800ad1c:	78f9      	ldrb	r1, [r7, #3]
 800ad1e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ad22:	9303      	str	r3, [sp, #12]
 800ad24:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ad26:	9302      	str	r3, [sp, #8]
 800ad28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad2a:	9301      	str	r3, [sp, #4]
 800ad2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ad30:	9300      	str	r3, [sp, #0]
 800ad32:	4623      	mov	r3, r4
 800ad34:	f7f7 ffae 	bl	8002c94 <HAL_HCD_HC_SubmitRequest>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad3c:	7bfb      	ldrb	r3, [r7, #15]
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f000 f86c 	bl	800ae1c <USBH_Get_USB_Status>
 800ad44:	4603      	mov	r3, r0
 800ad46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad48:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3714      	adds	r7, #20
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd90      	pop	{r4, r7, pc}

0800ad52 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b082      	sub	sp, #8
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
 800ad5a:	460b      	mov	r3, r1
 800ad5c:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800ad64:	78fa      	ldrb	r2, [r7, #3]
 800ad66:	4611      	mov	r1, r2
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7f8 fa37 	bl	80031dc <HAL_HCD_HC_GetURBState>
 800ad6e:	4603      	mov	r3, r0
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3708      	adds	r7, #8
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	460b      	mov	r3, r1
 800ad82:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d103      	bne.n	800ad96 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ad8e:	78fb      	ldrb	r3, [r7, #3]
 800ad90:	4618      	mov	r0, r3
 800ad92:	f000 f86f 	bl	800ae74 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ad96:	20c8      	movs	r0, #200	; 0xc8
 800ad98:	f7f6 f906 	bl	8000fa8 <HAL_Delay>
  return USBH_OK;
 800ad9c:	2300      	movs	r3, #0
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3708      	adds	r7, #8
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}

0800ada6 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ada6:	b480      	push	{r7}
 800ada8:	b085      	sub	sp, #20
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]
 800adae:	460b      	mov	r3, r1
 800adb0:	70fb      	strb	r3, [r7, #3]
 800adb2:	4613      	mov	r3, r2
 800adb4:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800adbc:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800adbe:	78fb      	ldrb	r3, [r7, #3]
 800adc0:	68fa      	ldr	r2, [r7, #12]
 800adc2:	212c      	movs	r1, #44	; 0x2c
 800adc4:	fb01 f303 	mul.w	r3, r1, r3
 800adc8:	4413      	add	r3, r2
 800adca:	333b      	adds	r3, #59	; 0x3b
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d009      	beq.n	800ade6 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800add2:	78fb      	ldrb	r3, [r7, #3]
 800add4:	68fa      	ldr	r2, [r7, #12]
 800add6:	212c      	movs	r1, #44	; 0x2c
 800add8:	fb01 f303 	mul.w	r3, r1, r3
 800addc:	4413      	add	r3, r2
 800adde:	3354      	adds	r3, #84	; 0x54
 800ade0:	78ba      	ldrb	r2, [r7, #2]
 800ade2:	701a      	strb	r2, [r3, #0]
 800ade4:	e008      	b.n	800adf8 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ade6:	78fb      	ldrb	r3, [r7, #3]
 800ade8:	68fa      	ldr	r2, [r7, #12]
 800adea:	212c      	movs	r1, #44	; 0x2c
 800adec:	fb01 f303 	mul.w	r3, r1, r3
 800adf0:	4413      	add	r3, r2
 800adf2:	3355      	adds	r3, #85	; 0x55
 800adf4:	78ba      	ldrb	r2, [r7, #2]
 800adf6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800adf8:	2300      	movs	r3, #0
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3714      	adds	r7, #20
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr

0800ae06 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ae06:	b580      	push	{r7, lr}
 800ae08:	b082      	sub	sp, #8
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f7f6 f8ca 	bl	8000fa8 <HAL_Delay>
}
 800ae14:	bf00      	nop
 800ae16:	3708      	adds	r7, #8
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b085      	sub	sp, #20
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	4603      	mov	r3, r0
 800ae24:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae26:	2300      	movs	r3, #0
 800ae28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ae2a:	79fb      	ldrb	r3, [r7, #7]
 800ae2c:	2b03      	cmp	r3, #3
 800ae2e:	d817      	bhi.n	800ae60 <USBH_Get_USB_Status+0x44>
 800ae30:	a201      	add	r2, pc, #4	; (adr r2, 800ae38 <USBH_Get_USB_Status+0x1c>)
 800ae32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae36:	bf00      	nop
 800ae38:	0800ae49 	.word	0x0800ae49
 800ae3c:	0800ae4f 	.word	0x0800ae4f
 800ae40:	0800ae55 	.word	0x0800ae55
 800ae44:	0800ae5b 	.word	0x0800ae5b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	73fb      	strb	r3, [r7, #15]
    break;
 800ae4c:	e00b      	b.n	800ae66 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ae4e:	2302      	movs	r3, #2
 800ae50:	73fb      	strb	r3, [r7, #15]
    break;
 800ae52:	e008      	b.n	800ae66 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ae54:	2301      	movs	r3, #1
 800ae56:	73fb      	strb	r3, [r7, #15]
    break;
 800ae58:	e005      	b.n	800ae66 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ae5a:	2302      	movs	r3, #2
 800ae5c:	73fb      	strb	r3, [r7, #15]
    break;
 800ae5e:	e002      	b.n	800ae66 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ae60:	2302      	movs	r3, #2
 800ae62:	73fb      	strb	r3, [r7, #15]
    break;
 800ae64:	bf00      	nop
  }
  return usb_status;
 800ae66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3714      	adds	r7, #20
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr

0800ae74 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b084      	sub	sp, #16
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ae7e:	79fb      	ldrb	r3, [r7, #7]
 800ae80:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ae82:	79fb      	ldrb	r3, [r7, #7]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d102      	bne.n	800ae8e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800ae88:	2301      	movs	r3, #1
 800ae8a:	73fb      	strb	r3, [r7, #15]
 800ae8c:	e001      	b.n	800ae92 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
 800ae92:	7bfb      	ldrb	r3, [r7, #15]
 800ae94:	461a      	mov	r2, r3
 800ae96:	2140      	movs	r1, #64	; 0x40
 800ae98:	4803      	ldr	r0, [pc, #12]	; (800aea8 <MX_DriverVbusFS+0x34>)
 800ae9a:	f7f7 fd91 	bl	80029c0 <HAL_GPIO_WritePin>
}
 800ae9e:	bf00      	nop
 800aea0:	3710      	adds	r7, #16
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	48001800 	.word	0x48001800

0800aeac <__errno>:
 800aeac:	4b01      	ldr	r3, [pc, #4]	; (800aeb4 <__errno+0x8>)
 800aeae:	6818      	ldr	r0, [r3, #0]
 800aeb0:	4770      	bx	lr
 800aeb2:	bf00      	nop
 800aeb4:	2000002c 	.word	0x2000002c

0800aeb8 <__libc_init_array>:
 800aeb8:	b570      	push	{r4, r5, r6, lr}
 800aeba:	4d0d      	ldr	r5, [pc, #52]	; (800aef0 <__libc_init_array+0x38>)
 800aebc:	4c0d      	ldr	r4, [pc, #52]	; (800aef4 <__libc_init_array+0x3c>)
 800aebe:	1b64      	subs	r4, r4, r5
 800aec0:	10a4      	asrs	r4, r4, #2
 800aec2:	2600      	movs	r6, #0
 800aec4:	42a6      	cmp	r6, r4
 800aec6:	d109      	bne.n	800aedc <__libc_init_array+0x24>
 800aec8:	4d0b      	ldr	r5, [pc, #44]	; (800aef8 <__libc_init_array+0x40>)
 800aeca:	4c0c      	ldr	r4, [pc, #48]	; (800aefc <__libc_init_array+0x44>)
 800aecc:	f000 ff86 	bl	800bddc <_init>
 800aed0:	1b64      	subs	r4, r4, r5
 800aed2:	10a4      	asrs	r4, r4, #2
 800aed4:	2600      	movs	r6, #0
 800aed6:	42a6      	cmp	r6, r4
 800aed8:	d105      	bne.n	800aee6 <__libc_init_array+0x2e>
 800aeda:	bd70      	pop	{r4, r5, r6, pc}
 800aedc:	f855 3b04 	ldr.w	r3, [r5], #4
 800aee0:	4798      	blx	r3
 800aee2:	3601      	adds	r6, #1
 800aee4:	e7ee      	b.n	800aec4 <__libc_init_array+0xc>
 800aee6:	f855 3b04 	ldr.w	r3, [r5], #4
 800aeea:	4798      	blx	r3
 800aeec:	3601      	adds	r6, #1
 800aeee:	e7f2      	b.n	800aed6 <__libc_init_array+0x1e>
 800aef0:	0800bef8 	.word	0x0800bef8
 800aef4:	0800bef8 	.word	0x0800bef8
 800aef8:	0800bef8 	.word	0x0800bef8
 800aefc:	0800befc 	.word	0x0800befc

0800af00 <malloc>:
 800af00:	4b02      	ldr	r3, [pc, #8]	; (800af0c <malloc+0xc>)
 800af02:	4601      	mov	r1, r0
 800af04:	6818      	ldr	r0, [r3, #0]
 800af06:	f000 b863 	b.w	800afd0 <_malloc_r>
 800af0a:	bf00      	nop
 800af0c:	2000002c 	.word	0x2000002c

0800af10 <free>:
 800af10:	4b02      	ldr	r3, [pc, #8]	; (800af1c <free+0xc>)
 800af12:	4601      	mov	r1, r0
 800af14:	6818      	ldr	r0, [r3, #0]
 800af16:	f000 b80b 	b.w	800af30 <_free_r>
 800af1a:	bf00      	nop
 800af1c:	2000002c 	.word	0x2000002c

0800af20 <memset>:
 800af20:	4402      	add	r2, r0
 800af22:	4603      	mov	r3, r0
 800af24:	4293      	cmp	r3, r2
 800af26:	d100      	bne.n	800af2a <memset+0xa>
 800af28:	4770      	bx	lr
 800af2a:	f803 1b01 	strb.w	r1, [r3], #1
 800af2e:	e7f9      	b.n	800af24 <memset+0x4>

0800af30 <_free_r>:
 800af30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af32:	2900      	cmp	r1, #0
 800af34:	d048      	beq.n	800afc8 <_free_r+0x98>
 800af36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af3a:	9001      	str	r0, [sp, #4]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	f1a1 0404 	sub.w	r4, r1, #4
 800af42:	bfb8      	it	lt
 800af44:	18e4      	addlt	r4, r4, r3
 800af46:	f000 f9bd 	bl	800b2c4 <__malloc_lock>
 800af4a:	4a20      	ldr	r2, [pc, #128]	; (800afcc <_free_r+0x9c>)
 800af4c:	9801      	ldr	r0, [sp, #4]
 800af4e:	6813      	ldr	r3, [r2, #0]
 800af50:	4615      	mov	r5, r2
 800af52:	b933      	cbnz	r3, 800af62 <_free_r+0x32>
 800af54:	6063      	str	r3, [r4, #4]
 800af56:	6014      	str	r4, [r2, #0]
 800af58:	b003      	add	sp, #12
 800af5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af5e:	f000 b9b7 	b.w	800b2d0 <__malloc_unlock>
 800af62:	42a3      	cmp	r3, r4
 800af64:	d90b      	bls.n	800af7e <_free_r+0x4e>
 800af66:	6821      	ldr	r1, [r4, #0]
 800af68:	1862      	adds	r2, r4, r1
 800af6a:	4293      	cmp	r3, r2
 800af6c:	bf04      	itt	eq
 800af6e:	681a      	ldreq	r2, [r3, #0]
 800af70:	685b      	ldreq	r3, [r3, #4]
 800af72:	6063      	str	r3, [r4, #4]
 800af74:	bf04      	itt	eq
 800af76:	1852      	addeq	r2, r2, r1
 800af78:	6022      	streq	r2, [r4, #0]
 800af7a:	602c      	str	r4, [r5, #0]
 800af7c:	e7ec      	b.n	800af58 <_free_r+0x28>
 800af7e:	461a      	mov	r2, r3
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	b10b      	cbz	r3, 800af88 <_free_r+0x58>
 800af84:	42a3      	cmp	r3, r4
 800af86:	d9fa      	bls.n	800af7e <_free_r+0x4e>
 800af88:	6811      	ldr	r1, [r2, #0]
 800af8a:	1855      	adds	r5, r2, r1
 800af8c:	42a5      	cmp	r5, r4
 800af8e:	d10b      	bne.n	800afa8 <_free_r+0x78>
 800af90:	6824      	ldr	r4, [r4, #0]
 800af92:	4421      	add	r1, r4
 800af94:	1854      	adds	r4, r2, r1
 800af96:	42a3      	cmp	r3, r4
 800af98:	6011      	str	r1, [r2, #0]
 800af9a:	d1dd      	bne.n	800af58 <_free_r+0x28>
 800af9c:	681c      	ldr	r4, [r3, #0]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	6053      	str	r3, [r2, #4]
 800afa2:	4421      	add	r1, r4
 800afa4:	6011      	str	r1, [r2, #0]
 800afa6:	e7d7      	b.n	800af58 <_free_r+0x28>
 800afa8:	d902      	bls.n	800afb0 <_free_r+0x80>
 800afaa:	230c      	movs	r3, #12
 800afac:	6003      	str	r3, [r0, #0]
 800afae:	e7d3      	b.n	800af58 <_free_r+0x28>
 800afb0:	6825      	ldr	r5, [r4, #0]
 800afb2:	1961      	adds	r1, r4, r5
 800afb4:	428b      	cmp	r3, r1
 800afb6:	bf04      	itt	eq
 800afb8:	6819      	ldreq	r1, [r3, #0]
 800afba:	685b      	ldreq	r3, [r3, #4]
 800afbc:	6063      	str	r3, [r4, #4]
 800afbe:	bf04      	itt	eq
 800afc0:	1949      	addeq	r1, r1, r5
 800afc2:	6021      	streq	r1, [r4, #0]
 800afc4:	6054      	str	r4, [r2, #4]
 800afc6:	e7c7      	b.n	800af58 <_free_r+0x28>
 800afc8:	b003      	add	sp, #12
 800afca:	bd30      	pop	{r4, r5, pc}
 800afcc:	200000b4 	.word	0x200000b4

0800afd0 <_malloc_r>:
 800afd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afd2:	1ccd      	adds	r5, r1, #3
 800afd4:	f025 0503 	bic.w	r5, r5, #3
 800afd8:	3508      	adds	r5, #8
 800afda:	2d0c      	cmp	r5, #12
 800afdc:	bf38      	it	cc
 800afde:	250c      	movcc	r5, #12
 800afe0:	2d00      	cmp	r5, #0
 800afe2:	4606      	mov	r6, r0
 800afe4:	db01      	blt.n	800afea <_malloc_r+0x1a>
 800afe6:	42a9      	cmp	r1, r5
 800afe8:	d903      	bls.n	800aff2 <_malloc_r+0x22>
 800afea:	230c      	movs	r3, #12
 800afec:	6033      	str	r3, [r6, #0]
 800afee:	2000      	movs	r0, #0
 800aff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aff2:	f000 f967 	bl	800b2c4 <__malloc_lock>
 800aff6:	4921      	ldr	r1, [pc, #132]	; (800b07c <_malloc_r+0xac>)
 800aff8:	680a      	ldr	r2, [r1, #0]
 800affa:	4614      	mov	r4, r2
 800affc:	b99c      	cbnz	r4, 800b026 <_malloc_r+0x56>
 800affe:	4f20      	ldr	r7, [pc, #128]	; (800b080 <_malloc_r+0xb0>)
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	b923      	cbnz	r3, 800b00e <_malloc_r+0x3e>
 800b004:	4621      	mov	r1, r4
 800b006:	4630      	mov	r0, r6
 800b008:	f000 f854 	bl	800b0b4 <_sbrk_r>
 800b00c:	6038      	str	r0, [r7, #0]
 800b00e:	4629      	mov	r1, r5
 800b010:	4630      	mov	r0, r6
 800b012:	f000 f84f 	bl	800b0b4 <_sbrk_r>
 800b016:	1c43      	adds	r3, r0, #1
 800b018:	d123      	bne.n	800b062 <_malloc_r+0x92>
 800b01a:	230c      	movs	r3, #12
 800b01c:	6033      	str	r3, [r6, #0]
 800b01e:	4630      	mov	r0, r6
 800b020:	f000 f956 	bl	800b2d0 <__malloc_unlock>
 800b024:	e7e3      	b.n	800afee <_malloc_r+0x1e>
 800b026:	6823      	ldr	r3, [r4, #0]
 800b028:	1b5b      	subs	r3, r3, r5
 800b02a:	d417      	bmi.n	800b05c <_malloc_r+0x8c>
 800b02c:	2b0b      	cmp	r3, #11
 800b02e:	d903      	bls.n	800b038 <_malloc_r+0x68>
 800b030:	6023      	str	r3, [r4, #0]
 800b032:	441c      	add	r4, r3
 800b034:	6025      	str	r5, [r4, #0]
 800b036:	e004      	b.n	800b042 <_malloc_r+0x72>
 800b038:	6863      	ldr	r3, [r4, #4]
 800b03a:	42a2      	cmp	r2, r4
 800b03c:	bf0c      	ite	eq
 800b03e:	600b      	streq	r3, [r1, #0]
 800b040:	6053      	strne	r3, [r2, #4]
 800b042:	4630      	mov	r0, r6
 800b044:	f000 f944 	bl	800b2d0 <__malloc_unlock>
 800b048:	f104 000b 	add.w	r0, r4, #11
 800b04c:	1d23      	adds	r3, r4, #4
 800b04e:	f020 0007 	bic.w	r0, r0, #7
 800b052:	1ac2      	subs	r2, r0, r3
 800b054:	d0cc      	beq.n	800aff0 <_malloc_r+0x20>
 800b056:	1a1b      	subs	r3, r3, r0
 800b058:	50a3      	str	r3, [r4, r2]
 800b05a:	e7c9      	b.n	800aff0 <_malloc_r+0x20>
 800b05c:	4622      	mov	r2, r4
 800b05e:	6864      	ldr	r4, [r4, #4]
 800b060:	e7cc      	b.n	800affc <_malloc_r+0x2c>
 800b062:	1cc4      	adds	r4, r0, #3
 800b064:	f024 0403 	bic.w	r4, r4, #3
 800b068:	42a0      	cmp	r0, r4
 800b06a:	d0e3      	beq.n	800b034 <_malloc_r+0x64>
 800b06c:	1a21      	subs	r1, r4, r0
 800b06e:	4630      	mov	r0, r6
 800b070:	f000 f820 	bl	800b0b4 <_sbrk_r>
 800b074:	3001      	adds	r0, #1
 800b076:	d1dd      	bne.n	800b034 <_malloc_r+0x64>
 800b078:	e7cf      	b.n	800b01a <_malloc_r+0x4a>
 800b07a:	bf00      	nop
 800b07c:	200000b4 	.word	0x200000b4
 800b080:	200000b8 	.word	0x200000b8

0800b084 <iprintf>:
 800b084:	b40f      	push	{r0, r1, r2, r3}
 800b086:	4b0a      	ldr	r3, [pc, #40]	; (800b0b0 <iprintf+0x2c>)
 800b088:	b513      	push	{r0, r1, r4, lr}
 800b08a:	681c      	ldr	r4, [r3, #0]
 800b08c:	b124      	cbz	r4, 800b098 <iprintf+0x14>
 800b08e:	69a3      	ldr	r3, [r4, #24]
 800b090:	b913      	cbnz	r3, 800b098 <iprintf+0x14>
 800b092:	4620      	mov	r0, r4
 800b094:	f000 f876 	bl	800b184 <__sinit>
 800b098:	ab05      	add	r3, sp, #20
 800b09a:	9a04      	ldr	r2, [sp, #16]
 800b09c:	68a1      	ldr	r1, [r4, #8]
 800b09e:	9301      	str	r3, [sp, #4]
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	f000 f945 	bl	800b330 <_vfiprintf_r>
 800b0a6:	b002      	add	sp, #8
 800b0a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0ac:	b004      	add	sp, #16
 800b0ae:	4770      	bx	lr
 800b0b0:	2000002c 	.word	0x2000002c

0800b0b4 <_sbrk_r>:
 800b0b4:	b538      	push	{r3, r4, r5, lr}
 800b0b6:	4d06      	ldr	r5, [pc, #24]	; (800b0d0 <_sbrk_r+0x1c>)
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	4604      	mov	r4, r0
 800b0bc:	4608      	mov	r0, r1
 800b0be:	602b      	str	r3, [r5, #0]
 800b0c0:	f7f5 fe6c 	bl	8000d9c <_sbrk>
 800b0c4:	1c43      	adds	r3, r0, #1
 800b0c6:	d102      	bne.n	800b0ce <_sbrk_r+0x1a>
 800b0c8:	682b      	ldr	r3, [r5, #0]
 800b0ca:	b103      	cbz	r3, 800b0ce <_sbrk_r+0x1a>
 800b0cc:	6023      	str	r3, [r4, #0]
 800b0ce:	bd38      	pop	{r3, r4, r5, pc}
 800b0d0:	20000988 	.word	0x20000988

0800b0d4 <std>:
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	b510      	push	{r4, lr}
 800b0d8:	4604      	mov	r4, r0
 800b0da:	e9c0 3300 	strd	r3, r3, [r0]
 800b0de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b0e2:	6083      	str	r3, [r0, #8]
 800b0e4:	8181      	strh	r1, [r0, #12]
 800b0e6:	6643      	str	r3, [r0, #100]	; 0x64
 800b0e8:	81c2      	strh	r2, [r0, #14]
 800b0ea:	6183      	str	r3, [r0, #24]
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	2208      	movs	r2, #8
 800b0f0:	305c      	adds	r0, #92	; 0x5c
 800b0f2:	f7ff ff15 	bl	800af20 <memset>
 800b0f6:	4b05      	ldr	r3, [pc, #20]	; (800b10c <std+0x38>)
 800b0f8:	6263      	str	r3, [r4, #36]	; 0x24
 800b0fa:	4b05      	ldr	r3, [pc, #20]	; (800b110 <std+0x3c>)
 800b0fc:	62a3      	str	r3, [r4, #40]	; 0x28
 800b0fe:	4b05      	ldr	r3, [pc, #20]	; (800b114 <std+0x40>)
 800b100:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b102:	4b05      	ldr	r3, [pc, #20]	; (800b118 <std+0x44>)
 800b104:	6224      	str	r4, [r4, #32]
 800b106:	6323      	str	r3, [r4, #48]	; 0x30
 800b108:	bd10      	pop	{r4, pc}
 800b10a:	bf00      	nop
 800b10c:	0800b8b9 	.word	0x0800b8b9
 800b110:	0800b8db 	.word	0x0800b8db
 800b114:	0800b913 	.word	0x0800b913
 800b118:	0800b937 	.word	0x0800b937

0800b11c <_cleanup_r>:
 800b11c:	4901      	ldr	r1, [pc, #4]	; (800b124 <_cleanup_r+0x8>)
 800b11e:	f000 b8af 	b.w	800b280 <_fwalk_reent>
 800b122:	bf00      	nop
 800b124:	0800bc11 	.word	0x0800bc11

0800b128 <__sfmoreglue>:
 800b128:	b570      	push	{r4, r5, r6, lr}
 800b12a:	1e4a      	subs	r2, r1, #1
 800b12c:	2568      	movs	r5, #104	; 0x68
 800b12e:	4355      	muls	r5, r2
 800b130:	460e      	mov	r6, r1
 800b132:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b136:	f7ff ff4b 	bl	800afd0 <_malloc_r>
 800b13a:	4604      	mov	r4, r0
 800b13c:	b140      	cbz	r0, 800b150 <__sfmoreglue+0x28>
 800b13e:	2100      	movs	r1, #0
 800b140:	e9c0 1600 	strd	r1, r6, [r0]
 800b144:	300c      	adds	r0, #12
 800b146:	60a0      	str	r0, [r4, #8]
 800b148:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b14c:	f7ff fee8 	bl	800af20 <memset>
 800b150:	4620      	mov	r0, r4
 800b152:	bd70      	pop	{r4, r5, r6, pc}

0800b154 <__sfp_lock_acquire>:
 800b154:	4801      	ldr	r0, [pc, #4]	; (800b15c <__sfp_lock_acquire+0x8>)
 800b156:	f000 b8b3 	b.w	800b2c0 <__retarget_lock_acquire_recursive>
 800b15a:	bf00      	nop
 800b15c:	20000984 	.word	0x20000984

0800b160 <__sfp_lock_release>:
 800b160:	4801      	ldr	r0, [pc, #4]	; (800b168 <__sfp_lock_release+0x8>)
 800b162:	f000 b8ae 	b.w	800b2c2 <__retarget_lock_release_recursive>
 800b166:	bf00      	nop
 800b168:	20000984 	.word	0x20000984

0800b16c <__sinit_lock_acquire>:
 800b16c:	4801      	ldr	r0, [pc, #4]	; (800b174 <__sinit_lock_acquire+0x8>)
 800b16e:	f000 b8a7 	b.w	800b2c0 <__retarget_lock_acquire_recursive>
 800b172:	bf00      	nop
 800b174:	2000097f 	.word	0x2000097f

0800b178 <__sinit_lock_release>:
 800b178:	4801      	ldr	r0, [pc, #4]	; (800b180 <__sinit_lock_release+0x8>)
 800b17a:	f000 b8a2 	b.w	800b2c2 <__retarget_lock_release_recursive>
 800b17e:	bf00      	nop
 800b180:	2000097f 	.word	0x2000097f

0800b184 <__sinit>:
 800b184:	b510      	push	{r4, lr}
 800b186:	4604      	mov	r4, r0
 800b188:	f7ff fff0 	bl	800b16c <__sinit_lock_acquire>
 800b18c:	69a3      	ldr	r3, [r4, #24]
 800b18e:	b11b      	cbz	r3, 800b198 <__sinit+0x14>
 800b190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b194:	f7ff bff0 	b.w	800b178 <__sinit_lock_release>
 800b198:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b19c:	6523      	str	r3, [r4, #80]	; 0x50
 800b19e:	4b13      	ldr	r3, [pc, #76]	; (800b1ec <__sinit+0x68>)
 800b1a0:	4a13      	ldr	r2, [pc, #76]	; (800b1f0 <__sinit+0x6c>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	62a2      	str	r2, [r4, #40]	; 0x28
 800b1a6:	42a3      	cmp	r3, r4
 800b1a8:	bf04      	itt	eq
 800b1aa:	2301      	moveq	r3, #1
 800b1ac:	61a3      	streq	r3, [r4, #24]
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	f000 f820 	bl	800b1f4 <__sfp>
 800b1b4:	6060      	str	r0, [r4, #4]
 800b1b6:	4620      	mov	r0, r4
 800b1b8:	f000 f81c 	bl	800b1f4 <__sfp>
 800b1bc:	60a0      	str	r0, [r4, #8]
 800b1be:	4620      	mov	r0, r4
 800b1c0:	f000 f818 	bl	800b1f4 <__sfp>
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	60e0      	str	r0, [r4, #12]
 800b1c8:	2104      	movs	r1, #4
 800b1ca:	6860      	ldr	r0, [r4, #4]
 800b1cc:	f7ff ff82 	bl	800b0d4 <std>
 800b1d0:	68a0      	ldr	r0, [r4, #8]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	2109      	movs	r1, #9
 800b1d6:	f7ff ff7d 	bl	800b0d4 <std>
 800b1da:	68e0      	ldr	r0, [r4, #12]
 800b1dc:	2202      	movs	r2, #2
 800b1de:	2112      	movs	r1, #18
 800b1e0:	f7ff ff78 	bl	800b0d4 <std>
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	61a3      	str	r3, [r4, #24]
 800b1e8:	e7d2      	b.n	800b190 <__sinit+0xc>
 800b1ea:	bf00      	nop
 800b1ec:	0800be58 	.word	0x0800be58
 800b1f0:	0800b11d 	.word	0x0800b11d

0800b1f4 <__sfp>:
 800b1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1f6:	4607      	mov	r7, r0
 800b1f8:	f7ff ffac 	bl	800b154 <__sfp_lock_acquire>
 800b1fc:	4b1e      	ldr	r3, [pc, #120]	; (800b278 <__sfp+0x84>)
 800b1fe:	681e      	ldr	r6, [r3, #0]
 800b200:	69b3      	ldr	r3, [r6, #24]
 800b202:	b913      	cbnz	r3, 800b20a <__sfp+0x16>
 800b204:	4630      	mov	r0, r6
 800b206:	f7ff ffbd 	bl	800b184 <__sinit>
 800b20a:	3648      	adds	r6, #72	; 0x48
 800b20c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b210:	3b01      	subs	r3, #1
 800b212:	d503      	bpl.n	800b21c <__sfp+0x28>
 800b214:	6833      	ldr	r3, [r6, #0]
 800b216:	b30b      	cbz	r3, 800b25c <__sfp+0x68>
 800b218:	6836      	ldr	r6, [r6, #0]
 800b21a:	e7f7      	b.n	800b20c <__sfp+0x18>
 800b21c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b220:	b9d5      	cbnz	r5, 800b258 <__sfp+0x64>
 800b222:	4b16      	ldr	r3, [pc, #88]	; (800b27c <__sfp+0x88>)
 800b224:	60e3      	str	r3, [r4, #12]
 800b226:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b22a:	6665      	str	r5, [r4, #100]	; 0x64
 800b22c:	f000 f847 	bl	800b2be <__retarget_lock_init_recursive>
 800b230:	f7ff ff96 	bl	800b160 <__sfp_lock_release>
 800b234:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b238:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b23c:	6025      	str	r5, [r4, #0]
 800b23e:	61a5      	str	r5, [r4, #24]
 800b240:	2208      	movs	r2, #8
 800b242:	4629      	mov	r1, r5
 800b244:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b248:	f7ff fe6a 	bl	800af20 <memset>
 800b24c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b250:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b254:	4620      	mov	r0, r4
 800b256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b258:	3468      	adds	r4, #104	; 0x68
 800b25a:	e7d9      	b.n	800b210 <__sfp+0x1c>
 800b25c:	2104      	movs	r1, #4
 800b25e:	4638      	mov	r0, r7
 800b260:	f7ff ff62 	bl	800b128 <__sfmoreglue>
 800b264:	4604      	mov	r4, r0
 800b266:	6030      	str	r0, [r6, #0]
 800b268:	2800      	cmp	r0, #0
 800b26a:	d1d5      	bne.n	800b218 <__sfp+0x24>
 800b26c:	f7ff ff78 	bl	800b160 <__sfp_lock_release>
 800b270:	230c      	movs	r3, #12
 800b272:	603b      	str	r3, [r7, #0]
 800b274:	e7ee      	b.n	800b254 <__sfp+0x60>
 800b276:	bf00      	nop
 800b278:	0800be58 	.word	0x0800be58
 800b27c:	ffff0001 	.word	0xffff0001

0800b280 <_fwalk_reent>:
 800b280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b284:	4606      	mov	r6, r0
 800b286:	4688      	mov	r8, r1
 800b288:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b28c:	2700      	movs	r7, #0
 800b28e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b292:	f1b9 0901 	subs.w	r9, r9, #1
 800b296:	d505      	bpl.n	800b2a4 <_fwalk_reent+0x24>
 800b298:	6824      	ldr	r4, [r4, #0]
 800b29a:	2c00      	cmp	r4, #0
 800b29c:	d1f7      	bne.n	800b28e <_fwalk_reent+0xe>
 800b29e:	4638      	mov	r0, r7
 800b2a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2a4:	89ab      	ldrh	r3, [r5, #12]
 800b2a6:	2b01      	cmp	r3, #1
 800b2a8:	d907      	bls.n	800b2ba <_fwalk_reent+0x3a>
 800b2aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	d003      	beq.n	800b2ba <_fwalk_reent+0x3a>
 800b2b2:	4629      	mov	r1, r5
 800b2b4:	4630      	mov	r0, r6
 800b2b6:	47c0      	blx	r8
 800b2b8:	4307      	orrs	r7, r0
 800b2ba:	3568      	adds	r5, #104	; 0x68
 800b2bc:	e7e9      	b.n	800b292 <_fwalk_reent+0x12>

0800b2be <__retarget_lock_init_recursive>:
 800b2be:	4770      	bx	lr

0800b2c0 <__retarget_lock_acquire_recursive>:
 800b2c0:	4770      	bx	lr

0800b2c2 <__retarget_lock_release_recursive>:
 800b2c2:	4770      	bx	lr

0800b2c4 <__malloc_lock>:
 800b2c4:	4801      	ldr	r0, [pc, #4]	; (800b2cc <__malloc_lock+0x8>)
 800b2c6:	f7ff bffb 	b.w	800b2c0 <__retarget_lock_acquire_recursive>
 800b2ca:	bf00      	nop
 800b2cc:	20000980 	.word	0x20000980

0800b2d0 <__malloc_unlock>:
 800b2d0:	4801      	ldr	r0, [pc, #4]	; (800b2d8 <__malloc_unlock+0x8>)
 800b2d2:	f7ff bff6 	b.w	800b2c2 <__retarget_lock_release_recursive>
 800b2d6:	bf00      	nop
 800b2d8:	20000980 	.word	0x20000980

0800b2dc <__sfputc_r>:
 800b2dc:	6893      	ldr	r3, [r2, #8]
 800b2de:	3b01      	subs	r3, #1
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	b410      	push	{r4}
 800b2e4:	6093      	str	r3, [r2, #8]
 800b2e6:	da08      	bge.n	800b2fa <__sfputc_r+0x1e>
 800b2e8:	6994      	ldr	r4, [r2, #24]
 800b2ea:	42a3      	cmp	r3, r4
 800b2ec:	db01      	blt.n	800b2f2 <__sfputc_r+0x16>
 800b2ee:	290a      	cmp	r1, #10
 800b2f0:	d103      	bne.n	800b2fa <__sfputc_r+0x1e>
 800b2f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2f6:	f000 bb23 	b.w	800b940 <__swbuf_r>
 800b2fa:	6813      	ldr	r3, [r2, #0]
 800b2fc:	1c58      	adds	r0, r3, #1
 800b2fe:	6010      	str	r0, [r2, #0]
 800b300:	7019      	strb	r1, [r3, #0]
 800b302:	4608      	mov	r0, r1
 800b304:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b308:	4770      	bx	lr

0800b30a <__sfputs_r>:
 800b30a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b30c:	4606      	mov	r6, r0
 800b30e:	460f      	mov	r7, r1
 800b310:	4614      	mov	r4, r2
 800b312:	18d5      	adds	r5, r2, r3
 800b314:	42ac      	cmp	r4, r5
 800b316:	d101      	bne.n	800b31c <__sfputs_r+0x12>
 800b318:	2000      	movs	r0, #0
 800b31a:	e007      	b.n	800b32c <__sfputs_r+0x22>
 800b31c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b320:	463a      	mov	r2, r7
 800b322:	4630      	mov	r0, r6
 800b324:	f7ff ffda 	bl	800b2dc <__sfputc_r>
 800b328:	1c43      	adds	r3, r0, #1
 800b32a:	d1f3      	bne.n	800b314 <__sfputs_r+0xa>
 800b32c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b330 <_vfiprintf_r>:
 800b330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b334:	460d      	mov	r5, r1
 800b336:	b09d      	sub	sp, #116	; 0x74
 800b338:	4614      	mov	r4, r2
 800b33a:	4698      	mov	r8, r3
 800b33c:	4606      	mov	r6, r0
 800b33e:	b118      	cbz	r0, 800b348 <_vfiprintf_r+0x18>
 800b340:	6983      	ldr	r3, [r0, #24]
 800b342:	b90b      	cbnz	r3, 800b348 <_vfiprintf_r+0x18>
 800b344:	f7ff ff1e 	bl	800b184 <__sinit>
 800b348:	4b89      	ldr	r3, [pc, #548]	; (800b570 <_vfiprintf_r+0x240>)
 800b34a:	429d      	cmp	r5, r3
 800b34c:	d11b      	bne.n	800b386 <_vfiprintf_r+0x56>
 800b34e:	6875      	ldr	r5, [r6, #4]
 800b350:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b352:	07d9      	lsls	r1, r3, #31
 800b354:	d405      	bmi.n	800b362 <_vfiprintf_r+0x32>
 800b356:	89ab      	ldrh	r3, [r5, #12]
 800b358:	059a      	lsls	r2, r3, #22
 800b35a:	d402      	bmi.n	800b362 <_vfiprintf_r+0x32>
 800b35c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b35e:	f7ff ffaf 	bl	800b2c0 <__retarget_lock_acquire_recursive>
 800b362:	89ab      	ldrh	r3, [r5, #12]
 800b364:	071b      	lsls	r3, r3, #28
 800b366:	d501      	bpl.n	800b36c <_vfiprintf_r+0x3c>
 800b368:	692b      	ldr	r3, [r5, #16]
 800b36a:	b9eb      	cbnz	r3, 800b3a8 <_vfiprintf_r+0x78>
 800b36c:	4629      	mov	r1, r5
 800b36e:	4630      	mov	r0, r6
 800b370:	f000 fb4a 	bl	800ba08 <__swsetup_r>
 800b374:	b1c0      	cbz	r0, 800b3a8 <_vfiprintf_r+0x78>
 800b376:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b378:	07dc      	lsls	r4, r3, #31
 800b37a:	d50e      	bpl.n	800b39a <_vfiprintf_r+0x6a>
 800b37c:	f04f 30ff 	mov.w	r0, #4294967295
 800b380:	b01d      	add	sp, #116	; 0x74
 800b382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b386:	4b7b      	ldr	r3, [pc, #492]	; (800b574 <_vfiprintf_r+0x244>)
 800b388:	429d      	cmp	r5, r3
 800b38a:	d101      	bne.n	800b390 <_vfiprintf_r+0x60>
 800b38c:	68b5      	ldr	r5, [r6, #8]
 800b38e:	e7df      	b.n	800b350 <_vfiprintf_r+0x20>
 800b390:	4b79      	ldr	r3, [pc, #484]	; (800b578 <_vfiprintf_r+0x248>)
 800b392:	429d      	cmp	r5, r3
 800b394:	bf08      	it	eq
 800b396:	68f5      	ldreq	r5, [r6, #12]
 800b398:	e7da      	b.n	800b350 <_vfiprintf_r+0x20>
 800b39a:	89ab      	ldrh	r3, [r5, #12]
 800b39c:	0598      	lsls	r0, r3, #22
 800b39e:	d4ed      	bmi.n	800b37c <_vfiprintf_r+0x4c>
 800b3a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3a2:	f7ff ff8e 	bl	800b2c2 <__retarget_lock_release_recursive>
 800b3a6:	e7e9      	b.n	800b37c <_vfiprintf_r+0x4c>
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	9309      	str	r3, [sp, #36]	; 0x24
 800b3ac:	2320      	movs	r3, #32
 800b3ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3b6:	2330      	movs	r3, #48	; 0x30
 800b3b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b57c <_vfiprintf_r+0x24c>
 800b3bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3c0:	f04f 0901 	mov.w	r9, #1
 800b3c4:	4623      	mov	r3, r4
 800b3c6:	469a      	mov	sl, r3
 800b3c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3cc:	b10a      	cbz	r2, 800b3d2 <_vfiprintf_r+0xa2>
 800b3ce:	2a25      	cmp	r2, #37	; 0x25
 800b3d0:	d1f9      	bne.n	800b3c6 <_vfiprintf_r+0x96>
 800b3d2:	ebba 0b04 	subs.w	fp, sl, r4
 800b3d6:	d00b      	beq.n	800b3f0 <_vfiprintf_r+0xc0>
 800b3d8:	465b      	mov	r3, fp
 800b3da:	4622      	mov	r2, r4
 800b3dc:	4629      	mov	r1, r5
 800b3de:	4630      	mov	r0, r6
 800b3e0:	f7ff ff93 	bl	800b30a <__sfputs_r>
 800b3e4:	3001      	adds	r0, #1
 800b3e6:	f000 80aa 	beq.w	800b53e <_vfiprintf_r+0x20e>
 800b3ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3ec:	445a      	add	r2, fp
 800b3ee:	9209      	str	r2, [sp, #36]	; 0x24
 800b3f0:	f89a 3000 	ldrb.w	r3, [sl]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	f000 80a2 	beq.w	800b53e <_vfiprintf_r+0x20e>
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b400:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b404:	f10a 0a01 	add.w	sl, sl, #1
 800b408:	9304      	str	r3, [sp, #16]
 800b40a:	9307      	str	r3, [sp, #28]
 800b40c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b410:	931a      	str	r3, [sp, #104]	; 0x68
 800b412:	4654      	mov	r4, sl
 800b414:	2205      	movs	r2, #5
 800b416:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b41a:	4858      	ldr	r0, [pc, #352]	; (800b57c <_vfiprintf_r+0x24c>)
 800b41c:	f7f4 fee8 	bl	80001f0 <memchr>
 800b420:	9a04      	ldr	r2, [sp, #16]
 800b422:	b9d8      	cbnz	r0, 800b45c <_vfiprintf_r+0x12c>
 800b424:	06d1      	lsls	r1, r2, #27
 800b426:	bf44      	itt	mi
 800b428:	2320      	movmi	r3, #32
 800b42a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b42e:	0713      	lsls	r3, r2, #28
 800b430:	bf44      	itt	mi
 800b432:	232b      	movmi	r3, #43	; 0x2b
 800b434:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b438:	f89a 3000 	ldrb.w	r3, [sl]
 800b43c:	2b2a      	cmp	r3, #42	; 0x2a
 800b43e:	d015      	beq.n	800b46c <_vfiprintf_r+0x13c>
 800b440:	9a07      	ldr	r2, [sp, #28]
 800b442:	4654      	mov	r4, sl
 800b444:	2000      	movs	r0, #0
 800b446:	f04f 0c0a 	mov.w	ip, #10
 800b44a:	4621      	mov	r1, r4
 800b44c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b450:	3b30      	subs	r3, #48	; 0x30
 800b452:	2b09      	cmp	r3, #9
 800b454:	d94e      	bls.n	800b4f4 <_vfiprintf_r+0x1c4>
 800b456:	b1b0      	cbz	r0, 800b486 <_vfiprintf_r+0x156>
 800b458:	9207      	str	r2, [sp, #28]
 800b45a:	e014      	b.n	800b486 <_vfiprintf_r+0x156>
 800b45c:	eba0 0308 	sub.w	r3, r0, r8
 800b460:	fa09 f303 	lsl.w	r3, r9, r3
 800b464:	4313      	orrs	r3, r2
 800b466:	9304      	str	r3, [sp, #16]
 800b468:	46a2      	mov	sl, r4
 800b46a:	e7d2      	b.n	800b412 <_vfiprintf_r+0xe2>
 800b46c:	9b03      	ldr	r3, [sp, #12]
 800b46e:	1d19      	adds	r1, r3, #4
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	9103      	str	r1, [sp, #12]
 800b474:	2b00      	cmp	r3, #0
 800b476:	bfbb      	ittet	lt
 800b478:	425b      	neglt	r3, r3
 800b47a:	f042 0202 	orrlt.w	r2, r2, #2
 800b47e:	9307      	strge	r3, [sp, #28]
 800b480:	9307      	strlt	r3, [sp, #28]
 800b482:	bfb8      	it	lt
 800b484:	9204      	strlt	r2, [sp, #16]
 800b486:	7823      	ldrb	r3, [r4, #0]
 800b488:	2b2e      	cmp	r3, #46	; 0x2e
 800b48a:	d10c      	bne.n	800b4a6 <_vfiprintf_r+0x176>
 800b48c:	7863      	ldrb	r3, [r4, #1]
 800b48e:	2b2a      	cmp	r3, #42	; 0x2a
 800b490:	d135      	bne.n	800b4fe <_vfiprintf_r+0x1ce>
 800b492:	9b03      	ldr	r3, [sp, #12]
 800b494:	1d1a      	adds	r2, r3, #4
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	9203      	str	r2, [sp, #12]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	bfb8      	it	lt
 800b49e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4a2:	3402      	adds	r4, #2
 800b4a4:	9305      	str	r3, [sp, #20]
 800b4a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b58c <_vfiprintf_r+0x25c>
 800b4aa:	7821      	ldrb	r1, [r4, #0]
 800b4ac:	2203      	movs	r2, #3
 800b4ae:	4650      	mov	r0, sl
 800b4b0:	f7f4 fe9e 	bl	80001f0 <memchr>
 800b4b4:	b140      	cbz	r0, 800b4c8 <_vfiprintf_r+0x198>
 800b4b6:	2340      	movs	r3, #64	; 0x40
 800b4b8:	eba0 000a 	sub.w	r0, r0, sl
 800b4bc:	fa03 f000 	lsl.w	r0, r3, r0
 800b4c0:	9b04      	ldr	r3, [sp, #16]
 800b4c2:	4303      	orrs	r3, r0
 800b4c4:	3401      	adds	r4, #1
 800b4c6:	9304      	str	r3, [sp, #16]
 800b4c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4cc:	482c      	ldr	r0, [pc, #176]	; (800b580 <_vfiprintf_r+0x250>)
 800b4ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4d2:	2206      	movs	r2, #6
 800b4d4:	f7f4 fe8c 	bl	80001f0 <memchr>
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	d03f      	beq.n	800b55c <_vfiprintf_r+0x22c>
 800b4dc:	4b29      	ldr	r3, [pc, #164]	; (800b584 <_vfiprintf_r+0x254>)
 800b4de:	bb1b      	cbnz	r3, 800b528 <_vfiprintf_r+0x1f8>
 800b4e0:	9b03      	ldr	r3, [sp, #12]
 800b4e2:	3307      	adds	r3, #7
 800b4e4:	f023 0307 	bic.w	r3, r3, #7
 800b4e8:	3308      	adds	r3, #8
 800b4ea:	9303      	str	r3, [sp, #12]
 800b4ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4ee:	443b      	add	r3, r7
 800b4f0:	9309      	str	r3, [sp, #36]	; 0x24
 800b4f2:	e767      	b.n	800b3c4 <_vfiprintf_r+0x94>
 800b4f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4f8:	460c      	mov	r4, r1
 800b4fa:	2001      	movs	r0, #1
 800b4fc:	e7a5      	b.n	800b44a <_vfiprintf_r+0x11a>
 800b4fe:	2300      	movs	r3, #0
 800b500:	3401      	adds	r4, #1
 800b502:	9305      	str	r3, [sp, #20]
 800b504:	4619      	mov	r1, r3
 800b506:	f04f 0c0a 	mov.w	ip, #10
 800b50a:	4620      	mov	r0, r4
 800b50c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b510:	3a30      	subs	r2, #48	; 0x30
 800b512:	2a09      	cmp	r2, #9
 800b514:	d903      	bls.n	800b51e <_vfiprintf_r+0x1ee>
 800b516:	2b00      	cmp	r3, #0
 800b518:	d0c5      	beq.n	800b4a6 <_vfiprintf_r+0x176>
 800b51a:	9105      	str	r1, [sp, #20]
 800b51c:	e7c3      	b.n	800b4a6 <_vfiprintf_r+0x176>
 800b51e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b522:	4604      	mov	r4, r0
 800b524:	2301      	movs	r3, #1
 800b526:	e7f0      	b.n	800b50a <_vfiprintf_r+0x1da>
 800b528:	ab03      	add	r3, sp, #12
 800b52a:	9300      	str	r3, [sp, #0]
 800b52c:	462a      	mov	r2, r5
 800b52e:	4b16      	ldr	r3, [pc, #88]	; (800b588 <_vfiprintf_r+0x258>)
 800b530:	a904      	add	r1, sp, #16
 800b532:	4630      	mov	r0, r6
 800b534:	f3af 8000 	nop.w
 800b538:	4607      	mov	r7, r0
 800b53a:	1c78      	adds	r0, r7, #1
 800b53c:	d1d6      	bne.n	800b4ec <_vfiprintf_r+0x1bc>
 800b53e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b540:	07d9      	lsls	r1, r3, #31
 800b542:	d405      	bmi.n	800b550 <_vfiprintf_r+0x220>
 800b544:	89ab      	ldrh	r3, [r5, #12]
 800b546:	059a      	lsls	r2, r3, #22
 800b548:	d402      	bmi.n	800b550 <_vfiprintf_r+0x220>
 800b54a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b54c:	f7ff feb9 	bl	800b2c2 <__retarget_lock_release_recursive>
 800b550:	89ab      	ldrh	r3, [r5, #12]
 800b552:	065b      	lsls	r3, r3, #25
 800b554:	f53f af12 	bmi.w	800b37c <_vfiprintf_r+0x4c>
 800b558:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b55a:	e711      	b.n	800b380 <_vfiprintf_r+0x50>
 800b55c:	ab03      	add	r3, sp, #12
 800b55e:	9300      	str	r3, [sp, #0]
 800b560:	462a      	mov	r2, r5
 800b562:	4b09      	ldr	r3, [pc, #36]	; (800b588 <_vfiprintf_r+0x258>)
 800b564:	a904      	add	r1, sp, #16
 800b566:	4630      	mov	r0, r6
 800b568:	f000 f880 	bl	800b66c <_printf_i>
 800b56c:	e7e4      	b.n	800b538 <_vfiprintf_r+0x208>
 800b56e:	bf00      	nop
 800b570:	0800be7c 	.word	0x0800be7c
 800b574:	0800be9c 	.word	0x0800be9c
 800b578:	0800be5c 	.word	0x0800be5c
 800b57c:	0800bebc 	.word	0x0800bebc
 800b580:	0800bec6 	.word	0x0800bec6
 800b584:	00000000 	.word	0x00000000
 800b588:	0800b30b 	.word	0x0800b30b
 800b58c:	0800bec2 	.word	0x0800bec2

0800b590 <_printf_common>:
 800b590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b594:	4616      	mov	r6, r2
 800b596:	4699      	mov	r9, r3
 800b598:	688a      	ldr	r2, [r1, #8]
 800b59a:	690b      	ldr	r3, [r1, #16]
 800b59c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	bfb8      	it	lt
 800b5a4:	4613      	movlt	r3, r2
 800b5a6:	6033      	str	r3, [r6, #0]
 800b5a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b5ac:	4607      	mov	r7, r0
 800b5ae:	460c      	mov	r4, r1
 800b5b0:	b10a      	cbz	r2, 800b5b6 <_printf_common+0x26>
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	6033      	str	r3, [r6, #0]
 800b5b6:	6823      	ldr	r3, [r4, #0]
 800b5b8:	0699      	lsls	r1, r3, #26
 800b5ba:	bf42      	ittt	mi
 800b5bc:	6833      	ldrmi	r3, [r6, #0]
 800b5be:	3302      	addmi	r3, #2
 800b5c0:	6033      	strmi	r3, [r6, #0]
 800b5c2:	6825      	ldr	r5, [r4, #0]
 800b5c4:	f015 0506 	ands.w	r5, r5, #6
 800b5c8:	d106      	bne.n	800b5d8 <_printf_common+0x48>
 800b5ca:	f104 0a19 	add.w	sl, r4, #25
 800b5ce:	68e3      	ldr	r3, [r4, #12]
 800b5d0:	6832      	ldr	r2, [r6, #0]
 800b5d2:	1a9b      	subs	r3, r3, r2
 800b5d4:	42ab      	cmp	r3, r5
 800b5d6:	dc26      	bgt.n	800b626 <_printf_common+0x96>
 800b5d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b5dc:	1e13      	subs	r3, r2, #0
 800b5de:	6822      	ldr	r2, [r4, #0]
 800b5e0:	bf18      	it	ne
 800b5e2:	2301      	movne	r3, #1
 800b5e4:	0692      	lsls	r2, r2, #26
 800b5e6:	d42b      	bmi.n	800b640 <_printf_common+0xb0>
 800b5e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b5ec:	4649      	mov	r1, r9
 800b5ee:	4638      	mov	r0, r7
 800b5f0:	47c0      	blx	r8
 800b5f2:	3001      	adds	r0, #1
 800b5f4:	d01e      	beq.n	800b634 <_printf_common+0xa4>
 800b5f6:	6823      	ldr	r3, [r4, #0]
 800b5f8:	68e5      	ldr	r5, [r4, #12]
 800b5fa:	6832      	ldr	r2, [r6, #0]
 800b5fc:	f003 0306 	and.w	r3, r3, #6
 800b600:	2b04      	cmp	r3, #4
 800b602:	bf08      	it	eq
 800b604:	1aad      	subeq	r5, r5, r2
 800b606:	68a3      	ldr	r3, [r4, #8]
 800b608:	6922      	ldr	r2, [r4, #16]
 800b60a:	bf0c      	ite	eq
 800b60c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b610:	2500      	movne	r5, #0
 800b612:	4293      	cmp	r3, r2
 800b614:	bfc4      	itt	gt
 800b616:	1a9b      	subgt	r3, r3, r2
 800b618:	18ed      	addgt	r5, r5, r3
 800b61a:	2600      	movs	r6, #0
 800b61c:	341a      	adds	r4, #26
 800b61e:	42b5      	cmp	r5, r6
 800b620:	d11a      	bne.n	800b658 <_printf_common+0xc8>
 800b622:	2000      	movs	r0, #0
 800b624:	e008      	b.n	800b638 <_printf_common+0xa8>
 800b626:	2301      	movs	r3, #1
 800b628:	4652      	mov	r2, sl
 800b62a:	4649      	mov	r1, r9
 800b62c:	4638      	mov	r0, r7
 800b62e:	47c0      	blx	r8
 800b630:	3001      	adds	r0, #1
 800b632:	d103      	bne.n	800b63c <_printf_common+0xac>
 800b634:	f04f 30ff 	mov.w	r0, #4294967295
 800b638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b63c:	3501      	adds	r5, #1
 800b63e:	e7c6      	b.n	800b5ce <_printf_common+0x3e>
 800b640:	18e1      	adds	r1, r4, r3
 800b642:	1c5a      	adds	r2, r3, #1
 800b644:	2030      	movs	r0, #48	; 0x30
 800b646:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b64a:	4422      	add	r2, r4
 800b64c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b650:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b654:	3302      	adds	r3, #2
 800b656:	e7c7      	b.n	800b5e8 <_printf_common+0x58>
 800b658:	2301      	movs	r3, #1
 800b65a:	4622      	mov	r2, r4
 800b65c:	4649      	mov	r1, r9
 800b65e:	4638      	mov	r0, r7
 800b660:	47c0      	blx	r8
 800b662:	3001      	adds	r0, #1
 800b664:	d0e6      	beq.n	800b634 <_printf_common+0xa4>
 800b666:	3601      	adds	r6, #1
 800b668:	e7d9      	b.n	800b61e <_printf_common+0x8e>
	...

0800b66c <_printf_i>:
 800b66c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b670:	460c      	mov	r4, r1
 800b672:	4691      	mov	r9, r2
 800b674:	7e27      	ldrb	r7, [r4, #24]
 800b676:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b678:	2f78      	cmp	r7, #120	; 0x78
 800b67a:	4680      	mov	r8, r0
 800b67c:	469a      	mov	sl, r3
 800b67e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b682:	d807      	bhi.n	800b694 <_printf_i+0x28>
 800b684:	2f62      	cmp	r7, #98	; 0x62
 800b686:	d80a      	bhi.n	800b69e <_printf_i+0x32>
 800b688:	2f00      	cmp	r7, #0
 800b68a:	f000 80d8 	beq.w	800b83e <_printf_i+0x1d2>
 800b68e:	2f58      	cmp	r7, #88	; 0x58
 800b690:	f000 80a3 	beq.w	800b7da <_printf_i+0x16e>
 800b694:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b698:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b69c:	e03a      	b.n	800b714 <_printf_i+0xa8>
 800b69e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b6a2:	2b15      	cmp	r3, #21
 800b6a4:	d8f6      	bhi.n	800b694 <_printf_i+0x28>
 800b6a6:	a001      	add	r0, pc, #4	; (adr r0, 800b6ac <_printf_i+0x40>)
 800b6a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b6ac:	0800b705 	.word	0x0800b705
 800b6b0:	0800b719 	.word	0x0800b719
 800b6b4:	0800b695 	.word	0x0800b695
 800b6b8:	0800b695 	.word	0x0800b695
 800b6bc:	0800b695 	.word	0x0800b695
 800b6c0:	0800b695 	.word	0x0800b695
 800b6c4:	0800b719 	.word	0x0800b719
 800b6c8:	0800b695 	.word	0x0800b695
 800b6cc:	0800b695 	.word	0x0800b695
 800b6d0:	0800b695 	.word	0x0800b695
 800b6d4:	0800b695 	.word	0x0800b695
 800b6d8:	0800b825 	.word	0x0800b825
 800b6dc:	0800b749 	.word	0x0800b749
 800b6e0:	0800b807 	.word	0x0800b807
 800b6e4:	0800b695 	.word	0x0800b695
 800b6e8:	0800b695 	.word	0x0800b695
 800b6ec:	0800b847 	.word	0x0800b847
 800b6f0:	0800b695 	.word	0x0800b695
 800b6f4:	0800b749 	.word	0x0800b749
 800b6f8:	0800b695 	.word	0x0800b695
 800b6fc:	0800b695 	.word	0x0800b695
 800b700:	0800b80f 	.word	0x0800b80f
 800b704:	680b      	ldr	r3, [r1, #0]
 800b706:	1d1a      	adds	r2, r3, #4
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	600a      	str	r2, [r1, #0]
 800b70c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b710:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b714:	2301      	movs	r3, #1
 800b716:	e0a3      	b.n	800b860 <_printf_i+0x1f4>
 800b718:	6825      	ldr	r5, [r4, #0]
 800b71a:	6808      	ldr	r0, [r1, #0]
 800b71c:	062e      	lsls	r6, r5, #24
 800b71e:	f100 0304 	add.w	r3, r0, #4
 800b722:	d50a      	bpl.n	800b73a <_printf_i+0xce>
 800b724:	6805      	ldr	r5, [r0, #0]
 800b726:	600b      	str	r3, [r1, #0]
 800b728:	2d00      	cmp	r5, #0
 800b72a:	da03      	bge.n	800b734 <_printf_i+0xc8>
 800b72c:	232d      	movs	r3, #45	; 0x2d
 800b72e:	426d      	negs	r5, r5
 800b730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b734:	485e      	ldr	r0, [pc, #376]	; (800b8b0 <_printf_i+0x244>)
 800b736:	230a      	movs	r3, #10
 800b738:	e019      	b.n	800b76e <_printf_i+0x102>
 800b73a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b73e:	6805      	ldr	r5, [r0, #0]
 800b740:	600b      	str	r3, [r1, #0]
 800b742:	bf18      	it	ne
 800b744:	b22d      	sxthne	r5, r5
 800b746:	e7ef      	b.n	800b728 <_printf_i+0xbc>
 800b748:	680b      	ldr	r3, [r1, #0]
 800b74a:	6825      	ldr	r5, [r4, #0]
 800b74c:	1d18      	adds	r0, r3, #4
 800b74e:	6008      	str	r0, [r1, #0]
 800b750:	0628      	lsls	r0, r5, #24
 800b752:	d501      	bpl.n	800b758 <_printf_i+0xec>
 800b754:	681d      	ldr	r5, [r3, #0]
 800b756:	e002      	b.n	800b75e <_printf_i+0xf2>
 800b758:	0669      	lsls	r1, r5, #25
 800b75a:	d5fb      	bpl.n	800b754 <_printf_i+0xe8>
 800b75c:	881d      	ldrh	r5, [r3, #0]
 800b75e:	4854      	ldr	r0, [pc, #336]	; (800b8b0 <_printf_i+0x244>)
 800b760:	2f6f      	cmp	r7, #111	; 0x6f
 800b762:	bf0c      	ite	eq
 800b764:	2308      	moveq	r3, #8
 800b766:	230a      	movne	r3, #10
 800b768:	2100      	movs	r1, #0
 800b76a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b76e:	6866      	ldr	r6, [r4, #4]
 800b770:	60a6      	str	r6, [r4, #8]
 800b772:	2e00      	cmp	r6, #0
 800b774:	bfa2      	ittt	ge
 800b776:	6821      	ldrge	r1, [r4, #0]
 800b778:	f021 0104 	bicge.w	r1, r1, #4
 800b77c:	6021      	strge	r1, [r4, #0]
 800b77e:	b90d      	cbnz	r5, 800b784 <_printf_i+0x118>
 800b780:	2e00      	cmp	r6, #0
 800b782:	d04d      	beq.n	800b820 <_printf_i+0x1b4>
 800b784:	4616      	mov	r6, r2
 800b786:	fbb5 f1f3 	udiv	r1, r5, r3
 800b78a:	fb03 5711 	mls	r7, r3, r1, r5
 800b78e:	5dc7      	ldrb	r7, [r0, r7]
 800b790:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b794:	462f      	mov	r7, r5
 800b796:	42bb      	cmp	r3, r7
 800b798:	460d      	mov	r5, r1
 800b79a:	d9f4      	bls.n	800b786 <_printf_i+0x11a>
 800b79c:	2b08      	cmp	r3, #8
 800b79e:	d10b      	bne.n	800b7b8 <_printf_i+0x14c>
 800b7a0:	6823      	ldr	r3, [r4, #0]
 800b7a2:	07df      	lsls	r7, r3, #31
 800b7a4:	d508      	bpl.n	800b7b8 <_printf_i+0x14c>
 800b7a6:	6923      	ldr	r3, [r4, #16]
 800b7a8:	6861      	ldr	r1, [r4, #4]
 800b7aa:	4299      	cmp	r1, r3
 800b7ac:	bfde      	ittt	le
 800b7ae:	2330      	movle	r3, #48	; 0x30
 800b7b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b7b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b7b8:	1b92      	subs	r2, r2, r6
 800b7ba:	6122      	str	r2, [r4, #16]
 800b7bc:	f8cd a000 	str.w	sl, [sp]
 800b7c0:	464b      	mov	r3, r9
 800b7c2:	aa03      	add	r2, sp, #12
 800b7c4:	4621      	mov	r1, r4
 800b7c6:	4640      	mov	r0, r8
 800b7c8:	f7ff fee2 	bl	800b590 <_printf_common>
 800b7cc:	3001      	adds	r0, #1
 800b7ce:	d14c      	bne.n	800b86a <_printf_i+0x1fe>
 800b7d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7d4:	b004      	add	sp, #16
 800b7d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7da:	4835      	ldr	r0, [pc, #212]	; (800b8b0 <_printf_i+0x244>)
 800b7dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b7e0:	6823      	ldr	r3, [r4, #0]
 800b7e2:	680e      	ldr	r6, [r1, #0]
 800b7e4:	061f      	lsls	r7, r3, #24
 800b7e6:	f856 5b04 	ldr.w	r5, [r6], #4
 800b7ea:	600e      	str	r6, [r1, #0]
 800b7ec:	d514      	bpl.n	800b818 <_printf_i+0x1ac>
 800b7ee:	07d9      	lsls	r1, r3, #31
 800b7f0:	bf44      	itt	mi
 800b7f2:	f043 0320 	orrmi.w	r3, r3, #32
 800b7f6:	6023      	strmi	r3, [r4, #0]
 800b7f8:	b91d      	cbnz	r5, 800b802 <_printf_i+0x196>
 800b7fa:	6823      	ldr	r3, [r4, #0]
 800b7fc:	f023 0320 	bic.w	r3, r3, #32
 800b800:	6023      	str	r3, [r4, #0]
 800b802:	2310      	movs	r3, #16
 800b804:	e7b0      	b.n	800b768 <_printf_i+0xfc>
 800b806:	6823      	ldr	r3, [r4, #0]
 800b808:	f043 0320 	orr.w	r3, r3, #32
 800b80c:	6023      	str	r3, [r4, #0]
 800b80e:	2378      	movs	r3, #120	; 0x78
 800b810:	4828      	ldr	r0, [pc, #160]	; (800b8b4 <_printf_i+0x248>)
 800b812:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b816:	e7e3      	b.n	800b7e0 <_printf_i+0x174>
 800b818:	065e      	lsls	r6, r3, #25
 800b81a:	bf48      	it	mi
 800b81c:	b2ad      	uxthmi	r5, r5
 800b81e:	e7e6      	b.n	800b7ee <_printf_i+0x182>
 800b820:	4616      	mov	r6, r2
 800b822:	e7bb      	b.n	800b79c <_printf_i+0x130>
 800b824:	680b      	ldr	r3, [r1, #0]
 800b826:	6826      	ldr	r6, [r4, #0]
 800b828:	6960      	ldr	r0, [r4, #20]
 800b82a:	1d1d      	adds	r5, r3, #4
 800b82c:	600d      	str	r5, [r1, #0]
 800b82e:	0635      	lsls	r5, r6, #24
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	d501      	bpl.n	800b838 <_printf_i+0x1cc>
 800b834:	6018      	str	r0, [r3, #0]
 800b836:	e002      	b.n	800b83e <_printf_i+0x1d2>
 800b838:	0671      	lsls	r1, r6, #25
 800b83a:	d5fb      	bpl.n	800b834 <_printf_i+0x1c8>
 800b83c:	8018      	strh	r0, [r3, #0]
 800b83e:	2300      	movs	r3, #0
 800b840:	6123      	str	r3, [r4, #16]
 800b842:	4616      	mov	r6, r2
 800b844:	e7ba      	b.n	800b7bc <_printf_i+0x150>
 800b846:	680b      	ldr	r3, [r1, #0]
 800b848:	1d1a      	adds	r2, r3, #4
 800b84a:	600a      	str	r2, [r1, #0]
 800b84c:	681e      	ldr	r6, [r3, #0]
 800b84e:	6862      	ldr	r2, [r4, #4]
 800b850:	2100      	movs	r1, #0
 800b852:	4630      	mov	r0, r6
 800b854:	f7f4 fccc 	bl	80001f0 <memchr>
 800b858:	b108      	cbz	r0, 800b85e <_printf_i+0x1f2>
 800b85a:	1b80      	subs	r0, r0, r6
 800b85c:	6060      	str	r0, [r4, #4]
 800b85e:	6863      	ldr	r3, [r4, #4]
 800b860:	6123      	str	r3, [r4, #16]
 800b862:	2300      	movs	r3, #0
 800b864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b868:	e7a8      	b.n	800b7bc <_printf_i+0x150>
 800b86a:	6923      	ldr	r3, [r4, #16]
 800b86c:	4632      	mov	r2, r6
 800b86e:	4649      	mov	r1, r9
 800b870:	4640      	mov	r0, r8
 800b872:	47d0      	blx	sl
 800b874:	3001      	adds	r0, #1
 800b876:	d0ab      	beq.n	800b7d0 <_printf_i+0x164>
 800b878:	6823      	ldr	r3, [r4, #0]
 800b87a:	079b      	lsls	r3, r3, #30
 800b87c:	d413      	bmi.n	800b8a6 <_printf_i+0x23a>
 800b87e:	68e0      	ldr	r0, [r4, #12]
 800b880:	9b03      	ldr	r3, [sp, #12]
 800b882:	4298      	cmp	r0, r3
 800b884:	bfb8      	it	lt
 800b886:	4618      	movlt	r0, r3
 800b888:	e7a4      	b.n	800b7d4 <_printf_i+0x168>
 800b88a:	2301      	movs	r3, #1
 800b88c:	4632      	mov	r2, r6
 800b88e:	4649      	mov	r1, r9
 800b890:	4640      	mov	r0, r8
 800b892:	47d0      	blx	sl
 800b894:	3001      	adds	r0, #1
 800b896:	d09b      	beq.n	800b7d0 <_printf_i+0x164>
 800b898:	3501      	adds	r5, #1
 800b89a:	68e3      	ldr	r3, [r4, #12]
 800b89c:	9903      	ldr	r1, [sp, #12]
 800b89e:	1a5b      	subs	r3, r3, r1
 800b8a0:	42ab      	cmp	r3, r5
 800b8a2:	dcf2      	bgt.n	800b88a <_printf_i+0x21e>
 800b8a4:	e7eb      	b.n	800b87e <_printf_i+0x212>
 800b8a6:	2500      	movs	r5, #0
 800b8a8:	f104 0619 	add.w	r6, r4, #25
 800b8ac:	e7f5      	b.n	800b89a <_printf_i+0x22e>
 800b8ae:	bf00      	nop
 800b8b0:	0800becd 	.word	0x0800becd
 800b8b4:	0800bede 	.word	0x0800bede

0800b8b8 <__sread>:
 800b8b8:	b510      	push	{r4, lr}
 800b8ba:	460c      	mov	r4, r1
 800b8bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8c0:	f000 fa58 	bl	800bd74 <_read_r>
 800b8c4:	2800      	cmp	r0, #0
 800b8c6:	bfab      	itete	ge
 800b8c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b8ca:	89a3      	ldrhlt	r3, [r4, #12]
 800b8cc:	181b      	addge	r3, r3, r0
 800b8ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b8d2:	bfac      	ite	ge
 800b8d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b8d6:	81a3      	strhlt	r3, [r4, #12]
 800b8d8:	bd10      	pop	{r4, pc}

0800b8da <__swrite>:
 800b8da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8de:	461f      	mov	r7, r3
 800b8e0:	898b      	ldrh	r3, [r1, #12]
 800b8e2:	05db      	lsls	r3, r3, #23
 800b8e4:	4605      	mov	r5, r0
 800b8e6:	460c      	mov	r4, r1
 800b8e8:	4616      	mov	r6, r2
 800b8ea:	d505      	bpl.n	800b8f8 <__swrite+0x1e>
 800b8ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8f0:	2302      	movs	r3, #2
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	f000 f9c8 	bl	800bc88 <_lseek_r>
 800b8f8:	89a3      	ldrh	r3, [r4, #12]
 800b8fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b902:	81a3      	strh	r3, [r4, #12]
 800b904:	4632      	mov	r2, r6
 800b906:	463b      	mov	r3, r7
 800b908:	4628      	mov	r0, r5
 800b90a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b90e:	f000 b869 	b.w	800b9e4 <_write_r>

0800b912 <__sseek>:
 800b912:	b510      	push	{r4, lr}
 800b914:	460c      	mov	r4, r1
 800b916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b91a:	f000 f9b5 	bl	800bc88 <_lseek_r>
 800b91e:	1c43      	adds	r3, r0, #1
 800b920:	89a3      	ldrh	r3, [r4, #12]
 800b922:	bf15      	itete	ne
 800b924:	6560      	strne	r0, [r4, #84]	; 0x54
 800b926:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b92a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b92e:	81a3      	strheq	r3, [r4, #12]
 800b930:	bf18      	it	ne
 800b932:	81a3      	strhne	r3, [r4, #12]
 800b934:	bd10      	pop	{r4, pc}

0800b936 <__sclose>:
 800b936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b93a:	f000 b8d3 	b.w	800bae4 <_close_r>
	...

0800b940 <__swbuf_r>:
 800b940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b942:	460e      	mov	r6, r1
 800b944:	4614      	mov	r4, r2
 800b946:	4605      	mov	r5, r0
 800b948:	b118      	cbz	r0, 800b952 <__swbuf_r+0x12>
 800b94a:	6983      	ldr	r3, [r0, #24]
 800b94c:	b90b      	cbnz	r3, 800b952 <__swbuf_r+0x12>
 800b94e:	f7ff fc19 	bl	800b184 <__sinit>
 800b952:	4b21      	ldr	r3, [pc, #132]	; (800b9d8 <__swbuf_r+0x98>)
 800b954:	429c      	cmp	r4, r3
 800b956:	d12b      	bne.n	800b9b0 <__swbuf_r+0x70>
 800b958:	686c      	ldr	r4, [r5, #4]
 800b95a:	69a3      	ldr	r3, [r4, #24]
 800b95c:	60a3      	str	r3, [r4, #8]
 800b95e:	89a3      	ldrh	r3, [r4, #12]
 800b960:	071a      	lsls	r2, r3, #28
 800b962:	d52f      	bpl.n	800b9c4 <__swbuf_r+0x84>
 800b964:	6923      	ldr	r3, [r4, #16]
 800b966:	b36b      	cbz	r3, 800b9c4 <__swbuf_r+0x84>
 800b968:	6923      	ldr	r3, [r4, #16]
 800b96a:	6820      	ldr	r0, [r4, #0]
 800b96c:	1ac0      	subs	r0, r0, r3
 800b96e:	6963      	ldr	r3, [r4, #20]
 800b970:	b2f6      	uxtb	r6, r6
 800b972:	4283      	cmp	r3, r0
 800b974:	4637      	mov	r7, r6
 800b976:	dc04      	bgt.n	800b982 <__swbuf_r+0x42>
 800b978:	4621      	mov	r1, r4
 800b97a:	4628      	mov	r0, r5
 800b97c:	f000 f948 	bl	800bc10 <_fflush_r>
 800b980:	bb30      	cbnz	r0, 800b9d0 <__swbuf_r+0x90>
 800b982:	68a3      	ldr	r3, [r4, #8]
 800b984:	3b01      	subs	r3, #1
 800b986:	60a3      	str	r3, [r4, #8]
 800b988:	6823      	ldr	r3, [r4, #0]
 800b98a:	1c5a      	adds	r2, r3, #1
 800b98c:	6022      	str	r2, [r4, #0]
 800b98e:	701e      	strb	r6, [r3, #0]
 800b990:	6963      	ldr	r3, [r4, #20]
 800b992:	3001      	adds	r0, #1
 800b994:	4283      	cmp	r3, r0
 800b996:	d004      	beq.n	800b9a2 <__swbuf_r+0x62>
 800b998:	89a3      	ldrh	r3, [r4, #12]
 800b99a:	07db      	lsls	r3, r3, #31
 800b99c:	d506      	bpl.n	800b9ac <__swbuf_r+0x6c>
 800b99e:	2e0a      	cmp	r6, #10
 800b9a0:	d104      	bne.n	800b9ac <__swbuf_r+0x6c>
 800b9a2:	4621      	mov	r1, r4
 800b9a4:	4628      	mov	r0, r5
 800b9a6:	f000 f933 	bl	800bc10 <_fflush_r>
 800b9aa:	b988      	cbnz	r0, 800b9d0 <__swbuf_r+0x90>
 800b9ac:	4638      	mov	r0, r7
 800b9ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9b0:	4b0a      	ldr	r3, [pc, #40]	; (800b9dc <__swbuf_r+0x9c>)
 800b9b2:	429c      	cmp	r4, r3
 800b9b4:	d101      	bne.n	800b9ba <__swbuf_r+0x7a>
 800b9b6:	68ac      	ldr	r4, [r5, #8]
 800b9b8:	e7cf      	b.n	800b95a <__swbuf_r+0x1a>
 800b9ba:	4b09      	ldr	r3, [pc, #36]	; (800b9e0 <__swbuf_r+0xa0>)
 800b9bc:	429c      	cmp	r4, r3
 800b9be:	bf08      	it	eq
 800b9c0:	68ec      	ldreq	r4, [r5, #12]
 800b9c2:	e7ca      	b.n	800b95a <__swbuf_r+0x1a>
 800b9c4:	4621      	mov	r1, r4
 800b9c6:	4628      	mov	r0, r5
 800b9c8:	f000 f81e 	bl	800ba08 <__swsetup_r>
 800b9cc:	2800      	cmp	r0, #0
 800b9ce:	d0cb      	beq.n	800b968 <__swbuf_r+0x28>
 800b9d0:	f04f 37ff 	mov.w	r7, #4294967295
 800b9d4:	e7ea      	b.n	800b9ac <__swbuf_r+0x6c>
 800b9d6:	bf00      	nop
 800b9d8:	0800be7c 	.word	0x0800be7c
 800b9dc:	0800be9c 	.word	0x0800be9c
 800b9e0:	0800be5c 	.word	0x0800be5c

0800b9e4 <_write_r>:
 800b9e4:	b538      	push	{r3, r4, r5, lr}
 800b9e6:	4d07      	ldr	r5, [pc, #28]	; (800ba04 <_write_r+0x20>)
 800b9e8:	4604      	mov	r4, r0
 800b9ea:	4608      	mov	r0, r1
 800b9ec:	4611      	mov	r1, r2
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	602a      	str	r2, [r5, #0]
 800b9f2:	461a      	mov	r2, r3
 800b9f4:	f7f5 f981 	bl	8000cfa <_write>
 800b9f8:	1c43      	adds	r3, r0, #1
 800b9fa:	d102      	bne.n	800ba02 <_write_r+0x1e>
 800b9fc:	682b      	ldr	r3, [r5, #0]
 800b9fe:	b103      	cbz	r3, 800ba02 <_write_r+0x1e>
 800ba00:	6023      	str	r3, [r4, #0]
 800ba02:	bd38      	pop	{r3, r4, r5, pc}
 800ba04:	20000988 	.word	0x20000988

0800ba08 <__swsetup_r>:
 800ba08:	4b32      	ldr	r3, [pc, #200]	; (800bad4 <__swsetup_r+0xcc>)
 800ba0a:	b570      	push	{r4, r5, r6, lr}
 800ba0c:	681d      	ldr	r5, [r3, #0]
 800ba0e:	4606      	mov	r6, r0
 800ba10:	460c      	mov	r4, r1
 800ba12:	b125      	cbz	r5, 800ba1e <__swsetup_r+0x16>
 800ba14:	69ab      	ldr	r3, [r5, #24]
 800ba16:	b913      	cbnz	r3, 800ba1e <__swsetup_r+0x16>
 800ba18:	4628      	mov	r0, r5
 800ba1a:	f7ff fbb3 	bl	800b184 <__sinit>
 800ba1e:	4b2e      	ldr	r3, [pc, #184]	; (800bad8 <__swsetup_r+0xd0>)
 800ba20:	429c      	cmp	r4, r3
 800ba22:	d10f      	bne.n	800ba44 <__swsetup_r+0x3c>
 800ba24:	686c      	ldr	r4, [r5, #4]
 800ba26:	89a3      	ldrh	r3, [r4, #12]
 800ba28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba2c:	0719      	lsls	r1, r3, #28
 800ba2e:	d42c      	bmi.n	800ba8a <__swsetup_r+0x82>
 800ba30:	06dd      	lsls	r5, r3, #27
 800ba32:	d411      	bmi.n	800ba58 <__swsetup_r+0x50>
 800ba34:	2309      	movs	r3, #9
 800ba36:	6033      	str	r3, [r6, #0]
 800ba38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ba3c:	81a3      	strh	r3, [r4, #12]
 800ba3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba42:	e03e      	b.n	800bac2 <__swsetup_r+0xba>
 800ba44:	4b25      	ldr	r3, [pc, #148]	; (800badc <__swsetup_r+0xd4>)
 800ba46:	429c      	cmp	r4, r3
 800ba48:	d101      	bne.n	800ba4e <__swsetup_r+0x46>
 800ba4a:	68ac      	ldr	r4, [r5, #8]
 800ba4c:	e7eb      	b.n	800ba26 <__swsetup_r+0x1e>
 800ba4e:	4b24      	ldr	r3, [pc, #144]	; (800bae0 <__swsetup_r+0xd8>)
 800ba50:	429c      	cmp	r4, r3
 800ba52:	bf08      	it	eq
 800ba54:	68ec      	ldreq	r4, [r5, #12]
 800ba56:	e7e6      	b.n	800ba26 <__swsetup_r+0x1e>
 800ba58:	0758      	lsls	r0, r3, #29
 800ba5a:	d512      	bpl.n	800ba82 <__swsetup_r+0x7a>
 800ba5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba5e:	b141      	cbz	r1, 800ba72 <__swsetup_r+0x6a>
 800ba60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba64:	4299      	cmp	r1, r3
 800ba66:	d002      	beq.n	800ba6e <__swsetup_r+0x66>
 800ba68:	4630      	mov	r0, r6
 800ba6a:	f7ff fa61 	bl	800af30 <_free_r>
 800ba6e:	2300      	movs	r3, #0
 800ba70:	6363      	str	r3, [r4, #52]	; 0x34
 800ba72:	89a3      	ldrh	r3, [r4, #12]
 800ba74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ba78:	81a3      	strh	r3, [r4, #12]
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	6063      	str	r3, [r4, #4]
 800ba7e:	6923      	ldr	r3, [r4, #16]
 800ba80:	6023      	str	r3, [r4, #0]
 800ba82:	89a3      	ldrh	r3, [r4, #12]
 800ba84:	f043 0308 	orr.w	r3, r3, #8
 800ba88:	81a3      	strh	r3, [r4, #12]
 800ba8a:	6923      	ldr	r3, [r4, #16]
 800ba8c:	b94b      	cbnz	r3, 800baa2 <__swsetup_r+0x9a>
 800ba8e:	89a3      	ldrh	r3, [r4, #12]
 800ba90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ba94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba98:	d003      	beq.n	800baa2 <__swsetup_r+0x9a>
 800ba9a:	4621      	mov	r1, r4
 800ba9c:	4630      	mov	r0, r6
 800ba9e:	f000 f929 	bl	800bcf4 <__smakebuf_r>
 800baa2:	89a0      	ldrh	r0, [r4, #12]
 800baa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800baa8:	f010 0301 	ands.w	r3, r0, #1
 800baac:	d00a      	beq.n	800bac4 <__swsetup_r+0xbc>
 800baae:	2300      	movs	r3, #0
 800bab0:	60a3      	str	r3, [r4, #8]
 800bab2:	6963      	ldr	r3, [r4, #20]
 800bab4:	425b      	negs	r3, r3
 800bab6:	61a3      	str	r3, [r4, #24]
 800bab8:	6923      	ldr	r3, [r4, #16]
 800baba:	b943      	cbnz	r3, 800bace <__swsetup_r+0xc6>
 800babc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bac0:	d1ba      	bne.n	800ba38 <__swsetup_r+0x30>
 800bac2:	bd70      	pop	{r4, r5, r6, pc}
 800bac4:	0781      	lsls	r1, r0, #30
 800bac6:	bf58      	it	pl
 800bac8:	6963      	ldrpl	r3, [r4, #20]
 800baca:	60a3      	str	r3, [r4, #8]
 800bacc:	e7f4      	b.n	800bab8 <__swsetup_r+0xb0>
 800bace:	2000      	movs	r0, #0
 800bad0:	e7f7      	b.n	800bac2 <__swsetup_r+0xba>
 800bad2:	bf00      	nop
 800bad4:	2000002c 	.word	0x2000002c
 800bad8:	0800be7c 	.word	0x0800be7c
 800badc:	0800be9c 	.word	0x0800be9c
 800bae0:	0800be5c 	.word	0x0800be5c

0800bae4 <_close_r>:
 800bae4:	b538      	push	{r3, r4, r5, lr}
 800bae6:	4d06      	ldr	r5, [pc, #24]	; (800bb00 <_close_r+0x1c>)
 800bae8:	2300      	movs	r3, #0
 800baea:	4604      	mov	r4, r0
 800baec:	4608      	mov	r0, r1
 800baee:	602b      	str	r3, [r5, #0]
 800baf0:	f7f5 f91f 	bl	8000d32 <_close>
 800baf4:	1c43      	adds	r3, r0, #1
 800baf6:	d102      	bne.n	800bafe <_close_r+0x1a>
 800baf8:	682b      	ldr	r3, [r5, #0]
 800bafa:	b103      	cbz	r3, 800bafe <_close_r+0x1a>
 800bafc:	6023      	str	r3, [r4, #0]
 800bafe:	bd38      	pop	{r3, r4, r5, pc}
 800bb00:	20000988 	.word	0x20000988

0800bb04 <__sflush_r>:
 800bb04:	898a      	ldrh	r2, [r1, #12]
 800bb06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb0a:	4605      	mov	r5, r0
 800bb0c:	0710      	lsls	r0, r2, #28
 800bb0e:	460c      	mov	r4, r1
 800bb10:	d458      	bmi.n	800bbc4 <__sflush_r+0xc0>
 800bb12:	684b      	ldr	r3, [r1, #4]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	dc05      	bgt.n	800bb24 <__sflush_r+0x20>
 800bb18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	dc02      	bgt.n	800bb24 <__sflush_r+0x20>
 800bb1e:	2000      	movs	r0, #0
 800bb20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb26:	2e00      	cmp	r6, #0
 800bb28:	d0f9      	beq.n	800bb1e <__sflush_r+0x1a>
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bb30:	682f      	ldr	r7, [r5, #0]
 800bb32:	602b      	str	r3, [r5, #0]
 800bb34:	d032      	beq.n	800bb9c <__sflush_r+0x98>
 800bb36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bb38:	89a3      	ldrh	r3, [r4, #12]
 800bb3a:	075a      	lsls	r2, r3, #29
 800bb3c:	d505      	bpl.n	800bb4a <__sflush_r+0x46>
 800bb3e:	6863      	ldr	r3, [r4, #4]
 800bb40:	1ac0      	subs	r0, r0, r3
 800bb42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb44:	b10b      	cbz	r3, 800bb4a <__sflush_r+0x46>
 800bb46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb48:	1ac0      	subs	r0, r0, r3
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb50:	6a21      	ldr	r1, [r4, #32]
 800bb52:	4628      	mov	r0, r5
 800bb54:	47b0      	blx	r6
 800bb56:	1c43      	adds	r3, r0, #1
 800bb58:	89a3      	ldrh	r3, [r4, #12]
 800bb5a:	d106      	bne.n	800bb6a <__sflush_r+0x66>
 800bb5c:	6829      	ldr	r1, [r5, #0]
 800bb5e:	291d      	cmp	r1, #29
 800bb60:	d82c      	bhi.n	800bbbc <__sflush_r+0xb8>
 800bb62:	4a2a      	ldr	r2, [pc, #168]	; (800bc0c <__sflush_r+0x108>)
 800bb64:	40ca      	lsrs	r2, r1
 800bb66:	07d6      	lsls	r6, r2, #31
 800bb68:	d528      	bpl.n	800bbbc <__sflush_r+0xb8>
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	6062      	str	r2, [r4, #4]
 800bb6e:	04d9      	lsls	r1, r3, #19
 800bb70:	6922      	ldr	r2, [r4, #16]
 800bb72:	6022      	str	r2, [r4, #0]
 800bb74:	d504      	bpl.n	800bb80 <__sflush_r+0x7c>
 800bb76:	1c42      	adds	r2, r0, #1
 800bb78:	d101      	bne.n	800bb7e <__sflush_r+0x7a>
 800bb7a:	682b      	ldr	r3, [r5, #0]
 800bb7c:	b903      	cbnz	r3, 800bb80 <__sflush_r+0x7c>
 800bb7e:	6560      	str	r0, [r4, #84]	; 0x54
 800bb80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb82:	602f      	str	r7, [r5, #0]
 800bb84:	2900      	cmp	r1, #0
 800bb86:	d0ca      	beq.n	800bb1e <__sflush_r+0x1a>
 800bb88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb8c:	4299      	cmp	r1, r3
 800bb8e:	d002      	beq.n	800bb96 <__sflush_r+0x92>
 800bb90:	4628      	mov	r0, r5
 800bb92:	f7ff f9cd 	bl	800af30 <_free_r>
 800bb96:	2000      	movs	r0, #0
 800bb98:	6360      	str	r0, [r4, #52]	; 0x34
 800bb9a:	e7c1      	b.n	800bb20 <__sflush_r+0x1c>
 800bb9c:	6a21      	ldr	r1, [r4, #32]
 800bb9e:	2301      	movs	r3, #1
 800bba0:	4628      	mov	r0, r5
 800bba2:	47b0      	blx	r6
 800bba4:	1c41      	adds	r1, r0, #1
 800bba6:	d1c7      	bne.n	800bb38 <__sflush_r+0x34>
 800bba8:	682b      	ldr	r3, [r5, #0]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d0c4      	beq.n	800bb38 <__sflush_r+0x34>
 800bbae:	2b1d      	cmp	r3, #29
 800bbb0:	d001      	beq.n	800bbb6 <__sflush_r+0xb2>
 800bbb2:	2b16      	cmp	r3, #22
 800bbb4:	d101      	bne.n	800bbba <__sflush_r+0xb6>
 800bbb6:	602f      	str	r7, [r5, #0]
 800bbb8:	e7b1      	b.n	800bb1e <__sflush_r+0x1a>
 800bbba:	89a3      	ldrh	r3, [r4, #12]
 800bbbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbc0:	81a3      	strh	r3, [r4, #12]
 800bbc2:	e7ad      	b.n	800bb20 <__sflush_r+0x1c>
 800bbc4:	690f      	ldr	r7, [r1, #16]
 800bbc6:	2f00      	cmp	r7, #0
 800bbc8:	d0a9      	beq.n	800bb1e <__sflush_r+0x1a>
 800bbca:	0793      	lsls	r3, r2, #30
 800bbcc:	680e      	ldr	r6, [r1, #0]
 800bbce:	bf08      	it	eq
 800bbd0:	694b      	ldreq	r3, [r1, #20]
 800bbd2:	600f      	str	r7, [r1, #0]
 800bbd4:	bf18      	it	ne
 800bbd6:	2300      	movne	r3, #0
 800bbd8:	eba6 0807 	sub.w	r8, r6, r7
 800bbdc:	608b      	str	r3, [r1, #8]
 800bbde:	f1b8 0f00 	cmp.w	r8, #0
 800bbe2:	dd9c      	ble.n	800bb1e <__sflush_r+0x1a>
 800bbe4:	6a21      	ldr	r1, [r4, #32]
 800bbe6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bbe8:	4643      	mov	r3, r8
 800bbea:	463a      	mov	r2, r7
 800bbec:	4628      	mov	r0, r5
 800bbee:	47b0      	blx	r6
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	dc06      	bgt.n	800bc02 <__sflush_r+0xfe>
 800bbf4:	89a3      	ldrh	r3, [r4, #12]
 800bbf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbfa:	81a3      	strh	r3, [r4, #12]
 800bbfc:	f04f 30ff 	mov.w	r0, #4294967295
 800bc00:	e78e      	b.n	800bb20 <__sflush_r+0x1c>
 800bc02:	4407      	add	r7, r0
 800bc04:	eba8 0800 	sub.w	r8, r8, r0
 800bc08:	e7e9      	b.n	800bbde <__sflush_r+0xda>
 800bc0a:	bf00      	nop
 800bc0c:	20400001 	.word	0x20400001

0800bc10 <_fflush_r>:
 800bc10:	b538      	push	{r3, r4, r5, lr}
 800bc12:	690b      	ldr	r3, [r1, #16]
 800bc14:	4605      	mov	r5, r0
 800bc16:	460c      	mov	r4, r1
 800bc18:	b913      	cbnz	r3, 800bc20 <_fflush_r+0x10>
 800bc1a:	2500      	movs	r5, #0
 800bc1c:	4628      	mov	r0, r5
 800bc1e:	bd38      	pop	{r3, r4, r5, pc}
 800bc20:	b118      	cbz	r0, 800bc2a <_fflush_r+0x1a>
 800bc22:	6983      	ldr	r3, [r0, #24]
 800bc24:	b90b      	cbnz	r3, 800bc2a <_fflush_r+0x1a>
 800bc26:	f7ff faad 	bl	800b184 <__sinit>
 800bc2a:	4b14      	ldr	r3, [pc, #80]	; (800bc7c <_fflush_r+0x6c>)
 800bc2c:	429c      	cmp	r4, r3
 800bc2e:	d11b      	bne.n	800bc68 <_fflush_r+0x58>
 800bc30:	686c      	ldr	r4, [r5, #4]
 800bc32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d0ef      	beq.n	800bc1a <_fflush_r+0xa>
 800bc3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bc3c:	07d0      	lsls	r0, r2, #31
 800bc3e:	d404      	bmi.n	800bc4a <_fflush_r+0x3a>
 800bc40:	0599      	lsls	r1, r3, #22
 800bc42:	d402      	bmi.n	800bc4a <_fflush_r+0x3a>
 800bc44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc46:	f7ff fb3b 	bl	800b2c0 <__retarget_lock_acquire_recursive>
 800bc4a:	4628      	mov	r0, r5
 800bc4c:	4621      	mov	r1, r4
 800bc4e:	f7ff ff59 	bl	800bb04 <__sflush_r>
 800bc52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc54:	07da      	lsls	r2, r3, #31
 800bc56:	4605      	mov	r5, r0
 800bc58:	d4e0      	bmi.n	800bc1c <_fflush_r+0xc>
 800bc5a:	89a3      	ldrh	r3, [r4, #12]
 800bc5c:	059b      	lsls	r3, r3, #22
 800bc5e:	d4dd      	bmi.n	800bc1c <_fflush_r+0xc>
 800bc60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc62:	f7ff fb2e 	bl	800b2c2 <__retarget_lock_release_recursive>
 800bc66:	e7d9      	b.n	800bc1c <_fflush_r+0xc>
 800bc68:	4b05      	ldr	r3, [pc, #20]	; (800bc80 <_fflush_r+0x70>)
 800bc6a:	429c      	cmp	r4, r3
 800bc6c:	d101      	bne.n	800bc72 <_fflush_r+0x62>
 800bc6e:	68ac      	ldr	r4, [r5, #8]
 800bc70:	e7df      	b.n	800bc32 <_fflush_r+0x22>
 800bc72:	4b04      	ldr	r3, [pc, #16]	; (800bc84 <_fflush_r+0x74>)
 800bc74:	429c      	cmp	r4, r3
 800bc76:	bf08      	it	eq
 800bc78:	68ec      	ldreq	r4, [r5, #12]
 800bc7a:	e7da      	b.n	800bc32 <_fflush_r+0x22>
 800bc7c:	0800be7c 	.word	0x0800be7c
 800bc80:	0800be9c 	.word	0x0800be9c
 800bc84:	0800be5c 	.word	0x0800be5c

0800bc88 <_lseek_r>:
 800bc88:	b538      	push	{r3, r4, r5, lr}
 800bc8a:	4d07      	ldr	r5, [pc, #28]	; (800bca8 <_lseek_r+0x20>)
 800bc8c:	4604      	mov	r4, r0
 800bc8e:	4608      	mov	r0, r1
 800bc90:	4611      	mov	r1, r2
 800bc92:	2200      	movs	r2, #0
 800bc94:	602a      	str	r2, [r5, #0]
 800bc96:	461a      	mov	r2, r3
 800bc98:	f7f5 f872 	bl	8000d80 <_lseek>
 800bc9c:	1c43      	adds	r3, r0, #1
 800bc9e:	d102      	bne.n	800bca6 <_lseek_r+0x1e>
 800bca0:	682b      	ldr	r3, [r5, #0]
 800bca2:	b103      	cbz	r3, 800bca6 <_lseek_r+0x1e>
 800bca4:	6023      	str	r3, [r4, #0]
 800bca6:	bd38      	pop	{r3, r4, r5, pc}
 800bca8:	20000988 	.word	0x20000988

0800bcac <__swhatbuf_r>:
 800bcac:	b570      	push	{r4, r5, r6, lr}
 800bcae:	460e      	mov	r6, r1
 800bcb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcb4:	2900      	cmp	r1, #0
 800bcb6:	b096      	sub	sp, #88	; 0x58
 800bcb8:	4614      	mov	r4, r2
 800bcba:	461d      	mov	r5, r3
 800bcbc:	da07      	bge.n	800bcce <__swhatbuf_r+0x22>
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	602b      	str	r3, [r5, #0]
 800bcc2:	89b3      	ldrh	r3, [r6, #12]
 800bcc4:	061a      	lsls	r2, r3, #24
 800bcc6:	d410      	bmi.n	800bcea <__swhatbuf_r+0x3e>
 800bcc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bccc:	e00e      	b.n	800bcec <__swhatbuf_r+0x40>
 800bcce:	466a      	mov	r2, sp
 800bcd0:	f000 f862 	bl	800bd98 <_fstat_r>
 800bcd4:	2800      	cmp	r0, #0
 800bcd6:	dbf2      	blt.n	800bcbe <__swhatbuf_r+0x12>
 800bcd8:	9a01      	ldr	r2, [sp, #4]
 800bcda:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bcde:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bce2:	425a      	negs	r2, r3
 800bce4:	415a      	adcs	r2, r3
 800bce6:	602a      	str	r2, [r5, #0]
 800bce8:	e7ee      	b.n	800bcc8 <__swhatbuf_r+0x1c>
 800bcea:	2340      	movs	r3, #64	; 0x40
 800bcec:	2000      	movs	r0, #0
 800bcee:	6023      	str	r3, [r4, #0]
 800bcf0:	b016      	add	sp, #88	; 0x58
 800bcf2:	bd70      	pop	{r4, r5, r6, pc}

0800bcf4 <__smakebuf_r>:
 800bcf4:	898b      	ldrh	r3, [r1, #12]
 800bcf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bcf8:	079d      	lsls	r5, r3, #30
 800bcfa:	4606      	mov	r6, r0
 800bcfc:	460c      	mov	r4, r1
 800bcfe:	d507      	bpl.n	800bd10 <__smakebuf_r+0x1c>
 800bd00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd04:	6023      	str	r3, [r4, #0]
 800bd06:	6123      	str	r3, [r4, #16]
 800bd08:	2301      	movs	r3, #1
 800bd0a:	6163      	str	r3, [r4, #20]
 800bd0c:	b002      	add	sp, #8
 800bd0e:	bd70      	pop	{r4, r5, r6, pc}
 800bd10:	ab01      	add	r3, sp, #4
 800bd12:	466a      	mov	r2, sp
 800bd14:	f7ff ffca 	bl	800bcac <__swhatbuf_r>
 800bd18:	9900      	ldr	r1, [sp, #0]
 800bd1a:	4605      	mov	r5, r0
 800bd1c:	4630      	mov	r0, r6
 800bd1e:	f7ff f957 	bl	800afd0 <_malloc_r>
 800bd22:	b948      	cbnz	r0, 800bd38 <__smakebuf_r+0x44>
 800bd24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd28:	059a      	lsls	r2, r3, #22
 800bd2a:	d4ef      	bmi.n	800bd0c <__smakebuf_r+0x18>
 800bd2c:	f023 0303 	bic.w	r3, r3, #3
 800bd30:	f043 0302 	orr.w	r3, r3, #2
 800bd34:	81a3      	strh	r3, [r4, #12]
 800bd36:	e7e3      	b.n	800bd00 <__smakebuf_r+0xc>
 800bd38:	4b0d      	ldr	r3, [pc, #52]	; (800bd70 <__smakebuf_r+0x7c>)
 800bd3a:	62b3      	str	r3, [r6, #40]	; 0x28
 800bd3c:	89a3      	ldrh	r3, [r4, #12]
 800bd3e:	6020      	str	r0, [r4, #0]
 800bd40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd44:	81a3      	strh	r3, [r4, #12]
 800bd46:	9b00      	ldr	r3, [sp, #0]
 800bd48:	6163      	str	r3, [r4, #20]
 800bd4a:	9b01      	ldr	r3, [sp, #4]
 800bd4c:	6120      	str	r0, [r4, #16]
 800bd4e:	b15b      	cbz	r3, 800bd68 <__smakebuf_r+0x74>
 800bd50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd54:	4630      	mov	r0, r6
 800bd56:	f000 f831 	bl	800bdbc <_isatty_r>
 800bd5a:	b128      	cbz	r0, 800bd68 <__smakebuf_r+0x74>
 800bd5c:	89a3      	ldrh	r3, [r4, #12]
 800bd5e:	f023 0303 	bic.w	r3, r3, #3
 800bd62:	f043 0301 	orr.w	r3, r3, #1
 800bd66:	81a3      	strh	r3, [r4, #12]
 800bd68:	89a0      	ldrh	r0, [r4, #12]
 800bd6a:	4305      	orrs	r5, r0
 800bd6c:	81a5      	strh	r5, [r4, #12]
 800bd6e:	e7cd      	b.n	800bd0c <__smakebuf_r+0x18>
 800bd70:	0800b11d 	.word	0x0800b11d

0800bd74 <_read_r>:
 800bd74:	b538      	push	{r3, r4, r5, lr}
 800bd76:	4d07      	ldr	r5, [pc, #28]	; (800bd94 <_read_r+0x20>)
 800bd78:	4604      	mov	r4, r0
 800bd7a:	4608      	mov	r0, r1
 800bd7c:	4611      	mov	r1, r2
 800bd7e:	2200      	movs	r2, #0
 800bd80:	602a      	str	r2, [r5, #0]
 800bd82:	461a      	mov	r2, r3
 800bd84:	f7f4 ff9c 	bl	8000cc0 <_read>
 800bd88:	1c43      	adds	r3, r0, #1
 800bd8a:	d102      	bne.n	800bd92 <_read_r+0x1e>
 800bd8c:	682b      	ldr	r3, [r5, #0]
 800bd8e:	b103      	cbz	r3, 800bd92 <_read_r+0x1e>
 800bd90:	6023      	str	r3, [r4, #0]
 800bd92:	bd38      	pop	{r3, r4, r5, pc}
 800bd94:	20000988 	.word	0x20000988

0800bd98 <_fstat_r>:
 800bd98:	b538      	push	{r3, r4, r5, lr}
 800bd9a:	4d07      	ldr	r5, [pc, #28]	; (800bdb8 <_fstat_r+0x20>)
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	4604      	mov	r4, r0
 800bda0:	4608      	mov	r0, r1
 800bda2:	4611      	mov	r1, r2
 800bda4:	602b      	str	r3, [r5, #0]
 800bda6:	f7f4 ffd0 	bl	8000d4a <_fstat>
 800bdaa:	1c43      	adds	r3, r0, #1
 800bdac:	d102      	bne.n	800bdb4 <_fstat_r+0x1c>
 800bdae:	682b      	ldr	r3, [r5, #0]
 800bdb0:	b103      	cbz	r3, 800bdb4 <_fstat_r+0x1c>
 800bdb2:	6023      	str	r3, [r4, #0]
 800bdb4:	bd38      	pop	{r3, r4, r5, pc}
 800bdb6:	bf00      	nop
 800bdb8:	20000988 	.word	0x20000988

0800bdbc <_isatty_r>:
 800bdbc:	b538      	push	{r3, r4, r5, lr}
 800bdbe:	4d06      	ldr	r5, [pc, #24]	; (800bdd8 <_isatty_r+0x1c>)
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	4604      	mov	r4, r0
 800bdc4:	4608      	mov	r0, r1
 800bdc6:	602b      	str	r3, [r5, #0]
 800bdc8:	f7f4 ffcf 	bl	8000d6a <_isatty>
 800bdcc:	1c43      	adds	r3, r0, #1
 800bdce:	d102      	bne.n	800bdd6 <_isatty_r+0x1a>
 800bdd0:	682b      	ldr	r3, [r5, #0]
 800bdd2:	b103      	cbz	r3, 800bdd6 <_isatty_r+0x1a>
 800bdd4:	6023      	str	r3, [r4, #0]
 800bdd6:	bd38      	pop	{r3, r4, r5, pc}
 800bdd8:	20000988 	.word	0x20000988

0800bddc <_init>:
 800bddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdde:	bf00      	nop
 800bde0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bde2:	bc08      	pop	{r3}
 800bde4:	469e      	mov	lr, r3
 800bde6:	4770      	bx	lr

0800bde8 <_fini>:
 800bde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdea:	bf00      	nop
 800bdec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdee:	bc08      	pop	{r3}
 800bdf0:	469e      	mov	lr, r3
 800bdf2:	4770      	bx	lr
